<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!-- Created from PDF via Acrobat SaveAsXML -->
<!-- Mapping table version: 28-February-2003 -->
<HTML>
<HEAD>
<META
 name="dc.creator"
 content="Jim Luth" >
<META
 name="dc.description"
 content="Industrial Communications" >
<META
 name="dc.title"
 content="OPC Unified Architecture" >
<META
 name="dc.date"
 content="2015-07-10T16:58:11-04:00" >
<META
 name="dc.date.modified"
 content="2015-07-10T16:58:11-04:00" >
<META
 name="generator"
 content="Adobe Acrobat Exchange-Pro 8.0" >
</HEAD>
<BODY bgcolor=white text=black link=blue vlink=purple alink=fushia >
<HR>
<UL>
<LI>
<A href="#LinkTarget_4966">FIGURES</A>
</LI>
<LI>
<A href="#LinkTarget_5209">TABLES</A>
</LI>
<LI>
<A href="#LinkTarget_5751">1 Scope</A>
</LI>
<LI>
<A href="#LinkTarget_5753">2 Normative references</A>
</LI>
<LI>
<A href="#LinkTarget_5813">3 Terms, definitions, abbreviations and conventions</A>
<UL>
<LI>
<A href="#LinkTarget_5814">3.1 Terms and definitions</A>
</LI>
<LI>
<A href="#LinkTarget_5912">3.2 Abbreviations</A>
</LI>
<LI>
<A href="#LinkTarget_5918">3.3 Conventions</A>
<UL>
<LI>
<A href="#LinkTarget_5919">3.3.1 Conventions for AddressSpace figures</A>
</LI>
<LI>
<A href="#LinkTarget_5933">3.3.2 Conventions for defining NodeClasses</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6059">4 AddressSpace concepts</A>
<UL>
<LI>
<A href="#LinkTarget_6060">4.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_6104">4.2 Object Model</A>
</LI>
<LI>
<A href="#LinkTarget_6122">4.3 Node Model</A>
<UL>
<LI>
<A href="#LinkTarget_6123">4.3.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_6140">4.3.2 NodeClasses</A>
</LI>
<LI>
<A href="#LinkTarget_6158">4.3.3 Attributes</A>
</LI>
<LI>
<A href="#LinkTarget_6178">4.3.4 References</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6207">4.4 Variables</A>
<UL>
<LI>
<A href="#LinkTarget_6209">4.4.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_6211">4.4.2 Properties</A>
</LI>
<LI>
<A href="#LinkTarget_6221">4.4.3 DataVariables</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6232">4.5 TypeDefinitionNodes</A>
<UL>
<LI>
<A href="#LinkTarget_6233">4.5.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_6259">4.5.2 Complex TypeDefinitionNodes and their InstanceDeclarations</A>
</LI>
<LI>
<A href="#LinkTarget_6280">4.5.3 Subtyping</A>
</LI>
<LI>
<A href="#LinkTarget_6295">4.5.4 Instantiation of complex TypeDefinitionNodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6325">4.6 Event Model</A>
<UL>
<LI>
<A href="#LinkTarget_6326">4.6.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_6343">4.6.2 EventTypes</A>
</LI>
<LI>
<A href="#LinkTarget_6362">4.6.3 Event Categorization</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6375">4.7 Methods</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6387">5 Standard NodeClasses</A>
<UL>
<LI>
<A href="#LinkTarget_6388">5.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_6400">5.2 Base NodeClass</A>
<UL>
<LI>
<A href="#LinkTarget_6401">5.2.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_6551">5.2.2 NodeId</A>
</LI>
<LI>
<A href="#LinkTarget_6560">5.2.3 NodeClass</A>
</LI>
<LI>
<A href="#LinkTarget_6567">5.2.4 BrowseName</A>
</LI>
<LI>
<A href="#LinkTarget_6585">5.2.5 DisplayName</A>
</LI>
<LI>
<A href="#LinkTarget_6596">5.2.6 Description</A>
</LI>
<LI>
<A href="#LinkTarget_6603">5.2.7 WriteMask</A>
</LI>
<LI>
<A href="#LinkTarget_6812">5.2.8 UserWriteMask</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6820">5.3 ReferenceType NodeClass</A>
<UL>
<LI>
<A href="#LinkTarget_6821">5.3.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_6997">5.3.2 Attributes</A>
</LI>
<LI>
<A href="#LinkTarget_7040">5.3.3 References</A>
<UL>
<LI>
<A href="#LinkTarget_7041">5.3.3.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_7043">5.3.3.2 HasProperty References</A>
</LI>
<LI>
<A href="#LinkTarget_7047">5.3.3.3 HasSubtype References</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_7064">5.4 View NodeClass</A>
</LI>
<LI>
<A href="#LinkTarget_7311">5.5 Objects</A>
<UL>
<LI>
<A href="#LinkTarget_7312">5.5.1 Object NodeClass</A>
</LI>
<LI>
<A href="#LinkTarget_7662">5.5.2 ObjectType NodeClass</A>
</LI>
<LI>
<A href="#LinkTarget_7871">5.5.3 Standard ObjectType FolderType</A>
</LI>
<LI>
<A href="#LinkTarget_7882">5.5.4 Client-side creation of Objects of an ObjectType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_7891">5.6 Variables</A>
<UL>
<LI>
<A href="#LinkTarget_7892">5.6.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_7915">5.6.2 Variable NodeClass</A>
</LI>
<LI>
<A href="#LinkTarget_8582">5.6.3 Properties</A>
</LI>
<LI>
<A href="#LinkTarget_8598">5.6.4 DataVariable</A>
</LI>
<LI>
<A href="#LinkTarget_8635">5.6.5 VariableType NodeClass</A>
</LI>
<LI>
<A href="#LinkTarget_8901">5.6.6 Client-side creation of Variables of an VariableType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8909">5.7 Method NodeClass</A>
</LI>
<LI>
<A href="#LinkTarget_9156">5.8 DataTypes</A>
<UL>
<LI>
<A href="#LinkTarget_9157">5.8.1 DataType Model</A>
</LI>
<LI>
<A href="#LinkTarget_9223">5.8.2 Encoding Rules for different kinds of DataTypes</A>
</LI>
<LI>
<A href="#LinkTarget_9279">5.8.3 DataType NodeClass</A>
</LI>
<LI>
<A href="#LinkTarget_9473">5.8.4 DataTypeDictionary, DataTypeDescription, DataTypeEncoding and DataTypeSystem</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9515">5.9 Summary of Attributes of the NodeClasses</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9984">6 Type Model for ObjectTypes and VariableTypes</A>
<UL>
<LI>
<A href="#LinkTarget_9986">6.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_9993">6.2 Definitions</A>
<UL>
<LI>
<A href="#LinkTarget_9994">6.2.1 InstanceDeclaration</A>
</LI>
<LI>
<A href="#LinkTarget_9996">6.2.2 Instances without ModellingRules</A>
</LI>
<LI>
<A href="#LinkTarget_9999">6.2.3 InstanceDeclarationHierarchy</A>
</LI>
<LI>
<A href="#LinkTarget_10001">6.2.4 Similar Node of InstanceDeclaration</A>
</LI>
<LI>
<A href="#LinkTarget_10004">6.2.5 BrowsePath</A>
</LI>
<LI>
<A href="#LinkTarget_10006">6.2.6 Attribute Handling of InstanceDeclarations</A>
</LI>
<LI>
<A href="#LinkTarget_10015">6.2.7 Attribute Handling of Variable and VariableTypes</A>
</LI>
<LI>
<A href="#LinkTarget_10033">6.2.8 NodeIds of InstanceDeclarations</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10040">6.3 Subtyping of ObjectTypes and VariableTypes</A>
<UL>
<LI>
<A href="#LinkTarget_10041">6.3.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_10056">6.3.2 Attributes</A>
</LI>
<LI>
<A href="#LinkTarget_10063">6.3.3 InstanceDeclarations</A>
<UL>
<LI>
<A href="#LinkTarget_10065">6.3.3.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_10074">6.3.3.2 Fully-inherited InstanceDeclarationHierarchy</A>
</LI>
<LI>
<A href="#LinkTarget_10655">6.3.3.3 Overriding InstanceDeclarations</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10681">6.4 Instances of ObjectTypes and VariableTypes</A>
<UL>
<LI>
<A href="#LinkTarget_10683">6.4.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_10691">6.4.2 Creating an Instance</A>
</LI>
<LI>
<A href="#LinkTarget_10725">6.4.3 Constraints on an Instance</A>
</LI>
<LI>
<A href="#LinkTarget_10745">6.4.4 ModellingRules</A>
<UL>
<LI>
<A href="#LinkTarget_10746">6.4.4.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_10776">6.4.4.2 Properties describing ModellingRules</A>
<UL>
<LI>
<A href="#LinkTarget_10777">6.4.4.2.1 NamingRule</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10803">6.4.4.3 Subtyping Rules for Properties of ModellingRules</A>
</LI>
<LI>
<A href="#LinkTarget_10845">6.4.4.4 Instantiation Rules for Properties of ModellingRules</A>
</LI>
<LI>
<A href="#LinkTarget_10878">6.4.4.5 Standard ModellingRules</A>
<UL>
<LI>
<A href="#LinkTarget_10879">6.4.4.5.1 Titles of Standard ModellingRules</A>
</LI>
<LI>
<A href="#LinkTarget_10929">6.4.4.5.2 Mandatory</A>
</LI>
<LI>
<A href="#LinkTarget_10949">6.4.4.5.3 Optional</A>
</LI>
<LI>
<A href="#LinkTarget_10964">6.4.4.5.4 ExposesItsArray</A>
</LI>
<LI>
<A href="#LinkTarget_10991">6.4.4.5.5 OptionalPlaceholder</A>
</LI>
<LI>
<A href="#LinkTarget_11008">6.4.4.5.6 MandatoryPlaceholder</A>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11031">6.5 Changing Type Definitions that are already used</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11034">7 Standard ReferenceTypes</A>
<UL>
<LI>
<A href="#LinkTarget_11035">7.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_11055">7.2 References ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11064">7.3 HierarchicalReferences ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11070">7.4 NonHierarchicalReferences ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11074">7.5 HasChild ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11078">7.6 Aggregates ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11082">7.7 HasComponent ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11090">7.8 HasProperty ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11099">7.9 HasOrderedComponent ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11108">7.10 HasSubtype ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11125">7.11 Organizes ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11135">7.12 HasModellingRule ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11146">7.13 HasTypeDefinition ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11156">7.14 HasEncoding ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11166">7.15 HasDescription ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_11176">7.16 GeneratesEvent</A>
</LI>
<LI>
<A href="#LinkTarget_11181">7.17 AlwaysGeneratesEvent</A>
</LI>
<LI>
<A href="#LinkTarget_11187">7.18 HasEventSource</A>
</LI>
<LI>
<A href="#LinkTarget_11198">7.19 HasNotifier</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11232">8 Standard DataTypes</A>
<UL>
<LI>
<A href="#LinkTarget_11233">8.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_11244">8.2 NodeId</A>
<UL>
<LI>
<A href="#LinkTarget_11246">8.2.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_11317">8.2.2 NamespaceIndex</A>
</LI>
<LI>
<A href="#LinkTarget_11330">8.2.3 IdentifierType</A>
</LI>
<LI>
<A href="#LinkTarget_11378">8.2.4 Identifier value</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11426">8.3 QualifiedName</A>
</LI>
<LI>
<A href="#LinkTarget_11470">8.4 LocaleId</A>
</LI>
<LI>
<A href="#LinkTarget_11556">8.5 LocalizedText</A>
</LI>
<LI>
<A href="#LinkTarget_11598">8.6 Argument</A>
</LI>
<LI>
<A href="#LinkTarget_11674">8.7 BaseDataType</A>
</LI>
<LI>
<A href="#LinkTarget_11677">8.8 Boolean</A>
</LI>
<LI>
<A href="#LinkTarget_11680">8.9 Byte</A>
</LI>
<LI>
<A href="#LinkTarget_11682">8.10 ByteString</A>
</LI>
<LI>
<A href="#LinkTarget_11684">8.11 DateTime</A>
</LI>
<LI>
<A href="#LinkTarget_11691">8.12 Double</A>
</LI>
<LI>
<A href="#LinkTarget_11698">8.13 Duration</A>
</LI>
<LI>
<A href="#LinkTarget_11700">8.14 Enumeration</A>
</LI>
<LI>
<A href="#LinkTarget_11712">8.15 Float</A>
</LI>
<LI>
<A href="#LinkTarget_11719">8.16 Guid</A>
</LI>
<LI>
<A href="#LinkTarget_11726">8.17 SByte</A>
</LI>
<LI>
<A href="#LinkTarget_11728">8.18 IdType</A>
</LI>
<LI>
<A href="#LinkTarget_11739">8.19 Image</A>
</LI>
<LI>
<A href="#LinkTarget_11741">8.20 ImageBMP</A>
</LI>
<LI>
<A href="#LinkTarget_11743">8.21 ImageGIF</A>
</LI>
<LI>
<A href="#LinkTarget_11746">8.22 ImageJPG</A>
</LI>
<LI>
<A href="#LinkTarget_11801">8.23 ImagePNG</A>
</LI>
<LI>
<A href="#LinkTarget_11808">8.24 Integer</A>
</LI>
<LI>
<A href="#LinkTarget_11810">8.25 Int16</A>
</LI>
<LI>
<A href="#LinkTarget_11812">8.26 Int32</A>
</LI>
<LI>
<A href="#LinkTarget_11814">8.27 Int64</A>
</LI>
<LI>
<A href="#LinkTarget_11816">8.28 TimeZoneDataType</A>
</LI>
<LI>
<A href="#LinkTarget_11859">8.29 NamingRuleType</A>
</LI>
<LI>
<A href="#LinkTarget_11889">8.30 NodeClass</A>
</LI>
<LI>
<A href="#LinkTarget_11935">8.31 Number</A>
</LI>
<LI>
<A href="#LinkTarget_11937">8.32 String</A>
</LI>
<LI>
<A href="#LinkTarget_11939">8.33 Structure</A>
</LI>
<LI>
<A href="#LinkTarget_11950">8.34 UInteger</A>
</LI>
<LI>
<A href="#LinkTarget_11952">8.35 UInt16</A>
</LI>
<LI>
<A href="#LinkTarget_11954">8.36 UInt32</A>
</LI>
<LI>
<A href="#LinkTarget_11957">8.37 UInt64</A>
</LI>
<LI>
<A href="#LinkTarget_11959">8.38 UtcTime</A>
</LI>
<LI>
<A href="#LinkTarget_11969">8.39 XmlElement</A>
</LI>
<LI>
<A href="#LinkTarget_11977">8.40 EnumValueType</A>
</LI>
<LI>
<A href="#LinkTarget_12028">8.41 OptionSet</A>
</LI>
<LI>
<A href="#LinkTarget_12079">8.42 Union</A>
</LI>
<LI>
<A href="#LinkTarget_12081">8.43 DateString</A>
</LI>
<LI>
<A href="#LinkTarget_12086">8.44 DecimalString</A>
</LI>
<LI>
<A href="#LinkTarget_12089">8.45 DurationString</A>
</LI>
<LI>
<A href="#LinkTarget_12114">8.46 NormalizedString</A>
</LI>
<LI>
<A href="#LinkTarget_12117">8.47 TimeString</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12131">9 Standard EventTypes</A>
<UL>
<LI>
<A href="#LinkTarget_12132">9.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_12153">9.2 BaseEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12155">9.3 SystemEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12157">9.4 ProgressEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12159">9.5 AuditEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12187">9.6 AuditSecurityEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12189">9.7 AuditChannelEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12196">9.8 AuditOpenSecureChannelEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12203">9.9 AuditSessionEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12210">9.10 AuditCreateSessionEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12217">9.11 AuditUrlMismatchEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12228">9.12 AuditActivateSessionEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12236">9.13 AuditCancelEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12243">9.14 AuditCertificateEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12245">9.15 AuditCertificateDataMismatchEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12253">9.16 AuditCertificateExpiredEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12255">9.17 AuditCertificateInvalidEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12257">9.18 AuditCertificateUntrustedEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12259">9.19 AuditCertificateRevokedEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12261">9.20 AuditCertificateMismatchEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12263">9.21 AuditNodeManagementEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12265">9.22 AuditAddNodesEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12272">9.23 AuditDeleteNodesEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12280">9.24 AuditAddReferencesEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12287">9.25 AuditDeleteReferencesEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12294">9.26 AuditUpdateEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12296">9.27 AuditWriteUpdateEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12298">9.28 AuditHistoryUpdateEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12300">9.29 AuditUpdateMethodEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12302">9.30 DeviceFailureEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12304">9.31 SystemStatusChangeEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12306">9.32 ModelChangeEvents</A>
<UL>
<LI>
<A href="#LinkTarget_12307">9.32.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_12309">9.32.2 NodeVersion Property</A>
</LI>
<LI>
<A href="#LinkTarget_12312">9.32.3 Views</A>
</LI>
<LI>
<A href="#LinkTarget_12317">9.32.4 Event Compression</A>
</LI>
<LI>
<A href="#LinkTarget_12319">9.32.5 BaseModelChangeEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12321">9.32.6 GeneralModelChangeEventType</A>
</LI>
<LI>
<A href="#LinkTarget_12324">9.32.7 Guidelines for ModelChangeEvents</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12336">9.33 SemanticChangeEventType</A>
<UL>
<LI>
<A href="#LinkTarget_12337">9.33.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_12346">9.33.2 ViewVersion and NodeVersion Properties</A>
</LI>
<LI>
<A href="#LinkTarget_12349">9.33.3 Views</A>
</LI>
<LI>
<A href="#LinkTarget_12356">9.33.4 Event Compression</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12364">Annex A  (informative)  How to use the Address Space Model</A>
<UL>
<LI>
<A href="#LinkTarget_12366">A.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_12378">A.2 Type definitions</A>
</LI>
<LI>
<A href="#LinkTarget_12380">A.3 ObjectTypes</A>
</LI>
<LI>
<A href="#LinkTarget_12398">A.4 VariableTypes</A>
<UL>
<LI>
<A href="#LinkTarget_12399">A.4.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_12403">A.4.2 Properties or DataVariables</A>
</LI>
<LI>
<A href="#LinkTarget_12434">A.4.3 Many Variables and / or structured DataTypes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12447">A.5 Views</A>
</LI>
<LI>
<A href="#LinkTarget_12449">A.6 Methods</A>
</LI>
<LI>
<A href="#LinkTarget_12459">A.7 Defining ReferenceTypes</A>
</LI>
<LI>
<A href="#LinkTarget_12462">A.8 Defining ModellingRules</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12466">Annex B  (informative)  OPC UA Meta Model in UML</A>
<UL>
<LI>
<A href="#LinkTarget_12468">B.1 Background</A>
</LI>
<LI>
<A href="#LinkTarget_12486">B.2 Notation</A>
</LI>
<LI>
<A href="#LinkTarget_12524">B.3 Meta Model</A>
<UL>
<LI>
<A href="#LinkTarget_12526">B.3.1 Base</A>
</LI>
<LI>
<A href="#LinkTarget_12537">B.3.2 ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_12552">B.3.3 Predefined ReferenceTypes</A>
</LI>
<LI>
<A href="#LinkTarget_12558">B.3.4 Attributes</A>
</LI>
<LI>
<A href="#LinkTarget_12571">B.3.5 Object and ObjectType</A>
</LI>
<LI>
<A href="#LinkTarget_12582">B.3.6 EventNotifier</A>
</LI>
<LI>
<A href="#LinkTarget_12592">B.3.7 Variable and VariableType</A>
</LI>
<LI>
<A href="#LinkTarget_12610">B.3.8 Method</A>
</LI>
<LI>
<A href="#LinkTarget_12621">B.3.9 DataType</A>
</LI>
<LI>
<A href="#LinkTarget_12632">B.3.10 View</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12642">Annex C  (normative)  OPC Binary Type Description System</A>
<UL>
<LI>
<A href="#LinkTarget_12644">C.1 Concepts</A>
</LI>
<LI>
<A href="#LinkTarget_12675">C.2 Schema Description</A>
<UL>
<LI>
<A href="#LinkTarget_12676">C.2.1 TypeDictionary</A>
</LI>
<LI>
<A href="#LinkTarget_12737">C.2.2 TypeDescription</A>
</LI>
<LI>
<A href="#LinkTarget_12789">C.2.3 OpaqueType</A>
</LI>
<LI>
<A href="#LinkTarget_12840">C.2.4 EnumeratedType</A>
</LI>
<LI>
<A href="#LinkTarget_12887">C.2.5 StructuredType</A>
</LI>
<LI>
<A href="#LinkTarget_12930">C.2.6 FieldType</A>
</LI>
<LI>
<A href="#LinkTarget_13106">C.2.7 EnumeratedValue</A>
</LI>
<LI>
<A href="#LinkTarget_13141">C.2.8 ByteOrder</A>
</LI>
<LI>
<A href="#LinkTarget_13143">C.2.9 ImportDirective</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_13178">C.3 Standard Type Descriptions</A>
</LI>
<LI>
<A href="#LinkTarget_13331">C.4 Type Description Examples</A>
</LI>
<LI>
<A href="#LinkTarget_13431">C.5 OPC Binary XML Schema</A>
</LI>
<LI>
<A href="#LinkTarget_13552">C.6 OPC Binary Standard TypeDictionary</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_13661">Annex D  (normative)  Graphical Notation</A>
<UL>
<LI>
<A href="#LinkTarget_13663">D.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_13666">D.2 Notation</A>
<UL>
<LI>
<A href="#LinkTarget_13667">D.2.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_13670">D.2.2 Simple Notation</A>
</LI>
<LI>
<A href="#LinkTarget_13876">D.2.3 Extended Notation</A>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</HR>
<DIV class="Part" 

><P 

><FONT size="+1" color="#000000"></B> </P
><P 

> <DIV class="Sect" 
 Alt=""
>  F  O  U  N  D  A  T  I  O  N &reg; </DIV
></P
><P 

><FONT size="+3"><B>OPC Unified Architecture </P
><P 

>Specification </P
><P 

>Part 3:  Address Space Model </P
><P 

>Release  1.03 </P
><P 

>July 10, 2015 </P
><P 

>  </P
><P 

> </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"></B>Specification Type: </P
></TD
><TD  
 valign="top"
><P 

>Industry Standard Specification </P
></TD
><TD  
 valign="top"
><P 

>Comments: </P
></TD
><TD  
 valign="top"
><P 

>Report or view errata: http://www.opcfoundation.org/errata </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Title: </P
></TD
><TD  
 valign="top"
><P 

>OPC Unified Architecture  Part 3 :Address Space Model </P
></TD
><TD  
 valign="top"
><P 

>Date: </P
></TD
><TD  
 valign="top"
><P 

>July 10, 2015 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Version: </P
></TD
><TD  
 valign="top"
><P 

>Release 1.03 </P
></TD
><TD  
 valign="top"
><P 

>Software: </P
></TD
><TD  
 valign="top"
><P 

>MS-Word </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Source: </P
></TD
><TD  
 valign="top"
><P 

>OPC UA Part 3 - Address Space Model 1.03 Specification.docx </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Author: </P
></TD
><TD  
 valign="top"
><P 

>OPC Foundation </P
></TD
><TD  
 valign="top"
><P 

>Status: </P
></TD
><TD  
 valign="top"
><P 

>Release </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><H1 

> <FONT size="+1"> </H1
><P 

> </P
><DIV class="TOC" 

><DIV class="TOCI" 

>CONTENTS </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4966" href="#">
<FONT size="+1"><B>FIGURES</B> ............................................................................................................................... ix</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5209" href="#">
<FONT size="+1"><B>TABLES</B> ................................................................................................................................. xi</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5751" href="#">
<FONT size="+1">1<FONT size="+1"> <FONT size="+1">Scope ............................................................................................................................. 1</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5753" href="#">
<FONT size="+1">2<FONT size="+1"> <FONT size="+1">Normative references ...................................................................................................... 1</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5813" href="#">
<FONT size="+1">3<FONT size="+1"> <FONT size="+1">Terms, definitions, abbreviations and conventions .......................................................... 2</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5814" href="#">
<FONT size="+1">3.1<FONT size="+1"> <FONT size="+1">Terms and definitions ............................................................................................. 2</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5912" href="#">
<FONT size="+1">3.2<FONT size="+1"> <FONT size="+1">Abbreviations ......................................................................................................... 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5918" href="#">
<FONT size="+1">3.3<FONT size="+1"> <FONT size="+1">Conventions ........................................................................................................... 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5919" href="#">
<FONT size="+1">3.3.1<FONT size="+1"> <FONT size="+1">Conventions for AddressSpace figures ............................................................ 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5933" href="#">
<FONT size="+1">3.3.2<FONT size="+1"> <FONT size="+1">Conventions for defining NodeClasses ............................................................ 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6059" href="#">
<FONT size="+1">4<FONT size="+1"> <FONT size="+1">AddressSpace concepts .................................................................................................. 4</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6060" href="#">
<FONT size="+1">4.1<FONT size="+1"> <FONT size="+1">Overview ................................................................................................................ 4</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6104" href="#">
<FONT size="+1">4.2<FONT size="+1"> <FONT size="+1">Object Model .......................................................................................................... 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6122" href="#">
<FONT size="+1">4.3<FONT size="+1"> <FONT size="+1">Node Model ............................................................................................................ 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6123" href="#">
<FONT size="+1">4.3.1<FONT size="+1"> <FONT size="+1">General ........................................................................................................... 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6140" href="#">
<FONT size="+1">4.3.2<FONT size="+1"> <FONT size="+1">NodeClasses ................................................................................................... 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6158" href="#">
<FONT size="+1">4.3.3<FONT size="+1"> <FONT size="+1">Attributes ........................................................................................................ 6</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6178" href="#">
<FONT size="+1">4.3.4<FONT size="+1"> <FONT size="+1">References ..................................................................................................... 6</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6207" href="#">
<FONT size="+1">4.4<FONT size="+1"> <FONT size="+1">Variables ................................................................................................................ 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6209" href="#">
<FONT size="+1">4.4.1<FONT size="+1"> <FONT size="+1">General ........................................................................................................... 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6211" href="#">
<FONT size="+1">4.4.2<FONT size="+1"> <FONT size="+1">Properties ....................................................................................................... 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6221" href="#">
<FONT size="+1">4.4.3<FONT size="+1"> <FONT size="+1">DataVariables ................................................................................................. 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6232" href="#">
<FONT size="+1">4.5<FONT size="+1"> <FONT size="+1">TypeDefinitionNodes .............................................................................................. 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6233" href="#">
<FONT size="+1">4.5.1<FONT size="+1"> <FONT size="+1">General ........................................................................................................... 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6259" href="#">
<FONT size="+1">4.5.2<FONT size="+1"> <FONT size="+1">Complex TypeDefinitionNodes and their InstanceDeclarations ........................ 8</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6280" href="#">
<FONT size="+1">4.5.3<FONT size="+1"> <FONT size="+1">Subtyping ........................................................................................................ 9</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6295" href="#">
<FONT size="+1">4.5.4<FONT size="+1"> <FONT size="+1">Instantiation of complex TypeDefinitionNodes ................................................. 9</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6325" href="#">
<FONT size="+1">4.6<FONT size="+1"> <FONT size="+1">Event Model ......................................................................................................... 10</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6326" href="#">
<FONT size="+1">4.6.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 10</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6343" href="#">
<FONT size="+1">4.6.2<FONT size="+1"> <FONT size="+1">EventTypes ................................................................................................... 11</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6362" href="#">
<FONT size="+1">4.6.3<FONT size="+1"> <FONT size="+1">Event Categorization ..................................................................................... 11</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6375" href="#">
<FONT size="+1">4.7<FONT size="+1"> <FONT size="+1">Methods ............................................................................................................... 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6387" href="#">
<FONT size="+1">5<FONT size="+1"> <FONT size="+1">Standard NodeClasses ................................................................................................. 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6388" href="#">
<FONT size="+1">5.1<FONT size="+1"> <FONT size="+1">Overview .............................................................................................................. 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6400" href="#">
<FONT size="+1">5.2<FONT size="+1"> <FONT size="+1">Base NodeClass ................................................................................................... 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6401" href="#">
<FONT size="+1">5.2.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6551" href="#">
<FONT size="+1">5.2.2<FONT size="+1"> <FONT size="+1">NodeId .......................................................................................................... 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6560" href="#">
<FONT size="+1">5.2.3<FONT size="+1"> <FONT size="+1">NodeClass .................................................................................................... 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6567" href="#">
<FONT size="+1">5.2.4<FONT size="+1"> <FONT size="+1">BrowseName ................................................................................................ 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6585" href="#">
<FONT size="+1">5.2.5<FONT size="+1"> <FONT size="+1">DisplayName ................................................................................................. 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6596" href="#">
<FONT size="+1">5.2.6<FONT size="+1"> <FONT size="+1">Description .................................................................................................... 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6603" href="#">
<FONT size="+1">5.2.7<FONT size="+1"> <FONT size="+1">WriteMask ..................................................................................................... 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6812" href="#">
<FONT size="+1">5.2.8<FONT size="+1"> <FONT size="+1">UserWriteMask ............................................................................................. 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6820" href="#">
<FONT size="+1">5.3<FONT size="+1"> <FONT size="+1">ReferenceType NodeClass ................................................................................... 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6821" href="#">
<FONT size="+1">5.3.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 14</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_6997" href="#">
<FONT size="+1">5.3.2<FONT size="+1"> <FONT size="+1">Attributes ...................................................................................................... 15</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7040" href="#">
<FONT size="+1">5.3.3<FONT size="+1"> <FONT size="+1">References ................................................................................................... 16</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7064" href="#">
<FONT size="+1">5.4<FONT size="+1"> <FONT size="+1">View NodeClass ................................................................................................... 17</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7311" href="#">
<FONT size="+1">5.5<FONT size="+1"> <FONT size="+1">Objects................................................................................................................. 19</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7312" href="#">
<FONT size="+1">5.5.1<FONT size="+1"> <FONT size="+1">Object NodeClass ......................................................................................... 19</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7662" href="#">
<FONT size="+1">5.5.2<FONT size="+1"> <FONT size="+1">ObjectType NodeClass ................................................................................. 21</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7871" href="#">
<FONT size="+1">5.5.3<FONT size="+1"> <FONT size="+1">Standard ObjectType FolderType .................................................................. 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7882" href="#">
<FONT size="+1">5.5.4<FONT size="+1"> <FONT size="+1">Client-side creation of Objects of an ObjectType ........................................... 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7891" href="#">
<FONT size="+1">5.6<FONT size="+1"> <FONT size="+1">Variables .............................................................................................................. 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7892" href="#">
<FONT size="+1">5.6.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7915" href="#">
<FONT size="+1">5.6.2<FONT size="+1"> <FONT size="+1">Variable NodeClass ...................................................................................... 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8582" href="#">
<FONT size="+1">5.6.3<FONT size="+1"> <FONT size="+1">Properties ..................................................................................................... 27</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8598" href="#">
<FONT size="+1">5.6.4<FONT size="+1"> <FONT size="+1">DataVariable ................................................................................................. 27</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8635" href="#">
<FONT size="+1">5.6.5<FONT size="+1"> <FONT size="+1">VariableType NodeClass ............................................................................... 28</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8901" href="#">
<FONT size="+1">5.6.6<FONT size="+1"> <FONT size="+1">Client-side creation of Variables of an VariableType ..................................... 30</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8909" href="#">
<FONT size="+1">5.7<FONT size="+1"> <FONT size="+1">Method NodeClass ............................................................................................... 30</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9156" href="#">
<FONT size="+1">5.8<FONT size="+1"> <FONT size="+1">DataTypes ............................................................................................................ 32</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9157" href="#">
<FONT size="+1">5.8.1<FONT size="+1"> <FONT size="+1">DataType Model ............................................................................................ 32</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9223" href="#">
<FONT size="+1">5.8.2<FONT size="+1"> <FONT size="+1">Encoding Rules for different kinds of DataTypes ........................................... 34</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9279" href="#">
<FONT size="+1">5.8.3<FONT size="+1"> <FONT size="+1">DataType NodeClass .................................................................................... 34</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9473" href="#">
<FONT size="+1">5.8.4<FONT size="+1"> <FONT size="+1">DataTypeDictionary, DataTypeDescription, DataTypeEncoding and DataTypeSystem ........................................................................................... 36</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9515" href="#">
<FONT size="+1">5.9<FONT size="+1"> <FONT size="+1">Summary of Attributes of the NodeClasses ........................................................... 38</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9984" href="#">
<FONT size="+1">6<FONT size="+1"> <FONT size="+1">Type Model for ObjectTypes and VariableTypes ........................................................... 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9986" href="#">
<FONT size="+1">6.1<FONT size="+1"> <FONT size="+1">Overview .............................................................................................................. 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9993" href="#">
<FONT size="+1">6.2<FONT size="+1"> <FONT size="+1">Definitions ............................................................................................................ 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9994" href="#">
<FONT size="+1">6.2.1<FONT size="+1"> <FONT size="+1">InstanceDeclaration ...................................................................................... 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9996" href="#">
<FONT size="+1">6.2.2<FONT size="+1"> <FONT size="+1">Instances without ModellingRules ................................................................. 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9999" href="#">
<FONT size="+1"><I>6.2.3</I><FONT size="+1"> <FONT size="+1">InstanceDeclarationHierarchy ....................................................................... 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10001" href="#">
<FONT size="+1">6.2.4<FONT size="+1"> <FONT size="+1">Similar Node of InstanceDeclaration ............................................................. 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10004" href="#">
<FONT size="+1">6.2.5<FONT size="+1"> <FONT size="+1">BrowsePath .................................................................................................. 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10006" href="#">
<FONT size="+1">6.2.6<FONT size="+1"> <FONT size="+1">Attribute Handling of InstanceDeclarations .................................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10015" href="#">
<FONT size="+1">6.2.7<FONT size="+1"> <FONT size="+1">Attribute Handling of Variable and VariableTypes .......................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10033" href="#">
<FONT size="+1">6.2.8<FONT size="+1"> <FONT size="+1">NodeIds of InstanceDeclarations ................................................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10040" href="#">
<FONT size="+1">6.3<FONT size="+1"> <FONT size="+1">Subtyping of ObjectTypes and VariableTypes ....................................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10041" href="#">
<FONT size="+1">6.3.1<FONT size="+1"> <FONT size="+1">Overview ....................................................................................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10056" href="#">
<FONT size="+1">6.3.2<FONT size="+1"> <FONT size="+1">Attributes ...................................................................................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10063" href="#">
<FONT size="+1">6.3.3<FONT size="+1"> <FONT size="+1">InstanceDeclarations..................................................................................... 41</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10681" href="#">
<FONT size="+1">6.4<FONT size="+1"> <FONT size="+1">Instances of ObjectTypes and VariableTypes ....................................................... 44</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10683" href="#">
<FONT size="+1">6.4.1<FONT size="+1"> <FONT size="+1">Overview ....................................................................................................... 44</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10691" href="#">
<FONT size="+1">6.4.2<FONT size="+1"> <FONT size="+1">Creating an Instance ..................................................................................... 44</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10725" href="#">
<FONT size="+1">6.4.3<FONT size="+1"> <FONT size="+1">Constraints on an Instance ............................................................................ 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10745" href="#">
<FONT size="+1">6.4.4<FONT size="+1"> <FONT size="+1">ModellingRules ............................................................................................. 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11031" href="#">
<FONT size="+1">6.5<FONT size="+1"> <FONT size="+1">Changing Type Definitions that are already used .................................................. 53</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11034" href="#">
<FONT size="+1">7<FONT size="+1"> <FONT size="+1">Standard ReferenceTypes ............................................................................................. 53</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11035" href="#">
<FONT size="+1">7.1<FONT size="+1"> <FONT size="+1">General ................................................................................................................ 53</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11055" href="#">
<FONT size="+1">7.2<FONT size="+1"> <FONT size="+1">References ReferenceType .................................................................................. 53</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11064" href="#">
<FONT size="+1">7.3<FONT size="+1"> <FONT size="+1">HierarchicalReferences ReferenceType ................................................................ 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11070" href="#">
<FONT size="+1">7.4<FONT size="+1"> <FONT size="+1">NonHierarchicalReferences ReferenceType ......................................................... 54</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_11074" href="#">
<FONT size="+1">7.5<FONT size="+1"> <FONT size="+1">HasChild ReferenceType ...................................................................................... 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11078" href="#">
<FONT size="+1">7.6<FONT size="+1"> <FONT size="+1">Aggregates ReferenceType .................................................................................. 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11082" href="#">
<FONT size="+1">7.7<FONT size="+1"> <FONT size="+1">HasComponent ReferenceType ............................................................................ 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11090" href="#">
<FONT size="+1">7.8<FONT size="+1"> <FONT size="+1">HasProperty ReferenceType ................................................................................ 55</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11099" href="#">
<FONT size="+1">7.9<FONT size="+1"> <FONT size="+1">HasOrderedComponent ReferenceType ............................................................... 55</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11108" href="#">
<FONT size="+1">7.10<FONT size="+1"> <FONT size="+1">HasSubtype ReferenceType ................................................................................. 55</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11125" href="#">
<FONT size="+1">7.11<FONT size="+1"> <FONT size="+1">Organizes ReferenceType .................................................................................... 55</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11135" href="#">
<FONT size="+1">7.12<FONT size="+1"> <FONT size="+1">HasModellingRule ReferenceType ........................................................................ 55</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11146" href="#">
<FONT size="+1">7.13<FONT size="+1"> <FONT size="+1">HasTypeDefinition ReferenceType ....................................................................... 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11156" href="#">
<FONT size="+1">7.14<FONT size="+1"> <FONT size="+1">HasEncoding ReferenceType ............................................................................... 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11166" href="#">
<FONT size="+1">7.15<FONT size="+1"> <FONT size="+1">HasDescription ReferenceType ............................................................................ 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11176" href="#">
<FONT size="+1">7.16<FONT size="+1"> <FONT size="+1">GeneratesEvent ................................................................................................... 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11181" href="#">
<FONT size="+1">7.17<FONT size="+1"> <FONT size="+1">AlwaysGeneratesEvent ........................................................................................ 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11187" href="#">
<FONT size="+1">7.18<FONT size="+1"> <FONT size="+1">HasEventSource .................................................................................................. 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11198" href="#">
<FONT size="+1">7.19<FONT size="+1"> <FONT size="+1">HasNotifier ........................................................................................................... 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11232" href="#">
<FONT size="+1">8<FONT size="+1"> <FONT size="+1">Standard DataTypes ..................................................................................................... 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11233" href="#">
<FONT size="+1">8.1<FONT size="+1"> <FONT size="+1">General ................................................................................................................ 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11244" href="#">
<FONT size="+1">8.2<FONT size="+1"> <FONT size="+1">NodeId ................................................................................................................. 59</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11246" href="#">
<FONT size="+1">8.2.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 59</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11317" href="#">
<FONT size="+1">8.2.2<FONT size="+1"> <FONT size="+1">NamespaceIndex .......................................................................................... 59</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11330" href="#">
<FONT size="+1">8.2.3<FONT size="+1"> <FONT size="+1">IdentifierType ................................................................................................ 59</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11378" href="#">
<FONT size="+1">8.2.4<FONT size="+1"> <FONT size="+1">Identifier value .............................................................................................. 60</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11426" href="#">
<FONT size="+1">8.3<FONT size="+1"> <FONT size="+1">QualifiedName ..................................................................................................... 60</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11470" href="#">
<FONT size="+1">8.4<FONT size="+1"> <FONT size="+1">LocaleId ............................................................................................................... 60</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11556" href="#">
<FONT size="+1">8.5<FONT size="+1"> <FONT size="+1">LocalizedText ....................................................................................................... 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11598" href="#">
<FONT size="+1">8.6<FONT size="+1"> <FONT size="+1">Argument ............................................................................................................. 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11674" href="#">
<FONT size="+1">8.7<FONT size="+1"> <FONT size="+1">BaseDataType ...................................................................................................... 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11677" href="#">
<FONT size="+1">8.8<FONT size="+1"> <FONT size="+1">Boolean ................................................................................................................ 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11680" href="#">
<FONT size="+1">8.9<FONT size="+1"> <FONT size="+1">Byte ..................................................................................................................... 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11682" href="#">
<FONT size="+1">8.10<FONT size="+1"> <FONT size="+1">ByteString ............................................................................................................ 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11684" href="#">
<FONT size="+1">8.11<FONT size="+1"> <FONT size="+1">DateTime ............................................................................................................. 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11691" href="#">
<FONT size="+1">8.12<FONT size="+1"> <FONT size="+1">Double ................................................................................................................. 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11698" href="#">
<FONT size="+1">8.13<FONT size="+1"> <FONT size="+1">Duration ............................................................................................................... 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11700" href="#">
<FONT size="+1">8.14<FONT size="+1"> <FONT size="+1">Enumeration ......................................................................................................... 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11712" href="#">
<FONT size="+1">8.15<FONT size="+1"> <FONT size="+1">Float..................................................................................................................... 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11719" href="#">
<FONT size="+1">8.16<FONT size="+1"> <FONT size="+1">Guid ..................................................................................................................... 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11726" href="#">
<FONT size="+1">8.17<FONT size="+1"> <FONT size="+1">SByte ................................................................................................................... 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11728" href="#">
<FONT size="+1">8.18<FONT size="+1"> <FONT size="+1">IdType .................................................................................................................. 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11739" href="#">
<FONT size="+1">8.19<FONT size="+1"> <FONT size="+1">Image ................................................................................................................... 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11741" href="#">
<FONT size="+1">8.20<FONT size="+1"> <FONT size="+1">ImageBMP ........................................................................................................... 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11743" href="#">
<FONT size="+1">8.21<FONT size="+1"> <FONT size="+1">ImageGIF ............................................................................................................. 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11746" href="#">
<FONT size="+1">8.22<FONT size="+1"> <FONT size="+1">ImageJPG ............................................................................................................ 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11801" href="#">
<FONT size="+1">8.23<FONT size="+1"> <FONT size="+1">ImagePNG ........................................................................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11808" href="#">
<FONT size="+1">8.24<FONT size="+1"> <FONT size="+1">Integer ................................................................................................................. 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11810" href="#">
<FONT size="+1">8.25<FONT size="+1"> <FONT size="+1">Int16..................................................................................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11812" href="#">
<FONT size="+1">8.26<FONT size="+1"> <FONT size="+1">Int32..................................................................................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11814" href="#">
<FONT size="+1">8.27<FONT size="+1"> <FONT size="+1">Int64..................................................................................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11816" href="#">
<FONT size="+1">8.28<FONT size="+1"> <FONT size="+1">TimeZoneDataType .............................................................................................. 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11859" href="#">
<FONT size="+1">8.29<FONT size="+1"> <FONT size="+1">NamingRuleType .................................................................................................. 64</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_11889" href="#">
<FONT size="+1">8.30<FONT size="+1"> <FONT size="+1">NodeClass ........................................................................................................... 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11935" href="#">
<FONT size="+1">8.31<FONT size="+1"> <FONT size="+1">Number ................................................................................................................ 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11937" href="#">
<FONT size="+1">8.32<FONT size="+1"> <FONT size="+1">String ................................................................................................................... 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11939" href="#">
<FONT size="+1">8.33<FONT size="+1"> <FONT size="+1">Structure .............................................................................................................. 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11950" href="#">
<FONT size="+1">8.34<FONT size="+1"> <FONT size="+1">UInteger ............................................................................................................... 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11952" href="#">
<FONT size="+1">8.35<FONT size="+1"> <FONT size="+1">UInt16 .................................................................................................................. 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11954" href="#">
<FONT size="+1">8.36<FONT size="+1"> <FONT size="+1">UInt32 .................................................................................................................. 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11957" href="#">
<FONT size="+1">8.37<FONT size="+1"> <FONT size="+1">UInt64 .................................................................................................................. 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11959" href="#">
<FONT size="+1">8.38<FONT size="+1"> <FONT size="+1">UtcTime ............................................................................................................... 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11969" href="#">
<FONT size="+1">8.39<FONT size="+1"> <FONT size="+1">XmlElement .......................................................................................................... 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11977" href="#">
<FONT size="+1">8.40<FONT size="+1"> <FONT size="+1">EnumValueType ................................................................................................... 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12028" href="#">
<FONT size="+1">8.41<FONT size="+1"> <FONT size="+1">OptionSet ............................................................................................................. 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12079" href="#">
<FONT size="+1">8.42<FONT size="+1"> <FONT size="+1">Union ................................................................................................................... 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12081" href="#">
<FONT size="+1">8.43<FONT size="+1"> <FONT size="+1">DateString ............................................................................................................ 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12086" href="#">
<FONT size="+1">8.44<FONT size="+1"> <FONT size="+1">DecimalString ....................................................................................................... 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12089" href="#">
<FONT size="+1">8.45<FONT size="+1"> <FONT size="+1">DurationString ...................................................................................................... 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12114" href="#">
<FONT size="+1">8.46<FONT size="+1"> <FONT size="+1">NormalizedString .................................................................................................. 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12117" href="#">
<FONT size="+1">8.47<FONT size="+1"> <FONT size="+1">TimeString............................................................................................................ 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12131" href="#">
<FONT size="+1">9<FONT size="+1"> <FONT size="+1">Standard EventTypes .................................................................................................... 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12132" href="#">
<FONT size="+1">9.1<FONT size="+1"> <FONT size="+1">General ................................................................................................................ 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12153" href="#">
<FONT size="+1">9.2<FONT size="+1"> <FONT size="+1">BaseEventType .................................................................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12155" href="#">
<FONT size="+1">9.3<FONT size="+1"> <FONT size="+1">SystemEventType ................................................................................................ 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12157" href="#">
<FONT size="+1">9.4<FONT size="+1"> <FONT size="+1">ProgressEventType .............................................................................................. 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12159" href="#">
<FONT size="+1">9.5<FONT size="+1"> <FONT size="+1">AuditEventType .................................................................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12187" href="#">
<FONT size="+1">9.6<FONT size="+1"> <FONT size="+1">AuditSecurityEventType ....................................................................................... 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12189" href="#">
<FONT size="+1">9.7<FONT size="+1"> <FONT size="+1">AuditChannelEventType ....................................................................................... 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12196" href="#">
<FONT size="+1">9.8<FONT size="+1"> <FONT size="+1">AuditOpenSecureChannelEventType .................................................................... 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12203" href="#">
<FONT size="+1">9.9<FONT size="+1"> <FONT size="+1">AuditSessionEventType ........................................................................................ 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12210" href="#">
<FONT size="+1">9.10<FONT size="+1"> <FONT size="+1">AuditCreateSessionEventType ............................................................................. 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12217" href="#">
<FONT size="+1">9.11<FONT size="+1"> <FONT size="+1">AuditUrlMismatchEventType ................................................................................. 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12228" href="#">
<FONT size="+1">9.12<FONT size="+1"> <FONT size="+1">AuditActivateSessionEventType ........................................................................... 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12236" href="#">
<FONT size="+1">9.13<FONT size="+1"> <FONT size="+1">AuditCancelEventType ......................................................................................... 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12243" href="#">
<FONT size="+1">9.14<FONT size="+1"> <FONT size="+1">AuditCertificateEventType .................................................................................... 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12245" href="#">
<FONT size="+1">9.15<FONT size="+1"> <FONT size="+1">AuditCertificateDataMismatchEventType .............................................................. 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12253" href="#">
<FONT size="+1">9.16<FONT size="+1"> <FONT size="+1">AuditCertificateExpiredEventType ........................................................................ 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12255" href="#">
<FONT size="+1">9.17<FONT size="+1"> <FONT size="+1">AuditCertificateInvalidEventType .......................................................................... 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12257" href="#">
<FONT size="+1">9.18<FONT size="+1"> <FONT size="+1">AuditCertificateUntrustedEventType ..................................................................... 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12259" href="#">
<FONT size="+1">9.19<FONT size="+1"> <FONT size="+1">AuditCertificateRevokedEventType ...................................................................... 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12261" href="#">
<FONT size="+1">9.20<FONT size="+1"> <FONT size="+1">AuditCertificateMismatchEventType ..................................................................... 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12263" href="#">
<FONT size="+1">9.21<FONT size="+1"> <FONT size="+1">AuditNodeManagementEventType ........................................................................ 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12265" href="#">
<FONT size="+1">9.22<FONT size="+1"> <FONT size="+1">AuditAddNodesEventType .................................................................................... 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12272" href="#">
<FONT size="+1">9.23<FONT size="+1"> <FONT size="+1">AuditDeleteNodesEventType ................................................................................ 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12280" href="#">
<FONT size="+1">9.24<FONT size="+1"> <FONT size="+1">AuditAddReferencesEventType ............................................................................ 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12287" href="#">
<FONT size="+1">9.25<FONT size="+1"> <FONT size="+1">AuditDeleteReferencesEventType ........................................................................ 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12294" href="#">
<FONT size="+1">9.26<FONT size="+1"> <FONT size="+1">AuditUpdateEventType ......................................................................................... 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12296" href="#">
<FONT size="+1">9.27<FONT size="+1"> <FONT size="+1">AuditWriteUpdateEventType ................................................................................. 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12298" href="#">
<FONT size="+1">9.28<FONT size="+1"> <FONT size="+1">AuditHistoryUpdateEventType .............................................................................. 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12300" href="#">
<FONT size="+1">9.29<FONT size="+1"> <FONT size="+1">AuditUpdateMethodEventType ............................................................................. 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12302" href="#">
<FONT size="+1">9.30<FONT size="+1"> <FONT size="+1">DeviceFailureEventType ....................................................................................... 72</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_12304" href="#">
<FONT size="+1">9.31<FONT size="+1"> <FONT size="+1">SystemStatusChangeEventType .......................................................................... 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12306" href="#">
<FONT size="+1">9.32<FONT size="+1"> <FONT size="+1">ModelChangeEvents ............................................................................................ 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12307" href="#">
<FONT size="+1">9.32.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12309" href="#">
<FONT size="+1">9.32.2<FONT size="+1"> <FONT size="+1">NodeVersion Property ................................................................................... 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12312" href="#">
<FONT size="+1">9.32.3<FONT size="+1"> <FONT size="+1">Views ............................................................................................................ 73</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12317" href="#">
<FONT size="+1">9.32.4<FONT size="+1"> <FONT size="+1">Event Compression ....................................................................................... 73</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12319" href="#">
<FONT size="+1">9.32.5<FONT size="+1"> <FONT size="+1">BaseModelChangeEventType ....................................................................... 73</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12321" href="#">
<FONT size="+1">9.32.6<FONT size="+1"> <FONT size="+1">GeneralModelChangeEventType ................................................................... 73</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12324" href="#">
<FONT size="+1">9.32.7<FONT size="+1"> <FONT size="+1">Guidelines for ModelChangeEvents .............................................................. 73</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12336" href="#">
<FONT size="+1">9.33<FONT size="+1"> <FONT size="+1">SemanticChangeEventType ................................................................................. 74</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12337" href="#">
<FONT size="+1">9.33.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 74</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12346" href="#">
<FONT size="+1">9.33.2<FONT size="+1"> <FONT size="+1">ViewVersion and NodeVersion Properties ..................................................... 74</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12349" href="#">
<FONT size="+1">9.33.3<FONT size="+1"> <FONT size="+1">Views ............................................................................................................ 74</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12356" href="#">
<FONT size="+1">9.33.4<FONT size="+1"> <FONT size="+1">Event Compression ....................................................................................... 74</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12364" href="#">
<FONT size="+1">Annex A (informative)  How to use the Address Space Model ............................................... 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12366" href="#">
<FONT size="+1">A.1<FONT size="+1"> <FONT size="+1">Overview .............................................................................................................. 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12378" href="#">
<FONT size="+1">A.2<FONT size="+1"> <FONT size="+1">Type definitions .................................................................................................... 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12380" href="#">
<FONT size="+1">A.3<FONT size="+1"> <FONT size="+1">ObjectTypes ......................................................................................................... 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12398" href="#">
<FONT size="+1">A.4<FONT size="+1"> <FONT size="+1">VariableTypes ...................................................................................................... 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12399" href="#">
<FONT size="+1">A.4.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12403" href="#">
<FONT size="+1">A.4.2<FONT size="+1"> <FONT size="+1">Properties or DataVariables .......................................................................... 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12434" href="#">
<FONT size="+1">A.4.3<FONT size="+1"> <FONT size="+1">Many Variables and / or structured DataTypes .............................................. 76</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12447" href="#">
<FONT size="+1">A.5<FONT size="+1"> <FONT size="+1">Views ................................................................................................................... 76</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12449" href="#">
<FONT size="+1">A.6<FONT size="+1"> <FONT size="+1">Methods ............................................................................................................... 77</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12459" href="#">
<FONT size="+1">A.7<FONT size="+1"> <FONT size="+1">Defining ReferenceTypes ..................................................................................... 77</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12462" href="#">
<FONT size="+1">A.8<FONT size="+1"> <FONT size="+1">Defining ModellingRules ....................................................................................... 77</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12466" href="#">
<FONT size="+1">Annex B (informative)  OPC UA Meta Model in UML ............................................................. 78</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12468" href="#">
<FONT size="+1">B.1<FONT size="+1"> <FONT size="+1">Background .......................................................................................................... 78</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12486" href="#">
<FONT size="+1">B.2<FONT size="+1"> <FONT size="+1">Notation ............................................................................................................... 78</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12524" href="#">
<FONT size="+1">B.3<FONT size="+1"> <FONT size="+1">Meta Model .......................................................................................................... 79</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12526" href="#">
<FONT size="+1">B.3.1<FONT size="+1"> <FONT size="+1">Base ............................................................................................................. 79</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12537" href="#">
<FONT size="+1">B.3.2<FONT size="+1"> <FONT size="+1">ReferenceType ............................................................................................. 80</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12552" href="#">
<FONT size="+1">B.3.3<FONT size="+1"> <FONT size="+1">Predefined ReferenceTypes .......................................................................... 81</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12558" href="#">
<FONT size="+1">B.3.4<FONT size="+1"> <FONT size="+1">Attributes ...................................................................................................... 81</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12571" href="#">
<FONT size="+1">B.3.5<FONT size="+1"> <FONT size="+1">Object and ObjectType .................................................................................. 82</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12582" href="#">
<FONT size="+1">B.3.6<FONT size="+1"> <FONT size="+1">EventNotifier ................................................................................................. 83</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12592" href="#">
<FONT size="+1">B.3.7<FONT size="+1"> <FONT size="+1">Variable and VariableType ............................................................................ 83</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12610" href="#">
<FONT size="+1">B.3.8<FONT size="+1"> <FONT size="+1">Method .......................................................................................................... 84</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12621" href="#">
<FONT size="+1">B.3.9<FONT size="+1"> <FONT size="+1">DataType ...................................................................................................... 85</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12632" href="#">
<FONT size="+1">B.3.10<FONT size="+1"> <FONT size="+1">View .............................................................................................................. 86</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12642" href="#">
<FONT size="+1">Annex C (normative)  OPC Binary Type Description System................................................. 87</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12644" href="#">
<FONT size="+1">C.1<FONT size="+1"> <FONT size="+1">Concepts .............................................................................................................. 87</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12675" href="#">
<FONT size="+1">C.2<FONT size="+1"> <FONT size="+1">Schema Description ............................................................................................. 88</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12676" href="#">
<FONT size="+1">C.2.1<FONT size="+1"> <FONT size="+1">TypeDictionary .............................................................................................. 88</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12737" href="#">
<FONT size="+1">C.2.2<FONT size="+1"> <FONT size="+1">TypeDescription ............................................................................................ 88</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12789" href="#">
<FONT size="+1">C.2.3<FONT size="+1"> <FONT size="+1">OpaqueType ................................................................................................. 89</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12840" href="#">
<FONT size="+1">C.2.4<FONT size="+1"> <FONT size="+1">EnumeratedType ........................................................................................... 89</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12887" href="#">
<FONT size="+1">C.2.5<FONT size="+1"> <FONT size="+1">StructuredType ............................................................................................. 90</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12930" href="#">
<FONT size="+1">C.2.6<FONT size="+1"> <FONT size="+1">FieldType ...................................................................................................... 90</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_13106" href="#">
<FONT size="+1">C.2.7<FONT size="+1"> <FONT size="+1">EnumeratedValue ......................................................................................... 92</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13141" href="#">
<FONT size="+1">C.2.8<FONT size="+1"> <FONT size="+1">ByteOrder ..................................................................................................... 92</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13143" href="#">
<FONT size="+1">C.2.9<FONT size="+1"> <FONT size="+1">ImportDirective .............................................................................................. 92</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13178" href="#">
<FONT size="+1">C.3<FONT size="+1"> <FONT size="+1">Standard Type Descriptions ................................................................................. 92</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13331" href="#">
<FONT size="+1">C.4<FONT size="+1"> <FONT size="+1">Type Description Examples .................................................................................. 93</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13431" href="#">
<FONT size="+1">C.5<FONT size="+1"> <FONT size="+1">OPC Binary XML Schema..................................................................................... 94</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13552" href="#">
<FONT size="+1">C.6<FONT size="+1"> <FONT size="+1">OPC Binary Standard TypeDictionary ................................................................... 96</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13661" href="#">
<FONT size="+1">Annex D (normative)  Graphical Notation ............................................................................. 98</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13663" href="#">
<FONT size="+1">D.1<FONT size="+1"> <FONT size="+1">General ................................................................................................................ 98</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13666" href="#">
<FONT size="+1">D.2<FONT size="+1"> <FONT size="+1">Notation ............................................................................................................... 98</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13667" href="#">
<FONT size="+1">D.2.1<FONT size="+1"> <FONT size="+1">Overview ....................................................................................................... 98</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13670" href="#">
<FONT size="+1">D.2.2<FONT size="+1"> <FONT size="+1">Simple Notation ............................................................................................ 98</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13876" href="#">
<FONT size="+1">D.2.3<FONT size="+1"> <FONT size="+1">Extended Notation ........................................................................................ 99</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1">  </DIV
></DIV
><P 

><B>  </P
><H1 
 ID="LinkTarget_4966"
>FIGURES </H1
><DIV class="TOC" 

><DIV class="TOCI" 

></B> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5927" href="#">
Figure 1 &ndash; AddressSpace Node diagrams ............................................................................... 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6115" href="#">
<FONT size="+1">Figure 2 &ndash; OPC UA Object Model ........................................................................................... 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6137" href="#">
<FONT size="+1">Figure 3 &ndash; AddressSpace Node Model.................................................................................... 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6202" href="#">
<FONT size="+1">Figure 4 &ndash; Reference Model ................................................................................................... 6</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6258" href="#">
<FONT size="+1">Figure 5 &ndash; Example of a Variable defined by a VariableType .................................................. 8</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6276" href="#">
<FONT size="+1">Figure 6 &ndash; Example of a Complex TypeDefinition ................................................................... 8</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6315" href="#">
<FONT size="+1">Figure 7 &ndash; Object and its Components defined by an ObjectType ......................................... 10</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7016" href="#">
<FONT size="+1">Figure 8 &ndash; Symmetric and Non-Symmetric References ......................................................... 16</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9166" href="#">
<FONT size="+1">Figure 9 &ndash; Variables, VariableTypes and their DataTypes .................................................... 32</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9195" href="#">
<FONT size="+1">Figure 10 &ndash; DataType Model ................................................................................................ 33</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9506" href="#">
<FONT size="+1">Figure 11 &ndash; Example of DataType Modelling ........................................................................ 38</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10087" href="#">
<FONT size="+1">Figure 12 &ndash; Subtyping TypeDefinitionNodes ......................................................................... 41</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10654" href="#">
<FONT size="+1">Figure 13 &ndash; The Fully-Inherited InstanceDeclarationHierarchy for BetaType ......................... 43</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10710" href="#">
<FONT size="+1">Figure 14 &ndash; An Instance and its TypeDefinitionNode ............................................................ 44</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10742" href="#">
<FONT size="+1">Figure 15 &ndash; Example for several References between InstanceDeclarations ......................... 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10857" href="#">
<FONT size="+1">Figure 16 &ndash; Example on changing instances based on InstanceDeclarations ........................ 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10875" href="#">
<FONT size="+1">Figure 17 &ndash; Example on changing InstanceDeclarations based  on an InstanceDeclaration .. 48</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10940" href="#">
<FONT size="+1">Figure 18 &ndash; Use of the Standard ModellingRule New ............................................................ 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10963" href="#">
<FONT size="+1">Figure 19 &ndash; Example using the Standard ModellingRules Optional and Mandatory ............... 50</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10979" href="#">
<FONT size="+1">Figure 20 &ndash; Example on using ExposesItsArray .................................................................... 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10990" href="#">
<FONT size="+1">Figure 21 &ndash; Complex example on using ExposesItsArray...................................................... 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11002" href="#">
<FONT size="+1">Figure 22 &ndash; Example on using OptionalPlaceholder .............................................................. 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11020" href="#">
<FONT size="+1">Figure 23 &ndash; Example on using MandatoryPlaceholder .......................................................... 52</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11054" href="#">
<FONT size="+1">Figure 24 &ndash; Standard ReferenceType Hierarchy ................................................................... 53</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11219" href="#">
<FONT size="+1">Figure 25 &ndash; Event Reference Example ................................................................................. 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11231" href="#">
<FONT size="+1">Figure 26 &ndash; Complex Event Reference Example ................................................................... 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12152" href="#">
<FONT size="+1">Figure 27 &ndash; Standard EventType Hierarchy .......................................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12174" href="#">
<FONT size="+1">Figure 28 &ndash; Audit Behaviour of a Server ............................................................................... 69</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12186" href="#">
<FONT size="+1">Figure 29 &ndash; Audit Behaviour of an Aggregating Server ......................................................... 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12483" href="#">
<FONT size="+1">Figure B.1 &ndash; Background of OPC UA Meta Model ................................................................. 78</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12500" href="#">
<FONT size="+1">Figure B.2 &ndash; Notation (I) ....................................................................................................... 79</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12509" href="#">
<FONT size="+1">Figure B.3 &ndash; Notation (II) ...................................................................................................... 79</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12536" href="#">
<FONT size="+1">Figure B.4 &ndash; Base ................................................................................................................ 80</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12550" href="#">
<FONT size="+1">Figure B.5 &ndash; Reference and ReferenceType ......................................................................... 80</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12557" href="#">
<FONT size="+1">Figure B.6 &ndash; Predefined ReferenceTypes ............................................................................. 81</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12568" href="#">
<FONT size="+1">Figure B.7 &ndash; Attributes ......................................................................................................... 82</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12581" href="#">
<FONT size="+1">Figure B.8 &ndash; Object and ObjectType ..................................................................................... 83</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12591" href="#">
<FONT size="+1">Figure B.9 &ndash; EventNotifier .................................................................................................... 83</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12602" href="#">
<FONT size="+1">Figure B.10 &ndash; Variable and VariableType ............................................................................. 84</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12620" href="#">
<FONT size="+1">Figure B.11 &ndash; Method ........................................................................................................... 85</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12631" href="#">
<FONT size="+1">Figure B.12 &ndash; DataType ....................................................................................................... 86</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_12641" href="#">
<FONT size="+1">Figure B.13 &ndash; View ............................................................................................................... 86</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12658" href="#">
<FONT size="+1">Figure C.1 &ndash; OPC Binary Dictionary Structure ...................................................................... 87</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13779" href="#">
<FONT size="+1">Figure D.1 &ndash; Example of a Reference connecting two Nodes ................................................ 99</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13897" href="#">
<FONT size="+1">Figure D.3 &ndash; Example of using a TypeDefinition inside a Node ........................................... 100</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13908" href="#">
<FONT size="+1">Figure D.4 &ndash; Example of exposing Attributes ...................................................................... 100</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13920" href="#">
<FONT size="+1">Figure D.5 &ndash; Example of exposing Properties inline ............................................................ 101</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1">  </DIV
></DIV
><P 

><B>  </P
><H1 
 ID="LinkTarget_5209"
>TABLES </H1
><DIV class="TOC" 

><DIV class="TOCI" 

></B> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5944" href="#">
Table 1 &ndash; NodeClass Table Conventions ................................................................................ 4</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6412" href="#">
<FONT size="+1">Table 2 &ndash; Base NodeClass ................................................................................................... 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6618" href="#">
<FONT size="+1">Table 3 &ndash; Bit mask for WriteMask and UserWriteMask .......................................................... 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6842" href="#">
<FONT size="+1">Table 4 &ndash; ReferenceType NodeClass ................................................................................... 15</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7079" href="#">
<FONT size="+1">Table 5 &ndash; View NodeClass ................................................................................................... 18</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7319" href="#">
<FONT size="+1">Table 6 &ndash; Object NodeClass ................................................................................................. 20</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7669" href="#">
<FONT size="+1">Table 7 &ndash; ObjectType NodeClass ......................................................................................... 22</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7928" href="#">
<FONT size="+1">Table 8 &ndash; Variable NodeClass .............................................................................................. 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8642" href="#">
<FONT size="+1">Table 9 &ndash; VariableType NodeClass ...................................................................................... 29</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8921" href="#">
<FONT size="+1">Table 10 &ndash; Method NodeClass ............................................................................................. 31</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9286" href="#">
<FONT size="+1">Table 11 &ndash; DataType NodeClass .......................................................................................... 35</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9521" href="#">
<FONT size="+1">Table 12 &ndash; Overview of Attributes ......................................................................................... 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10094" href="#">
<FONT size="+1">Table 13 &ndash; The InstanceDeclarationHierarchy for BetaType ................................................. 42</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10309" href="#">
<FONT size="+1">Table 14 &ndash; The Fully-Inherited InstanceDeclarationHierarchy for BetaType .......................... 42</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10810" href="#">
<FONT size="+1">Table 15 &ndash; Rule for ModellingRules Properties when Subtyping ........................................... 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10890" href="#">
<FONT size="+1">Table 16 &ndash; Properties of ModellingRules .............................................................................. 48</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11253" href="#">
<FONT size="+1">Table 17 &ndash; NodeId Definition ................................................................................................ 59</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11337" href="#">
<FONT size="+1">Table 18 &ndash; IdentifierType Values .......................................................................................... 59</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11392" href="#">
<FONT size="+1">Table 19 &ndash; NodeId Null Values ............................................................................................. 60</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11433" href="#">
<FONT size="+1">Table 20 &ndash; QualifiedName Definition .................................................................................... 60</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11515" href="#">
<FONT size="+1">Table 21 &ndash;LocaleId Examples............................................................................................... 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11563" href="#">
<FONT size="+1">Table 22 &ndash; LocalizedText Definition ...................................................................................... 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11605" href="#">
<FONT size="+1">Table 23 &ndash; Argument Definition ............................................................................................ 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11824" href="#">
<FONT size="+1">Table 24 &ndash; TimeZoneDataType Definition ............................................................................. 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11870" href="#">
<FONT size="+1">Table 25 &ndash; NamingRuleType Values ..................................................................................... 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11896" href="#">
<FONT size="+1">Table 26 &ndash; NodeClass Values .............................................................................................. 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11984" href="#">
<FONT size="+1">Table 27 &ndash; EnumValueType Definition .................................................................................. 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12036" href="#">
<FONT size="+1">Table 28 &ndash; OptionSet Definition ............................................................................................ 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12683" href="#">
<FONT size="+1">Table C.1 &ndash; TypeDictionary Components .............................................................................. 88</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12744" href="#">
<FONT size="+1">Table C.2 &ndash; TypeDescription Components ............................................................................ 89</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12797" href="#">
<FONT size="+1">Table C.3 &ndash; OpaqueType Components ................................................................................. 89</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12849" href="#">
<FONT size="+1">Table C.4 &ndash; EnumeratedType Components .......................................................................... 90</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12898" href="#">
<FONT size="+1">Table C.5 &ndash; StructuredType Components ............................................................................. 90</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12940" href="#">
<FONT size="+1">Table C.6 &ndash; FieldType Components...................................................................................... 91</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13114" href="#">
<FONT size="+1">Table C.7 &ndash; EnumeratedValue Components ......................................................................... 92</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13151" href="#">
<FONT size="+1">Table C.8 &ndash; ImportDirective Components ............................................................................. 92</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13185" href="#">
<FONT size="+1">Table C.9 &ndash; Standard Type Descriptions .............................................................................. 93</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13677" href="#">
<FONT size="+1">Table D.1 &ndash; Notation of Nodes depending on the NodeClass ................................................ 98</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13785" href="#">
<FONT size="+1">Table D.2 &ndash; Simple Notation of Nodes depending on the NodeClass .................................... 99</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1"> </DIV
></DIV
><P 

><FONT size="+1"><B>OPC FOUNDATION </P
><P 

><FONT size="+1"></B>____________ </P
><P 

><FONT size="+1"><B> </P
><P 

>UNIFIED ARCHITECTURE &ndash;  </P
><P 

><FONT size="+1">FOREWORD </P
><P 

><FONT size="+1"></B>This specification is the specification for developers of OPC UA applications. The specification is a result of an analysis and design process to develop a standard interface to facilitate the development of applications by multiple vendors that shall inter-operate seamlessly together.  </P
><P 

><B>Copyright &copy; 2006-2015, OPC Foundation, Inc. </P
><P 

><FONT size="+1">AGREEMENT OF USE </P
><P 

><FONT size="+1"></B>COPYRIGHT RESTRICTIONS </P
><P 

>Any unauthorized use of this specification may violate copyright laws, trademark laws, and communications regulations and statutes. This document contains information which is protected by copyright. All Rights Reserved. No part of this work covered by copyright herein may be reproduced or used in any form or by any means--graphic, electronic, or mechanical, including photocopying, recording, taping, or information storage and retrieval systems--without permission of the copyright owner. </P
><P 

>OPC Foundation members and non-members are prohibited from copying and redistributing this specification. All copies must be obtained on an individual basis, directly from the OPC Foundation Web site <FONT size="+1">H<A href="http://www.opcfoundation.org/">
TU<FONT size="+1">http://www.opcfoundation.org<FONT size="+1">UT</A>
H<FONT size="+1">. </P
><P 

>PATENTS </P
><P 

>The attention of adopters is directed to the possibility that compliance with or adoption of OPC specifications may require use of an invention covered by patent rights. OPC shall not be responsible for identifying patents for which a license may be required by any OPC specification, or for conducting legal inquiries into the legal validity or scope of those patents that are brought to its attention. OPC specifications are prospective and advisory only. Prospective users are responsible for protecting themselves against liability for infringement of patents. </P
><P 

>WARRANTY AND LIABILITY DISCLAIMERS </P
><P 

>WHILE THIS PUBLICATION IS BELIEVED TO BE ACCURATE, IT IS PROVIDED &quot;AS IS&quot; AND MAY CONTAIN ERRORS OR MISPRINTS. THE OPC FOUDATION MAKES NO WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, WITH REGARD TO THIS PUBLICATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTY OF TITLE OR OWNERSHIP, IMPLIED WARRANTY OF MERCHANTABILITY OR WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE OR USE. IN NO EVENT SHALL THE OPC FOUNDATION BE LIABLE FOR ERRORS CONTAINED HEREIN OR FOR DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, RELIANCE OR COVER DAMAGES, INCLUDING LOSS OF PROFITS, REVENUE, DATA OR USE, INCURRED BY ANY USER OR ANY THIRD PARTY IN CONNECTION WITH THE FURNISHING, PERFORMANCE, OR USE OF THIS MATERIAL, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. </P
><P 

>The entire risk as to the quality and performance of software developed using this specification is borne by you.  </P
><P 

>RESTRICTED RIGHTS LEGEND </P
><P 

>This Specification is provided with Restricted Rights. Use, duplication or disclosure by the U.S. government is subject to restrictions as set forth in (a) this Agreement pursuant to DFARs 227.7202-3(a); (b) subparagraph (c)(1)(i) of the Rights in Technical Data and Computer Software clause at DFARs 252.227-7013; or (c) the Commercial Computer Software Restricted Rights clause at FAR 52.227-19 subdivision (c)(1) and (2), as applicable. Contractor / manufacturer are the OPC Foundation,. 16101 N. 82nd Street, Suite 3B, Scottsdale, AZ, 85260-1830 </P
><P 

>COMPLIANCE </P
><P 

>The OPC Foundation shall at all times be the sole entity that may authorize developers, suppliers and sellers of hardware and software to use certification marks, trademarks or other special designations to indicate compliance with these materials. Products developed using this specification may claim compliance or conformance with this specification if and only if the software satisfactorily meets the certification requirements set by the OPC Foundation. Products that do not meet these requirements may claim only that the product was based on this specification and must not claim compliance or conformance with this specification.  </P
><P 

>TRADEMARKS </P
><P 

>Most computer and software brand names have trademarks or registered trademarks. The individual trademarks have not been listed here. </P
><P 

>GENERAL PROVISIONS </P
><P 

>Should any provision of this Agreement be held to be void, invalid, unenforceable or illegal by a court, the validity and enforceability of the other provisions shall not be affected thereby.  </P
><P 

>This Agreement shall be governed by and construed under the laws of the State of Minnesota, excluding its choice or law rules. </P
><P 

>This Agreement embodies the entire understanding between the parties with respect to, and supersedes any prior understanding or agreement (oral or written) relating to, this specification.  </P
><P 

>ISSUE REPORTING </P
><P 

>The OPC Foundation strives to maintain the highest quality standards for its published specifications, hence they undergo constant review and refinement. Readers are encouraged to report any issues and view any existing errata here: <FONT size="+1">H<A href="http://www.opcfoundation.org/errata">
TU<FONT size="+1">http://www.opcfoundation.org/errata<FONT size="+1">UT</A>
H </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Revision 1.03 Highlights </P
><P 

></B>The following table includes the Mantis issues resolved with this revision.  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><B>Mantis ID </P
></TD
><TD  
 valign="top"
><P 

>Summary </P
></TD
><TD  
 valign="top"
><P 

>Resolution </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2247">
<FONT color="#0000FF"></B>2247</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><A href="#LinkTarget_12152" href="#">
Figure 27</A>
 uses wrong name for EventType. </P
></TD
><TD  
 valign="top"
><P 

>Changed figure to use the correct name. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2374">
<FONT color="#0000FF">2374</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Invalid use of complex data type. </P
></TD
><TD  
 valign="top"
><P 

>The specification was using the wrong terminology in some places. This has been fixed always using the right terminology.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2451">
<FONT color="#0000FF">2451</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Missing information in example. </P
></TD
><TD  
 valign="top"
><P 

>In <A href="#LinkTarget_10949" href="#">
6.4.4.5.3</A>
 the example had an incomplete sentence and a missing possible combination (A14) that was added. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2514">
<FONT color="#0000FF">2514</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Need for alternative notation for type definition shortcut. </P
></TD
><TD  
 valign="top"
><P 

>Added an alternative notation to <A href="#LinkTarget_13876" href="#">
D.2.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2427">
<FONT color="#0000FF">2427</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Use Enumerations for Flags </P
></TD
><TD  
 valign="top"
><P 

>OptionSet DataType added in <A href="#LinkTarget_12028" href="#">
8.41</A>
 supporting bitmasks for enumerations and Property OptionSetValues to DataType NodeClass in <A href="#LinkTarget_9279" href="#">
5.8.3</A>
.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2600">
<FONT color="#0000FF">2600</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>How to detect that status and timestamp is writeable </P
></TD
><TD  
 valign="top"
><P 

>Added status bits to AccessLevel and UserAccessLevel in <A href="#LinkTarget_7928" href="#">
Table 8</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2601">
<FONT color="#0000FF">2601</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Clarification on how to define MaxArrayLength for array of bytes </P
></TD
><TD  
 valign="top"
><P 

>Added clarification that in that case not ByteString but array of Bytes shall be used in <A href="#LinkTarget_7928" href="#">
Table 8</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2727">
<FONT color="#0000FF">2727</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Add support for Union DataType </P
></TD
><TD  
 valign="top"
><P 

>Added abstract DataType Union in <A href="#LinkTarget_12079" href="#">
8.42</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2834">
<FONT color="#0000FF">2834</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Improve description of EnumValueType </P
></TD
><TD  
 valign="top"
><P 

>Improved the description in <A href="#LinkTarget_11977" href="#">
8.40</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2842">
<FONT color="#0000FF">2842</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Clarification on case sensitivity of BrowseNames </P
></TD
><TD  
 valign="top"
><P 

>Added clarification in <A href="#LinkTarget_6567" href="#">
5.2.4</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2215">
<FONT color="#0000FF">2215</A>
 </P
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2075">
2075</A>
 </P
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2065">
2065</A>
 </P
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2064">
2064</A>
 </P
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2063">
2063</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Add data types NormalizedString, DecimalString, DurrationString, TimeString and DateString </P
></TD
><TD  
 valign="top"
><P 

>Added sections <A href="#LinkTarget_12081" href="#">
8.43</A>
, <A href="#LinkTarget_12086" href="#">
8.44</A>
, <A href="#LinkTarget_12089" href="#">
8.45</A>
, <A href="#LinkTarget_12114" href="#">
8.46</A>
, and <A href="#LinkTarget_12117" href="#">
8.47</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=3016">
<FONT color="#0000FF">3016</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Clarification on DataTypeDictionaries </P
></TD
><TD  
 valign="top"
><P 

>Removed misleading example in <A href="#LinkTarget_9473" href="#">
5.8.4</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=3015">
<FONT color="#0000FF">3015</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Make inverse relationship from DataTypeDictionary to DataTypeEncoding mandatory. </P
></TD
><TD  
 valign="top"
><P 

>Changed <A href="#LinkTarget_9473" href="#">
5.8.4</A>
 and made inverse relationship mandatory in order to simplify data type handling for clients. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2998">
<FONT color="#0000FF">2998</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Clarifiaction on Structure DataType </P
></TD
><TD  
 valign="top"
><P 

>Removed sentence in <A href="#LinkTarget_11939" href="#">
8.33</A>
 as more concrete sentence about inheritance is already in <A href="#LinkTarget_9223" href="#">
5.8.2</A>
 </P
></TD
></TR
></TABLE
><P 

> </P
><P 

> </P
><P 

><FONT size="+1"><B>OPC Unified Architecture Specification </P
><P 

><FONT size="+1"></B> </P
><P 

><FONT size="+1"><B>Part 3: Address Space Model </P
><P 

> </P
><P 

> </P
><P 

> </P
><H1 
 ID="LinkTarget_5751"
><FONT size="+1">1 Scope </H1
><P 

><FONT size="+1"></B>This specification describes the OPC Unified Architecture (OPC UA) <I>AddressSpace</I> and its <I>Objects</I>. This Part is the OPC UA meta model on which OPC UA information models are based. </P
><H1 
 ID="LinkTarget_5753"
><FONT size="+1"><B>2 Normative references </H1
><P 

><FONT size="+1"></B>The following documents, in whole or in part, are normatively referenced in this document and are indispensable for its application. </P
><P 

>Part 1: OPC UA Specification: Part 1 &ndash; Overview and Concepts  </P
><P 

>http://www.opcfoundation.org/UA/Part1/ </P
><P 

>Part 2: OPC UA Specification: Part 2 &ndash; Security Model </P
><P 

>http://www.opcfoundation.org/UA/Part2/ </P
><P 

>Part 4: OPC UA Specification: Part 4 &ndash; Services </P
><P 

>http://www.opcfoundation.org/UA/Part4/ </P
><P 

>Part 5: OPC UA Specification: Part 5 &ndash; Information Model </P
><P 

>http://www.opcfoundation.org/UA/Part5/ </P
><P 

>Part 6: OPC UA Specification: Part 6 &ndash; Mappings </P
><P 

>http://www.opcfoundation.org/UA/Part6/ </P
><P 

>Part 8: OPC UA Specification: Part 8 &ndash; Data Access </P
><P 

><A href="http://www.opcfoundation.org/UA/Part8/">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/Part8/</A>
<FONT color="#000000"> </P
><P 

>Part 9: OPC UA Specification: Part 9 &ndash; Alarms and conditions </P
><P 

>http://www.opcfoundation.org/UA/Part9/ </P
><P 

>Part 11: OPC UA Specification: Part 11 &ndash; Historical Access </P
><P 

>http://www.opcfoundation.org/UA/Part11/ </P
><P 

>ISO/IEC 10918-1, <I>Information technology </I><I>&ndash;</I><I> Digital compression and coding of continuous-tone still images: Requirements and guidelines </I></P
><P 

>ISO/IEC 15948,<I> Information technology </I><I>&ndash;</I><I> Computer graphics and image processing </I><I>&ndash;</I><I> Portable Network Graphics (PNG): Functional specification </I></P
><P 

>ISO 639 (all parts), <I>Codes for the representation of names of languages </I></P
><P 

>ISO 3166 (all parts), <I>Codes for the representation of names of countries and their subdivisions </I></P
><P 

>IEEE 754-1985, <I>IEEE Standard for Binary Floating-Point Arithmetic</I>,<A href="http://ieeexplore.ieee.org/servlet/opac?punumber=2355">
<FONT color="#0000FF">http://ieeexplore.ieee.org/servlet/opac?punumber=2355</A>
<FONT color="#000000"> </P
><P 

>IETF RFC 3066, <I>Tags for the Identification of Languages,</I> <FONT color="#0000FF">http://tools.ietf.org/html/rfc3066<FONT color="#000000"> </P
><P 

>XML Schema Part 1: <A href="http://www.w3.org/TR/xmlschema-1/">
<FONT color="#0000FF">http://www.w3.org/TR/xmlschema-1/</A>
<FONT color="#000000"> </P
><P 

>XML Schema Part 2: <A href="http://www.w3.org/TR/xmlschema-2/">
<FONT color="#0000FF">http://www.w3.org/TR/xmlschema-2/</A>
<FONT color="#000000"> </P
><P 

>XPATH: <A href="http://www.w3.org/TR/xpath/">
<FONT color="#0000FF">http://www.w3.org/TR/xpath/</A>
 </P
><P 

><FONT color="#000000">ISO 8601-2000: Data elements and interchange formats </P
><P 

>Unicode: Annex15: Unicode Standard Annex #15: Unicode Normalization Forms <A href="http://www.unicode.org/reports/tr15/">
<FONT color="#0000FF">http://www.unicode.org/reports/tr15/</A>
<FONT color="#000000">. </P
><P 

>W3C XML Schema Definition Language (XSD)  </P
><H1 
 ID="LinkTarget_5813"
><FONT size="+1"><B>3 Terms, definitions, abbreviations and conventions </H1
><H2 
 ID="LinkTarget_5814"
>3.1 Terms and definitions </H2
><P 

><FONT size="+1"></B>For the purposes of this document, the terms and definitions given in <A href="#LinkTarget_5755" href="#">
Part 1</A>
 as well as the following apply. </P
><DL 

><DL 

><DL 

><DD 

><B>3.1.1  </DD
></DL
></DL
></DL
><P 

>DataType </P
><P 

></B>instance of a <I>DataType Node</I> that is used together with the <I>ValueRank</I> <I>Attribute</I> to define the data type of a <I>Variable</I> </P
><DL 

><DL 

><DL 

><DD 

><B>3.1.2  </DD
></DL
></DL
></DL
><P 

>DataTypeId </P
><P 

></B><I>NodeId</I> of a <I>DataType Node</I> </P
><DL 

><DL 

><DL 

><DD 

><B>3.1.3  </DD
></DL
></DL
></DL
><P 

>DataVariable </P
><P 

></B><I>Variables</I> that represent <I>values</I> of <I>Objects</I>, either directly or indirectly for complex <I>Variables</I>, where the <I>Variables</I> are always the <I>TargetNode</I> of a <I>HasComponent Reference</I> </P
><DL 

><DL 

><DL 

><DD 

><B>3.1.4  </DD
></DL
></DL
></DL
><P 

>EventType </P
><P 

></B><I>ObjectType</I> <I>Node</I> that represents the type definition of an <I>Event</I> </P
><DL 

><DL 

><DL 

><DD 

><B>3.1.5  </DD
></DL
></DL
></DL
><P 

>hierarchical Reference </P
><P 

></B><I>Reference</I> that is used to construct hierarchies in the <I>AddressSpace</I> </P
><P 

><FONT size="+1">Note 1 to entry: All hierarchical ReferenceTypes are derived from HierarchicalReferences. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.6  </DD
></DL
></DL
></DL
><P 

>InstanceDeclaration </P
><P 

></B><I>Node</I> that is used by a complex <I>TypeDefinitionNode</I> to expose its complex structure </P
><P 

><FONT size="+1">Note 1 to entry: It is an instance used by a type definition. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.7  </DD
></DL
></DL
></DL
><P 

>ModellingRule </P
><P 

></B>metadata of an <I>InstanceDeclaration</I> that defines how the <I>InstanceDeclaration</I> will be used for instantiation and also defines subtyping rules for an <I>InstanceDeclaration</I> </P
><DL 

><DL 

><DL 

><DD 

><B>3.1.8  </DD
></DL
></DL
></DL
><P 

>Property </P
><P 

></B><I>Variables</I> that are the <I>TargetNode</I> for a <I>HasProperty Reference</I>  </P
><P 

><FONT size="+1">Note 1 to entry:<I> Properties</I> describe the characteristics of a <I>Node.</I> </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.9  </DD
></DL
></DL
></DL
><P 

>SourceNode </P
><P 

></B><I>Node</I> having a <I>Reference</I> to another <I>Node</I>  </P
><P 

><FONT size="+1">EXAMPLE: In the <I>Reference</I> &ldquo;A contains B&rdquo;, &ldquo;A&rdquo; is the <I>SourceNode.</I> </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.10  </DD
></DL
></DL
></DL
><P 

>TargetNode </P
><P 

></B><I>Node</I> that is referenced by another <I>Node</I>  </P
><P 

><FONT size="+1">EXAMPLE: In the <I>Reference</I> &ldquo;A Contains B&rdquo;, &ldquo;B&rdquo; is the <I>TargetNode.</I> </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.11  </DD
></DL
></DL
></DL
><P 

>TypeDefinitionNode </P
><P 

></B><I>Node</I> that is used to define the type of another <I>Node</I> </P
><P 

><FONT size="+1">Note 1 to entry: <I>ObjectType</I> and <I>VariableType</I> <I>Nodes</I> are <I>TypeDefinitionNodes</I>. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.12  </DD
></DL
></DL
></DL
><P 

>VariableType </P
><P 

></B><I>Node</I> that represents the type definition for a <I>Variable</I> </P
><H2 
 ID="LinkTarget_5912"
><FONT size="+1"><B>3.2 Abbreviations </H2
><P 

><FONT size="+1"></B>UA Unified Architecture </P
><P 

>UML Unified Modeling Language </P
><P 

>URI Uniform Resource Identifier </P
><P 

>W3C World Wide Web Consortium </P
><P 

>XML Extensible Markup Language </P
><H2 
 ID="LinkTarget_5918"
><FONT size="+1"><B>3.3 Conventions </H2
><H3 
 ID="LinkTarget_5919"
><FONT size="+1">3.3.1 Conventions for AddressSpace figures </H3
><P 

></B><I>Nodes</I> and their <I>References</I> to each other are illustrated using figures. <A href="#LinkTarget_5927" href="#">
Figure 1</A>
 illustrates the conventions used in these figures. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Node Class Browse Name  References  HasComponent  *  *  Attributes   ____  ____  ____ TargetNode HasComponent TargetNode </DIV
></P
><P 

><B>Figure 1 &ndash; AddressSpace Node diagrams </P
><P 

></B>In these figures, rectangles represent <I>Nodes</I>. <I>Node</I> rectangles may be titled with one or two lines of text. When two lines are used, the first text line in the rectangle identifies the <I>NodeClass</I> and the second line contains the <I>BrowseName</I>. When one line is used, it contains the <I>BrowseName</I>. </P
><P 

><I>Node</I> rectangles may contain boxes used to define their <I>Attributes</I> and <I>References</I>. Specific names in these boxes identify specific <I>Attributes</I> and <I>References</I>. </P
><P 

>Shaded rectangles with rounded corners and with arrows passing through them represent <I>References</I>. The arrow that passes through them begins at the <I>SourceNode</I> and points to the <I>TargetNode</I>. <I>References</I> may also be shown by drawing an arrow that starts at the <I>Reference</I> name in the &ldquo;References&rdquo; box and ends at the <I>TargetNode</I>. </P
><H3 
 ID="LinkTarget_5933"
><B>3.3.2 Conventions for defining NodeClasses </H3
><P 

></B>Clause <A href="#LinkTarget_6387" href="#">
5</A>
 defines <I>AddressSpace NodeClasses</I>. <A href="#LinkTarget_5944" href="#">
Table 1</A>
 describes the format of the tables used to define <I>NodeClasses</I>. </P
><P 

><B>Table 1 &ndash; NodeClass Table Conventions </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Use </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Attributes </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> &ldquo;Attribute name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;M&rdquo; or &ldquo;O&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Data type of the <I>Attribute</I> </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attribute</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> &ldquo;Reference name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;1&rdquo;, &ldquo;0..1&rdquo; or &ldquo;0..*&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Not used </P
></TD
><TD  
 valign="top"
><P 

>Describes the use of the <I>Reference</I> by the <I>NodeClass</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Standard Properties </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> &ldquo;Property name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;M&rdquo; or &ldquo;O&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Data type of the <I>Property</I> </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Property</I> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The Name column contains the name of the <I>Attribute</I>, the name of the <I>ReferenceType</I> used to create a <I>Reference</I> or the name of a <I>Property</I> referenced using the <I>HasProperty Reference</I>. </P
><P 

>The Use column defines whether the <I>Attribute</I> or <I>Property</I> is mandatory (M) or optional (O). When mandatory the <I>Attribute</I> or <I>Property</I> shall exist for every <I>Node</I> of the <I>NodeClass</I>. For <I>References</I> it specifies the cardinality. The following values may apply: </P
><DL 

><DD 

>&#61623; &ldquo;0..*&rdquo; identifies that there are no restrictions, that is, the <I>Reference</I> does not have to be provided but there is no limitation how often it can be provided; </DD
><DD 

>&#61623; &ldquo;0..1&rdquo; identifies that the <I>Reference</I> is provided at most once; </DD
><DD 

>&#61623; &ldquo;1&rdquo; identifies that the <I>Reference</I> shall be provided exactly once. </DD
></DL
><P 

>The Data Type column contains the name of the <I>DataType</I> of the <I>Attribute</I> or <I>Property</I>. It is not used for <I>References</I>. </P
><P 

>The Description column contains the description of the <I>Attribute</I>, the <I>Reference</I> or the <I>Property</I>. </P
><P 

>Only this standard may define <I>Attributes</I>. Thus, all <I>Attributes</I> of the <I>NodeClass</I> are specified in the table and can only be extended by other parts of this series of standards. </P
><P 

>This standard also defines <I>ReferenceTypes</I>, but <I>ReferenceTypes</I> can also be specified by a <I>Server</I> or by a client using the <I>NodeManagement Services</I> specified in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. Thus, the <I>NodeClass</I> tables contained in this standard can contain the base <I>ReferenceType</I> called <I>References</I> identifying that any <I>ReferenceType</I> may be used for the <I>NodeClass, </I>including system specific <I>ReferenceTypes</I>. The <I>NodeClass</I> tables only specify how the <I>NodeClasses</I> can be used as <I>SourceNodes</I> of <I>References</I>, not as <I>TargetNodes</I>. If a <I>NodeClass</I> table allows a <I>ReferenceType</I> for its <I>NodeClass</I> to be used as <I>SourceNode</I>, this is also true for subtypes of the <I>ReferenceType</I>. However, subtypes of the <I>ReferenceType</I> may restrict its <I>SourceNodes</I>. </P
><P 

>This standard defines <I>Properties</I>, but <I>Properties</I> can be defined by other standard organizations or vendors and <I>Nodes</I> can have <I>Properties</I> that are not standardised. <I>Properties</I> defined in this standard are defined by their name, which is mapped to the <I>BrowseName</I> having the <I>NamespaceIndex</I> 0, which represents the <I>Namespace</I> for OPC UA. </P
><P 

>The Use column (optional or mandatory) does not imply a specific <I>ModellingRule</I> for <I>Properties</I>. Different <I>Server</I> implementations will choose to use <I>ModellingRules</I> appropriate for them. </P
><H1 
 ID="LinkTarget_6059"
><FONT size="+1"><B>4 AddressSpace concepts </H1
><H2 
 ID="LinkTarget_6060"
>4.1 Overview </H2
><P 

><FONT size="+1"></B>The remainder of <A href="#LinkTarget_6059" href="#">
4</A>
 defines the concepts of the <I>AddressSpace</I>. Clause <A href="#LinkTarget_6387" href="#">
5</A>
 defines the <I>NodeClasses</I> of the <I>AddressSpace</I> representing the <I>AddressSpace</I> concepts. Clause <A href="#LinkTarget_9984" href="#">
6</A>
 defines details on the type model for <I>ObjectTypes</I> and <I>VariableTypes</I>. Standard <I>ReferenceTypes</I>, <I>DataTypes</I> and <I>EventTypes</I> are defined in Clauses <A href="#LinkTarget_11034" href="#">
7</A>
 to <A href="#LinkTarget_12131" href="#">
9</A>
. </P
><P 

>The informative <A href="#LinkTarget_12364" href="#">
Annex A</A>
 describes general considerations on how to use the Address Space Model and the informative <A href="#LinkTarget_12466" href="#">
Annex B</A>
 provides a UML Model of the Address Space Model. The </P
><P 

>normative <A href="#LinkTarget_12642" href="#">
Annex C</A>
 defines the OPC Binary Types Description System as a format to specify data type structures and the normative <A href="#LinkTarget_13661" href="#">
Annex D</A>
 defines a graphical notation for OPC UA data. </P
><H2 
 ID="LinkTarget_6104"
><FONT size="+1"><B>4.2 Object Model </H2
><P 

><FONT size="+1"></B>The primary objective of the OPC UA <I>AddressSpace</I> is to provide a standard way for <I>Servers</I> to represent <I>Objects</I> to <I>Clients</I>. The OPC UA Object Model has been designed to meet this objective. It defines <I>Objects</I> in terms of <I>Variables</I> and <I>Methods</I>. It also allows relationships to other <I>Objects</I> to be expressed. <A href="#LinkTarget_6115" href="#">
Figure 2</A>
 illustrates the model. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Object Variables _________ _________ _________ Methods _____() _____() _____() Event  Notifications Data change Notifications References to other Objects Invoke Read/Write </DIV
></P
><P 

><B>Figure 2 &ndash; OPC UA Object Model </P
><P 

></B>The elements of this model are represented in the <I>AddressSpace</I> as <I>Nodes</I>. Each <I>Node</I> is assigned to a <I>NodeClass</I> and each <I>NodeClass</I> represents a different element of the Object Model. Clause <A href="#LinkTarget_6387" href="#">
5</A>
 defines the <I>NodeClasses</I> used to represent this model. </P
><H2 
 ID="LinkTarget_6122"
><FONT size="+1"><B>4.3 Node Model </H2
><H3 
 ID="LinkTarget_6123"
><FONT size="+1">4.3.1 General </H3
><P 

></B>The set of <I>Objects</I> and related information that the OPC UA <I>Server</I> makes available to <I>Clients</I> is referred to as its <I>AddressSpace</I>. The model for <I>Objects</I> is defined by the OPC UA Object Model (see <A href="#LinkTarget_6104" href="#">
4.2</A>
). </P
><P 

>Objects and their components are represented in the <I>AddressSpace</I> as a set of <I>Nodes</I> described by <I>Attributes</I> and interconnected by <I>References</I>. <A href="#LinkTarget_6137" href="#">
Figure 3</A>
 illustrates the model of a <I>Node</I> and the remainder of 4.3 discusses the details of the Node Model. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Node Node  References  _____  _____  Attributes  _____  _____ References define relationships to other nodes Attributes describe a node </DIV
></P
><P 

><B>Figure 3 &ndash; AddressSpace Node Model </P
><H3 
 ID="LinkTarget_6140"
>4.3.2 NodeClasses </H3
><P 

></B><I>NodeClasses</I> are defined in terms of the <I>Attributes</I> and <I>References</I> that shall be instantiated (given values) when a <I>Node</I> is defined in the <I>AddressSpace</I>. <I>Attributes</I> are discussed in <A href="#LinkTarget_6158" href="#">
4.3.3</A>
 and <I>References</I> in <A href="#LinkTarget_6178" href="#">
4.3.4</A>
. </P
><P 

>Clause <A href="#LinkTarget_6387" href="#">
5</A>
 defines the <I>NodeClasses</I> for the OPC UA <I>AddressSpace</I>. These <I>NodeClasses</I> are referred to collectively as the metadata for the <I>AddressSpace</I>. Each <I>Node</I> in the <I>AddressSpace</I> is an instance of one of these <I>NodeClasses</I>. No other <I>NodeClasses</I> shall be used to define <I>Nodes</I>, and as a result, <I>Clients</I> and <I>Servers</I> are not allowed to define <I>NodeClasses</I> or extend the definitions of these <I>NodeClasses</I>. </P
><H3 
 ID="LinkTarget_6158"
><B>4.3.3 Attributes </H3
><P 

></B><I>Attributes</I> are data elements that describe <I>Nodes</I>. <I>Clients</I> can access <I>Attribute</I> values using Read, Write, Query, and Subscription/MonitoredItem <I>Services</I>. These <I>Services</I> are defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><P 

><I>Attributes</I> are elementary components of <I>NodeClasses</I>. <I>Attribute</I> definitions are included as part of the <I>NodeClass</I> definitions in Clause <A href="#LinkTarget_6387" href="#">
5</A>
 and, therefore, are not included in the <I>AddressSpace</I>. </P
><P 

>Each <I>Attribute</I> definition consists of an attribute id (for attribute ids of <I>Attributes</I>, see <A href="#LinkTarget_5763" href="#">
Part 6</A>
), a name, a description, a data type and a mandatory/optional indicator. The set of <I>Attributes</I> defined for each <I>NodeClass</I> shall not be extended by <I>Clients</I> or <I>Servers</I>. </P
><P 

>When a <I>Node</I> is instantiated in the <I>AddressSpace</I>, the values of the <I>NodeClass</I> <I>Attributes</I> are provided. The mandatory/optional indicator for the <I>Attribute</I> indicates whether the <I>Attribute</I> has to be instantiated. </P
><H3 
 ID="LinkTarget_6178"
><B>4.3.4 References </H3
><P 

></B><I>References</I> are used to relate <I>Nodes</I> to each other. They can be accessed using the browsing and querying <I>Services</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><P 

>Like <I>Attributes</I>, they are defined as fundamental components of <I>Nodes</I>. Unlike <I>Attributes</I>, <I>References</I> are defined as instances of <I>ReferenceType Nodes</I>. <I>ReferenceType Nodes</I> are visible in the <I>AddressSpace </I>and are defined using the <I>ReferenceType</I> <I>NodeClass</I> (see <A href="#LinkTarget_6820" href="#">
5.3</A>
). </P
><P 

>The <I>Node</I> that contains the <I>Reference</I> is referred to as the <I>SourceNode</I> and the <I>Node</I> that is referenced is referred to as the <I>TargetNode</I>. The combination of the <I>SourceNode</I>, the <I>ReferenceType</I> and the <I>TargetNode</I> are used in OPC UA <I>Services</I> to uniquely identify <I>References</I>. Thus, each <I>Node</I> can reference another <I>Node</I> with the same <I>ReferenceType</I> only once. Any subtypes of concrete <I>ReferenceTypes</I> are considered to be equal to the base concrete <I>ReferenceTypes</I> when identifying <I>References</I> (see <A href="#LinkTarget_6820" href="#">
5.3</A>
 for subtypes of <I>ReferenceTypes</I>). <A href="#LinkTarget_6202" href="#">
Figure 4</A>
 illustrates this model of a <I>Reference</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> SourceNode *ReferenceName TargetNode * Name of the Reference&rsquo;s ReferenceType </DIV
></P
><P 

><B>Figure 4 &ndash; Reference Model </P
><P 

></B>The <I>TargetNode</I> of a <I>Reference</I> may be in the same <I>AddressSpace</I> or in the <I>AddressSpace</I> of another OPC UA <I>Server</I>. <I>TargetNodes</I> located in other <I>Servers</I> are identified in OPC UA <I>Services</I> using a combination of the remote <I>Server</I> name and the identifier assigned to the <I>Node</I> by the remote <I>Server</I>. </P
><P 

>OPC UA does not require that <I>the</I> <I>TargetNode </I>exists, thus <I>References</I> may point to a <I>Node</I> that does not exist. </P
><H2 
 ID="LinkTarget_6207"
><FONT size="+1"><B>4.4 Variables </H2
><H3 
 ID="LinkTarget_6209"
><FONT size="+1">4.4.1 General </H3
><P 

></B><I>Variables</I> are used to represent <I>values</I>. Two types of <I>Variables</I> are defined, <I>Properties</I> and <I>DataVariables</I>. They differ in the kind of data that they represent and whether they can contain other <I>Variables</I>. </P
><H3 
 ID="LinkTarget_6211"
><B>4.4.2 Properties </H3
><P 

></B><I>Properties</I> are <I>Server</I>-defined characteristics of <I>Objects</I>, <I>DataVariables</I> and other <I>Nodes</I>. <I>Properties</I> differ from <I>Attributes</I> in that they characterise <I>what</I> the <I>Node</I> represents, such as a device or a purchase order. <I>Attributes</I> define additional metadata that is instantiated for all <I>Nodes</I> from a <I>NodeClass</I>. <I>Attributes</I> are common to all <I>Nodes</I> of a <I>NodeClass</I> and only defined by this specification whereas <I>Properties</I> can be <I>Server</I>-defined. </P
><P 

>For example, an <I>Attribute</I> defines the <I>DataType</I> of <I>Variables</I> whereas a <I>Property</I> can be used to specify the engineering unit of some <I>Variables</I>. </P
><P 

>To prevent recursion, <I>Properties</I> are not allowed to have <I>Properties</I> defined for them. To easily identify <I>Properties</I>, the <I>BrowseName</I> of a <I>Property</I> shall be unique in the context of the <I>Node</I> containing the <I>Properties </I>(see <A href="#LinkTarget_8582" href="#">
5.6.3</A>
 for details). </P
><P 

>A <I>Node</I> and its <I>Properties</I> shall always reside in the same <I>Server</I>. </P
><H3 
 ID="LinkTarget_6221"
><B>4.4.3 DataVariables </H3
><P 

></B><I>DataVariables</I> represent the content of an <I>Object</I>. For example, a file <I>Object</I> may be defined that contains a stream of bytes. The stream of bytes may be defined as a <I>DataVariable</I> that is an array of bytes. <I>Properties</I> may be used to expose the creation time and owner of the file <I>Object</I>.  </P
><P 

>For example, if a <I>DataVariable</I> is defined by a data structure that contains two fields, &ldquo;startTime&rdquo; and &ldquo;endTime&rdquo; then it might have a <I>Property</I> specific to that data structure, such as &ldquo;earliestStartTime&rdquo;. </P
><P 

>As another example, function blocks in control systems might be represented as <I>Objects</I>. The parameters of the function block, such as its setpoints, may be represented as <I>DataVariables</I>. The function block <I>Object</I> might also have <I>Properties</I> that describe its execution time and its type. </P
><P 

><I>DataVariables</I> may have additional <I>DataVariables</I>, but only if they are complex. In this case, their <I>DataVariables</I> shall always be elements of their complex definitions. Following the example introduced by the description of <I>Properties</I> in <A href="#LinkTarget_6211" href="#">
4.4.2</A>
, the <I>Server</I> could expose &ldquo;startTime&rdquo; and &ldquo;endTime&rdquo; as separate components of the data structure. </P
><P 

>As another example, a complex <I>DataVariable</I> may define an aggregate of temperature values generated by three separate temperature transmitters that are also visible in the <I>AddressSpace</I>. In this case, this complex <I>DataVariable</I> could define <I>HasComponent</I> <I>References</I> from it to the individual temperature values that it is composed of. </P
><H2 
 ID="LinkTarget_6232"
><FONT size="+1"><B>4.5 TypeDefinitionNodes </H2
><H3 
 ID="LinkTarget_6233"
><FONT size="+1">4.5.1 General </H3
><P 

></B>OPC UA <I>Servers</I> shall provide type definitions for <I>Objects</I> and <I>Variables</I>. The <I>HasTypeDefinition</I> <I>Reference</I> shall be used to link an instance with its type definition represented by a <I>TypeDefinitionNode</I>. Type definitions are required; however, <A href="#LinkTarget_5761" href="#">
Part 5</A>
 defines a <I>BaseObjectType</I>, a <I>PropertyType,</I> and a <I>BaseDataVariableType</I> so a <I>Server</I> can use such a base type if no more specialised type information is available.<I> Objects </I>and<I> Variables </I>inherit the <I>Attributes</I> specified by their <I>TypeDefinitionNode </I>(see <A href="#LinkTarget_10681" href="#">
6.4</A>
 for details). </P
><P 

>In some cases, the <I>NodeId</I> used by the <I>HasTypeDefinition Reference</I> will be well-known to <I>Clients</I> and <I>Servers</I>. Organizations may define <I>TypeDefinitionNodes</I> that are well-known in the industry. Well-known <I>NodeIds</I> of <I>TypeDefinitionNodes</I> provide for commonality across OPC UA <I>Servers</I> and allow <I>Clients</I> to interpret the <I>TypeDefinitionNode</I> without having to read it from the </P
><P 

><I>Server</I>. Therefore, <I>Servers</I> may use well-known <I>NodeIds</I> without representing the corresponding <I>TypeDefinitionNodes</I> in their <I>AddressSpace</I>. However, the <I>TypeDefinitionNodes</I> shall be provided for generic <I>Clients</I>. These <I>TypeDefinitionNodes</I> may exist in another <I>Server</I>. </P
><P 

>The following example, illustrated in <A href="#LinkTarget_6258" href="#">
Figure 5</A>
, describes the use of the <I>HasTypeDefinition Reference</I>. In this example, a setpoint parameter &ldquo;SP&rdquo; is represented as a <I>DataVariable</I> in the <I>AddressSpace</I>. This <I>DataVariable</I> is part of an <I>Object</I> not shown in the figure. </P
><P 

>To provide for a common setpoint definition that can be used by other <I>Objects</I>, a specialised <I>VariableType</I> is used. Each setpoint <I>DataVariable</I> that uses this common definition will have a <I>HasTypeDefinition</I> <I>Reference</I> that<I> </I>identifies the common &ldquo;SetPoint&rdquo; <I>VariableType</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> This value is dynamic, but its initial value is inherited from the value of the VariableType. The inherited value may be overridden when the Variable is created by the server. Variable defined by a VariableType. Inherited Value may be overridden. TypeDefinitionNodes VariableType  &ldquo;SetPoint&rdquo;  Attributes   Value  ______ Variable  &ldquo;SP&rdquo;  Attributes  Value  ______  References  HasTypeDefinition 1..N 0..N 0..N cc 0..N 1 0..N </DIV
></P
><P 

><B>Figure 5 &ndash; Example of a Variable defined by a VariableType </P
><H3 
 ID="LinkTarget_6259"
>4.5.2 Complex TypeDefinitionNodes and their InstanceDeclarations </H3
><P 

></B><I>TypeDefinitionNodes</I> can be complex. A complex <I>TypeDefinitionNode</I> also defines <I>References</I> to other <I>Nodes</I> as part of the type definition. The <I>ModellingRules</I> defined in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
 specify how those <I>Nodes</I> are handled when creating an instance of the type definition. </P
><P 

>A <I>TypeDefinitionNode</I> references instances instead of other <I>TypeDefinitionNodes</I> to allow unique names for several instances of the same type, to define default values and to add <I>References</I> for those instances that are specific to this complex <I>TypeDefinitionNode</I> and not to the <I>TypeDefinitionNode</I> of the instance. For example, in <A href="#LinkTarget_6276" href="#">
Figure 6</A>
 the <I>ObjectType</I> &ldquo;AI_BLK_TYPE&rdquo;, representing a function block, has a <I>HasComponent Reference</I> to a <I>Variable</I> &ldquo;SP&rdquo; of the <I>VariableType</I> &ldquo;SetPoint&rdquo;. &ldquo;AI_BLK_TYPE&rdquo; could have an additional setpoint <I>Variable</I> of the same type using a different name. It could add a <I>Property</I> to the <I>Variable</I> that was not defined by its <I>TypeDefinitionNode</I> &ldquo;SetPoint&rdquo;. And it could define a default value for &ldquo;SP&rdquo;, that is, each instance of &ldquo;AI_BLK_TYPE&rdquo; would have a <I>Variable</I> &ldquo;SP&rdquo; initially set to this value. </P
><P 

> <DIV class="Sect" 
 Alt=""
> VariableType  &ldquo;SetPoint&rdquo;  Attributes   Value  ______ ObjectType  &ldquo;AI_BLK_TYPE&rdquo;  References   HasComponent  ______ Variable defined by a VariableType. Used by a TypeDefinitionNode and is therefore an InstanceDeclaration  This value is not dynamic. Inherited value may be overridden. TypeDefinitionNodes Variable  &ldquo;SP&rdquo;  Attributes  Value  ______  References  HasTypeDefinition 1..N 0..N 0..N cc 0..N 1 0..N </DIV
></P
><P 

><B>Figure 6 &ndash; Example of a Complex TypeDefinition </P
><P 

></B>This approach is commonly used in object-oriented programming languages in which the variables of a class are defined as instances of other classes. When the class is instantiated, each variable is also instantiated, but with the default values (constructor values) defined for the containing class. That is, typically, the constructor for the component class runs first, followed by the constructor for the containing class. The constructor for the containing class may override component values set by the component class. </P
><P 

>To distinguish instances used for the type definitions from instances that represent real data, those instances are called <I>InstanceDeclarations</I>. However, this term is used to simplify this specification, if an instance is an <I>InstanceDeclaration</I> or not is only visible in the <I>AddressSpace</I> by following its <I>References</I>. Some instances may be shared and therefore referenced by <I>TypeDefinitionNodes</I>, <I>InstanceDeclarations</I> and instances. This is similar to class variables in object-oriented programming languages. </P
><H3 
 ID="LinkTarget_6280"
><B>4.5.3 Subtyping </H3
><P 

></B>This standard allows subtyping of type definitions. The subtyping rules are defined in Clause <A href="#LinkTarget_9984" href="#">
6</A>
. Subtyping of <I>ObjectTypes</I> and <I>VariableTypes</I> allows: </P
><DL 

><DD 

>&#61623; <I>Clients</I> that only know the supertype to handle an instance of the subtype as if it were an instance of the supertype; </DD
><DD 

>&#61623; instances of the supertype to be replaced by instances of the subtype; </DD
><DD 

>&#61623; specialised types that inherit common characteristics of the base type. </DD
></DL
><P 

>In other words, subtypes reflect the structure defined by their supertype but may add additional characteristics. For example, a vendor may wish to extend a general &ldquo;TemperatureSensor&rdquo; <I>VariableType</I> by adding a <I>Property</I> providing the next maintenance interval. The vendor would do this by creating a new <I>VariableType</I> which is a <I>TargetNode</I> for a <I>HasSubtype</I> reference from the original <I>VariableType </I>and<I> </I>adding the new <I>Property</I> to it. </P
><H3 
 ID="LinkTarget_6295"
><B>4.5.4 Instantiation of complex TypeDefinitionNodes </H3
><P 

></B>The instantiation of complex <I>TypeDefinitionNodes</I> depends on the <I>ModellingRules</I> defined in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
. However, the intention is that instances of a type definition will reflect the structure defined by the <I>TypeDefinitionNode</I>. <A href="#LinkTarget_6315" href="#">
Figure 7</A>
 shows an instance of the <I>TypeDefinitionNode</I> &ldquo;AI_BLK_TYPE&rdquo;, where the <I>ModellingRule</I> <I>Mandatory</I>, defined in <A href="#LinkTarget_10929" href="#">
6.4.4.5.2</A>
, was applied for its containing <I>Variable</I>. Thus, an instance of &ldquo;AI_BLK_TYPE&rdquo;, called AI_BLK_1&rdquo;, has a <I>HasTypeDefinition</I> <I>Reference</I> to &ldquo;AI_BLK_TYPE&rdquo;. It also contains a <I>Variable</I> &ldquo;SP&rdquo; having the same <I>BrowseName</I> as the <I>Variable</I> &ldquo;SP&rdquo; used by the <I>TypeDefinitionNode</I> and thereby reflects the structure defined by the <I>TypeDefinitionNode</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Variable Type  &ldquo;SetPoint&rdquo;  Attributes   Value  ______ This value is dynamic, but its initial value is inherited. The inherited value may be overridden when the variable is created by the server. Object  &ldquo;AI_BLK_1&rdquo;  References   HasTypeDefinition  HasComponent  ______ ObjectType  &ldquo;AI_BLK_TYPE&rdquo;  References   HasComponent  ______ Variable defined by a VariableType.  This value is not dynamic. Inherited value may be overridden. Variable defined by being part of the ObjectType. Type Definition Nodes Variable  &ldquo;SP&rdquo;  Attributes  Value  References   HasTypeDefinition  ______ Variable  &ldquo;SP&rdquo;  Attributes  Value  References   HasTypeDefinition  ______ 1..N 0..N 0..N cc 0..N 1 0..N </DIV
></P
><P 

><B>Figure 7 &ndash; Object and its Components defined by an ObjectType </P
><P 

></B>A client knowing the <I>ObjectType</I> &ldquo;AI_BLK_TYPE&rdquo; can use this knowledge to directly browse to the containing <I>Nodes</I> for each instance of this type. This allows programming against the <I>TypeDefinitionNode</I>. For example, a graphical element may be programmed in the client that handles all instances of &ldquo;AI_BLK_TYPE&rdquo; in the same way by showing the value of &ldquo;SP&rdquo;. </P
><P 

>There are several constraints related to programming against the <I>TypeDefinitionNode</I>. A <I>TypeDefinitionNode</I> or an <I>InstanceDeclaration</I> shall never reference two <I>Nodes</I> having the same <I>BrowseName</I> using <I>hierarchical References</I> in the forward direction. Instances based on <I>InstanceDeclarations</I> shall always keep the same <I>BrowseName</I> as the <I>InstanceDeclaration</I> they are derived from. A special <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 called TranslateBrowsePathsToNodeIds may be used to identify the instances based on the <I>InstanceDeclarations</I>. Using the simple Browse <I>Service</I> might not be sufficient since the uniqueness of the <I>BrowseName</I> is only required for <I>TypeDefinitionNodes</I> and <I>InstanceDeclarations</I>, not for other instances. Thus, &ldquo;AI_BLK_1&rdquo; may have another <I>Variable</I> with the <I>BrowseName</I> &ldquo;SP&rdquo;, although this one would not be derived from an <I>InstanceDeclaration</I> of the <I>TypeDefinitionNode</I>. </P
><P 

>Instances derived from an <I>InstanceDeclaration</I> shall be of the same <I>TypeDefinitionNode</I> or a subtype of this <I>TypeDefinitionNode</I>. </P
><P 

>A <I>TypeDefinitionNode</I> and its <I>InstanceDeclarations</I> shall always reside in the same <I>Server</I>. However, instances may point with their <I>HasTypeDefinition</I> <I>Reference</I> to a <I>TypeDefinitionNode</I> in a different <I>Server</I>. </P
><H2 
 ID="LinkTarget_6325"
><FONT size="+1"><B>4.6 Event Model </H2
><H3 
 ID="LinkTarget_6326"
><FONT size="+1">4.6.1 General </H3
><P 

></B>The Event Model defines a general purpose eventing system that can be used in many diverse vertical markets. </P
><P 

><I>Events </I>represent specific transient occurrences. System configuration changes and system errors are examples of <I>Events</I>. <I>Event</I> <I>Notifications</I> report the occurrence of an <I>Event</I>. <I>Events</I> defined in this document are not directly visible in the OPC UA <I>AddressSpace</I>. <I>Objects </I>and<I> Views </I>can be used to subscribe to <I>Events</I>. The <I>EventNotifier Attribute</I> of those <I>Nodes</I> identifies if the <I>Node</I> allows subscribing to <I>Events</I>. <I>Clients</I> subscribe to such <I>Nodes</I> to receive <I>Notifications</I> of <I>Event</I> occurrences. </P
><P 

><I>Event Subscriptions</I> use the Monitoring and Subscription <I>Services</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 to subscribe to the <I>Event Notifications</I> of a <I>Node</I>. </P
><P 

>Any OPC UA <I>Server</I> that supports eventing shall expose at least one <I>Node</I> as <I>EventNotifier</I>. The <I>Server</I> <I>Object</I> defined in <A href="#LinkTarget_5761" href="#">
Part 5</A>
<FONT color="#FF0000"> <FONT color="#000000">is used for this purpose. <I>Events</I> generated by the <I>Server</I> are available via this <I>Server</I> <I>Object</I>. A <I>Server</I> is not expected to produce <I>Events</I> if the connection to the event source is down for some reason (i.e. the system is offline). </P
><P 

><I>Events</I> may also be exposed through other <I>Nodes</I> anywhere in the <I>AddressSpace</I>. These <I>Nodes</I> (identified via the <I>EventNotifier Attribute</I>) provide some subset of the <I>Events</I> generated by the <I>Server</I>. The position in the <I>AddressSpace </I>dictates what this subset will be. For example, a process area <I>Object</I> representing a functional area of the process would provide <I>Events</I> originating from that area of the process only. It should be noted that this is only an example and it is fully up to the <I>Server</I> to determine what <I>Events</I> should be provided by which <I>Node</I>. </P
><H3 
 ID="LinkTarget_6343"
><B>4.6.2 EventTypes </H3
><P 

></B>Each <I>Event</I> is of a specific <I>EventType</I>. A <I>Server</I> may support many types. This part defines the <I>BaseEventType</I> that all other <I>EventTypes</I> derive from. It is expected that other companion specifications will define additional <I>EventTypes</I> deriving from the base types defined in this part. </P
><P 

>The <I>EventTypes</I> supported by a <I>Server</I> are exposed in the <I>AddressSpace</I> of a <I>Server</I>. <I>EventTypes</I> are represented as <I>ObjectTypes</I> in the <I>AddressSpace</I> and do not have a special <I>NodeClass</I> associated to them. <A href="#LinkTarget_5761" href="#">
Part 5</A>
 defines how a <I>Server</I> exposes the <I>EventTypes </I>in detail. </P
><P 

><I>EventTypes</I> defined in this document are specified as abstract and therefore never instantiated in the <I>AddressSpace</I>. Event occurrences of those <I>EventTypes</I> are only exposed via a <I>Subscription</I>. <I>EventTypes</I> exist in the <I>AddressSpace</I> to allow <I>Clients</I> to discover the <I>EventType</I>. This information is used by a client when establishing and working with <I>Event</I> <I>Subscriptions</I>. <I>EventTypes</I> defined by other parts of this series of standards or companion specifications as well as <I>Server</I> specific <I>EventTypes</I> may be defined as not abstract and therefore instances of those <I>EventTypes</I> may be visible in the <I>AddressSpace</I> although <I>Events</I> of those <I>EventTypes</I> are also accessible via the <I>Event</I> <I>Notification</I> mechanisms. </P
><P 

>Standard <I>EventTypes</I> are described in Clause <A href="#LinkTarget_12131" href="#">
9</A>
. Their representation in the <I>AddressSpace</I> is specified in <A href="#LinkTarget_5761" href="#">
Part 5</A>
. </P
><H3 
 ID="LinkTarget_6362"
><B>4.6.3 Event Categorization </H3
><P 

></B><I>Events</I> can be categorised by creating new <I>EventTypes</I> which are subtypes of existing <I>EventTypes</I> but do not extend an existing type. They are used only to identify an event as being of the new <I>EventType</I>. For example, the <I>EventType</I> DeviceFailureEventType could be subtyped into TransmitterFailureEventType and ComputerFailureEventType. These new subtypes would not add new <I>Properties</I> or change the semantic inherited from the DeviceFailureEventType other than purely for categorization of the <I>Events</I>. </P
><P 

><I>Event</I> sources can also be organised into groups by using the <I>Event</I> <I>ReferenceTypes</I> described in <A href="#LinkTarget_11181" href="#">
7.17</A>
 and <A href="#LinkTarget_11198" href="#">
7.19</A>
. For example, a <I>Server</I> may define <I>Objects</I> in the <I>AddressSpace</I> representing <I>Events</I> related to physical devices, or <I>Event</I> areas of a plant or functionality contained in the <I>Server</I>. <I>Event</I> <I>References</I> would be used to indicate which <I>Event</I> sources represent physical devices and which ones represent some <I>Server</I>-based functionality. In addition, <I>References</I> can be used to group the physical devices or <I>Server</I>-based functionality into hierarchical <I>Event</I> areas. In some cases, an <I>Event</I> source may be categorised as being both a device and a <I>Server</I> function. In this case, two relationships would be established. Refer to the description of the <I>Event</I> <I>ReferenceTypes</I> for additional examples. </P
><P 

><I>Clients</I> can select a category or categories of <I>Events</I> by defining content filters that include terms specifying the <I>EventType</I> of the <I>Event</I> or a grouping of <I>Event</I> sources. The two mechanisms allow for a single <I>Event</I> to be categorised in multiple manners. A client could obtain all <I>Events</I> related to a physical device or all failures of a particular device. </P
><H2 
 ID="LinkTarget_6375"
><FONT size="+1"><B>4.7 Methods </H2
><P 

><FONT size="+1"></B><I>Methods</I> are &ldquo;lightweight&rdquo; functions, whose scope is bounded by an owning (see Note) <I>Object</I>, similar to the methods of a class in object-oriented programming or an owning <I>ObjectType</I>, similar to static methods of a class. <I>Methods</I> are invoked by a client, proceed to completion on the <I>Server</I> and return the result to the client. The lifetime of the <I>Method&rsquo;s</I> invocation instance begins when the client calls the <I>Method</I> and ends when the result is returned. </P
><P 

><FONT size="+1">NOTE The owning <I>Object</I> or <I>ObjectType</I> is specified in the service call when invoking the <I>Method</I>. </P
><P 

><FONT size="+1">While <I>Methods</I> may affect the state of the owning <I>Object</I>, they have no explicit state of their own. In this sense, they are stateless. <I>Methods</I> can have a varying number of input arguments and return resultant arguments. Each <I>Method</I> is described by a <I>Node</I> of the <I>Method NodeClass</I>. This <I>Node</I> contains the metadata that identifies the <I>Method&rsquo;s</I> arguments and describes its behaviour. </P
><P 

><I>Methods</I> are invoked by using the Call <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. Each <I>Method</I> is invoked within the context of an existing session. If the session is terminated during <I>Method</I> execution, the results of the <I>Method&rsquo;s</I> execution cannot be returned to the client and are discarded. In that case, the Method execution is undefined, that is, the <I>Method</I> may be executed until it is finished or it may be aborted. </P
><P 

><I>Clients</I> discover the <I>Methods</I> supported by a <I>Server</I> by browsing for the owning <I>Objects References</I> that identify their supported <I>Methods</I>. </P
><H1 
 ID="LinkTarget_6387"
><FONT size="+1"><B>5 Standard NodeClasses </H1
><H2 
 ID="LinkTarget_6388"
>5.1 Overview </H2
><P 

><FONT size="+1"></B>Clause 5 defines the <I>NodeClasses</I> used to define <I>Nodes</I> in the OPC UA<I> AddressSpace</I>. <I>NodeClasses</I> are derived from a common <I>Base NodeClass</I>. This <I>NodeClass</I> is defined first, followed by those used to organise the <I>AddressSpace</I> and then by the <I>NodeClasses</I> used to represent <I>Objects</I>. </P
><P 

>The <I>NodeClasses</I> defined to represent <I>Objects</I> fall into three categories: those used to define instances, those used to define types for those instances and those used to define data types. Subclause <A href="#LinkTarget_10040" href="#">
6.3</A>
 describes the rules for subtyping and <A href="#LinkTarget_10681" href="#">
6.4</A>
 the rules for instantiation of the type definitions. </P
><H2 
 ID="LinkTarget_6400"
><FONT size="+1"><B>5.2 Base NodeClass </H2
><H3 
 ID="LinkTarget_6401"
><FONT size="+1">5.2.1 General </H3
><P 

></B>The OPC UA Address Space Model defines a <I>Base NodeClass</I> from which all other <I>NodeClasses</I> are derived. The derived <I>NodeClasses</I> represent the various components of the OPC UA Object Model (see <A href="#LinkTarget_6104" href="#">
4.2</A>
). The <I>Attributes</I> of the <I>Base NodeClass</I> are specified in <A href="#LinkTarget_6412" href="#">
Table 2</A>
. There are no <I>References</I> specified for the <I>Base NodeClass</I>. </P
><P 

><B>Table 2 &ndash; Base NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Use </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Attributes </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NodeId </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_6551" href="#">
5.2.2</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NodeClass </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_6560" href="#">
5.2.3</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> BrowseName </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_6567" href="#">
5.2.4</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> DisplayName </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_6585" href="#">
5.2.5</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Description </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_6596" href="#">
5.2.6</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> WriteMask </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_6603" href="#">
5.2.7</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> UserWriteMask </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_6812" href="#">
5.2.8</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>No <I>References</I> specified for this <I>NodeClass</I> </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_6551"
><FONT size="+1"><B>5.2.2 NodeId </H3
><P 

></B><I>Nodes</I> are unambiguously identified using a constructed identifier called the <I>NodeId</I>. Some <I>Servers</I> may accept alternative <I>NodeIds</I> in addition to the canonical <I>NodeId</I> represented in this </P
><P 

><I>Attribute</I>. A <I>Server</I> shall persist the <I>NodeId </I>of a <I>Node</I>, that is, it shall not generate new <I>NodeIds</I> when rebooting. The structure of the <I>NodeId</I> is defined in <A href="#LinkTarget_11244" href="#">
8.2</A>
. </P
><H3 
 ID="LinkTarget_6560"
><B>5.2.3 NodeClass </H3
><P 

></B>The <I>NodeClass Attribute</I> identifies the <I>NodeClass</I> of a <I>Node</I>. Its data type is defined in <A href="#LinkTarget_11889" href="#">
8.30</A>
. </P
><H3 
 ID="LinkTarget_6567"
><B>5.2.4 BrowseName </H3
><P 

></B><I>Nodes</I> have a <I>BrowseName Attribute</I> that is used as a non-localised human-readable name when browsing the <I>AddressSpace</I> to create paths out of <I>BrowseNames</I>. The TranslateBrowsePathsToNodeIds <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 can be used to follow a path constructed of <I>BrowseNames</I>. </P
><P 

>A <I>BrowseName</I> should never be used to display the name of a <I>Node</I>. The <I>DisplayName</I> should be used instead for this purpose. </P
><P 

>Unlike <I>NodeIds</I>, the <I>BrowseName</I> cannot be used to unambiguously identify a <I>Node</I>. Different <I>Nodes</I> may have the same <I>BrowseName</I>. </P
><P 

>Subclause <A href="#LinkTarget_11426" href="#">
8.3</A>
 defines the structure of the <I>BrowseName</I>. It contains a namespace and a string. The namespace is provided to make the <I>BrowseName</I> unique in some cases in the context of a <I>Node</I> (e.g. <I>Properties</I> of a <I>Node</I>) although not unique in the context of the <I>Server</I>. If different organizations define <I>BrowseNames</I> for <I>Properties</I>, the namespace of the <I>BrowseName</I> provided by the organization makes the <I>BrowseName</I> unique, although different organizations may use the same string having a slightly different meaning. </P
><P 

><I>Servers</I> may often choose to use the same namespace for the <I>NodeId</I> and the <I>BrowseName</I>. However, if they want to provide a standard <I>Property</I>, its<I> BrowseName</I> shall have the namespace of the standards body although the namespace of the <I>NodeId</I> reflects something else, for example the local <I>Server</I>. </P
><P 

>It is recommended that standard bodies defining standard type definitions use their namespace for the <I>NodeId</I> of the <I>TypeDefinitionNode</I> as well as for the <I>BrowseName</I> of the <I>TypeDefinitionNode. </I></P
><P 

>The string-part of the <I>BrowseName</I> is case sensitive. That is, <I>Clients</I> shall consider them case sensitive. <I>Servers</I> are allowed to handle <I>BrowseNames</I> passed in <I>Service</I> requests as case insensitive. Examples are the <I>TranslateBrowsePathsToNodeIds</I> <I>Service</I> or <I>Event</I> filter. </P
><H3 
 ID="LinkTarget_6585"
><B>5.2.5 DisplayName </H3
><P 

></B>The <I>DisplayName Attribute</I> contains the localised name of the <I>Node</I>. <I>Clients</I> should use this <I>Attribute</I> if they want to display the name of the <I>Node</I> to the user. They should not use the <I>BrowseName</I> for this purpose. The <I>Server</I> may maintain one or more localised representations for each <I>DisplayName</I>. <I>Clients</I> negotiate the locale to be returned when they open a session with the <I>Server</I>. Refer to <A href="#LinkTarget_5759" href="#">
Part 4</A>
 for a description of session establishment and locales. Subclause <A href="#LinkTarget_11556" href="#">
8.5</A>
 defines the structure of the <I>DisplayName</I>. The string part of the <I>DisplayName</I> is restricted to 512 characters. </P
><H3 
 ID="LinkTarget_6596"
><B>5.2.6 Description </H3
><P 

></B>The optional <I>Description Attribute</I> shall explain the meaning of the <I>Node</I> in a localised text using the same mechanisms for localisation as described for the <I>DisplayName</I> in <A href="#LinkTarget_6585" href="#">
5.2.5</A>
. </P
><H3 
 ID="LinkTarget_6603"
><B>5.2.7 WriteMask </H3
><P 

></B>The optional <I>WriteMask</I> <I>Attribute</I> exposes the possibilities of a client to write the <I>Attributes</I> of the <I>Node</I>. The <I>WriteMask</I> <I>Attribute</I> does not take any user access rights into account, that is, although an <I>Attribute</I> is writable this may be restricted to a certain user/user group. </P
><P 

>If the OPC UA <I>Server</I> does not have the ability to get the <I>WriteMask</I> information for a specific <I>Attribute</I> from the underlying system, it should state that it is writable. If a write operation is called on the <I>Attribute</I>, the <I>Server</I> should transfer this request and return the corresponding <I>StatusCode</I> if such a request is rejected. <I>StatusCodes</I> are defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><P 

>The <I>WriteMask Attribute</I> is a 32-bit unsigned integer with the structure defined in <A href="#LinkTarget_6618" href="#">
Table 3</A>
. If the bit is set to 0, it means the <I>Attribute</I> is not writable, if it is set to 1, it means it is writable. If a <I>Node</I> does not support a specific <I>Attribute</I>, the corresponding bit has to be set to 0. </P
><P 

><B>Table 3 &ndash; Bit mask for WriteMask and UserWriteMask </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Field </P
></TD
><TD  
 valign="top"
><P 

>Bit </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AccessLevel </P
></TD
><TD  
 valign="top"
><P 

>0 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the AccessLevel Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ArrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the ArrayDimensions Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the BrowseName Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ContainsNoLoops </P
></TD
><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the ContainsNoLoops Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the DataType Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Description </P
></TD
><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the Description Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DisplayName </P
></TD
><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the DisplayName Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EventNotifier </P
></TD
><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the EventNotifier Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Executable </P
></TD
><TD  
 valign="top"
><P 

>8 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the Executable Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Historizing </P
></TD
><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the Historizing Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>InverseName </P
></TD
><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the InverseName Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>11 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the IsAbstract Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MinimumSamplingInterval </P
></TD
><TD  
 valign="top"
><P 

>12 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the MinimumSamplingInterval Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>13 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the NodeClass Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>14 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the NodeId Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Symmetric </P
></TD
><TD  
 valign="top"
><P 

>15 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the Symmetric Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserAccessLevel </P
></TD
><TD  
 valign="top"
><P 

>16 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the UserAccessLevel Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserExecutable </P
></TD
><TD  
 valign="top"
><P 

>17 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the UserExecutable Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserWriteMask </P
></TD
><TD  
 valign="top"
><P 

>18 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the UserWriteMask Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValueRank </P
></TD
><TD  
 valign="top"
><P 

>19 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the ValueRank Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>WriteMask </P
></TD
><TD  
 valign="top"
><P 

>20 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the WriteMask Attribute is writable. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValueForVariableType </P
></TD
><TD  
 valign="top"
><P 

>21 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the <I>Value</I> <I>Attribute</I> is writable for a <I>VariableType</I>. It does not apply for <I>Variables</I> since this is handled by the <I>AccessLevel</I> and <I>UserAccessLevel</I> <I>Attributes</I> for the <I>Variable</I>. For <I>Variables</I> this bit shall be set to 0. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>22:31 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
></TABLE
><H3 
 ID="LinkTarget_6812"
><FONT size="+1"><B>5.2.8 UserWriteMask </H3
><P 

></B>The optional <I>UserWriteMask</I> <I>Attribute</I> exposes the possibilities of a client to write the <I>Attributes</I> of the <I>Node</I> taking user access rights into account. It uses the same bit mask as used in the <I>WriteMask</I> <I>Attribute</I>, defined in <A href="#LinkTarget_6618" href="#">
Table 3</A>
. </P
><P 

>The <I>UserWriteMask</I> <I>Attribute</I> can only further restrict the <I>WriteMask</I> <I>Attribute, </I>when it is set to not writable in the general case that applies for every user. </P
><H2 
 ID="LinkTarget_6820"
><FONT size="+1"><B>5.3 ReferenceType NodeClass </H2
><H3 
 ID="LinkTarget_6821"
><FONT size="+1">5.3.1 General </H3
><P 

></B><I>References</I> are defined as instances of <I>ReferenceType Nodes</I>. <I>ReferenceType Nodes</I> are visible in the <I>AddressSpace</I> and are defined using the <I>ReferenceType NodeClass</I> as specified in <A href="#LinkTarget_6842" href="#">
Table 4</A>
. In contrast, a <I>Reference</I> is an inherent part of a <I>Node</I> and no <I>NodeClass</I> is used to represent <I>References</I>. </P
><P 

>This standard defines a set of <I>ReferenceTypes</I> provided as an inherent part of the OPC UA<I> </I>Address Space Model. These <I>ReferenceTypes</I> are defined in Clause <A href="#LinkTarget_11034" href="#">
7</A>
 and their representation in the <I>AddressSpace</I> is defined in <A href="#LinkTarget_5761" href="#">
Part 5</A>
. <I>Servers</I> may also define <I>ReferenceTypes</I>. In addition, <A href="#LinkTarget_5759" href="#">
Part 4</A>
 defines <I>NodeManagement</I> <I>Services</I> that allow <I>Clients</I> to add <I>ReferenceTypes</I> to the <I>AddressSpace</I>. </P
><P 

><B>Table 4 &ndash; ReferenceType NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Use </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Attributes </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Base NodeClass Attributes </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>-- </P
></TD
><TD  
 valign="top"
><P 

>Inherited from the <I>Base NodeClass</I>. See <A href="#LinkTarget_6400" href="#">
5.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A boolean <I>Attribute</I> with the following values: </P
><P 

> TRUE it is an abstract <I>ReferenceType</I>, i.e. no <I>Reference</I> of this type shall exist, only of its subtypes. </P
><P 

> FALSE it is not an abstract <I>ReferenceType</I>, i.e. <I>References</I> of this type can exist.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Symmetric </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A boolean <I>Attribute</I> with the following values: </P
><P 

> TRUE the meaning of the <I>ReferenceType</I> is the same as seen from both the <I>SourceNode</I> and the <I>TargetNode.</I> </P
><P 

> FALSE the meaning of the <I>ReferenceType</I> as seen from the <I>TargetNode</I> is the inverse of that as seen from the <I>SourceNode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> InverseName </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>The inverse name of the <I>Reference</I>, that is the meaning of the <I>ReferenceType</I> as seen from the <I>TargetNode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasProperty </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Used to identify the Properties (see <A href="#LinkTarget_7043" href="#">
5.3.3.2</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Used to identify subtypes (see <A href="#LinkTarget_7047" href="#">
5.3.3.3</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Standard Properties </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NodeVersion </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeVersion</I> <I>Property</I> is used to indicate the version of a <I>Node</I>. </P
><P 

>The <I>NodeVersion</I> <I>Property</I> is updated each time a <I>Reference</I> is added or deleted to the <I>Node</I> the <I>Property</I> belongs to. <I>Attribute</I> value changes do not cause the <I>NodeVersion</I> to change. <I>Clients</I> may read the <I>NodeVersion Property</I> or subscribe to it to determine when the structure of a <I>Nod</I><I>e</I> has changed. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_6997"
><FONT size="+1"><B>5.3.2 Attributes </H3
><P 

></B>The <I>ReferenceType</I> <I>NodeClass</I> inherits the base <I>Attributes</I> from the <I>Base NodeClass</I> defined in <A href="#LinkTarget_6400" href="#">
5.2</A>
. The inherited <I>BrowseName Attribute</I> is used to specify the meaning of the <I>ReferenceType</I> as seen from the <I>SourceNode</I>. For example, the <I>ReferenceType</I> with the <I>BrowseName</I> &ldquo;Contains&rdquo; is used in <I>References</I> that specify that the <I>SourceNode</I> contains the <I>TargetNode</I>. The inherited <I>DisplayName Attribute</I> contains a translation of the <I>BrowseName. </I></P
><P 

>The <I>BrowseName</I> of a <I>ReferenceType</I> shall be unique in a <I>Server</I>. It is not allowed that two different <I>ReferenceTypes</I> have the same <I>BrowseName</I>. </P
><P 

>The <I>IsAbstract</I> <I>Attribute</I> indicates if the <I>ReferenceType</I> is abstract. Abstract <I>ReferenceTypes</I> cannot be instantiated and are used only for organizational reasons, for example to specify some general semantics or constraints that its subtypes inherit.  </P
><P 

>The <I>Symmetric</I> <I>Attribute</I> is used to indicate whether or not the meaning of the <I>ReferenceType</I> is the same for both the <I>SourceNode</I> and <I>TargetNode</I>. </P
><P 

>If a <I>ReferenceType</I> is symmetric, the <I>InverseName Attribute</I> shall be omitted. Examples of symmetric <I>ReferenceTypes</I> are &ldquo;Connects To&rdquo; and &ldquo;Communicates With&rdquo;. Both imply the same semantic coming from the <I>SourceNode</I> or the <I>TargetNode</I>. Therefore both directions are considered to be forward References. </P
><P 

>If the <I>ReferenceType</I> is non-symmetric and not abstract, the <I>InverseName Attribute</I> shall be set. The <I>InverseName Attribute</I> specifies the meaning of the <I>ReferenceType</I> as seen from the <I>TargetNode</I>. Examples of non-symmetric <I>ReferenceTypes</I> include &ldquo;Contains&rdquo; and &ldquo;Contained In&rdquo;, and &ldquo;Receives From&rdquo; and &ldquo;Sends To&rdquo;. </P
><P 

><I>References</I> that use the <I>InverseName</I>, such as &ldquo;Contained In&rdquo; <I>References</I>, are referred to as inverse <I>References</I>. </P
><P 

><A href="#LinkTarget_7016" href="#">
Figure 8</A>
 provides examples of symmetric and non-symmetric <I>References</I> and the use of the <I>BrowseName </I>and the <I>InverseName</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Contains This Reference Type provides the type definition for all &ldquo;Contains&rdquo; and &ldquo;ContainedIn&rdquo; References  ContainedIn CommunicatesWith CommunicatesWith &ldquo;Device&rdquo; &ldquo;Block&rdquo; &ldquo;Block&rdquo; ReferenceType &ldquo;Contains&rdquo; symmetric = FALSE InverseName = &ldquo;ContainedIn&rdquo; ReferenceType &ldquo;CommunicatesWith&rdquo; symmetric = TRUE 1..N 0..N 0..N cc 0..N 1 0..N </DIV
></P
><P 

><B>Figure 8 &ndash; Symmetric and Non-Symmetric References </P
><P 

></B>It might not always be possible for <I>Servers</I> to instantiate both forward and inverse <I>References</I> for non-symmetric <I>ReferenceTypes</I> as shown in <A href="#LinkTarget_7016" href="#">
Figure 8</A>
. When they do, the <I>References</I> are referred to as <I>bidirectional</I>. Although not required, it is recommended that all <I>hierarchical References</I> be instantiated as bidirectional to ensure browse connectivity. A bidirectional <I>Reference</I> is modelled as two separate <I>References</I>. </P
><P 

>As an example of a <I>unidirectional</I> <I>Reference</I>, it is often the case that a subscriber knows its publisher, but its publisher does not know its subscribers. The subscriber would have a &ldquo;Subscribes To&rdquo; <I>Reference</I> to the publisher, without the publisher having the corresponding &ldquo;Publishes To&rdquo; inverse <I>References</I> to its subscribers. </P
><P 

>The <I>DisplayName</I> and the <I>InverseName</I> are the only standardised places to indicate the semantic of a <I>ReferenceType</I>. There may be more complex semantics associated with a <I>ReferenceType</I> than can be expressed in those <I>Attributes</I> (e.g. the semantic of <I>HasSubtype</I>). This standard does not specify how this semantic should be exposed. However, the <I>Description Attribute</I> can be used for this purpose. This standard provides a semantic for the <I>ReferenceTypes</I> specified in Clause <A href="#LinkTarget_11034" href="#">
7</A>
. </P
><P 

>A <I>ReferenceType</I> can have constraints restricting its use. For example, it can specify that starting from <I>Node</I> A and only following <I>References</I> of this <I>ReferenceType</I> or one of its subtypes, it shall never be able to return to A, that is, a &ldquo;No Loop&rdquo; constraint. </P
><P 

>This standard does not specify how those constraints could or should be made available in the <I>AddressSpace</I>. Nevertheless, for the standard <I>ReferenceTypes</I>, some constraints are specified in Clause <A href="#LinkTarget_11034" href="#">
7</A>
. This standard does not restrict the kind of constraints valid for a <I>ReferenceType</I>. It can, for example, also affect an <I>ObjectType</I>. The restriction that a <I>ReferenceType</I> can only be used by relating <I>Nodes</I> of some <I>NodeClasses</I> with a defined cardinality is a special constraint of a <I>ReferenceType</I>. </P
><H3 
 ID="LinkTarget_7040"
><B>5.3.3 References </H3
><H4 
 ID="LinkTarget_7041"
>5.3.3.1 General </H4
><P 

></B><I>HasSubtype References</I> and <I>HasProperty</I> <I>References</I> are the only <I>ReferenceTypes</I> that may be used with <I>ReferenceType Nodes</I> as <I>SourceNode</I>. <I>ReferenceType Nodes</I> shall not be the <I>SourceNode</I> of other types of <I>References</I>. </P
><H4 
 ID="LinkTarget_7043"
><B>5.3.3.2 HasProperty References </H4
><P 

></B><I>HasProperty</I> <I>References</I> are used to identify the <I>Properties</I> of a <I>ReferenceType</I> and shall only refer to <I>Nodes</I> of the <I>Variable NodeClass</I>. </P
><P 

>The <I>Property</I> <I>NodeVersion</I> is used to indicate the version of the <I>ReferenceType</I>. </P
><P 

>There are no additional <I>Properties</I> defined for <I>ReferenceTypes</I> in this standard. Additional parts this series of standards may define additional <I>Properties</I> for <I>ReferenceTypes</I>. </P
><H4 
 ID="LinkTarget_7047"
><B>5.3.3.3 HasSubtype References </H4
><P 

></B><I>HasSubtype</I> <I>References</I> are used to define subtypes of <I>ReferenceTypes</I>. It is not required to provide the <I>HasSubtype</I> <I>Reference</I> for the supertype, but it is required that the subtype provides the inverse <I>Reference</I> to its supertype. The following rules for subtyping apply. </P
><DL 

><DD 

>a) The semantic of a <I>ReferenceType</I> (e.g. &ldquo;spans a hierarchy&rdquo;) is inherited to its subtypes and can be refined there (e.g. &ldquo;spans a special hierarchy&rdquo;). The <I>DisplayName</I>, and also the <I>InverseName</I> for non-symmetric <I>ReferenceTypes</I>, reflect the specialization. </DD
><DD 

>b) If a <I>ReferenceType</I> specifies some constraints (e.g. &ldquo;allow no loops&rdquo;) this is inherited and can only be refined (e.g. inheriting &ldquo;no loops&rdquo; could be refined as &ldquo;shall be a tree &ndash; only one parent&rdquo;) but not lowered (e.g. &ldquo;allow loops&rdquo;). </DD
><DD 

>c) The constraints concerning which <I>NodeClasses</I> can be referenced are also inherited and can only be further restricted. That is, if a <I>ReferenceType</I> &ldquo;A&rdquo; is not allowed to relate an <I>Object</I> with an <I>ObjectType</I>, this is also true for its subtypes. </DD
><DD 

>d) A <I>ReferenceType</I> shall have exactly one supertype, except for the <I>References</I> <I>ReferenceType</I> defined in <A href="#LinkTarget_11055" href="#">
7.2</A>
 as the root type of the <I>ReferenceType</I> hierarchy. The <I>ReferenceType</I> hierarchy does not support multiple inheritances. </DD
></DL
><H2 
 ID="LinkTarget_7064"
><FONT size="+1"><B>5.4 View NodeClass </H2
><P 

><FONT size="+1"></B>Underlying systems are often large and <I>Clients</I> often have an interest in only a specific subset of the data. They do not need, or want, to be burdened with viewing <I>Nodes</I> in the <I>AddressSpace</I> for which they have no interest. </P
><P 

>To address this problem, this standard defines the concept of a <I>View</I>. Each <I>View</I> defines a subset of the <I>Nodes</I> in the <I>AddressSpace</I>. The entire <I>AddressSpace</I> is the default <I>View</I>. Each <I>Node</I> in a <I>View</I> may contain only a subset of its <I>References</I>, as defined by the creator of the <I>View</I>. The <I>View Node</I> acts as the root for the <I>Nodes</I> in the <I>View</I>. <I>Views</I> are defined using the <I>View</I> <I>NodeClass</I>, which is specified in <A href="#LinkTarget_7079" href="#">
Table 5</A>
. </P
><P 

>All <I>Nodes</I> contained in a <I>View</I> shall be accessible starting from the <I>View</I> <I>Node</I> when browsing in the context of the <I>View</I>. It is not expected that all containing <I>Nodes</I> can be browsed directly from the <I>View</I> <I>Node </I>but rather browsed from other <I>Nodes</I> contained in the<I> View</I>. </P
><P 

>A <I>View</I> <I>Node</I> may not only be used as additional entry point into the <I>AddressSpace</I> but as a construct to organize the <I>AddressSpace</I> and thus as the only entry point into a subset of the <I>AddressSpace</I>. Therefore <I>Clients</I> shall not ignore <I>View</I> <I>Nodes</I> when exposing the <I>AddressSpace</I>. Simple <I>Clients</I> that do not deal with <I>Views</I> for filtering purposes can, for example, handle a <I>View</I> <I>Node</I> like an <I>Object</I> of type <I>FolderType</I> (see <A href="#LinkTarget_7871" href="#">
5.5.3</A>
). </P
><P 

><B>Table 5 &ndash; View NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Use </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Attributes </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Base NodeClass Attributes </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>-- </P
></TD
><TD  
 valign="top"
><P 

>Inherited from the <I>Base NodeClass</I>. See <A href="#LinkTarget_6400" href="#">
5.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ContainsNoLoops </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>If set to &ldquo;true&rdquo; this <I>Attribute</I> indicates that by following the <I>References</I> in the context of the <I>View</I> there are no loops, i.e. starting from a <I>Node</I> &ldquo;A&rdquo; contained in the <I>View</I> and following the forward <I>References</I> in the context of the <I>View</I> <I>Node</I> &ldquo;A&rdquo; will not be reached again. It does not specify that there is only one path starting from the <I>View</I> <I>Node</I> to reach a <I>Node</I> contained in the <I>View</I>. </P
><P 

>If set to &ldquo;false&rdquo; this <I>Attribute</I> indicates that following <I>References</I> in the context of the <I>View</I> may lead to loops. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> EventNotifier </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>The <I>EventNotifier</I> <I>Attribute</I> is used to indicate if the <I>Node</I> can be used to subscribe to <I>Events</I> or to read / write historic <I>Events</I>. </P
><P 

>The <I>EventN</I><I>otifier</I> is an 8-bit unsigned integer with the structure defined in the following table. </P
><P 

><FONT size="+1"> </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"><B>Field </P
></TD
><TD  
 valign="top"
><P 

>Bit </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SubscribeTo Events </P
></TD
><TD  
 valign="top"
><P 

>0 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if it can be used to subscribe to <I>Events</I>  (0 means cannot be used to subscribe to <I>Events</I>, 1 means can be used to subscribe to <I>Events</I>) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HistoryRead </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the history of the <I>Events</I> is readable (0 means not readable, 1 means readable) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HistoryWrite </P
></TD
><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the history of the<I> </I><I>Events</I> is writable (0 means not writable, 1 means writable) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>4:7 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The second two bits also indicate if the history of the <I>Events</I> is available via the OPC UA <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HierarchicalReferences </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Top level <I>Nodes</I> in a <I>View</I> are referenced by <I>hierarchical References</I> (see <A href="#LinkTarget_11064" href="#">
7.3</A>
).  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasProperty </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasProperty </I><I>References</I> identify the <I>Properties</I> of the <I>View</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Standard Properties </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NodeVersion </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeVersion</I> <I>Property</I> is used to indicate the version of a <I>Node</I>. </P
><P 

>The <I>NodeVersion</I> <I>Property</I> is updated each time a <I>Reference</I> is added or deleted to the <I>Node</I> the <I>Property</I> belongs to. <I>Attribute</I> value changes do not cause the <I>NodeVersion</I> to change. <I>Clients</I> may read the <I>NodeVersion Property</I> or subscribe to it to determine when the structure of a <I>Node</I> has changed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ViewVersion </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The version number for the <I>View</I>. When <I>Nodes</I> are added to or removed from a <I>View</I>, the value of the <I>ViewVersion Property</I> is updated. <I>Clients</I> may detect changes to the composition of a <I>View</I> using this <I>Property</I>. The value of the ViewVersion shall always be greater than 0. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>View NodeClass</I> inherits the base <I>Attributes</I> from the <I>Base NodeClass</I> defined in <A href="#LinkTarget_6400" href="#">
5.2</A>
. It also defines two additional <I>Attributes</I>. </P
><P 

>The mandatory <I>ContainsNoLoops</I> <I>Attribute</I> is set to false if the <I>Server</I> is not able to identify if the <I>View</I> contains loops or not. </P
><P 

>The mandatory <I>EventNotifier Attribute </I>identifies if the <I>View</I> can be used to subscribe to <I>Events</I> that either occur in the content of the <I>View</I> or as <I>ModelChangeEvents</I> (see <A href="#LinkTarget_12306" href="#">
9.32</A>
) of the content of the <I>View</I> or to read / write the history of the <I>Events</I>. A <I>View</I> that supports <I>Events</I> shall provide all <I>Events</I> that occur in any <I>Object</I> used as <I>EventNotifier</I> that is part of the content of the <I>View</I>. In addition, it shall provide all <I>ModelChangeEvents</I> that occur in the context of the <I>View</I>. </P
><P 

>To avoid recursion, i.e. getting all <I>Events</I> of the <I>Server</I>, the <I>Server</I> <I>Object</I> defined in <A href="#LinkTarget_5761" href="#">
Part 5</A>
 shall never be part of any <I>View</I> since it provides all <I>Events</I> of the <I>Server</I>. </P
><P 

><I>Views</I> are defined by the <I>Server</I>. The browsing and querying <I>Services</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 expect the <I>NodeId</I> of a <I>View Node</I> to provide these <I>Services</I> in the context of the <I>View</I>. </P
><P 

><I>HasProperty</I> <I>References</I> are used to identify the <I>Properties</I> of a <I>View</I>. The <I>Property</I> <I>NodeVersion</I> is used to indicate the version of the <I>View Node</I>. The <I>ViewVersion</I> <I>Property</I> indicates the version of the content of the <I>View</I>. In contrast to the <I>NodeVersion</I>, the <I>ViewVersion</I> <I>Property</I> is updated even if <I>Nodes</I> not directly referenced by the <I>View</I> <I>Node</I> are added to or deleted from the <I>View</I>. This <I>Property</I> is optional because it might not be possible for <I>Servers</I> to detect changes in the <I>View</I> contents. <I>Servers</I> may also generate a <I>ModelChangeEvent,</I> described in <A href="#LinkTarget_12306" href="#">
9.32</A>
, if <I>Nodes</I> are added to or deleted from the <I>View</I>. There are no additional <I>Properties</I> defined for <I>Views</I> in this document. Additional parts of this series of standards may define additional <I>Properties</I> for <I>Views</I>. </P
><P 

><I>Views</I> can be the <I>SourceNode</I> of any <I>hierarchical Reference</I>. They shall not be the <I>SourceNode</I> of any <I>non-hierarchical Reference</I>. </P
><H2 
 ID="LinkTarget_7311"
><FONT size="+1"><B>5.5 Objects </H2
><H3 
 ID="LinkTarget_7312"
><FONT size="+1">5.5.1 Object NodeClass </H3
><P 

></B><I>Objects</I> are used to represent systems, system components, real-world objects and software objects. <I>Objects</I> are defined using the <I>Object</I> <I>NodeClass</I>, specified in <A href="#LinkTarget_7319" href="#">
Table 6</A>
. </P
><P 

><B>Table 6 &ndash; Object NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Name </P
></TH
><TH 
 valign="top"
><P 

>Use </P
></TH
><TH 
 valign="top"
><P 

>Data Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

>Attributes </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Base NodeClass Attributes </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>-- </P
></TD
><TD  
 valign="top"
><P 

>Inherited from the <I>Base NodeClass</I>. See <A href="#LinkTarget_6400" href="#">
5.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> EventNotifier </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>The <I>EventNotifier</I> <I>Attribute</I> is used to indicate if the <I>Node</I> can be used to subscribe to <I>Events</I> or the read / write historic <I>Events</I>. </P
><P 

>The <I>EventNotifier</I> is an 8-bit unsigned integer with the structure defined in the following table: </P
><P 

><FONT size="+1"> </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"><B>Field </P
></TD
><TD  
 valign="top"
><P 

>Bit </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SubscribeTo Events </P
></TD
><TD  
 valign="top"
><P 

>0 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if it can be used to subscribe to <I>Events</I>  (0 means cannot be used to subscribe to <I>Events</I>, 1 means can be used to subscribe to <I>Events</I>). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HistoryRead </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the history of the <I>Events</I> is readable  (0 means not readable, 1 means readable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HistoryWrite </P
></TD
><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the history of the<I> </I><I>Events</I> is writable  (0 means not writable, 1 means writable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>4:7 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The second two bits also indicate if the history of the <I>Events</I> is available via the OPC UA <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasComponent </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasComponent References</I> identify the <I>DataVariables</I>, the <I>Methods</I> and <I>Objects</I> contained in the <I>Object</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasProperty </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasProperty References</I> identify the <I>Properties</I> of the <I>Object</I>.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasModellingRule </P
></TD
><TD  
 valign="top"
><P 

>0..1 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>Objects</I> can point to at most one <I>ModellingRule</I> <I>Object</I> using a <I>HasModellingRule</I> <I>Reference</I> (see <A href="#LinkTarget_10745" href="#">
6.4.4</A>
 for details on <I>ModellingRules</I>).  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>The<I> </I><I>HasTypeDefi</I><I>nition Reference </I>points to the type definition of the <I>Object. </I>Each <I>Object</I> shall have exactly one type definition and therefore be the <I>SourceNode</I> of exactly one <I>HasTypeDefinition</I> <I>Reference</I> pointing to an <I>ObjectType</I>. See <A href="#LinkTarget_6232" href="#">
4.5</A>
 for a description of type definitions.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasEventSource </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>The <I>HasEventSource</I> <I>Reference</I> points to event sources of the <I>Object</I>. <I>References</I> of this type can only be used for <I>Objects</I> having their &ldquo;SubscribeToEvents&rdquo; bit set in the <I>EventNotifier</I> <I>Attribute</I>. See <A href="#LinkTarget_11181" href="#">
7.17</A>
 for details. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasNotifier </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>The <I>HasNotifier</I> <I>Reference</I> points to notifiers of the <I>Object</I>. <I>References</I> of this type can only be used for <I>Objects</I> having their &ldquo;SubscribeToEvents&rdquo; bit set in the <I>EventNotifier</I> <I>Attribute</I>. See <A href="#LinkTarget_11198" href="#">
7.19</A>
 for details. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Organizes </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>This <I>Reference</I> should be used only for <I>Objects</I> of the <I>ObjectType</I> <I>FolderType</I> (see <A href="#LinkTarget_7871" href="#">
5.5.3</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasDescription </P
></TD
><TD  
 valign="top"
><P 

>0..1 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>This <I>Reference</I> shall be used only for <I>Objects</I> of the <I>ObjectType</I> <I>DataTypeEncodingType</I> (see <A href="#LinkTarget_9473" href="#">
5.8.4</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> &lt;other References&gt; </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>Objects</I> may contain other <I>References</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Standard Properties </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NodeVersion </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeVersion</I> <I>Property</I> is used to indicate the version of a <I>Node</I>. </P
><P 

>The <I>NodeVersion</I> <I>Property</I> is updated each time a <I>Reference</I> is added or deleted to the <I>Node</I> the <I>Property</I> belongs to. <I>Attribute</I> value changes do not cause the <I>NodeVersion</I> to change. <I>Clients</I> may read the <I>NodeVersion Property</I> or subscribe to it to determine when the structure of a <I>Node</I> has changed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Icon </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>Image </P
></TD
><TD  
 valign="top"
><P 

>The <I>Icon</I> <I>Property</I> provides an image that can be used by <I>Clients</I> when displaying the <I>Node</I>. It is expected that the <I>Icon</I> <I>Property</I> contains a relatively small image. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NamingRule </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>NamingRuleType </P
></TD
><TD  
 valign="top"
><P 

>The <I>NamingRule</I> Property defines the <I>NamingRule</I> of a <I>ModellingRule</I> (see <A href="#LinkTarget_10777" href="#">
6.4.4.2.1</A>
 for details). This <I>Property</I> shall only be used for <I>Objects</I> of the type <I>ModellingRuleType</I> defined in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>Object NodeClass</I> inherits the base <I>Attributes</I> from the <I>Base NodeClass</I> defined in <A href="#LinkTarget_6400" href="#">
5.2</A>
. </P
><P 

>The mandatory <I>EventNotifier Attribute </I>identifies whether the <I>Object</I> can be used to subscribe to <I>Events</I> or to read and write the history of the <I>Events</I>. </P
><P 

>The <I>Object NodeClass</I> uses the <I>HasComponent Reference</I> to define the <I>DataVariables</I>, <I>Objects</I> and <I>Methods</I> of an <I>Object</I>. </P
><P 

>It uses the <I>HasProperty Reference</I> to define the <I>Properties</I> of an <I>Object</I>. The <I>Property</I> <I>NodeVersion</I> is used to indicate the version of the <I>Object</I>. The <I>Property</I> <I>Icon</I> provides an icon of the <I>Object</I>. The <I>Property</I> <I>NamingRule</I> defines the <I>NamingRule</I> of a <I>ModellingRule</I> and shall only be applied to <I>Objects</I> of type <I>ModellingRuleType</I>. There are no additional <I>Properties</I> defined for <I>Objects</I> in this document. Additional parts of this series of standards may define additional <I>Properties</I> for <I>Objects</I>. </P
><P 

>To specify its <I>ModellingRule</I>, an <I>Object</I> can use at most one <I>HasModellingRule Reference</I> pointing to a <I>ModellingRule</I> <I>Object</I>. <I>ModellingRules</I> are defined in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
. </P
><P 

><I>HasNotifier</I> and <I>HasEventSource</I> <I>References</I> are used to provide information about eventing and can only be applied to <I>Objects</I> used as event notifiers. Details are defined in <A href="#LinkTarget_11181" href="#">
7.17</A>
 and <A href="#LinkTarget_11198" href="#">
7.19</A>
. </P
><P 

>The <I>HasTypeDefinition Reference</I> points to the <I>ObjectType</I> used as type definition of the <I>Object</I>. </P
><P 

><I>Objects</I> may use any additional <I>References</I> to define relationships to other <I>Nodes</I>. No restrictions are placed on the types of <I>References</I> used or on the <I>NodeClasses</I> of the <I>Nodes</I> that may be referenced. However, restrictions may be defined by the <I>ReferenceType</I> excluding its use for <I>Objects</I>. Standard <I>ReferenceTypes</I> are described in Clause <A href="#LinkTarget_11034" href="#">
7</A>
. </P
><P 

>If the <I>Object</I> is used as an <I>InstanceDeclaration</I> (see <A href="#LinkTarget_6232" href="#">
4.5</A>
) then all <I>Nodes</I> referenced with <I>hierarchical References</I> in a forward direction shall have unique <I>BrowseNames</I> in the context of this <I>Object</I>. </P
><P 

>If the <I>Object</I> is created based on an <I>InstanceDeclaration</I> then it shall have the same <I>BrowseName</I> as its <I>InstanceDeclaration</I>. </P
><H3 
 ID="LinkTarget_7662"
><B>5.5.2 ObjectType NodeClass </H3
><P 

></B><I>ObjectTypes</I> provide definitions for <I>Objects</I>. <I>ObjectTypes</I> are defined using the <I>ObjectType NodeClass</I>, which is specified in <A href="#LinkTarget_7669" href="#">
Table 7</A>
. </P
><P 

><B>Table 7 &ndash; ObjectType NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Use </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Attributes </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Base NodeClass Attributes </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>-- </P
></TD
><TD  
 valign="top"
><P 

>Inherited from the <I>Base NodeClass</I>. See <A href="#LinkTarget_6400" href="#">
5.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A boolean <I>Attribute</I> with the following values: </P
><P 

> TRUE it is an abstract <I>ObjectType</I>, i.e. no <I>Objects</I> of this type shall exist, only <I>Objects</I> of its subtypes. </P
><P 

> FALSE it is not an abstract <I>ObjectType</I>, i.e. <I>Objects</I> of this type can exist.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasComponent </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasComponent References</I> identify the <I>DataVariables</I>, the <I>Methods</I>, and <I>Objects</I> contained in the <I>ObjectType</I>. </P
><P 

>If and how the referenced <I>Nodes</I> are instantiated when an <I>Object</I> of this type is instantiated, is specified in <A href="#LinkTarget_10681" href="#">
6.4</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasProperty </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasProperty References</I> identify the <I>Properties</I> of the <I>ObjectType</I>. If and how the <I>Properties</I> are instantiated when an <I>Object</I> of this type is instantiated, is specified in <A href="#LinkTarget_10681" href="#">
6.4</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasSubtype</I> <I>References</I> identify <I>ObjectTypes</I> that are subtypes of this type. The inverse <I>SubtypeOf</I> <I>Reference</I> identifies the parent type of this type. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> GeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>GeneratesEvent</I> <I>References</I> identify the type of <I>Events</I> instances of this type may generate.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> &lt;other References&gt; </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>ObjectTypes</I> may contain other <I>References</I> that can be instantiated by <I>Objects</I> defined by this <I>ObjectType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Standard Properties </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NodeVersion </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeVersion</I> <I>Property</I> is used to indicate the version of a <I>Node</I>. </P
><P 

>The <I>NodeVersion</I> <I>Property</I> is updated each time a <I>Reference</I> is added or deleted to the <I>Node</I> the <I>Property</I> belongs to. <I>Attribute</I> value changes do not cause the <I>NodeVersion</I> to change. <I>Clients</I> may read the <I>NodeVersion </I><I>Property</I> or subscribe to it to determine when the structure of a <I>Node</I> has changed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Icon </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>Image </P
></TD
><TD  
 valign="top"
><P 

>The <I>Icon</I> <I>Property</I> provides an image that can be used by <I>Clients</I> when displaying the <I>Node</I>. It is expected that the <I>Icon</I> <I>Property</I> contains a relatively small image. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>ObjectType NodeClass</I> inherits the base <I>Attributes</I> from the <I>Base NodeClass</I> defined in <A href="#LinkTarget_6400" href="#">
5.2</A>
. The additional <I>IsAbstract</I> <I>Attribute</I> indicates if the <I>ObjectType</I> is abstract or not. </P
><P 

>The <I>ObjectType NodeClass</I> uses the <I>HasComponent</I> <I>References</I> to define the <I>DataVariables</I>, <I>Objects</I>, and <I>Methods</I> for it. </P
><P 

>The <I>HasProperty Reference</I> is used to identify the <I>Properties</I>. The <I>Property</I> <I>NodeVersion</I> is used to indicate the version of the <I>ObjectType</I>. The <I>Property</I> <I>Icon</I> provides an icon of the <I>ObjectType</I>. There are no additional <I>Properties</I> defined for <I>ObjectTypes </I>in this document. Additional parts of this series of standards may define additional <I>Properties</I> for <I>ObjectTypes</I>. </P
><P 

><I>HasSubtype</I> <I>References</I> are used to subtype <I>ObjectTypes</I>. <I>ObjectType</I> subtypes inherit the general semantics from the parent type. The general rules for subtyping apply as defined in Clause <A href="#LinkTarget_9984" href="#">
6</A>
. It is not required to provide the <I>HasSubtype</I> <I>Reference</I> for the supertype, but it is required that the subtype provides the inverse <I>Reference</I> to its supertype. </P
><P 

><I>GeneratesEvent</I> <I>References</I> identify the type of <I>Events</I> that instances of the <I>ObjectType</I> may generate. These <I>Objects</I> may be the source of an <I>Event</I> of the specified type or one of its subtypes. <I>Servers</I> should make <I>GeneratesEvent</I> <I>References</I> bidirectional <I>References</I>. However, it is allowed to be unidirectional when the <I>Server</I> is not able to expose the inverse direction pointing from the <I>EventType</I> to each <I>ObjectType</I> supporting the <I>EventType. </I>Note that the <I>EventNotifier</I> <I>Attribute</I> of an <I>Object</I> and the <I>GeneratesEvent</I> <I>References</I> of its <I>ObjectType</I> are completely unrelated. <I>Objects</I> that can generate <I>Events</I> might not be used as <I>Objects</I> to which <I>Clients</I> subscribe to get the corresponding <I>Event</I> notifications. </P
><P 

><I>GeneratesEvent</I> <I>References</I> are optional, i.e. <I>Objects</I> may generate <I>Events</I> of an <I>EventType</I> that is not exposed by its <I>ObjectType</I>. </P
><P 

><I>ObjectTypes</I> may use any additional <I>References</I> to define relationships to other <I>Nodes</I>. No restrictions are placed on the types of <I>References</I> used or on the <I>NodeClasses</I> of the <I>Nodes</I> that may be referenced. However, restrictions may be defined by the <I>ReferenceType</I> excluding its use for <I>ObjectTypes</I>. Standard <I>ReferenceTypes</I> are described in Clause <A href="#LinkTarget_11034" href="#">
7</A>
. </P
><P 

>All <I>Nodes</I> referenced with <I>hierarchical References</I> shall have unique <I>BrowseNames</I> in the context of an <I>ObjectType </I>(see <A href="#LinkTarget_6232" href="#">
4.5</A>
). </P
><H3 
 ID="LinkTarget_7871"
><B>5.5.3 Standard ObjectType FolderType </H3
><P 

></B>The <I>ObjectType</I> <I>FolderType</I> is formally defined in <A href="#LinkTarget_5761" href="#">
Part 5</A>
. Its purpose is to provide <I>Objects</I> that have no other semantic than organizing of the <I>AddressSpace</I>. A special <I>ReferenceType</I> is introduced for those <I>Folder</I> <I>Objects</I>, the <I>Organizes</I> <I>ReferenceType</I>. The <I>SourceNode</I> of such a <I>Reference</I> should always be a <I>View</I> or an <I>Object</I> of the <I>ObjectType</I> <I>FolderType</I>; the <I>TargetNode</I> can be of any <I>NodeClass</I>. <I>Organizes</I> <I>References</I> can be used in any combination with <I>HasChild</I> <I>References</I> (<I>HasComponent</I>, <I>HasProperty</I>, etc.; see <A href="#LinkTarget_11074" href="#">
7.5</A>
) and do not prevent loops. Thus, they can be used to span multiple hierarchies. </P
><H3 
 ID="LinkTarget_7882"
><B>5.5.4 Client-side creation of Objects of an ObjectType </H3
><P 

></B><I>Objects</I> are always based on an <I>ObjectType</I>, i.e. they have a <I>HasTypeDefinition</I> <I>Reference</I> pointing to its <I>ObjectType</I>. </P
><P 

><I>Clients</I> can create <I>Objects</I> using the <I>AddNodes</I> <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. The <I>Service</I> requires specifying the <I>TypeDefinitionNode</I> of the <I>Object</I>. An <I>Object</I> created by the <I>AddNodes</I> <I>Service</I> contains all components defined by its <I>ObjectType</I> dependent on the <I>ModellingRules</I> specified for the components. However, the <I>Server</I> may add additional components and <I>References</I> to the <I>Object</I> and its components that are not defined by the <I>ObjectType</I>. This behaviour is <I>Server</I> dependent. The <I>ObjectType</I> only specifies the minimum set of components that shall exist for each <I>Object</I> of an <I>ObjectType</I>. </P
><P 

>In addition to the <I>AddNodes</I> <I>Service</I> <I>ObjectTypes</I> may have a special <I>Method</I> with the <I>BrowseName</I> &ldquo;<I>Create</I>&rdquo;. This Method is used to create an <I>Object</I> of this <I>ObjectType</I>. This <I>Method</I> may be useful for the creation of <I>Objects</I> where the semantic of the creation should differ from the default behaviour expected in the context of the <I>AddNodes</I> <I>Service</I>. For example, the values should directly differ from the default values or additional <I>Objects</I> should be added, etc. The input and output arguments of this <I>Method</I> depend on the <I>ObjectType</I>; the only commonality is the <I>BrowseName</I> identifying that this <I>Method</I> will create an <I>Object</I> based on the <I>ObjectType</I>. <I>Servers</I> should not provide a <I>Method</I> on an <I>ObjectType</I> with the <I>BrowseName</I> &ldquo;<I>Create</I>&rdquo; for any other purpose than creating <I>Objects</I> of the <I>ObjectType</I>. </P
><H2 
 ID="LinkTarget_7891"
><FONT size="+1"><B>5.6 Variables </H2
><H3 
 ID="LinkTarget_7892"
><FONT size="+1">5.6.1 General </H3
><P 

></B>Two types of <I>Variables</I> are defined, <I>Properties</I> and <I>DataVariables</I>. Although they differ in the way they are used as described in <A href="#LinkTarget_6207" href="#">
4.4</A>
 and have different constraints described in the remainder of <A href="#LinkTarget_7891" href="#">
5.6</A>
 they use the same <I>NodeClass</I> described in <A href="#LinkTarget_7915" href="#">
5.6.2</A>
. The constraints of <I>Properties</I> based on this <I>NodeClass</I> are defined in <A href="#LinkTarget_8582" href="#">
5.6.3</A>
, the constraints of <I>DataVariables </I>in <A href="#LinkTarget_8598" href="#">
5.6.4</A>
. </P
><H3 
 ID="LinkTarget_7915"
><B>5.6.2 Variable NodeClass </H3
><P 

></B><I>Variables</I> are used to represent values which may be simple or complex. <I>Variables</I> are defined by <I>VariableTypes</I>, as specified in <A href="#LinkTarget_8635" href="#">
5.6.5</A>
. </P
><P 

><I>Variables</I> are always defined as <I>Properties</I> or <I>DataVariables</I> of other <I>Nodes</I> in the <I>AddressSpace</I>. They are never defined by themselves. A <I>Variable</I> is always part of at least one other <I>Node</I>, but may be related to any number of other <I>Nodes</I>. <I>Variables</I> are defined using the <I>Variable</I> <I>NodeClass</I>, specified in <A href="#LinkTarget_7928" href="#">
Table 8</A>
.<I> </I></P
><P 

><B>Table 8 &ndash; Variable NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Name </P
></TH
><TH 
 valign="top"
><P 

>Use </P
></TH
><TH 
 valign="top"
><P 

>Data Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

>Attributes </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Base NodeClass Attributes </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>-- </P
></TD
><TD  
 valign="top"
><P 

>Inherited from the <I>Base NodeClass</I>. See <A href="#LinkTarget_6400" href="#">
5.2</A>
. </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Name </P
></TH
><TH 
 valign="top"
><P 

>Use </P
></TH
><TH 
 valign="top"
><P 

>Data Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B> Value </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Defined by the <I>DataType </I><I>Attribute</I> </P
></TD
><TD  
 valign="top"
><P 

>The most recent value of the <I>Variable</I> that the <I>Server</I> has. Its data type is defined by the <I>DataType Attribute</I>. It is the only <I>Attribute</I> that does not have a data type associated with it. This allows all <I>Variables</I> to have a value defined by the same <I>Value Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> DataType </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>DataType</I> definition for the <I>Value Attribute</I>. Standard <I>DataTypes</I> are defined in Clause <A href="#LinkTarget_11232" href="#">
8</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ValueRank </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>This <I>Attribute</I> indicates whether the <I>Value Attribute</I> of the <I>Variable</I> is an array and how many dimensions the array has. </P
><P 

>It may have the following values: </P
><P 

><I>n</I><I> </I>&gt; 1: the Value is an array with the specified number of dimensions. </P
><P 

>OneDimension (1): The value is an array with one dimension. </P
><P 

>OneOrMoreDimensions (0): The value is an array with one or more dimensions. </P
><P 

>Scalar (&minus;1): The value is not an array. </P
><P 

>Any (&minus;2): The value can be a scalar or an array with any number of dimensions. </P
><P 

>ScalarOrOneDimension (&minus;3): The value can be a scalar or a one dimensional array. </P
><P 

>NOTE All DataTypes are considered to be scalar, even if they have array-like semantics like ByteString and String. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ArrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>UInt32[] </P
></TD
><TD  
 valign="top"
><P 

>This <I>Attribute</I> specifies the length of each dimension for an array value. The Attribute is intended to describe the capability of the <I>Variable</I>, not the current size. </P
><P 

>The number of elements shall be equal to the value of the <I>ValueRank</I> <I>Attribute</I>. Shall be null if <I>ValueRank</I> &le; 0. </P
><P 

>A value of 0 for an individual dimension indicates that the dimension has a variable length. </P
><P 

>For example, if a <I>Variable</I> is defined by the following C array: </P
><P 

> Int32 myArray[346]; </P
><P 

>then this <I>Variable&rsquo;s</I> <I>DataType</I> would point to an Int32, the <I>Variable&rsquo;s</I> <I>ValueRank</I> has the value 1 and the <I>ArrayDimensions</I> is an array with one entry having the value 346. </P
><P 

>Note that the maximum length of an array transferred on the wire is 2147483647 (max Int32) and a multidimentional array is encoded as a one dimensional array. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> AccessLevel </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>The <I>AccessLevel</I> <I>Attribute</I> is used to indicate how the <I>Value</I> of a <I>Variable</I> can be accessed (read/write) and if it contains current and/or historic data. The <I>AccessLevel</I> does not take any user access rights into account, i.e. although the <I>Variable</I> is writable this may be restricted to a certain user / user group. </P
><P 

>The <I>AccessLevel</I> is an 8-bit unsigned integer with the structure defined in the following table: </P
><P 

><FONT size="+1"> </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"><B>Field </P
></TD
><TD  
 valign="top"
><P 

>Bit </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>CurrentRead </P
></TD
><TD  
 valign="top"
><P 

>0 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the current value is readable (0 means not readable, 1 means readable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CurrentWrite </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the current value is writable (0 means not writable, 1 means writable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HistoryRead </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the history of the value is readable (0 means not readable, 1 means readable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HistoryWrite </P
></TD
><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the history of the value is writable (0 means not writable, 1 means writable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SemanticChange </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the <I>Variable</I> used as <I>Property</I> generates <I>SemanticChangeEvents</I> (see <A href="#LinkTarget_12336" href="#">
9.33</A>
).  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>StatusWrite </P
></TD
><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the current StatusCode of the value is writable </P
><P 

>(0 means not writable, 1 means writable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TimestampWrite </P
></TD
><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the current SourceTimestamp is writable </P
><P 

>(0 means not writable, 1 means writable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
></TABLE
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Name </P
></TH
><TH 
 valign="top"
><P 

>Use </P
></TH
><TH 
 valign="top"
><P 

>Data Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

><FONT size="+1"></B> </P
><P 

><FONT size="+1">The first two bits also indicate if a current value of this <I>Variable</I> is available and the second two bits indicates if the history of the <I>Variable</I> is available via the OPC UA <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> UserAccessLevel </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>The <I>UserAccessLevel</I> <I>Attribute</I> is used to indicate how the <I>Value</I> of a <I>Variable</I> can be accessed (read/write) and if it contains current or historic data taking user access rights into account. </P
><P 

>The <I>UserAccessLevel</I> is an 8-bit unsigned integer with the structure defined in the following table: </P
><P 

><FONT size="+1"> </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"><B>Field </P
></TD
><TD  
 valign="top"
><P 

>Bit </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>CurrentRead </P
></TD
><TD  
 valign="top"
><P 

>0 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the current value is readable  (0 means not readable, 1 means readable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CurrentWrite </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the current value is writable  (0 means not writable, 1 means writable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HistoryRead </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the history of the value is readable (0 means not readable, 1 means readable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HistoryWrite </P
></TD
><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the history of the value is writable (0 means not writable, 1 means writable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>StatusWrite </P
></TD
><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the current StatusCode of the value is writable </P
><P 

>(0 means not writable, 1 means writable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Timestamp Write </P
></TD
><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the current SourceTimestamp of the value is writable </P
><P 

>(0 means not writable, 1 means writable). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The first two bits also indicate if a current value of this <I>Variable</I> is available and the second two bits indicate if the history of the <I>Variable</I> is available via the OPC UA <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> MinimumSamplingInterval </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The <I>MinimumSamplingInterval Attribute</I> indicates how &ldquo;current&rdquo; the <I>Value</I> of the <I>Variable</I> will be kept. It specifies (in milliseconds) how fast the <I>Server</I> can reasonably sample the value for changes (see <A href="#LinkTarget_5759" href="#">
Part 4</A>
 for a detailed description of sampling interval). </P
><P 

>A <I>MinimumSamplingInterval</I> of 0 indicates that the <I>Server</I> is to monitor the item continuously. A <I>MinimumSamplingInterval</I> of -1 means indeterminate. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Historizing </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>The <I>Historizing</I> <I>Attribute</I> indicates whether the <I>Server</I> is actively collecting data for the history of the <I>Variable</I>. This differs from the <I>AccessLevel</I> <I>Attribute</I> which identifies if the <I>Variable</I> has any historical data. A value of TRUE indicates that the <I>Server</I> is actively collecting data. A value of FALSE indicates the <I>Server</I> is not actively collecting data. Default value is FALSE. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasModellingRule </P
></TD
><TD  
 valign="top"
><P 

>0..1 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>Variables</I> can point to at most one <I>ModellingRule</I> <I>Object</I> using a <I>HasModellingRule</I> <I>Reference</I> (see <A href="#LinkTarget_10745" href="#">
6.4.4</A>
 for details on <I>ModellingRules</I>). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasProperty </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasProperty References</I> are used to identify the <I>Properties</I> of a <I>DataVariable</I>. </P
><P 

><I>Properties</I> are not allowed to be the <I>SourceNode</I> of <I>HasProperty </I><I>References.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasComponent </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasComponent</I> <I>References</I> are used by complex <I>DataVariables</I> to identify their composed <I>DataVariables</I>. </P
><P 

><I>Properties</I> are not allowed to use this <I>Reference</I>.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>The<I> </I><I>HasTypeDefinition Reference </I>points to the type definition of the <I>Variable. </I>Each <I>Variable</I> shall have exactly one type definition and therefore be the <I>SourceNode</I> of exactly one <I>HasTypeDefinition</I> <I>Reference</I> pointing to a <I>VariableType</I>. See <A href="#LinkTarget_6232" href="#">
4.5</A>
 for a description of type definitions.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> &lt;other References&gt; </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>Data Variables</I> may be the <I>SourceNode</I> of any other <I>References</I>. </P
><P 

><I>Properties</I> may only be the <I>SourceNode</I> of any <I>non</I><I>-</I><I>hierarchical</I> <I>Reference</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Standard Properties </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NodeVersion </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeVersion</I> <I>Property</I> is used to indicate the version of a <I>DataVariable</I>. It does not apply to <I>Properties</I>. </P
><P 

>The <I>NodeVersion</I> <I>Property</I> is updated each time a <I>Reference</I> is added or deleted to the <I>Node</I> the <I>Property</I> belongs to. <I>Attribute</I> value </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Name </P
></TH
><TH 
 valign="top"
><P 

>Use </P
></TH
><TH 
 valign="top"
><P 

>Data Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

></B>changes except for the <I>DataType</I> <I>Attribute</I> do not cause the <I>NodeVersion</I> to change. <I>Clients</I> may read the <I>NodeVersion Property</I> or subscribe to it to determine when the structure of a <I>Node</I> has changed. </P
><P 

>Although the relationship of a <I>Variable</I> to its <I>DataType</I> is not modelled using <I>References</I>, changes to the <I>DataType</I> <I>Attribute</I> of a <I>Variable</I> lead to an update of the <I>NodeVersion</I> <I>Property</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> LocalTime </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>TimeZone DataType </P
></TD
><TD  
 valign="top"
><P 

>The <I>LocalTime</I> <I>Property</I> is only used for <I>DataVariables</I>. It does not apply to <I>Properties</I>. </P
><P 

>This <I>Property</I> is a structure containing the Offset and the DaylightSavingInOffset flag. The Offset specifies the time difference (in minutes) between the SourceTimestamp (UTC) associated with the value and the time at the location in which the value was obtained. The SourceTimestamp is defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><P 

>If DaylightSavingInOffset is TRUE, then Standard/Daylight savings time (DST) at the originating location is in effect and Offset includes the DST correction. If FALSE then the Offset does not include DST correction and DST may or may not have been in effect. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> DataTypeVersion </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>Only used for <I>Variables</I> of the <I>VariableType</I> <I>DataTypeDictionaryType</I> and <I>DataTypeDescriptionType</I> as described in <A href="#LinkTarget_9156" href="#">
5.8</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> DictionaryFragment </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>Only used for <I>Variables</I> of the <I>VariableType</I> <I>DataTypeDescriptionType</I> as described in <A href="#LinkTarget_9156" href="#">
5.8</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> AllowNulls </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>The <I>AllowNulls</I> <I>Property</I> is only used for <I>DataVariables</I>. It does not apply to <I>Properties</I>. </P
><P 

>This <I>Property</I> specifies if a null value is allowed for the <I>Value</I> <I>Attribute</I> of the <I>DataVariable</I>. If it is set to true, the <I>Server</I> may return null values and accept writing of null values. If it is set to false, the <I>Server</I> shall never return a null value and shall reject any request writing a null value. </P
><P 

>If this <I>Property</I> is not provided, it is <I>Server</I>-specific if null values are allowed or not. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ValueAsText </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>Localized Text </P
></TD
><TD  
 valign="top"
><P 

>Only used for <I>DataVariables</I> having an <I>Enumeration</I> <I>DataType</I>. </P
><P 

>This optional <I>Property</I> provides the localized text representation of the enumeration value. It can be used by <I>Clients</I> only interested in displaying the text to subscribe to the <I>Property</I> instead of the value attribute. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> MaxStringLength </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>Only used for <I>DataVariables</I> having a <I>String</I> <I>DataType</I>. </P
><P 

>This optional <I>Property</I> indicates the maximum number of characters supported by the <I>DataVariable</I>.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> MaxByteStringLength </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>Only used for <I>DataVariables</I> having a <I>ByteString</I> <I>DataType</I>. </P
><P 

>This optional <I>Property</I> indicates the maximum number of bytes supported by the <I>DataVariable</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> MaxArrayLength </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>Only used for <I>DataVariables</I> having its <I>ValueRank</I> <I>Attribute</I> not set to scalar. </P
><P 

>This optional <I>Property</I> indicates the maximum length of an array supported by the <I>DataVariable</I>. In a multidimensional array it indicates the overall length. For example, a three-dimensional array of 2 x 3 x 10 has the array length of 60. </P
><P 

>NOTE In order to expose the length of an array of bytes do not use the <I>DataType</I> <I>ByteString</I> but an array of the <I>DataType</I> <I>Byte</I>. In that case the <I>MaxArrayLength</I> applies. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> EngineeringUnits </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>EU Information </P
></TD
><TD  
 valign="top"
><P 

>Only used for <I>DataVariables</I> having a <I>Number DataType</I>. </P
><P 

>This optional <I>Property</I> indicates the engineering units for the value of the <I>DataVariable</I><I> </I>(e.g. hertz or seconds). Details about the <I>Property</I> and what engineering units should be used are defined in  <A href="#LinkTarget_5765" href="#">
Part 8</A>
. The <I>DataType</I> <I>EUInformation</I> is also defined in <A href="#LinkTarget_5765" href="#">
Part 8</A>
. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>Variable NodeClass</I> inherits the base <I>Attributes</I> from the <I>Base NodeClass</I> defined in <A href="#LinkTarget_6400" href="#">
5.2</A>
. </P
><P 

>The <I>Variable NodeClass</I> also defines a set of <I>Attributes</I> that describe the <I>Variable&rsquo;s</I> Runtime value. The <I>Value</I> <I>Attribute</I> represents the <I>Variable</I> value. The <I>DataType</I>, <I>ValueRank</I> and <I>ArrayDimensions</I> <I>Attributes</I> provide the capability to describe simple and complex values. </P
><P 

>The <I>AccessLevel</I> <I>Attribute</I> indicates the accessibility of the <I>Value</I> of a <I>Variable</I> not taking user access rights into account. If the OPC UA <I>Server</I> does not have the ability to get the <I>AccessLevel</I> information from the underlying system then it should state that it is readable and writable. If a read or write operation is called on the <I>Variable</I> then the <I>Server</I> should transfer this request and return the corresponding <I>StatusCode</I> even if such a request is rejected. <I>StatusCodes</I> are defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><P 

>The <I>SemanticChange</I> bit of the <I>AccessLevel</I> <I>Attribute</I> shall be set when the <I>Property</I> describes the semantic of the <I>Node</I> that owns the <I>Property</I> and changes of the <I>Property</I> value will generate <I>SemanticChangeEvents</I>. For example, a <I>Property</I> describing the engineering unit of a <I>DataVariable</I> will have the bit set, whereas a <I>Property</I> containing an Icon of the <I>DataVariable</I> will not. This behaviour is exactly the same as described by the <I>SemanticsChanged</I> bit of the <I>StatusCode</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. However, if subscribing to a <I>Variable</I> then one should look at the <I>StatusCode</I> to identify if the semantic has changed in order to receive this information before processing the value of the <I>Variable</I>. </P
><P 

>The <I>UserAccessLevel</I> <I>Attribute</I> indicates the accessibility of the <I>Value</I> of a <I>Variable</I> taking user access rights into account. If the OPC UA <I>Server</I> does not have the ability to get any user access rights related information from the underlying system then it should use the same bit mask as used in the <I>AccessLevel Attribute</I>. The <I>UserAccessLevel</I> <I>Attribute</I> can restrict the accessibility indicated by the <I>AccessLevel</I> <I>Attribute</I>, but not exceed it. </P
><P 

>The <I>MinimumSamplingInterval Attribute</I> specifies how fast the <I>Server</I> can reasonably sample the <I>value</I> for changes. The accuracy of this value (the ability of the <I>Server</I> to attain &ldquo;best case&rdquo; performance) can be greatly affected by system load and other factors. </P
><P 

>The <I>Historizing</I> <I>Attribute</I> indicates whether the <I>Server</I> is actively collecting data for the history of the <I>Variable</I>. See <A href="#LinkTarget_5773" href="#">
Part 11</A>
 for details on historizing <I>Variables</I>. </P
><P 

><I>Clients</I> may read or write <I>Variable</I> values, or monitor them for value changes, as specified in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. <A href="#LinkTarget_5765" href="#">
Part 8</A>
 defines additional rules when using the <I>Services</I> for automation data. </P
><P 

>To specify its <I>ModellingRule</I>, a <I>Variable</I> can use at most one <I>HasModellingRule Reference</I> pointing to a <I>ModellingRule</I> <I>Object</I>. <I>ModellingRules</I> are defined in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
. </P
><P 

>If the <I>Variable</I> is created based on an <I>InstanceDeclaration</I> (see <A href="#LinkTarget_6232" href="#">
4.5</A>
) it shall have the same <I>BrowseName</I> as its <I>InstanceDeclaration</I>. </P
><P 

>The other <I>References</I> are described separately for <I>Properties</I> and <I>DataVariables</I> in the remainder of <A href="#LinkTarget_7891" href="#">
5.6</A>
 </P
><H3 
 ID="LinkTarget_8582"
><B>5.6.3 Properties </H3
><P 

></B><I>Properties</I> are used to define the characteristics of <I>Nodes</I>. <I>Properties</I> are defined using the <I>Variable NodeClass</I>, specified in <A href="#LinkTarget_7928" href="#">
Table 8</A>
. However, they restrict their use. </P
><P 

><I>Properties</I> are the leaf of any hierarchy; therefore they shall not be the <I>SourceNode</I> of any <I>hierarchical References</I>. This includes the <I>HasComponent</I> or <I>HasProperty</I> <I>Reference</I>, that is, <I>Properties </I>do not contain <I>Properties</I> and cannot expose their complex structure. However, they may be the <I>SourceNode</I> of any <I>non-hierarchical References</I>. </P
><P 

>The <I>HasTypeDefinition</I> <I>Reference</I> points to the <I>VariableType</I> of the <I>Property</I>. Since <I>Properties</I> are uniquely identified by their <I>BrowseName</I>, all <I>Properties</I> shall point to the <I>PropertyType </I>defined in <A href="#LinkTarget_5761" href="#">
Part 5</A>
. </P
><P 

><I>Properties</I> shall always be defined in the context of another <I>Node</I> and shall be the <I>TargetNode</I> of at least one <I>HasProperty</I> <I>Reference</I>. To distinguish them from <I>DataVariables</I>, they shall not be the <I>TargetNode</I> of any <I>HasComponent</I> <I>Reference</I>. Thus, a <I>HasProperty Reference</I> pointing to a <I>Variable Node</I> defines this <I>Node</I> as a <I>Property</I>. </P
><P 

>The <I>BrowseName</I> of a <I>Property</I> is always unique in the context of a <I>Node</I>. It is not permitted for a <I>Node</I> to refer to two <I>Variables</I> using <I>HasProperty References</I> having the same <I>BrowseName</I>. </P
><H3 
 ID="LinkTarget_8598"
><B>5.6.4 DataVariable </H3
><P 

></B><I>DataVariables</I> represent the content of an <I>Object</I>. <I>DataVariables</I> are defined using the <I>Variable NodeClass</I>, specified in <A href="#LinkTarget_7928" href="#">
Table 8</A>
. </P
><P 

><I>DataVariables </I>identify their <I>Properties</I> using <I>HasProperty References</I>. Complex <I>DataVariables</I> use <I>HasComponent References</I> to expose their component <I>DataVariables</I>. </P
><P 

>The <I>Property</I> <I>NodeVersion</I> indicates the version of the <I>DataVariable</I>. The <I>Property</I> <I>LocalTime</I> indicates the difference between the SourceTimestamp of the value and the standard time at the location in which the value was obtained. The <I>Property</I> <I>DataTypeVersion</I> is used only for <I>DataTypeDictionaries</I> and <I>DataTypeDescriptions</I> as defined in <A href="#LinkTarget_9156" href="#">
5.8</A>
. The Standard <I>Property</I> <I>DictionaryFragment</I> is used only for <I>DataTypeDescriptions</I> as defined in <A href="#LinkTarget_9156" href="#">
5.8</A>
. The <I>Property</I> <I>AllowNulls</I> indicates if null values are allowed for the <I>Value</I> <I>Attribute</I>. The <I>Property</I> <I>ValueAsText</I> provides a localized text representation for enumeration values. The <I>Property</I> <I>MaxStringLength</I> indicates the maximum allowed length of a string value, the <I>Property</I> <I>MaxByteStringLength</I> the maximum allowed length of a byte string value and the <I>Property</I> <I>MaxArrayLength</I> the maximum allowed array length of the value. The <I>Property</I> <I>EngineeringUnits</I> indicates the engineering units of the value. There are no additional <I>Properties</I> defined for <I>DataVariables</I> in this part of this document. Additional parts of this series of standards may define additional <I>Properties</I> for <I>DataVariables</I>. <A href="#LinkTarget_5765" href="#">
Part 8</A>
 defines a set of <I>Properties</I> that can be used for <I>DataVariables</I>. </P
><P 

><I>DataVariables</I> may use additional <I>References</I> to define relationships to other <I>Nodes</I>. No restrictions are placed on the types of <I>References</I> used or on the <I>NodeClasses</I> of the <I>Nodes</I> that may be referenced. However, restrictions may be defined by the <I>ReferenceType</I> excluding its use for <I>DataVariables</I>. Standard <I>ReferenceTypes</I> are described in Clause <A href="#LinkTarget_11034" href="#">
7</A>
. </P
><P 

>A <I>DataVariable</I> is intended to be defined in the context of an <I>Object</I>. However, complex <I>DataVariables</I> may expose other <I>DataVariables</I>, and <I>ObjectTypes</I> and complex <I>VariableTypes</I> may also contain <I>DataVariables</I>. Therefore each <I>DataVariable</I> shall be the <I>TargetNode</I> of at least one <I>HasComponent</I> <I>Reference</I> coming from an <I>Object</I>, an <I>ObjectType</I>, a <I>DataVariable</I> or a <I>VariableType</I>. <I>DataVariables</I> shall not be the <I>TargetNode</I> of any <I>HasProperty References</I>. Therefore, a <I>HasComponent Reference</I> pointing to a <I>Variable Node</I> identifies it as a <I>DataVariable</I>. </P
><P 

>The <I>HasTypeDefinition Reference</I> points to the <I>VariableType</I> used as type definition of the <I>DataVariable</I>. </P
><P 

>If the <I>DataVariable </I>is used as <I>InstanceDeclaration</I> (see <A href="#LinkTarget_6232" href="#">
4.5</A>
) all <I>Nodes</I> referenced with <I>hierarchical References</I> in the forward direction shall have unique <I>BrowseNames</I> in the context of this <I>DataVariable</I>. </P
><H3 
 ID="LinkTarget_8635"
><B>5.6.5 VariableType NodeClass </H3
><P 

></B><I>VariableTypes</I> are used to provide type definitions for <I>Variables</I>. <I>VariableTypes</I> are defined using the <I>VariableType</I> <I>NodeClass</I>, as specified in <A href="#LinkTarget_8642" href="#">
Table 9</A>
. </P
><P 

><B>Table 9 &ndash; VariableType NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Name </P
></TH
><TH 
 valign="top"
><P 

>Use </P
></TH
><TH 
 valign="top"
><P 

>Data Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

>Attributes </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Base NodeClass Attributes </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>-- </P
></TD
><TD  
 valign="top"
><P 

>Inherited from the <I>Base NodeClass</I>. See <A href="#LinkTarget_6400" href="#">
5.2</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Value </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>Defined by the <I>DataType </I><I>attribute</I> </P
></TD
><TD  
 valign="top"
><P 

>The default <I>Value</I> for instances of this type. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> DataType </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the data type definition for instances of this type. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ValueRank </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>This <I>Attribute</I> indicates whether the <I>Value Attribute</I> of the <I>VariableType</I> is an array and how many dimensions the array has. </P
><P 

>It may have the following values: </P
><P 

><I>n </I>&gt; 1: the Value is an array with the specified number of dimensions. </P
><P 

>OneDimension (1): The value is an array with one dimension. </P
><P 

>OneOrMoreDimensions (0): The value is an array with one or more dimensions. </P
><P 

>Scalar (&minus;1): The value is not an array. </P
><P 

>Any (&minus;2): The value can be a scalar or an array with any number of dimensions. </P
><P 

>ScalarOrOneDimension (&minus;3): The value can be a scalar or a one dimensional array. </P
><P 

>NOTE All DataTypes are considered to be scalar, even if they have array-like semantics like ByteString and String. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ArrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>UInt32[] </P
></TD
><TD  
 valign="top"
><P 

>This <I>Attribute</I> specifies the length of each dimension for an array value. The Attribute is intended to describe the capability of the <I>VariableType</I>, not the current size. </P
><P 

>The number of elements shall be equal to the value of the <I>ValueRank</I> <I>Attribute</I>. Shall be null if <I>Valu</I><I>eRank</I> &le; 0. </P
><P 

>A value of 0 for an individual dimension indicates that the dimension has a variable length. </P
><P 

>For example, if a <I>VariableType</I> is defined by the following C array: </P
><P 

> Int32 myArray[346]; </P
><P 

>then this <I>VariableType&rsquo;s</I> <I>DataType</I> would point to an Int32, the <I>VariableType&rsquo;s</I> <I>ValueRank</I> has the value 1 and the <I>ArrayDimensions</I> is an array with one entry having the value 346. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A boolean <I>Attribute</I> with the following values: </P
><P 

> TRUE it is an abstract <I>VariableType</I>, i.e. no <I>Variable</I> of this type shall exist, only of its subtypes. </P
><P 

> FALSE it is not an abstract <I>VariableType</I>, i.e. <I>Variables</I> of this type can exist.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasProperty </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasProperty References</I> are used to identify the <I>Properties</I> of the <I>VariableType</I>. The referenced <I>Nodes</I> may be instantiated by the instances of this type, depending on the <I>ModellingRules</I> defined in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasComponent </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasComponent </I><I>References</I> are used for complex <I>VariableTypes</I> to identify their containing <I>DataVariables</I>. Complex <I>VariableTypes</I> can only be used for <I>DataVariables</I>. The referenced <I>Nodes</I> may be instantiated by the instances of this type, depending on the <I>ModellingRules</I> defined in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasSubtype</I> <I>References</I> identify <I>VariableTypes</I> that are subtypes of this type. The inverse <I>subtype of</I> <I>Reference</I> identifies the parent type of this type. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> GeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>GeneratesEvent</I> <I>References</I> identify the type of <I>Events</I> instances of this type may generate.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> &lt;other References&gt; </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>VariableTypes</I> may contain other <I>References</I> that can be instantiated by <I>Variables</I> defined by this <I>VariableType</I>. <I>ModellingRules</I> are defined in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Standard Properties </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NodeVersion </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeVersion</I> <I>Property</I> is used to indicate the version of a <I>Node</I>. </P
><P 

>The <I>NodeVersion</I> <I>Property</I> is updated each time a <I>Reference</I> is added or deleted to the <I>Node</I> the <I>Property</I> belongs to. <I>Attribute</I> value changes except for the <I>DataType</I> <I>Attribute</I> do not cause the <I>NodeVersion</I> to change. <I>Clients</I> may read the <I>NodeVersion Property</I> or subscribe to it to determine when the structure of a <I>Node</I> has changed. </P
><P 

>Although the relationship of a <I>VariableType</I> to its <I>DataType</I> is not modelled using <I>References</I>, changes to the <I>DataType</I> <I>Attribute</I> of a <I>VariableType</I> lead to an update of the <I>NodeVersion</I> <I>Property</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1">The <I>VariableType NodeClass</I> inherits the base <I>Attributes</I> from the <I>Base NodeClass</I> defined in <A href="#LinkTarget_6400" href="#">
5.2</A>
. The <I>VariableType NodeClass</I> also defines a set of <I>Attributes</I> that describe the default or initial value of its instance <I>Variables</I>. The <I>Value</I> <I>Attribute</I> represents the default value. The <I>DataType</I>, <I>ValueRank</I> and <I>ArrayDimensions</I> <I>Attributes</I> provide the capability to describe simple and complex values. The <I>IsAbstract Attribute</I> defines if the type can be directly instantiated. </P
><P 

>The <I>VariableType NodeClass</I> uses <I>HasProperty References</I> to define the <I>Properties</I> and <I>HasComponent References</I> to define <I>DataVariables</I>. Whether they are instantiated depends on the <I>ModellingRules</I> defined in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
. </P
><P 

>The <I>Property</I> <I>NodeVersion</I> indicates the version of the <I>VariableType</I>. There are no additional <I>Properties</I> defined for <I>VariableTypes </I>in this document. Additional parts of this series of standards may define additional <I>Properties</I> for <I>VariableTypes</I>. <A href="#LinkTarget_5765" href="#">
Part 8</A>
 defines a set of <I>Properties</I> that can be used for <I>VariableTypes</I>. </P
><P 

><I>HasSubtype</I> <I>References</I> are used to subtype <I>VariableTypes</I>. <I>VariableType</I> subtypes inherit the general semantics from the parent type. The general rules for subtyping are defined in Clause <A href="#LinkTarget_9984" href="#">
6</A>
. It is not required to provide the <I>HasSubtype</I> <I>Reference</I> for the supertype, but it is required that the subtype provides the inverse <I>Reference</I> to its supertype. </P
><P 

><I>GeneratesEvent</I> <I>References</I> identify that <I>Variables </I>of the <I>VariableType</I> may be the source of an <I>Event</I> of the specified <I>EventType</I> or one of its subtypes. <I>Servers</I> should make <I>GeneratesEvent</I> <I>References</I> bidirectional <I>References</I>. However, it is allowed to be unidirectional when the <I>Server</I> is not able to expose the inverse direction pointing from the <I>EventType</I> to each <I>VariableType</I> supporting the <I>EventType.</I> </P
><P 

><I>GeneratesEvent</I> <I>References</I> are optional, i.e. <I>Variables</I> may generate <I>Events</I> of an <I>EventType</I> that is not exposed by its <I>VariableType</I>. </P
><P 

><I>VariableTypes</I> may use any additional <I>References</I> to define relationships to other <I>Nodes</I>. No restrictions are placed on the types of <I>References</I> used or on the <I>NodeClasses</I> of the <I>Nodes</I> that may be referenced. However, restrictions may be defined by the <I>ReferenceType</I> excluding its use for <I>VariableTypes</I>. Standard <I>ReferenceTypes</I> are described in Clause <A href="#LinkTarget_11034" href="#">
7</A>
. </P
><P 

>All <I>Nodes</I> referenced with <I>hierarchical References</I> shall have unique <I>BrowseNames</I> in the context of the <I>VariableType </I>(see <A href="#LinkTarget_6232" href="#">
4.5</A>
). </P
><H3 
 ID="LinkTarget_8901"
><B>5.6.6 Client-side creation of Variables of an VariableType </H3
><P 

></B><I>Variables</I> are always based on a <I>VariableType</I>, i.e. they have a <I>HasTypeDefinition</I> <I>Reference</I> pointing to its <I>VariableType</I>. </P
><P 

><I>Clients</I> can create <I>Variables</I> using the <I>AddNodes</I> <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. The <I>Service</I> requires specifying the <I>TypeDefinitionNode</I> of the <I>Variable</I>. A <I>Variable</I> created by the <I>AddNodes</I> <I>Service</I> contains all components defined by its <I>VariableType</I> dependent on the <I>ModellingRules</I> specified for the components. However, the <I>Server</I> may add additional components and <I>References</I> to the <I>Variable</I> and its components that are not defined by the <I>VariableType</I>. This behaviour is <I>Server</I> dependent. The <I>VariableType</I> only specifies the minimum set of components that shall exist for each <I>Variable</I> of a <I>VariableType</I>. </P
><H2 
 ID="LinkTarget_8909"
><FONT size="+1"><B>5.7 Method NodeClass </H2
><P 

><FONT size="+1"></B><I>Methods</I> define callable functions. <I>Methods</I> are invoked using the <I>Call</I> <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. Method invocations are not represented in the <I>AddressSpace</I>. Method invocations always run to completion and always return responses when complete. <I>Methods</I> are defined using the <I>Method</I> <I>NodeClass</I>, specified in <A href="#LinkTarget_8921" href="#">
Table 10</A>
. </P
><P 

><B>Table 10 &ndash; Method NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Use </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Attributes </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Base NodeClass Attributes </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>-- </P
></TD
><TD  
 valign="top"
><P 

>Inherited from the <I>Base NodeClass</I>. See <A href="#LinkTarget_6400" href="#">
5.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Executable </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>The <I>Executable</I> <I>Attribute</I> indicates if the <I>Method</I> is currently executable (&ldquo;False&rdquo; means not executable, &ldquo;True&rdquo; means executable). </P
><P 

>The <I>Executable Attribute</I> does not take any user access rights into account, i.e. although the <I>Method</I> is executable this may be restricted to a certain user / user group. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> UserExecutable </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>The <I>UserExecutable</I> <I>Attribute</I> indicates if the <I>Method</I> is currently executable taking user access rights into account (&ldquo;False&rdquo; means not executable, &ldquo;True&rdquo; means executable).  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasProperty </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasProperty</I> <I>References</I> identify the <I>Properties</I> for the <I>Method</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasModellingRule </P
></TD
><TD  
 valign="top"
><P 

>0..1 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>Methods</I> can point to at most one <I>ModellingRule</I> <I>Object</I> using a <I>HasModellingRule</I> <I>Reference</I> (see <A href="#LinkTarget_10745" href="#">
6.4.4</A>
 for details on <I>ModellingRules</I>).  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> GeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>GeneratesEvent</I> <I>References</I> identify the type of <I>Events</I> that will be generated whenever the <I>Method</I> is called.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>AlwaysGeneratesEvent</I> <I>References</I> identify the type of <I>Events</I> that shall be generated whenever the <I>Method</I> is called.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> &lt;other References&gt; </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>Methods</I> may contain other <I>References</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Standard Properties </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NodeVersion </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeVersion</I> <I>Property</I> is used to indicate the version of a <I>Node</I>. </P
><P 

>The <I>NodeVersion</I> <I>Property</I> is updated each time a <I>Reference</I> is added or deleted to the <I>Node</I> the <I>Property</I> belongs to. <I>Attribute</I> value changes do not cause the <I>NodeVersion</I> to change. <I>Clients</I> may read the <I>Node</I><I>Version Property</I> or subscribe to it to determine when the structure of a <I>Node</I> has changed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> InputArguments </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>Argument[] </P
></TD
><TD  
 valign="top"
><P 

>The <I>InputArguments Property </I>is used to specify the arguments that shall be used by a client when calling the <I>Method.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> OutputArguments </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>Argument[] </P
></TD
><TD  
 valign="top"
><P 

>The <I>OutputArguments Property </I>specifies the result returned from the <I>Method</I> call. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>Method NodeClass</I> inherits the base <I>Attributes</I> from the <I>Base NodeClass</I> defined in <A href="#LinkTarget_6400" href="#">
5.2</A>
. The <I>Method NodeClass</I> defines no additional <I>Attributes</I>. </P
><P 

>The <I>Executable</I> <I>Attribute</I> indicates whether the <I>Method</I> is executable, not taking user access rights into account. If the OPC UA <I>Server</I> cannot get the <I>Executable</I> information from the underlying system, it should state that it is executable. If a <I>Method</I> is called then the <I>Server</I> should transfer this request and return the corresponding <I>StatusCode</I> even if such a request is rejected. <I>StatusCodes</I> are defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><P 

>The <I>UserExecutable</I> <I>Attribute</I> indicates whether the <I>Method</I> is executable, taking user access rights into account. If the OPC UA <I>Server</I> cannot get any user rights related information from the underlying system, it should use the same value as used in the <I>Executable Attribute</I>. The <I>UserExecutable</I> <I>Attribute</I> can be set to &ldquo;False&rdquo;, even if the <I>Executable</I> <I>Attribute</I> is set to &ldquo;True&rdquo;, but it shall be set to &ldquo;False&rdquo; if the <I>Executable</I> <I>Attribute</I> is set to &ldquo;False&rdquo;. </P
><P 

><I>Properties</I> may be defined for <I>Methods</I> using <I>HasProperty</I> <I>References</I>. The <I>Properties</I> <I>InputArguments</I> and <I>OutputArguments</I> specify the input arguments and output arguments of the <I>Method</I>. Both contain an array of the <I>DataType</I> <I>Argument</I> as specified in <A href="#LinkTarget_11598" href="#">
8.6</A>
. An empty array or a <I>Property</I> that is not provided indicates that there are no input arguments or output arguments for the <I>Method</I>. The <I>Property</I> <I>NodeVersion</I> indicates the version of the <I>Method</I>. There are no additional <I>Properties</I> defined for <I>Methods</I> in this document. Additional parts of this series of standards may define additional <I>Properties</I> for <I>Methods</I>. </P
><P 

>To specify its <I>ModellingRule</I>, a <I>Method</I> can use at most one <I>HasModellingRule Reference</I> pointing to a <I>ModellingRule</I> <I>Object</I>. <I>ModellingRules</I> are defined in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
. </P
><P 

><I>GeneratesEvent</I> <I>References</I> identify that <I>Methods</I> may generate an <I>Event</I> of the specified <I>EventType</I> or one of its subtypes for every call of the <I>Method</I>. A <I>Server</I> may generate one <I>Event</I> for each referenced <I>EventType</I> when a <I>Method</I> is successfully called. </P
><P 

><I>AlwaysGeneratesEvent</I> <I>References</I> identify that <I>Methods</I> will generate an <I>Event</I> of the specified <I>EventType</I> or one of its subtypes for every call of the <I>Method</I>. A <I>Server</I> shall always generate one <I>Event</I> for each referenced <I>EventType</I> when a <I>Method</I> is successfully called. </P
><P 

><I>Servers</I> should make <I>GeneratesEvent</I> <I>References</I> bidirectional <I>References</I>. However, it is allowed to be unidirectional when the <I>Server</I> is not able to expose the inverse direction pointing from the <I>EventType</I> to each <I>Method</I> generating the <I>EventType.</I> </P
><P 

><I>GeneratesEvent</I> <I>References</I> are optional, i.e. the call of a <I>Method</I> may produce <I>Events</I> of an <I>EventType</I> that is not referenced with a <I>GeneratesEvent</I> <I>Reference</I> by the <I>Method</I>. </P
><P 

><I>Methods</I> may use additional <I>References</I> to define relationships to other <I>Nodes</I>. No restrictions are placed on the types of <I>References</I> used or on the <I>NodeClasses</I> of the <I>Nodes</I> that may be referenced. However, restrictions may be defined by the <I>ReferenceType</I> excluding its use for <I>Methods</I>. Standard <I>ReferenceTypes</I> are described in Clause <A href="#LinkTarget_11034" href="#">
7</A>
. </P
><P 

>A <I>Method</I> shall always be the <I>TargetNode</I> of at least one <I>HasComponent</I> <I>Reference</I>. The <I>SourceNode</I> of these <I>HasComponent</I> <I>References</I> shall be an <I>Object</I> or an <I>ObjectType</I>. If a <I>Method</I> is called then the <I>NodeId</I> of one of those <I>Nodes</I> shall be put into the Call <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 as parameter to detect the context of the <I>Method</I> operation. </P
><P 

>If the <I>Method</I> is used as <I>InstanceDeclaration</I> (see <A href="#LinkTarget_6232" href="#">
4.5</A>
) all <I>Nodes</I> referenced with <I>hierarchical References</I> in forward direction shall have unique <I>BrowseNames</I> in the context of this <I>Method</I>. </P
><H2 
 ID="LinkTarget_9156"
><FONT size="+1"><B>5.8 DataTypes </H2
><H3 
 ID="LinkTarget_9157"
><FONT size="+1">5.8.1 DataType Model </H3
><P 

></B>The DataType Model is used to define simple and structured data types. Data types are used to describe the structure of the <I>Value</I> <I>Attribute</I> of <I>Variables </I>and their <I>VariableTypes</I>. Therefore each <I>Variable</I> and <I>VariableType</I> is pointing with its <I>DataType</I> <I>Attribute</I> to a <I>Node</I> of the <I>DataType</I> <I>NodeClass</I> as shown in <A href="#LinkTarget_9166" href="#">
Figure 9</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
> VariableTypes define the DataType for their Value Attribute Variables defined by a VariableType point to the same DataType as its VariableType or a subtype of it VariableType Variable  DataType </DIV
></P
><P 

><B>Figure 9 &ndash; Variables, VariableTypes and their DataTypes </P
><P 

></B>In many cases, the <I>NodeId</I> of the <I>DataType Node</I> &ndash; the <I>DataTypeId</I> &ndash; will be well-known to <I>Clients</I> and <I>Servers</I>. Clause <A href="#LinkTarget_11232" href="#">
8</A>
 defines <I>DataTypes</I> and <A href="#LinkTarget_5763" href="#">
Part 6</A>
 defines their <I>DataTypeIds</I>. In addition, other organizations may define <I>DataTypes</I> that are well-known in the industry. Well-known <I>DataTypeIds</I> provide for commonality across OPC UA <I>Servers</I> and allow <I>Clients</I> to interpret values without having to read the type description from the <I>Server</I>. Therefore, <I>Servers</I> may use well-known <I>DataTypeIds</I> without representing the corresponding <I>DataType Nodes</I> in their <I>AddressSpaces</I>. </P
><P 

>In other cases, <I>DataTypes</I> and their corresponding <I>DataTypeIds</I> may be vendor-defined. <I>Servers</I> should attempt to expose the <I>DataType Nodes</I> and the information about the structure of those <I>DataTypes</I> for <I>Clients</I> to read, although this information might not always be available to the <I>Server</I>. </P
><P 

><A href="#LinkTarget_9195" href="#">
Figure 10</A>
 illustrates the <I>Nodes</I> used in the <I>AddressSpace</I> to describe the structure of a <I>DataType</I>. The <I>DataType</I> points to an <I>Object</I> of type <I>DataTypeEncodingType</I>. Each <I>DataType</I> can have several <I>DataTypeEncoding</I>, for example &ldquo;Default&rdquo;, &ldquo;UA Binary&rdquo; and &ldquo;XML&rdquo; encoding. Services in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 allow <I>Clients</I> to request an encoding or choosing the &ldquo;Default&rdquo; encoding. </P
><P 

>Each <I>DataTypeEncoding</I> is used by exactly one <I>DataType</I>, that is, it is not permitted for two <I>DataTypes</I> to point to the same <I>DataTypeEncoding</I>. The <I>DataTypeEncoding</I> <I>Object</I> points to exactly one <I>Variable</I> of type <I>DataTypeDescriptionType</I>. The <I>DataTypeDescription</I> <I>Variable</I> belongs to a <I>DataTypeDictionary</I> <I>Variable</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Value identifies the description of the data type in the DataTypeDictionary DataType Object of ObjectType DataTypeEncodingType Variable  of VariableType DataTypeDictionaryType Object of ObjectType DataTypeEncodingType Object of ObjectType DataTypeEncodingType Several DataTypeEncoding can point to the same DataTypeDescription, e.g. &ldquo;Default&rdquo; and &ldquo;UA Binary&rdquo; Variable  of VariableType DataTypeDictionaryType Each DataType can have several DataTypeEncoding, e.g. &ldquo;Default&rdquo;, &ldquo;UA Binary&rdquo;, and &ldquo;XML&rdquo; Variable  of VariableType DataTypeDescriptionType Object  of ObjectType DataTypeSystemType Variable  of VariableType DataTypeDescriptionType Object  of ObjectType DataTypeSystemType </DIV
></P
><P 

><B>Figure 10 &ndash; DataType Model </P
><P 

></B>Since the <I>NodeId</I> of the <I>DataTypeEncoding</I> will be used in some Mappings to identify the <I>DataType</I> and its encoding as defined in <A href="#LinkTarget_5763" href="#">
Part 6</A>
, those <I>NodeIds</I> may also be well-known for well-known <I>DataTypeIds</I>. </P
><P 

>The <I>DataTypeDictionary </I>describes a set of <I>DataTypes</I> in sufficient detail to allow <I>Clients</I> to parse/interpret <I>Variable Values</I> that they receive and to construct <I>Values</I> that they send. The <I>DataTypeDictionary </I>is represented as a <I>Variable</I> of type <I>DataTypeDictionaryType</I> in the <I>AddressSpace</I>, the description about the <I>DataTypes</I> is contained in its <I>Value Attribute</I>. All containing <I>DataTypes</I> exposed in the <I>AddressSpace</I> are represented as <I>Variables</I> of type <I>DataTypeDescriptionType</I>. The <I>Value</I> of one of these Variables identifies the description of a <I>DataType</I> in the <I>Value</I> <I>Attribute</I> of the <I>DataTypeDictionary</I>. </P
><P 

>The <I>DataType</I> of a <I>DataTypeDictionary</I> <I>Variable</I> is always a ByteString. The format and conventions for defining <I>DataTypes </I>in this ByteString are defined by <I>DataTypeSystem</I>s. <I>DataTypeSystems</I> are identified by <I>NodeIds</I>. They are represented in the <I>AddressSpace</I> as <I>Objects</I> of the <I>ObjectType</I> <I>DataTypeSystemType</I>. Each <I>Variable </I>representing a <I>DataTypeDictionary</I> references a <I>DataTypeSystem</I> <I>Object</I> to identify their <I>DataTypeSystem</I>. </P
><P 

>A client shall recognise the <I>DataTypeSystem</I> to parse any of the type description information. OPC UA <I>Clients</I> that do not recognise a <I>DataTypeSystem</I> will not be able to interpret its type </P
><P 

>descriptions, and consequently, the values described by them. In these cases, <I>Clients</I> interpret these values as opaque ByteStrings. </P
><P 

>OPC Binary and W3C XML Schema are examples of <I>DataTypeSystems</I>. The OPC Binary <I>DataTypeSystem</I> is defined in <A href="#LinkTarget_12642" href="#">
Annex C</A>
. OPC Binary uses XML to describe binary data values. W3C XML Schema is specified in <A href="http://www.w3.org/TR/xmlschema-1/">
XML Schema Part 1</A>
 and <A href="http://www.w3.org/TR/xmlschema-2/">
XML Schema Part 2</A>
 </P
><H3 
 ID="LinkTarget_9223"
><B>5.8.2 Encoding Rules for different kinds of DataTypes </H3
><P 

></B>Different kinds of <I>DataTypes</I> are handled differently regarding their encoding and according to whether this encoding is represented in the <I>AddressSpace</I>. </P
><P 

><I>Built-in DataTypes</I> are a fixed set of <I>DataTypes</I> (see <A href="#LinkTarget_5763" href="#">
Part 6</A>
 for a complete list of <I>Built-in</I> DataTypes). They have no encodings visible in the <I>AddressSpace</I> since the encoding should be known to all OPC UA products. Examples of <I>Built-in</I> <I>DataTypes</I> are <I>Int32</I> (see <A href="#LinkTarget_11812" href="#">
8.26</A>
) and <I>Double</I> (see <A href="#LinkTarget_11691" href="#">
8.12</A>
). </P
><P 

><I>Simple</I> <I>DataTypes</I> are subtypes of the <I>Built-in DataTypes</I>. They are handled on the wire like the <I>Built-in</I> <I>DataType</I>, i.e. they cannot be distinguished on the wire from their <I>Built-in</I> supertypes. Since they are handled like <I>Built-in</I> <I>DataTypes</I> regarding the encoding they cannot have encodings defined in the <I>AddressSpace</I>. <I>Clients</I> can read the <I>DataType</I> <I>Attribute</I> of a <I>Variable</I> or <I>VariableType</I> to identify the <I>Simple</I> <I>DataType</I> of the <I>Value</I> <I>Attribute</I>. An example of a <I>Simple</I> <I>DataType</I> is <I>Duration</I>. It is handled on the wire as a <I>Double</I> but the Client can read the <I>DataType</I> <I>Attribute</I> and thus interpret the value as defined by <I>Duration</I> (see <A href="#LinkTarget_11698" href="#">
8.13</A>
). </P
><P 

><I>Structured</I> <I>DataTypes</I> are <I>DataTypes</I> that represent structured data and are not defined as <I>Built-in</I> <I>DataTypes</I>. <I>Structured DataTypes</I> inherit directly or indirectly from the <I>DataType</I> <I>Structure</I> defined in <A href="#LinkTarget_11939" href="#">
8.33</A>
. <I>Structured</I> <I>DataTypes</I> may have several encodings and the encodings are exposed in the <I>AddressSpace</I>. How the encoding of <I>Structured</I> <I>DataTypes</I> is handled on the wire is defined in <A href="#LinkTarget_5763" href="#">
Part 6</A>
. The encoding of the <I>Structured</I> <I>DataType</I> is transmitted with each value, thus <I>Clients</I> are aware of the <I>DataType</I> without reading the <I>DataType</I> <I>Attribute</I>. The encoding has to be transmitted so the Client is able to interpret the data. An example of a <I>Structured</I> <I>DataType</I> is <I>Argument</I> (see <A href="#LinkTarget_11598" href="#">
8.6</A>
). </P
><P 

><I>Enumeration DataTypes</I> are <I>DataTypes</I> that represent discrete sets of named values. Enumerations are always encoded as Int32 on the wire as defined in <A href="#LinkTarget_5763" href="#">
Part 6</A>
. Enumeration<I> DataTypes</I> inherit directly or indirectly from the <I>DataType</I> <I>Enumeration</I> defined in <A href="#LinkTarget_11700" href="#">
8.14</A>
. Enumerations have no encodings exposed in the <I>AddressSpace</I>. To expose the human-readable representation of an enumerated value the <I>DataType</I> <I>Node</I> may have the <I>EnumStrings</I> <I>Property</I> that contains an array of <I>LocalizedText</I>. The Integer representation of the enumeration value points to a position within that array. <I>EnumValues</I> <I>Property</I> can be used instead of the <I>EnumStrings</I> to support integer representation of enumerations that are not zero-based or have gaps. It contains an array of a <I>Structured</I> <I>DataType</I> containing the integer representation as well as the human-readable representation. An example of an enumeration <I>DataType</I> containing a sparse list of Integers is <I>NodeClass</I> which is defined in <A href="#LinkTarget_11889" href="#">
8.30</A>
. </P
><P 

>In addition to the <I>DataTypes </I>described above<I>,</I> abstract <I>DataTypes</I> are also supported, which do not have any encodings and cannot be exchanged on the wire. <I>Variables</I> and <I>VariableTypes</I> use abstract <I>DataTypes</I> to indicate that their <I>Value</I> may be any one of the subtypes of the abstract <I>DataType</I>. An example of an abstract <I>DataType</I> is Integer which is defined in <A href="#LinkTarget_11808" href="#">
8.24</A>
. </P
><H3 
 ID="LinkTarget_9279"
><B>5.8.3 DataType NodeClass </H3
><P 

></B>The <I>DataType NodeClass</I> describes the syntax of a <I>Variable Value</I>. The <I>DataTypes</I> may be simple or complex, depending on the <I>DataTypeSystem</I>. <I>DataTypes</I> are defined using the <I>DataType</I> <I>NodeClass</I>, as specified in <A href="#LinkTarget_9286" href="#">
Table 11</A>
. </P
><P 

><B>Table 11 &ndash; DataType NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Use </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Attributes </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Base NodeClass Attributes </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>-- </P
></TD
><TD  
 valign="top"
><P 

>Inherited from the <I>Base NodeClass</I>. See <A href="#LinkTarget_6400" href="#">
5.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A boolean <I>Attribute</I> with the following values: </P
><P 

> TRUE it is an abstract <I>DataType</I>. </P
><P 

> FALSE it is not an abstract <I>DataType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasProperty </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasProperty</I> <I>References</I> identify the <I>Properties</I> for the <I>DataType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasSubtype References </I>may be used to span a data type hierarchy. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> HasEncoding </P
></TD
><TD  
 valign="top"
><P 

>0..* </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>HasEncoding References </I>identify the encodings of the <I>DataType</I> represented as <I>Objects</I> of type <I>DataTypeEncodingType</I>. </P
><P 

>Only concrete <I>Structured</I> <I>DataTypes</I> may use <I>HasEncoding</I> <I>References</I>. Abstract, <I>Built</I><I>-</I><I>in, Enumeration,</I> and <I>Simple</I> <I>DataTypes</I> are not allowed to be the <I>SourceNode</I> of a <I>HasEncoding</I> <I>Reference</I>. </P
><P 

>Each concrete <I>Structured</I> <I>DataType</I> shall point to at least one <I>DataTypeEncoding</I> <I>Object</I> with the <I>BrowseName</I> &ldquo;Default Binary&rdquo; or &ldquo;Default XML&rdquo; having the <I>NamespaceIndex</I> 0. The <I>BrowseName</I> of the <I>DataTypeEncoding</I> <I>Objects</I> shall be unique in the context of a <I>Data</I><I>Type</I>, i.e. a <I>DataType</I> shall not point to two <I>DataTypeEncodings</I> having the same <I>BrowseName</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Standard Properties </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> NodeVersion </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeVersion</I> <I>Property</I> is used to indicate the version of a <I>Node</I>. </P
><P 

>The <I>NodeVersion</I> <I>Property</I> is updated each time a <I>Reference</I> is added or deleted to the <I>Node</I> the <I>Property</I> belongs to. <I>Attribute</I> value changes do not cause the <I>NodeVersion</I> to change. Clients may read the <I>NodeVersion Property</I> or subscribe to it to determine when the structure of a <I>Nod</I><I>e</I> has changed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> EnumStrings </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText[] </P
></TD
><TD  
 valign="top"
><P 

>The <I>EnumStrings</I> <I>Property</I> only applies for <I>Enumeration</I> <I>DataTypes</I>. It shall not be applied for other <I>DataTypes</I>. If the <I>EnumValues</I> <I>Property</I> is provided, the <I>EnumStrings</I> <I>Property</I> shall not be provided. </P
><P 

>Each entry of the array of <I>LocalizedText</I> in this <I>Property</I> represents the human-readable representation of an enumerated value. The Integer representation of the enumeration value points to a position of the array. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> EnumValues </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>EnumValueType[] </P
></TD
><TD  
 valign="top"
><P 

>The <I>EnumValues</I> <I>Property</I> only applies for <I>Enumeration</I> <I>DataTypes</I>. It shall not be applied for other <I>DataTypes</I>. If the <I>EnumStrings</I> <I>Property</I> is provided, the <I>EnumValues</I> <I>Property</I> shall not be provided. </P
><P 

>Using the <I>EnumValues</I> <I>Property</I> it is possible to represent Enumerations with integers that are not zero-based or have gaps (e.g. 1, 2, 4, 8, 16). </P
><P 

>Each entry of the array of <I>EnumValueType</I> in this <I>Property</I> represents one enumeration value with its integer notation, human-readable representation and help information.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> OptionSetValues </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText[] </P
></TD
><TD  
 valign="top"
><P 

>The <I>OptionSetValues</I> <I>Property</I> only applies for <I>OptionSet</I> <I>DataTypes</I><I> </I>and <I>UInteger</I> <I>DataTypes</I>. </P
><P 

>An <I>OptionSet</I> <I>Data</I><I>Type</I> is used to represent a bit mask and the <I>OptionSetValues</I> <I>Property</I> contains the human-readable representation for each bit of the bit mask.  </P
><P 

>The <I>OptionSetValues</I> <I>Property</I> provides an array of <I>LocalizedText</I> containing the human-readable representation for each bit. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>DataType</I> <I>NodeClass</I> inherits the base <I>Attributes</I> from the <I>Base NodeClass</I> defined in <A href="#LinkTarget_6400" href="#">
5.2</A>
. The <I>IsAbstract Attribute </I>specifies if the <I>DataType</I> is abstract or not. Abstract <I>DataTypes</I> can be used in the <I>AddressSpace</I>, i.e. <I>Variables</I> and <I>VariableTypes</I> can point with their <I>DataType</I> <I>Attribute</I> to an abstract <I>DataType</I>. However, concrete values can never be of an abstract <I>DataType</I> and shall always be of a concrete subtype of the abstract <I>DataType</I>. </P
><P 

><I>HasProperty</I> <I>References</I> are used to identify the <I>Properties</I> of a <I>DataType</I>. The <I>Property</I> <I>NodeVersion</I> is used to indicate the version of the <I>DataType</I>. This Version is not affected by the <I>DataTypeVersion</I> <I>Property</I> of <I>DataTypeDictionaries</I> and <I>DataTypeDescriptions</I>. The <I>Property</I> <I>EnumStrings</I> contains human-readable representations of enumeration values and is only applied to <I>Enumeration</I> <I>DataTypes</I>. Instead of the <I>EnumStrings</I> <I>Property</I> an <I>Enumeration</I> <I>DataType</I> can also use the <I>EnumValues</I> <I>Property</I> to represent <I>Enumerations</I> with integer values </P
><P 

>that are not zero-based or containing gaps. There are no additional <I>Properties</I> defined for <I>DataTypes</I> in this standard. Additional parts of this series of standards may define additional <I>Properties</I> for <I>DataTypes</I>. </P
><P 

><I>HasSubtype References</I> may be used to expose a data type hierarchy in the <I>AddressSpace</I>. This hierarchy shall reflect the hierarchy specified in the <I>DataTypeDictionary</I>. The semantic of subtyping depends on the <I>DataTypeSystem</I>. <I>Servers</I> need not provide <I>HasSubtype References</I>, even if their <I>DataTypes</I> span a type hierarchy. <I>Clients</I> should not make any assumptions about any other semantic with that information than provided by the <I>DataTypeDictionary</I>. For example, it might not be possible to cast a value of one data type to its base data type. Some restrictions apply for subtyping enumeration DataTypes as defined in <A href="#LinkTarget_11700" href="#">
8.14</A>
. </P
><P 

><I>HasEncoding</I> <I>References</I> point from the <I>DataType</I> to its <I>DataTypeEncodings</I>. Following such a <I>Reference</I>, the client can browse to the <I>DataTypeDictionary</I> describing the structure of the <I>DataType</I> for the used encoding. Each concrete <I>Structured</I> <I>DataType</I> can point to many <I>DataTypeEncodings</I>, but each <I>DataTypeEncoding</I> shall belong to one <I>DataType</I>, that is, it is not permitted for two <I>DataType</I> <I>Nodes</I> to point to the same <I>DataTypeEncoding</I> <I>Object</I> using <I>HasEncoding</I> <I>References</I>. </P
><P 

>An abstract <I>DataType</I> is not the <I>SourceNode</I> of a <I>HasEncoding</I> <I>Reference</I>. The <I>DataTypeEncoding</I> of an abstract <I>DataType</I> is provided by its concrete subtypes. </P
><P 

><I>DataType Nodes</I> shall not be the <I>SourceNode</I> of other types of <I>References</I>. However, they may be the <I>TargetNode</I> of other <I>References</I>. </P
><H3 
 ID="LinkTarget_9473"
><B>5.8.4 DataTypeDictionary, DataTypeDescription, DataTypeEncoding and DataTypeSystem </H3
><P 

></B>A <I>DataTypeDictionary</I> is an entity that contains a set of type descriptions, such as an XML schema. <I>DataTypeDictionaries</I> are defined as <I>Variables</I> of the <I>VariableType</I> <I>DataTypeDictionaryType</I>. </P
><P 

>A <I>DataTypeSystem</I> specifies the format and conventions for defining <I>DataTypes </I>in<I> DataTypeDictionaries. DataTypeSystems</I> are defined as <I>Objects</I> of the <I>ObjectType</I> <I>DataTypeSystemType</I>. </P
><P 

>The <I>ReferenceType</I> used to relate <I>Objects</I> of the <I>ObjectType</I> <I>DataTypeSystemType</I> to <I>Variables</I> of the <I>VariableType</I> <I>DataTypeDictionaryType</I> is the <I>HasComponent</I> <I>ReferenceType</I>. Thus, the <I>Variable</I> is always the <I>TargetNode</I> of a <I>HasComponent</I> <I>Reference</I>; this is a requirement for <I>Variables</I>. However, for <I>DataTypeDictionaries</I> the <I>Server</I> shall always provide the inverse <I>Reference</I>, since it is necessary to know the <I>DataTypeSystem</I> when processing the <I>DataTypeDictionary</I>. </P
><P 

>Changes may be a result of a change to a type description, but it is more likely that dictionary changes are a result of the addition or deletion of type descriptions. This includes changes made while the <I>Server</I> is offline so that the new version is available when the <I>Server</I> restarts. <I>Clients</I> may subscribe to the <I>DataTypeVersion Property</I> to determine if the <I>DataTypeDictionary</I> has changed since it was last read. </P
><P 

>The <I>Server</I> may, but is not required to, make the <I>DataTypeDictionary</I> contents available to <I>Clients</I> through the <I>Value Attribute</I>. <I>Clients</I> should assume that <I>DataTypeDictionary</I> contents are relatively large and that they will encounter performance problems if they automatically read the <I>DataTypeDictionary</I> contents each time they encounter an instance of a specific <I>DataType</I>. The client should use the <I>DataTypeVersion Property</I> to determine whether the locally cached copy is still valid. If the client detects a change to the <I>DataTypeVersion</I>, then it shall re-read the <I>DataTypeDictionary</I>. This implies that the <I>DataTypeVersion </I>shall be updated by a <I>Server</I> even after restart since <I>Clients</I> may persistently store the locally cached copy. </P
><P 

>The <I>Value</I> <I>Attribute</I> of the <I>DataTypeDictionary </I>containing the type descriptions is a ByteString whose formatting is defined by the <I>DataTypeSystem</I>. For the &ldquo;XML Schema&rdquo; <I>DataTypeSystem</I>, the ByteString contains a valid XML Schema document. For the &ldquo;OPC Binary&rdquo; <I>DataTypeSystem</I>, the ByteString contains a string that is a valid XML document. The <I>Server</I> shall ensure that any change to the contents of the ByteString is matched with a corresponding change to the </P
><P 

><I>DataTypeVersion Property</I>. In other words, the client may safely use a cached copy of the <I>DataTypeDictionary</I>, as long as the <I>DataTypeVersion </I>remains the same. </P
><P 

><I>DataTypeDictionaries</I> are complex <I>Variables</I> which expose their <I>DataTypeDescriptions</I> as <I>Variables</I> using <I>HasComponent</I> <I>References.</I> A <I>DataTypeDescription</I> provides the information necessary to find the formal description of a <I>DataType</I> within the <I>DataTypeDictionary</I>. The <I>Value</I> of a <I>DataTypeDescription</I> depends on the <I>DataTypeSystem</I> of the <I>DataTypeDictionary</I>. When using &ldquo;OPC Binary&rdquo; dictionaries the <I>Value</I> shall be the name of the <I>TypeDescription</I>. When using &ldquo;XML Schema&rdquo; dictionaries the Value shall be an Xpath expression (see <A href="#LinkTarget_5800" href="#">
XPATH</A>
) which points to an XML element in the schema document. </P
><P 

>Like <I>DataTypeDictionaries</I> each <I>DataTypeDescription</I> provides the <I>Property</I> <I>DataTypeVersion</I> indicating whether the type description of the <I>DataType</I> has changed. Changes to the <I>DataTypeVersion</I> may impact the operation of <I>Subscriptions</I>. If the <I>DataTypeVersion</I> changes for a <I>Variable</I> that is being monitored for a <I>Subscription </I>and that uses this<I> DataTypeDescription</I>, then the next data change <I>Notification</I> sent for the <I>Variable</I> will contain a status that indicates the change in the <I>DataTypeDescription</I>. </P
><P 

><I>DataTypeEncoding</I> <I>Objects</I> of the <I>DataTypes</I> reference their <I>DataTypeDescriptions</I> of the <I>DataTypeDictionaries</I> using <I>HasDescription</I> References.<I> Servers</I> shall provide the inverse <I>References</I> that relate the <I>DataTypeDescriptions</I> back to the <I>DataTypeEncoding</I> <I>Objects</I>. If a <I>DataType</I> <I>Node</I> is exposed in the <I>AddressSpace</I>, it shall provide its <I>DataTypeEncodings</I> and if a <I>DataTypeDictionary</I> is exposed then it should expose all of its <I>DataTypeDescriptions</I>. Both of these <I>References</I> shall be bi-directional. </P
><P 

>The <I>VariableTypes</I> <I>DataTypeDictionaryType</I> and <I>DataTypeDescriptionType</I> and the <I>ObjectTypes</I> <I>DataTypeSystemType</I> and <I>DataTypeEncodingType</I> are formally defined in <A href="#LinkTarget_5761" href="#">
Part 5</A>
. </P
><P 

><A href="#LinkTarget_9506" href="#">
Figure 11</A>
 provides an example how <I>DataTypes</I> are modelled in the <I>AddressSpace</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Object UA Binary of ObjectType DataTypeEncodingType DataType Variable Int32 of VariableType DataTypeDescriptionType Object Default Binary of ObjectType DataTypeEncodingType Object Default XML of ObjectType DataTypeEncodingType Object OPC Binary of ObjectType DataTypeSystemType Variable BasicTypes of VariableType DataTypeDictionaryType Object XML Schema of ObjectType DataTypeSystemType HasEncoding Object EDDL XML of ObjectType DataTypeEncodingType HasEncoding HasEncoding HasEncoding HasComponent HasComponent HasComponent HasComponent HasComponent HasComponent HasDescription HasDescription HasDescription HasDescription Variable Int32 of VariableType DataTypeDescriptionType Variable BasicXMLTypes of VariableType DataTypeDictionaryType Variable BasicEDDLTypes of VariableType DataTypeDictionaryType Variable Int32 of VariableType DataTypeDescriptionType </DIV
></P
><P 

><B>Figure 11 &ndash; Example of DataType Modelling </P
><P 

></B>In some scenarios an OPC UA <I>Server</I> may have resource limitations which make it impractical to expose large <I>DataTypeDictionaries</I>. In these scenarios the <I>Server</I> may be able to provide access to descriptions for individual DataTypes even if the entire dictionary cannot be read. For this reason, this standard defines a <I>Property</I> for the <I>DataTypeDescription</I> called <I>DictionaryFragment</I> (see <A href="#LinkTarget_7915" href="#">
5.6.2</A>
). This <I>Property</I> is a ByteString that contains a subset of the <I>DataTypeDictionary</I> which describes the format of the <I>DataType</I> associated with the <I>DataTypeDescription</I>. Thus, the <I>Server</I> splits the large <I>DataTypeDictionary</I> into several small parts and <I>Clients</I> can access without affecting the overall system performance. </P
><P 

>However, <I>Servers</I> should provide the whole <I>DataTypeDictionary</I> at once if this is possible. It is typically more efficient to read the whole <I>DataTypeDictionary</I> at once instead of reading individual parts. </P
><H2 
 ID="LinkTarget_9515"
><FONT size="+1"><B>5.9 Summary of Attributes of the NodeClasses </H2
><P 

><A href="#LinkTarget_9521" href="#">
<FONT size="+1"></B>Table 12</A>
 summarises all <I>Attributes</I> defined in this document and points out which <I>NodeClasses</I> use them either in an optional (O) or mandatory (M) way. </P
><P 

><B>Table 12 &ndash; Overview of Attributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>Variable Type </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>Object Type </P
></TD
><TD  
 valign="top"
><P 

>Reference Type </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>View </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AccessLevel </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ArrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ContainsNoLoops </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Description </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DisplayName </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EventNotifier </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Executable </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Historizing </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>InverseName </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MinimumSamplingInterval </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Symmetric </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserAccessLevel </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserExecutable </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserWriteMask </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValueRank </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

>M </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>WriteMask </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
><TD  
 valign="top"
><P 

>O </P
></TD
></TR
></TABLE
><P 
 ID="LinkTarget_9984"
><FONT size="+1"> </P
><H1 

><FONT size="+1"><B>6 Type Model for ObjectTypes and VariableTypes </H1
><H2 
 ID="LinkTarget_9986"
>6.1 Overview </H2
><P 

><FONT size="+1"></B>In the remainder of <A href="#LinkTarget_9984" href="#">
6</A>
 the type model of <I>ObjectTypes</I> and <I>VariableTypes</I> is defined regarding subtyping and instantiation. </P
><H2 
 ID="LinkTarget_9993"
><FONT size="+1"><B>6.2 Definitions </H2
><H3 
 ID="LinkTarget_9994"
><FONT size="+1">6.2.1 InstanceDeclaration </H3
><P 

></B>An <I>InstanceDeclaration</I> is an <I>Object</I>, <I>Variable</I> or <I>Method</I> that references a <I>ModellingRule</I> with a <I>HasModellingRule</I> <I>Reference</I> and is the <I>TargetNode</I> of a <I>hierarchical</I> <I>Reference</I> from a <I>TypeDefinitionNode</I> or another <I>InstanceDeclaration</I>. </P
><H3 
 ID="LinkTarget_9996"
><B>6.2.2 Instances without ModellingRules </H3
><P 

></B>If no <I>ModellingRule</I> exists then the <I>Node</I> is neither considered for instantiation of a type nor for subtyping. </P
><P 

>If a <I>Node</I> referenced by a <I>TypeDefinitionNode</I> does not reference a <I>ModellingRule</I> it indicates that this <I>Node</I> only belongs to the <I>TypeDefinitionNode</I> and not to the instances. For example, an <I>ObjectType Node</I> may contain a <I>Property</I> that describes scenarios where the type could be used. This <I>Property</I> would not be considered when creating instances of the type. This is also true for subtyping, that is, subtypes of the type definition would not inherit the referenced <I>Node</I>. </P
><H3 
 ID="LinkTarget_9999"
><B><I>6.2.3 </I>InstanceDeclarationHierarchy<I> </I></H3
><P 

></B>The <I>InstanceDeclarationHierarchy</I> of a <I>TypeDefinitionNode</I> contains the <I>TypeDefinitionNode</I> and all <I>InstanceDeclarations</I> that are directly or indirectly referenced from the <I>TypeDefinitionNode</I> using <I>hierarchical</I> <I>References</I> in the forward direction. </P
><H3 
 ID="LinkTarget_10001"
><B>6.2.4 Similar Node of InstanceDeclaration </H3
><P 

></B>A similar <I>Node</I> of an <I>InstanceDeclaration</I> is a <I>Node</I> that has the same <I>BrowseName</I> and <I>NodeClass</I> as the <I>InstanceDeclaration</I> and in cases of <I>Variables</I> and <I>Objects</I> the same <I>TypeDefinitionNode</I> or a subtype of it. </P
><H3 
 ID="LinkTarget_10004"
><B>6.2.5 BrowsePath </H3
><P 

></B>All targets of forward <I>hierarchical</I> <I>References</I> from a <I>TypeDefinitionNode</I> shall have a <I>BrowseName</I> that is unique within the <I>TypeDefinitionNode</I>. The same restriction applies to the targets of <I>hierarchical</I> <I>References</I> in forward direction from any <I>InstanceDeclaration</I>. This means that any <I>InstanceDeclaration</I> within the <I>InstanceDeclarationHierarchy</I> can be uniquely identified by a sequence of <I>BrowseName</I>s. This sequence of <I>BrowseNames</I> is called a <I>BrowsePath</I>. </P
><H3 
 ID="LinkTarget_10006"
><B>6.2.6 Attribute Handling of InstanceDeclarations </H3
><P 

></B>Some restrictions exist regarding the <I>Attributes</I> of <I>InstanceDeclarations</I> when the <I>InstanceDeclaration</I> is overridden or instantiated. The <I>BrowseName</I> and the <I>NodeClass</I> shall never change and always be the same as the original <I>InstanceDeclaration</I>. </P
><P 

>In addition, the rules defined in <A href="#LinkTarget_10015" href="#">
6.2.7</A>
 apply for <I>InstanceDeclarations</I> of the <I>NodeClass</I> <I>Variable</I>. </P
><H3 
 ID="LinkTarget_10015"
><B>6.2.7 Attribute Handling of Variable and VariableTypes </H3
><P 

></B>Some restrictions exist regarding the <I>Attributes</I> of a <I>VariableType</I> or a <I>Variable</I> used as an <I>InstanceDeclaration</I> with regard to the data type of the <I>Value</I> <I>Attribute</I>. </P
><P 

>When a <I>Variable</I> used as <I>InstanceDeclaration</I> or a <I>VariableType</I> is overridden or instantiated the following rules apply: </P
><DL 

><DD 

>a) The <I>DataType</I> <I>Attribute </I>can only be changed to a new <I>DataType</I> if the new <I>DataType</I> is a subtype of the <I>DataType</I> originally used. </DD
><DD 

>b) The <I>ValueRank</I> <I>Attribute</I> may only be further restricted </DD
><DD 

>1) &lsquo;Any&rsquo; may be set to any other value; </DD
><DD 

>2) &lsquo;ScalarOrOneDimension&rsquo; may be set to &lsquo;Scalar&rsquo; or &lsquo;OneDimension&rsquo;; </DD
><DD 

>3) &lsquo;OneOrMoreDimensions&rsquo; may be set to a concrete number of dimensions (value &gt; 0). </DD
><DD 

>4) All other values of this <I>Attribute</I> shall not be changed. </DD
><DD 

>c) The <I>ArrayDimensions</I> <I>Attribute </I>may be added if it was not provided or when modifying the value of an entry in the array from 0 to a different value. All other values in the array shall remain the same. </DD
></DL
><H3 
 ID="LinkTarget_10033"
><B>6.2.8 NodeIds of InstanceDeclarations </H3
><P 

></B><I>InstanceDeclarations</I> are identified by their <I>BrowsePath</I>. Different <I>Servers</I> might use different <I>NodeIds</I> for the <I>InstanceDeclarations</I> of common <I>TypeDefinitionNodes</I>, unless the definition of the <I>TypeDefinitionNode</I> already defines a <I>NodeId</I> for the <I>InstanceDeclaration</I>. All <I>TypeDefinitionNodes</I> defined in <A href="#LinkTarget_5761" href="#">
Part 5</A>
 already define the <I>NodeIds</I> for their <I>InstanceDeclarations</I> and therefore shall be used in all <I>Servers</I>. </P
><H2 
 ID="LinkTarget_10040"
><FONT size="+1"><B>6.3 Subtyping of ObjectTypes and VariableTypes </H2
><H3 
 ID="LinkTarget_10041"
><FONT size="+1">6.3.1 Overview </H3
><P 

></B>The <I>HasSubtype</I> <I>ReferenceType</I> defines subtypes of types. Subtyping can only occur between <I>Nodes</I> of the same <I>NodeClass</I>. Rules for subtyping <I>ReferenceTypes</I> are described in <A href="#LinkTarget_7047" href="#">
5.3.3.3</A>
. There is no common definition for subtyping <I>DataTypes</I>, as described in <A href="#LinkTarget_9279" href="#">
5.8.3</A>
. The remainder of <A href="#LinkTarget_10040" href="#">
6.3</A>
 specify subtyping rules for single inheritance on <I>ObjectTypes</I> and <I>VariableTypes</I>. </P
><H3 
 ID="LinkTarget_10056"
><B>6.3.2 Attributes </H3
><P 

></B>Subtypes inherit the parent type&rsquo;s <I>Attribute</I> values, except for the <I>NodeId</I>. Inherited <I>Attribute</I> values may be overridden by the subtype, the <I>BrowseName</I> and <I>DisplayName</I> values should be overridden. Special rules apply for some <I>Attributes </I>of <I>VariableTypes</I> as defined in <A href="#LinkTarget_10015" href="#">
6.2.7</A>
. Optional <I>Attributes</I>, not provided by the parent type, may be added to the subtype. </P
><H3 
 ID="LinkTarget_10063"
><B>6.3.3 InstanceDeclarations </H3
><H4 
 ID="LinkTarget_10065"
>6.3.3.1 Overview </H4
><P 

></B>Subtypes inherit the fully-inherited parent type&rsquo;s <I>InstanceDeclarations</I>. </P
><P 

>As long as those <I>InstanceDeclarations</I> are not overridden they are not referenced by the subtype. <I>InstanceDeclarations</I> can be overridden by adding <I>References</I>, changing <I>References</I> to reference different <I>Nodes</I>, changing <I>References</I> to be subtypes of the original <I>ReferenceType</I>, changing values of the <I>Attributes</I> or adding optional <I>Attributes</I>. In order to get the full information about a subtype, the inherited <I>InstanceDeclarations</I> have to be collected from all types that can be found by recursively following the inverse <I>HasSubtype</I> <I>References</I> from the subtype. This collection of <I>InstanceDeclarations</I> is called the fully-inherited <I>InstanceDeclarationHierarchy</I> of a subtype. </P
><P 

>The remainder of <A href="#LinkTarget_10063" href="#">
6.3.3</A>
 define how to construct the fully-inherited <I>InstanceDeclarationHierarchy</I> and how <I>InstanceDeclarations</I> can be overridden. </P
><H4 
 ID="LinkTarget_10074"
><B>6.3.3.2 Fully-inherited InstanceDeclarationHierarchy </H4
><P 

></B>An instance of a <I>TypeDefinitionNode</I> is described by the fully-inherited <I>InstanceDeclaration-Hierarchy</I> of the <I>TypeDefinitionNode</I>. The fully-inherited <I>InstanceDeclarationHierarchy</I> can be created by starting with the <I>InstanceDeclarationHierarchy</I> of the <I>TypeDefinitionNode</I> and merging the fully-inherited <I>InstanceDeclarationHierarchy</I> of its parent type. </P
><P 

>The process of merging <I>InstanceDeclarationHierarchies</I> is straightforward and can be illustrated with the example shown in <A href="#LinkTarget_10087" href="#">
Figure 12</A>
 which specifies a <I>TypeDefinitionNode</I> &ldquo;BetaType&rdquo; which is a subtype of &ldquo;AlphaType&rdquo;. The name in each box is the <I>BrowseName</I> and the number is the <I>NodeId</I>. </P
><P 

>  <DIV class="Sect" 
 Alt=""
>AlphaType (1)B (2)E (5)C (3)D (4)XYBetaType (6)F (7)H (9)J (10)ZB (8)</DIV
></P
><P 

><B>Figure 12 &ndash; Subtyping TypeDefinitionNodes </P
><P 

></B>An <I>InstanceDeclarationHierarchy </I>can be fully described as a table of <I>Nodes</I> identified by their <I>BrowsePaths</I> with a corresponding table of <I>References</I>. The <I>InstanceDeclarationHierarchy </I>for &ldquo;BetaType&rdquo; is described in <A href="#LinkTarget_10094" href="#">
Table 13</A>
 where the top half of the table is the table of <I>Nodes</I> and the bottom half is the table of <I>References</I> (the <I>HasModellingRule</I> references have been omitted from the table for the sake of clarity; all Nodes except for 1, 6, and 5 have <I>ModellingRules</I>). All <I>InstanceDeclarations</I> of the <I>InstanceDeclarationHierarchy</I> and all <I>Nodes</I> referenced with a non-hierarchical <I>Reference</I> from such an <I>InstanceDeclaration</I> are added to the table. <I>Hierarchical</I> <I>References</I> to <I>Nodes</I> without a <I>ModellingRule</I> are not considered. </P
><P 

><B>Table 13 &ndash; The InstanceDeclarationHierarchy for BetaType </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">BrowsePath </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/ </P
></TD
><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/F </P
></TD
><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/B </P
></TD
><TD  
 valign="top"
><P 

>8 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/F/H </P
></TD
><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/B/J </P
></TD
><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/B/H </P
></TD
><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Source Path </P
></TD
><TD  
 valign="top"
><P 

>ReferenceType </P
></TD
><TD  
 valign="top"
><P 

>Target Path </P
></TD
><TD  
 valign="top"
><P 

>TargetNodeId </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/ </P
></TD
><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>/F </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/ </P
></TD
><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/ </P
></TD
><TD  
 valign="top"
><P 

>Z </P
></TD
><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/ </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>BetaType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/F </P
></TD
><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>/F/H </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/F </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>BaseObjectType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>/B/J </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>BaseObjectType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/F/H </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B/J </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>/B/H </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B/H </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>BaseDataVariableType </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Multiple <I>BrowsePaths</I> to the same <I>Node</I> shall be treated as separate <I>Nodes</I>. An <I>Instance</I> may provide different <I>Nodes</I> for each <I>BrowsePath</I>.<I> </I></P
><P 

>The fully-inherited <I>InstanceDeclarationHierarchy </I>for &ldquo;BetaType&rdquo; can now be constructed by merging the <I>InstanceDeclarationHierarchy</I> for &ldquo;AlphaType&rdquo;. The result is shown in <A href="#LinkTarget_10309" href="#">
Table 14</A>
 where the entries added from &ldquo;AlphaType&rdquo; are shaded with grey. </P
><P 

><B>Table 14 &ndash; The Fully-Inherited InstanceDeclarationHierarchy for BetaType </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">BrowsePath </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/ </P
></TD
><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/F </P
></TD
><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/B </P
></TD
><TD  
 valign="top"
><P 

>8 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/F/H </P
></TD
><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/B/J </P
></TD
><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/B/H </P
></TD
><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/B/D </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/C </P
></TD
><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Source Path </P
></TD
><TD  
 valign="top"
><P 

>ReferenceType </P
></TD
><TD  
 valign="top"
><P 

>Target Path </P
></TD
><TD  
 valign="top"
><P 

>TargetNodeId </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/ </P
></TD
><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>/F </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/ </P
></TD
><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/ </P
></TD
><TD  
 valign="top"
><P 

>Z </P
></TD
><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/ </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>BetaType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/F </P
></TD
><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>/F/H </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/F </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>BaseObjectType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>/B/J </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>BaseObjectType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/F/H </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B/J </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>/B/H </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B/H </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>BaseDataVariableType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/ </P
></TD
><TD  
 valign="top"
><P 

>HasNotifier </P
></TD
><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B </P
></TD
><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>/B/D </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/ </P
></TD
><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>/C </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/ </P
></TD
><TD  
 valign="top"
><P 

>Y </P
></TD
><TD  
 valign="top"
><P 

>/C </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/C </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>BaseDataVariableType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B/D </P
></TD
><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>/B/D </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>/C </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>BrowsePath</I> &ldquo;/B&rdquo; already exists in the table so it does not need to be added. However, the <I>HasNotifier</I> reference from &ldquo;/&rdquo; to &ldquo;/B&rdquo; does not exist and was added. </P
><P 

>The <I>Nodes</I> and <I>References</I> defined in <A href="#LinkTarget_10309" href="#">
Table 14</A>
 can be used to create the fully-inherited <I>InstanceDeclarationHierarchy</I> shown in <A href="#LinkTarget_10654" href="#">
Figure 13</A>
. The fully-inherited <I>InstanceDeclarationHierarchy</I> contains all necessary information about a <I>TypeDefinitionNode</I> regarding its complex structure without needing any additional information from its supertypes. </P
><P 

>  <DIV class="Sect" 
 Alt=""
>B (8)D (4)XF (7)C (3)H (9)BetaType(Fully Inherited)YZJ (10)</DIV
></P
><P 

><B>Figure 13 &ndash; The Fully-Inherited InstanceDeclarationHierarchy for BetaType </P
><H4 
 ID="LinkTarget_10655"
>6.3.3.3 Overriding InstanceDeclarations </H4
><P 

></B>A subtype overrides an <I>InstanceDeclaration</I> by specifying an <I>InstanceDeclaration</I> with the same <I>BrowsePath</I>. An overridden <I>InstanceDeclaration</I> shall have the same <I>NodeClass</I> and <I>BrowseName</I>. The <I>TypeDefinitionNode</I> of the overridden <I>InstanceDeclaration</I> shall be the same or a subtype of the <I>TypeDefinitionNode</I> specified in the supertype. </P
><P 

>When overriding an <I>InstanceDeclaration</I> it is necessary to provide <I>hierarchical</I> <I>References</I> that link the new <I>Node</I> back to the subtype (the <I>References</I> are used to determine the <I>BrowsePath</I> of the <I>Node</I>). </P
><P 

>It is only possible to override <I>InstanceDeclarations</I> that are directly referenced from the <I>TypeDefinitionNode</I>. If an indirect referenced <I>InstanceDeclaration</I>, such as &ldquo;J&rdquo; in <A href="#LinkTarget_10654" href="#">
Figure 13</A>
, has to be overridden, then the directly referenced <I>InstanceDeclarations</I> that includes &ldquo;J&rdquo;, in that case &ldquo;B&rdquo;, have to be overridden first and then &ldquo;J&rdquo; can be overridden in a second step. </P
><P 

>A <I>Reference</I> is replaced if it goes between two overridden <I>Nodes</I> and has the same <I>ReferenceType</I> as a <I>Reference</I> defined in the supertype. The <I>Reference</I> specified in the subtype may be a subtype of the <I>ReferenceType</I> used in the parent type. </P
><P 

>Any <I>non-hierarchical</I> <I>References</I> specified for the overridden <I>InstanceDeclaration</I> are treated as new <I>References</I> unless the <I>ReferenceType</I> only allows a single <I>Reference</I> per <I>SourceNode</I>. If this situation exists the subtype can change the target of the <I>Reference</I> but the new target shall have the same <I>NodeClass</I> and for <I>Objects</I> and <I>Variables</I> also the same type or a subtype of the type specified in the parent. </P
><P 

>The overriding <I>Node</I> may specify new values for the <I>Node</I> <I>Attributes</I> other than the <I>NodeClass</I> or <I>BrowseName</I>, however, the restrictions on <I>Attributes</I> specified in <A href="#LinkTarget_10006" href="#">
6.2.6</A>
 apply. Any <I>Attribute</I> provided by the overridden <I>InstanceDeclaration</I> has to be provided by the overriding <I>InstanceDeclaration</I>, additional optional <I>Attributes</I> may be added. </P
><P 

>The <I>ModellingRule</I> of the overriding <I>InstanceDeclaration</I> may be changed as defined in <A href="#LinkTarget_10803" href="#">
6.4.4.3</A>
. </P
><P 

>Each overriding <I>InstanceDeclaration</I> needs its own <I>HasModellingRule</I> and <I>HasTypeDefinition</I> <I>References</I>, even if they have not been changed. </P
><P 

>A subtype should not override a <I>Node</I> unless it needs to change it. </P
><P 

>The semantics of certain <I>TypeDefinitionNodes</I> and <I>ReferenceTypes</I> may impose additional restrictions with regard to overriding <I>Nodes</I>. </P
><H2 
 ID="LinkTarget_10681"
><FONT size="+1"><B>6.4 Instances of ObjectTypes and VariableTypes </H2
><H3 
 ID="LinkTarget_10683"
><FONT size="+1">6.4.1 Overview </H3
><P 

></B>Any <I>Instance</I> of a <I>TypeDefinitionNode</I> will be the root of a hierarchy which mirrors the <I>InstanceDeclarationHierarchy</I> for the <I>TypeDefinitionNode.</I> Each <I>Node</I> in the hierarchy of the Instance will have a <I>BrowsePath</I> which may be the same as the <I>BrowsePath</I> for one of the <I>InstanceDeclarations</I> in the hierarchy of the <I>TypeDefinitionNode. </I>The <I>InstanceDeclaration</I> with the same <I>BrowsePath</I> is called the <I>InstanceDeclaration</I> for the <I>Node</I>. If a <I>Node</I> has an <I>InstanceDeclaration</I> then it shall have the same <I>BrowseName</I> and <I>NodeClass</I> as the <I>InstanceDeclaration</I> and, in cases of <I>Variables</I> and <I>Objects</I>, the same <I>TypeDefinitionNode</I> or a subtype of it. </P
><P 

>Instances may reference several <I>Nodes</I> with the same <I>BrowsePath</I>. <I>Clients</I> that need to distinguish between the <I>Nodes</I> based on the <I>InstanceDeclarationHierarchy</I> and the <I>Nodes</I> that are not based on the <I>InstanceDeclarationHierarchy</I> can accomplish this using the TranslateBrowsePathsToNodeIds service defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H3 
 ID="LinkTarget_10691"
><B>6.4.2 Creating an Instance </H3
><P 

></B>Instances inherit the initial values for the <I>Attributes</I> that they have in common with the <I>TypeDefinitionNode</I> from which they are instantiated, with the exceptions of the <I>NodeClass</I> and <I>NodeId</I>. </P
><P 

>When a <I>Server</I> creates an instance of a <I>TypeDefinitionNode</I> it shall create the same hierarchy of <I>Node</I>s beneath the new <I>Object</I> or <I>Variable </I>depending on the <I>ModellingRule</I> of each <I>InstanceDeclaration</I>. Standard <I>ModellingRules</I> are defined in <A href="#LinkTarget_10878" href="#">
6.4.4.5</A>
. The <I>Node</I>s within the newly created hierarchy may be copies of the <I>InstanceDeclaration</I>s, the <I>InstanceDeclaration</I> itself or another <I>Node</I> in the <I>AddressSpace</I> that has the same <I>TypeDefinitionNode</I> and <I>BrowseName</I>. If new copies are created, then the <I>Attribute</I> values of the <I>InstanceDeclarations</I> are used as the initial values. </P
><P 

><A href="#LinkTarget_10710" href="#">
Figure 14</A>
 provides a simple example of a <I>TypeDefinitionNode</I> and an <I>Instance</I>. <I>Nodes</I> referenced by the <I>TypeDefinitionNode</I> without a <I>ModellingRule</I> do not appear in the instance. <I>Instances</I> may have children with duplicate <I>BrowseName</I>s; however, only one of those children will correspond to the <I>InstanceDeclaration</I>. </P
><P 

> </P
><P 

>  <DIV class="Sect" 
 Alt=""
>AlphaTypeB[Mandatory]EC[Mandatory]Alpha1D[Mandatory]BCDF</DIV
></P
><P 

><B>Figure 14 &ndash; An Instance and its TypeDefinitionNode </P
><P 

></B>It is up to the <I>Server</I> to decide which <I>InstanceDeclarations</I> appear in any single instance. In some cases, the <I>Server</I> will not define the entire instance and will provide remote references to <I>Nodes</I> in another <I>Server</I>. The <I>ModellingRules</I> described in <A href="#LinkTarget_10878" href="#">
6.4.4.5</A>
 allow <I>Servers</I> to indicate that some <I>Nodes</I> are always present; however, the <I>Client</I> shall be prepared for the case where the <I>Node</I> exists in a different <I>Server</I>. </P
><P 

>A <I>Client</I> can use the information of <I>TypeDefinitionNodes</I> to access <I>Node</I>s which are in the hierarchy of the instance. It shall pass the <I>NodeId</I> of the instance and the <I>BrowsePath</I> of the child <I>Node</I>s based on the <I>TypeDefinitionNode</I> to the <I>TranslateBrowsePathsToNodeIds</I> service (see <A href="#LinkTarget_5759" href="#">
Part 4</A>
). This <I>Service</I> returns the <I>NodeId</I> for each of the child <I>Node</I>s. If a child <I>Node</I> exists then the <I>BrowseName</I> and <I>NodeClass</I> shall match the <I>InstanceDeclaration</I>. In the case of </P
><P 

><I>Objects</I> or <I>Variables,</I> also the <I>TypeDefinitionNode</I> shall either match or be a subtype of the original <I>TypeDefinitionNode</I>. </P
><H3 
 ID="LinkTarget_10725"
><B>6.4.3 Constraints on an Instance </H3
><P 

></B><I>Objects</I> and <I>Variables</I> may change their <I>Attribute</I> values after being created. Special rules apply for some <I>Attributes</I> as defined in <A href="#LinkTarget_10006" href="#">
6.2.6</A>
. </P
><P 

>Additional <I>References</I> may be added to the <I>Nodes</I>, and <I>References</I> may be deleted as long as the <I>ModellingRules</I> defined on the <I>InstanceDeclarations</I> of the <I>TypeDefinitionNode</I> are still fulfilled. </P
><P 

>For <I>Variables</I> and <I>Objects</I> the <I>HasTypeDefinition</I> <I>Reference</I> shall always point to the same <I>TypeDefinitionNode</I> as the <I>InstanceDeclaration</I> or a subtype of it. </P
><P 

>If two <I>InstanceDeclarations</I> of the fully-inherited <I>InstanceDeclarationHierarchy</I> have been connected directly with several <I>References</I>, all those <I>References</I> shall connect the same <I>Nodes</I>. An example is given in <A href="#LinkTarget_10742" href="#">
Figure 15</A>
. The instances A1 and A2 are allowed since B1 references the same <I>Node</I> with both <I>References</I>, whereas A3 is not allowed since two different <I>Nodes</I> are referenced. Note that this restriction only applies for directly connected <I>Nodes</I>. For example, A2 references a C1 directly and a different C1 via B1. </P
><P 

><FONT size="+1"> <DIV class="Sect" 
 Alt=""
>B1::Type_B[Mandatory]Type_AA1::Type:_AC1:Ty_C[Mandatory]B1::Type_BC1:Ty_CA2::Type:_AB1::Type_BC1:Ty_CC1:Ty_CA3::Type:_AB1::Type_BC1:Ty_CC1:Ty_CNot directly referenced from A2</DIV
></P
><P 

><FONT size="+1"><B>Figure 15 &ndash; Example for several References between InstanceDeclarations </P
><H3 
 ID="LinkTarget_10745"
>6.4.4 ModellingRules </H3
><H4 
 ID="LinkTarget_10746"
>6.4.4.1 General </H4
><P 

></B>For a definition of <I>ModellingRules</I>, see <A href="#LinkTarget_10878" href="#">
6.4.4.5</A>
. Other parts of this series of standards may define additional <I>ModellingRules</I>. <I>ModellingRules</I> are an extendable concept in OPC UA; therefore vendors may define their own <I>ModellingRules</I>. </P
><P 

>Note that the <I>ModellingRules</I> defined in this standard do not define how to deal with non-hierarchical <I>References</I> between <I>InstanceDeclarations</I>, i.e. it is <I>Server</I>-specific if those </P
><P 

><I>References</I> exist in an instance hierarchy or not. Other <I>ModellingRules</I> may define behaviour for non-hierarchical <I>References</I> between <I>InstanceDeclaration</I> as well. </P
><P 

><I>ModellingRules</I> are represented in the <I>AddressSpace</I> as <I>Objects</I> of the <I>ObjectType ModellingRuleType</I>. There are some <I>Properties</I> defining common semantic of <I>ModellingRules.</I> This edition of this standard only specifies one <I>Property</I> for <I>ModellingRules</I>. Future editions may define additional <I>Properties</I> for <I>ModellingRules</I>. <A href="#LinkTarget_5761" href="#">
Part 5</A>
 specifies the representation of the <I>ModellingRule Objects, </I>their <I>Properties</I> and their type in the <I>AddressSpace</I>. The semantic of the <I>Properties</I> for <I>ModellingRules</I> is defined in <A href="#LinkTarget_10776" href="#">
6.4.4.2</A>
. </P
><P 

>Subclause <A href="#LinkTarget_10845" href="#">
6.4.4.4</A>
 defines how the <I>ModellingRule</I> may be changed when instantiating <I>InstanceDeclarations</I> with respect to the <I>Properties</I>. Subclause <A href="#LinkTarget_10803" href="#">
6.4.4.3</A>
 defines how the <I>ModellingRule</I> may be changed when overriding <I>InstanceDeclarations</I> in subtypes with respect to the <I>Properties</I>. </P
><H4 
 ID="LinkTarget_10776"
><B>6.4.4.2 Properties describing ModellingRules </H4
><H5 
 ID="LinkTarget_10777"
>6.4.4.2.1 NamingRule </H5
><P 

></B><I>NamingRule</I> is a mandatory <I>Property</I> of a <I>ModellingRule</I>. It specifies the purpose of an <I>InstanceDeclaration</I>. Each <I>InstanceDeclaration</I> references a <I>ModellingRule</I> and thus the <I>NamingRule</I> is defined per <I>InstanceDeclaration</I>. </P
><P 

>Three values are allowed for the <I>NamingRule</I> of a <I>ModellingRule</I>: <I>Optional</I>, <I>Mandatory</I>, and <I>Constraint</I>. </P
><P 

>The following semantic is valid for the entire life-time of an instance that is based on a <I>TypeDefinitionNode</I> having an <I>InstanceDeclaration</I>. </P
><P 

>For an instance A1 of a <I>TypeDefinitionNode</I> AlphaType with an <I>InstanceDeclaration</I> B1 having a <I>ModellingRule</I> using the <I>NamingRule</I> <I>Optional </I>the following rule applies: For each <I>BrowsePath</I> from AlphaType to B1 the instance A1 may or may not have a <I>similar</I> <I>Node</I> (see <A href="#LinkTarget_10001" href="#">
6.2.4</A>
) for B1 with the same <I>BrowsePath</I>. If such a <I>Node</I> exists then the TranslateBrowsePathsToNodeIds <I>Service</I> (see <A href="#LinkTarget_5759" href="#">
Part 4</A>
) returns this <I>Node</I> as the first entry in the list. </P
><P 

>For an instance A1 of a <I>TypeDefinitionNode</I> AlphaType with an <I>InstanceDeclaration</I> B1 having a <I>ModellingRule</I> using the <I>NamingRule</I> <I>Mandatory </I>the following rule applies: For each <I>BrowsePath</I> from AlphaType to B1 the instance A1 shall have a <I>similar</I> <I>Node</I> (see <A href="#LinkTarget_10001" href="#">
6.2.4</A>
) for B1 using the same <I>BrowsePath</I> if all <I>Nodes</I> of the <I>BrowsePath</I> exist. For example, if a <I>Node</I> in the <I>BrowsePath</I> has a <I>NamingRule</I> <I>Optional</I> and is omitted in the instance, then all children of this <I>Node</I> would also be omitted, independent of their <I>ModellingRules</I>. </P
><P 

>If an <I>InstanceDeclaration</I> has a <I>ModellingRule</I> using the <I>NamingRule</I> <I>Constraint</I> it identifies that the <I>BrowseName</I> of the <I>InstanceDeclaration</I> is of no significance but other semantic is defined with the <I>ModellingRule</I>. The TranslateBrowsePathsToNodeIds <I>Service</I> (see <A href="#LinkTarget_5759" href="#">
Part 4</A>
) can typically not be used to access instances based on those <I>InstanceDeclarations</I>. </P
><H4 
 ID="LinkTarget_10803"
><B>6.4.4.3 Subtyping Rules for Properties of ModellingRules </H4
><P 

></B>It is allowed that subtypes override <I>ModellingRules</I> on their <I>InstanceDeclarations</I>. As a general rule for subtyping, constraints shall only be tightened, not loosened. Therefore, it is not allowed to specify on the supertype that an instance shall exist with the name (<I>NamingRule</I> <I>Mandatory</I>) and on the subtype make this optional (<I>NamingRule</I> <I>Optional</I>).  <A href="#LinkTarget_10810" href="#">
Table 15</A>
 specifies the allowed changes on the <I>Properties</I> when exchanging the <I>ModellingRules</I> in the subtype. </P
><P 

><B>Table 15 &ndash; Rule for ModellingRules Properties when Subtyping </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"> </P
></TD
><TD  
 valign="top"
><P 

>Value on supertype </P
></TD
><TD  
 valign="top"
><P 

>Value on subtype </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NamingRule </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NamingRule </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
><TD  
 valign="top"
><P 

>Mandatory or Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NamingRule </P
></TD
><TD  
 valign="top"
><P 

>Constraint </P
></TD
><TD  
 valign="top"
><P 

>Constraint </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_10845"
><FONT size="+1"><B>6.4.4.4 Instantiation Rules for Properties of ModellingRules </H4
><P 

></B>There are two different use cases when creating an instance &lsquo;A&rsquo; based on a <I>TypeDefinitionNode</I> &lsquo;A_Type&rsquo;. Either &lsquo;A&rsquo; is used as normal instance or it is used as <I>InstanceDeclaration</I> of another <I>TypeDefinitionNode</I>. </P
><P 

>In the first case, it is not required that newly created or referenced instances based on <I>InstanceDeclarations</I> have a <I>ModellingRule</I>, however, it is allowed that they have any <I>ModellingRule</I> independent of the <I>ModellingRule</I> of their <I>InstanceDeclaration</I>. </P
><P 

>In <A href="#LinkTarget_10857" href="#">
Figure 16</A>
 an example is given. The instances A1, A2, and A3 are all valid instances of Type_A, although B of A1 has no <I>ModellingRule</I> and B of A3 has a different <I>ModellingRule</I> than B of Type_A. </P
><P 

><FONT size="+1"> <DIV class="Sect" 
 Alt=""
>Type_AB::Type_B [Mandatory]A1B::Type_BA2B::Type_B[Mandatory]A3B::Type_B[Optional]</DIV
></P
><P 

><FONT size="+1"><B>Figure 16 &ndash; Example on changing instances based on InstanceDeclarations </P
><P 

></B>In the second case, all instances that are referenced directly or indirectly from &lsquo;A&rsquo; based on <I>InstanceDeclarations</I> of &lsquo;A_Type&rsquo; initially maintain the same <I>ModellingRule</I> as their <I>InstanceDeclarations.</I> The <I>ModellingRules</I> may be updated; the allowed changes to the <I>ModellingRules</I> of these <I>Nodes </I>are the same as those defined for subtyping in <A href="#LinkTarget_10803" href="#">
6.4.4.3</A>
. </P
><P 

>In <A href="#LinkTarget_10875" href="#">
Figure 17</A>
 an example of such a scenario is given. Type_B uses an <I>InstanceDeclaration</I> based on Type_A (upper part of the Figure). Later on the <I>ModellingRule</I> of the <I>InstanceDeclaration </I>A1 is changed (lower part of the Figure). A1 has become the <I>NamingRule</I> of <I>Mandatory</I> (changed from <I>Optional</I>). </P
><P 

><FONT size="+1"> <DIV class="Sect" 
 Alt=""
>Modified TypeType_AA1 [Optional]A2 [Mandatory]Type_BA [Mandatory]A2 [Mandatory]Type_BA [Mandatory]A2 [Mandatory]A1 [Mandatory]A1 [Optional]</DIV
></P
><P 

><FONT size="+1"><B>Figure 17 &ndash; Example on changing InstanceDeclarations based  on an InstanceDeclaration </P
><H4 
 ID="LinkTarget_10878"
>6.4.4.5 Standard ModellingRules </H4
><H5 
 ID="LinkTarget_10879"
>6.4.4.5.1 Titles of Standard ModellingRules </H5
><P 

></B>The remainder of <A href="#LinkTarget_10878" href="#">
6.4.4.5</A>
 defines <I>ModellingRules</I>. In <A href="#LinkTarget_10890" href="#">
Table 16</A>
 the <I>Properties</I> of those <I>ModellingRules</I> are summarized. </P
><P 

><B>Table 16 &ndash; Properties of ModellingRules </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Title </P
></TD
><TD  
 valign="top"
><P 

>NamingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Mandatory </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Optional </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ExposesItsArray </P
></TD
><TD  
 valign="top"
><P 

>Constraint </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OptionalPlacecholder </P
></TD
><TD  
 valign="top"
><P 

>Constraint </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MandatoryPlaceholder </P
></TD
><TD  
 valign="top"
><P 

>Constraint </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H5 
 ID="LinkTarget_10929"
><FONT size="+1"><B>6.4.4.5.2 Mandatory </H5
><P 

></B>An <I>InstanceDeclaration</I> marked with the <I>ModellingRule</I> <I>Mandatory</I> fulfils exactly the semantic defined for the <I>NamingRule</I> <I>Mandatory</I>. That means that for each existing <I>BrowsePath</I> on the instance a similar <I>Node</I> shall exist, but it is not defined whether a new <I>Node</I> is created or an existing <I>Node</I> is referenced. </P
><P 

>For example, the <I>TypeDefinitionNode</I> of a functional block &ldquo;AI_BLK_TYPE&rdquo; will have a setpoint &ldquo;SP1&rdquo;. An instance of this type &ldquo;AI_BLK_1&rdquo; will have a newly-created setpoint &ldquo;SP1 as a similar Node to the <I>InstanceDeclaration</I> SP1. <A href="#LinkTarget_10940" href="#">
Figure 18</A>
 illustrates the example. </P
><P 

> <DIV class="Sect" 
 Alt=""
>AI_BLK_1AI_BLK_TYPESP1:SetPointSP1:SetPointMandatory::ModellingRuleTypeHasModellingRule</DIV
></P
><P 

><B>Figure 18 &ndash; Use of the Standard ModellingRule New </P
><P 

></B>In <A href="#LinkTarget_10949" href="#">
6.4.4.5.3</A>
 a complex example combining the <I>Mandatory</I> and <I>Optional</I> <I>ModellingRules</I> is given. </P
><H5 
 ID="LinkTarget_10949"
><B>6.4.4.5.3 Optional </H5
><P 

></B>An <I>InstanceDeclaration</I> marked with the ModellingRule <I>Optional</I> fulfils exactly the semantic defined for the <I>NamingRule</I> <I>Optional</I>. That means that for each existing <I>BrowsePath</I> on the instance a similar <I>Node</I> may exist, but it is not defined whether a new <I>Node</I> is created or an existing <I>Node</I> is referenced. </P
><P 

>In <A href="#LinkTarget_10963" href="#">
Figure 19</A>
 an example using the <I>ModellingRules</I> <I>Optional</I> and <I>Mandatory</I> is shown. The example contains an <I>ObjectType</I> Type_A and all valid combinations of instances named A1 to A13. Note that if the optional B is provided, the mandatory E has to be provided as well, otherwise not. F is referenced by C and D. On the instance, this can be the same <I>Node</I> or two different <I>Nodes</I> with the same <I>BrowseName</I> (similar <I>Node</I> to <I>InstanceDeclaration</I> F). Not considered in the example is if the instances have <I>ModellingRules</I> or not. It is assumed that each F is similar to the <I>InstanceDeclaration</I> F, etc. </P
><P 

>If there would be a non-hierarchical <I>Reference</I> between E and F in the <I>InstanceDeclaration-Hierarchy</I>, it is not specified if it occurs in the instance hierarchy or not. In the case of A10, there could be a reference from E to one F but not to the other F, or to both or none of them. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Type_AD [Optional]C [Mandatory]B [Optional]E [Mandatory]F [Optional]A1CB A2CEB A9CDEA4CDA5CDFFA6CDFA7CDFA8CDFB A3CEFB A11CDEFB A10CDEFFB A12CDEFB A13CDEFA14CF</DIV
></P
><P 

><B>Figure 19 &ndash; Example using the Standard ModellingRules Optional and Mandatory </P
><H5 
 ID="LinkTarget_10964"
>6.4.4.5.4 ExposesItsArray </H5
><P 

></B>The <I>ExposesItsArray</I> <I>ModellingRule</I> exposes a special semantic on <I>VariableTypes</I> having a single- or multidimensional array as the data type. It indicates that each value of the array will also be exposed as a <I>Variable</I> in the <I>AddressSpace</I>. </P
><P 

>The <I>ExposesItsArray</I> <I>ModellingRule</I> can only be applied on <I>InstanceDeclarations</I> of <I>NodeClass</I> <I>Variable</I> that are part of a <I>VariableType</I> having a single- or multidimensional array as its data type. </P
><P 

>The <I>Variable</I> A having this <I>ModellingRule</I> shall be referenced by a <I>hierarchical</I> <I>Reference</I> in a forward direction from a <I>VariableType </I>B. B shall have a <I>ValueRank</I> value that is equal to or larger than zero. A should have a data type that reflects at least parts of the data that is managed in the array of B. Each instance of B shall reference one instance of A for each of its array elements. The used <I>Reference</I> shall be of the same type as the <I>hierarchical</I> <I>Reference</I> that connects B with A or a subtype of it. If there are more than one <I>hierarchical</I> <I>References</I> in the forward direction between A and B, then all instances based on B shall be referenced with all those <I>References</I>. </P
><P 

><A href="#LinkTarget_10979" href="#">
Figure 20</A>
 gives an example. A is an instance of Type_A having two entries in its value array. Therefore it references two instances of the same type as the <I>InstanceDeclaration</I> ArrayExpose. The <I>BrowseNames</I> of those instances are not defined by the <I>ModellingRule</I>. In general, it is not possible to get a <I>Variable</I> representing a specific entry in the array (e.g. the second). <I>Clients</I> </P
><P 

>will typically either get the array or access the <I>Variables</I> directly, so there is no need to provide that information. </P
><P 

><FONT size="+1"> <DIV class="Sect" 
 Alt=""
>Type_AArrayExpose::Type_XExposesItsArray::ModellingRuleTypeHasModellingRuleAA1::Type_XA2::Type_X</DIV
></P
><P 

><FONT size="+1"><B>Figure 20 &ndash; Example on using ExposesItsArray </P
><P 

></B>It is allowed to reference A by other <I>InstanceDeclarations</I> as well. Those <I>References</I> have to be reflected on each instance based on A. </P
><P 

><A href="#LinkTarget_10990" href="#">
Figure 21</A>
 gives an example. The <I>Property</I> EUUnit is referenced by ArrayExpose and therefore each instance based on ArrayExpose references the instance based on the <I>InstanceDeclaration</I> EUUnit. </P
><P 

><FONT size="+1"> <DIV class="Sect" 
 Alt=""
>Type_AArrayExpose::Type_XExposesItsArray::ModellingRuleTypeHasModellingRuleAA1::Type_XA2::Type_XEUUnit [Mandatory]EUUnit</DIV
></P
><P 

><FONT size="+1"><B>Figure 21 &ndash; Complex example on using ExposesItsArray </P
><H5 
 ID="LinkTarget_10991"
>6.4.4.5.5 OptionalPlaceholder </H5
><P 

></B>The intention of the <I>ModellingRule</I> <I>OptionalPlaceholder</I> is to expose the information that a complex <I>TypeDefinition</I> expects from instances of the <I>TypeDefinition</I> to add instances with specific <I>References</I> without defining <I>BrowseNames</I> for the instances. For example, a Device might have a Folder for DeviceParameters, and the DeviceParameters should be connected with a <I>HasComponent</I> <I>Reference</I>. However, the names of the DeviceParameters are specific to the instances. The example is shown in <A href="#LinkTarget_11002" href="#">
Figure 22</A>
, where an instance Device A adds two DeviceParameters in the Folder. </P
><P 

><FONT size="+1"> <DIV class="Sect" 
 Alt=""
>OptionalPlaceholder::ModellingRuleTypeHasModellingRule&lt;DeviceParameter&gt;::BaseDataVarableTypeDeviceParameters::FolderTypeMandatory::ModellingRuleTypeHasModellingRuleDevice ADeviceParameters::FolderTypeParameter A::BaseDataVarableTypeParameter B::BaseDataVarableTypeDeviceType</DIV
></P
><P 

><FONT size="+1"><B>Figure 22 &ndash; Example on using OptionalPlaceholder </P
><P 

></B>The <I>ModellingRule</I> <I>OptionalPlaceholder</I> adds no additional constraints on instances of the <I>TypeDefinition</I>. It just provides useful information when exposing a <I>TypeDefinition</I>. When the </P
><P 

><I>InstanceDeclaration</I> is complex, i.e. it references other <I>InstanceDeclarations</I> with hierarchical<I> References</I>, these <I>InstanceDeclarations</I> are not further considered for instantiating the <I>TypeDefinition</I>.  </P
><P 

>It is recommended that the <I>BrowseName</I> and the <I>DisplayName</I> of <I>InstanceDeclarations</I> having the <I>OptionalPlaceholder</I> <I>ModellingRule </I>should<I> </I>be enclosed within angle brackets. </P
><P 

>When overriding the <I>InstanceDeclaration, </I>the <I>ModellingRule</I> shall remain <I>OptionalPlaceholder</I>. </P
><H5 
 ID="LinkTarget_11008"
><B>6.4.4.5.6 MandatoryPlaceholder </H5
><P 

></B>The <I>ModellingRule</I> <I>MandatoryPlaceholder</I> has a similar intention as the <I>ModellingRule</I> <I>OptionalPlaceholder</I>. It exposes the information that a <I>TypeDefinition</I> expects of instances of the <I>TypeDefinition</I> to add instances defined by the <I>InstanceDeclaration</I>. However, <I>MandatoryPlaceholder</I> requires that at least one of those instances shall exist. </P
><P 

>For example, when the DeviceType requires that at least one DeviceParameter shall exist without specifying the <I>BrowseName</I> for it, it uses <I>MandatoryPlaceholder</I> as shown in  <A href="#LinkTarget_11020" href="#">
Figure 23</A>
. Device A is a valid instance as it has the required DeviceParameter. Device B is not valid as it uses the wrong <I>ReferenceType</I> to reference a DeviceParameter (<I>Organizes</I> instead of <I>HasComponent</I>) and Device C is not valid because it does not provide a DeviceParameter at all. </P
><P 

><FONT size="+1"> <DIV class="Sect" 
 Alt=""
>MandatoryPlaceholder::ModellingRuleTypeHasModellingRule&lt;DeviceParameter&gt;::BaseDataVarableTypeDeviceParameters::FolderTypeMandatory::ModellingRuleTypeHasModellingRuleDevice ADeviceParameters::FolderTypeParameter A::BaseDataVarableTypeParameter B::BaseDataVarableTypeDeviceTypeDevice CDeviceParameters::FolderTypeDevice BDeviceParameters::FolderTypeParameter A::BaseDataVarableTypeOrganizes</DIV
></P
><P 

><FONT size="+1"><B>Figure 23 &ndash; Example on using MandatoryPlaceholder </P
><P 

></B>The <I>ModellingRule</I> <I>MandatoryPlaceholder</I> requires that each instance provides at least one instance with the <I>TypeDefinition</I> of the <I>InstanceDeclaration</I> or a subtype, and is referenced with the same <I>ReferenceType</I> or a subtype as the <I>InstanceDeclaration</I>. It does not require a specific <I>BrowseName</I> and thus cannot be used for the TranslateBrowsePathsToNodeIds <I>Service</I> (see <A href="#LinkTarget_5759" href="#">
Part 4</A>
). </P
><P 

>When the <I>InstanceDeclaration</I> is complex, i.e. it references other <I>InstanceDeclarations</I> with hierarchical<I> References</I>, these <I>InstanceDeclarations</I> are not further considered for instantiating the <I>TypeDefinition</I>. </P
><P 

>It is recommended that the <I>BrowseName</I> and the <I>DisplayName</I> of <I>InstanceDeclarations</I> having the <I>MandatoryPlaceholder</I> <I>ModellingRule </I>should be enclosed within angle brackets. </P
><P 

>When overriding the <I>InstanceDeclaration, </I>the <I>ModellingRule</I> shall remain <I>MandatoryPlaceholder</I>. </P
><H2 
 ID="LinkTarget_11031"
><FONT size="+1"><B>6.5 Changing Type Definitions that are already used </H2
><P 

><FONT size="+1"></B>There is no behaviour specified regarding subtypes and instances when changing <I>ObjectTypes</I> and <I>VariableTypes</I>. It is <I>Server</I>-dependent, if those changes are reflected on the subtypes and instances of the types. However, all constraints defined for subtypes and instances have to be fulfilled. For example, it is not allowed to add a <I>Property</I> using the <I>ModellingRule</I> <I>Mandatory</I> on a type if instances of this type exist without the <I>Property</I>. In that case, the <I>Server</I> either has to add the <I>Property</I> to all instances of the type or adding the <I>Property</I> on the type has to be rejected. </P
><H1 
 ID="LinkTarget_11034"
><FONT size="+1"><B>7 Standard ReferenceTypes </H1
><H2 
 ID="LinkTarget_11035"
>7.1 General </H2
><P 

><FONT size="+1"></B>This standard defines <I>ReferenceTypes</I> as an inherent part of the OPC UA Address Space Model. <A href="#LinkTarget_11054" href="#">
Figure 24</A>
 informally describes the hierarchy of these <I>ReferenceTypes</I>. Other parts of this series of standards may specify additional <I>ReferenceTypes</I>. The remainder of <A href="#LinkTarget_11034" href="#">
7</A>
  defines the <I>ReferenceTypes</I>. <A href="#LinkTarget_5761" href="#">
Part 5</A>
 defines their representation in the <I>AddressSpace</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ReferencesHierarchicalReferencesNonHierarchicalReferencesHasEventSourceHasNotifierHasChildOrganizesAggregatesHasSubtypeHasPropertyHasComponentHasOrderedComponentHasModellingRuleHasTypeDefinitionHasEncodingGeneratesEventHasDescriptionAlwaysGeneratesEvent</DIV
></P
><P 

><B>Figure 24 &ndash; Standard ReferenceType Hierarchy </P
><H2 
 ID="LinkTarget_11055"
><FONT size="+1">7.2 References ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>References ReferenceType</I> is an abstract <I>ReferenceType</I>; only subtypes of it can be used. </P
><P 

>There is no semantic associated with this <I>ReferenceType</I>. This is the base type of all <I>ReferenceTypes</I>. All <I>ReferenceTypes</I> shall be a subtype of this base <I>ReferenceType</I> &ndash; either direct or indirect. The main purpose of this <I>ReferenceType</I> is allowing simple filter and queries in the corresponding <I>Services</I> of <A href="#LinkTarget_5761" href="#">
Part 5</A>
. </P
><P 

>There are no constraints defined for this abstract <I>ReferenceType</I>. </P
><H2 
 ID="LinkTarget_11064"
><FONT size="+1"><B>7.3 HierarchicalReferences ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>HierarchicalReferences</I> <I>ReferenceType</I> is an abstract <I>ReferenceType</I>; only subtypes of it can be used. </P
><P 

>The semantic of <I>HierarchicalReferences</I> is to denote that <I>References</I> of <I>HierarchicalReferences</I> span a hierarchy. It means that it may be useful to present <I>Nodes</I> related with <I>References</I> of this type in a hierarchical-like way. <I>HierarchicalReferences</I> does not forbid loops. For example, starting from <I>Node</I> &ldquo;A&rdquo; and following <I>HierarchicalReferences </I>it<I> </I>may be possible to browse to <I>Node</I> &ldquo;A&rdquo;, again. </P
><P 

>It is not permitted to have a <I>Property</I> as <I>SourceNode</I> of a <I>Reference</I> of any subtype of this abstract <I>ReferenceType</I>. </P
><P 

>It is not allowed that the <I>SourceNode</I> and the <I>TargetNode</I> of a <I>Reference</I> of the <I>ReferenceType</I> <I>HierarchicalReferences</I> are the same, that is, it is not allowed to have self-references using <I>HierarchicalReferences</I>. </P
><H2 
 ID="LinkTarget_11070"
><FONT size="+1"><B>7.4 NonHierarchicalReferences ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>NonHierarchicalReferences</I> <I>ReferenceType</I> is an abstract <I>ReferenceType</I>; only subtypes of it can be used. </P
><P 

>The semantic of <I>NonHierarchicalReferences</I> is to denote that its subtypes do not span a hierarchy and should not be followed when trying to present a hierarchy. To distinguish hierarchical and non-hierarchical<I> References</I>, all concrete <I>ReferenceTypes</I> shall inherit from either <I>hierarchical References</I> or <I>non-hierarchical References</I>, either direct or indirect. </P
><P 

>There are no constraints defined for this abstract <I>ReferenceType</I>. </P
><H2 
 ID="LinkTarget_11074"
><FONT size="+1"><B>7.5 HasChild ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>HasChild</I> <I>ReferenceType</I> is an abstract <I>ReferenceType</I>; only subtypes of it can be used. It is a subtype of <I>HierarchicalReferences</I>. </P
><P 

>The semantic is to indicate that <I>References</I> of this type span a non-looping hierarchy. </P
><P 

>Starting from <I>Node</I> &ldquo;A&rdquo; and only following <I>References</I> of the subtypes of the <I>HasChild ReferenceType</I> it shall never be possible to return to &ldquo;A&rdquo;. But it is allowed that following the <I>References</I> there may be more than one path leading to another <I>Node</I> &ldquo;B&rdquo;. </P
><H2 
 ID="LinkTarget_11078"
><FONT size="+1"><B>7.6 Aggregates ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>Aggregates</I> <I>ReferenceType</I> is an abstract <I>ReferenceType</I>; only subtypes of it can be used. It is a subtype of <I>HasChild</I>. </P
><P 

>The semantic is to indicate a part (the <I>TargetNode</I>) belongs to the <I>SourceNode</I>. It does not specify the ownership of the <I>TargetNode</I>. </P
><P 

>There are no constraints defined for this abstract <I>ReferenceType</I>. </P
><H2 
 ID="LinkTarget_11082"
><FONT size="+1"><B>7.7 HasComponent ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>HasComponent ReferenceType</I> is a concrete <I>ReferenceType</I> that can be used directly. It is a subtype of the <I>Aggregates ReferenceType</I>. </P
><P 

>The semantic is a part-of relationship. The <I>TargetNode</I> of a <I>Reference</I> of the <I>HasComponent ReferenceType</I> is a part of the <I>SourceNode</I>. This <I>ReferenceType</I> is used to relate <I>Objects</I> or <I>ObjectTypes</I> with their containing <I>Objects</I>, <I>DataVariables</I>, and <I>Methods</I>. This <I>ReferenceType</I> is also used to relate complex <I>Variable</I>s or <I>VariableTypes</I> with their <I>DataVariables</I>. </P
><P 

>Like all other <I>ReferenceTypes</I>, this <I>ReferenceType</I> does not specify anything about the ownership of the parts, although it represents a part-of relationship semantic. That is, it is not specified if the <I>TargetNode</I> of a <I>Reference</I> of the <I>HasComponent ReferenceType</I> is deleted when the <I>SourceNode</I> is deleted. </P
><P 

>The <I>TargetNode</I> of this <I>ReferenceType</I> shall be a <I>Variable</I>, an <I>Object</I> or a <I>Method</I>. </P
><P 

>If the <I>TargetNode</I> is a <I>Variable</I>, the <I>SourceNode</I> shall be an <I>Object</I>, an <I>ObjectType</I>, a <I>DataVariable</I> or a <I>VariableType</I>. By using the <I>HasComponent Reference</I>, the <I>Variable</I> is defined as <I>DataVariable</I>. </P
><P 

>If the <I>TargetNode</I> is an <I>Object</I> or a <I>Method</I>, the <I>SourceNode</I> shall be an <I>Object</I> or <I>ObjectType</I>. </P
><H2 
 ID="LinkTarget_11090"
><FONT size="+1"><B>7.8 HasProperty ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>HasProperty ReferenceType</I> is a concrete <I>ReferenceType</I> that can be used directly. It is a subtype of the <I>Aggregates ReferenceType</I>. </P
><P 

>The semantic is to identify the <I>Properties</I> of a <I>Node</I>. <I>Properties</I> are described in <A href="#LinkTarget_6211" href="#">
4.4.2</A>
. </P
><P 

>The <I>SourceNode</I> of this <I>ReferenceType</I> can be of any <I>NodeClass</I>. The <I>TargetNode</I> shall be a <I>Variable</I>. By using the <I>HasProperty Reference</I>, the <I>Variable</I> is defined as <I>Property</I>. Since <I>Properties</I> shall not have <I>Properties</I>, a <I>Property</I> shall never be the <I>SourceNode</I> of a <I>HasProperty Reference</I>. </P
><H2 
 ID="LinkTarget_11099"
><FONT size="+1"><B>7.9 HasOrderedComponent ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>HasOrderedComponent ReferenceType</I> is a concrete <I>ReferenceType</I> that can be used directly. It is a subtype of the <I>HasComponent ReferenceType</I>. </P
><P 

>The semantic of the <I>HasOrderedComponent ReferenceType</I> &ndash; besides the semantic of the <I>HasComponent ReferenceType</I> &ndash; is that when browsing from a <I>Node</I> and following <I>References</I> of this type or its subtype all <I>References</I> are returned in the Browse <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 in a well-defined order. The order is <I>Server</I>-specific, but the <I>Client</I> can assume that the <I>Server</I> always returns them in the same order. </P
><P 

>There are no additional constraints defined for this <I>ReferenceType</I>. </P
><H2 
 ID="LinkTarget_11108"
><FONT size="+1"><B>7.10 HasSubtype ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>HasSubtype</I> <I>ReferenceType</I> is a concrete <I>ReferenceType</I> that can be used directly. It is a subtype of the <I>HasChild ReferenceType</I>. </P
><P 

>The semantic of <I>this ReferenceType</I> is to express a subtype relationship of types. It is used to span the <I>ReferenceType</I> hierarchy, whose semantic is specified in <A href="#LinkTarget_7047" href="#">
5.3.3.3</A>
; a <I>DataType</I> hierarchy is specified in <A href="#LinkTarget_9279" href="#">
5.8.3</A>
, and other subtype hierarchies are specified in Clause <A href="#LinkTarget_9984" href="#">
6</A>
. </P
><P 

>The <I>SourceNode</I> of <I>References</I> of this type shall be an <I>ObjectType</I>, a <I>VariableType</I>, a <I>DataType</I> or a <I>ReferenceType</I> and the <I>TargetNode</I> shall be of the same <I>NodeClass</I> as the <I>SourceNode</I>. Each <I>ReferenceType</I> shall be the <I>TargetNode</I> of at most one <I>Reference</I> of type <I>HasSubtype</I>. </P
><H2 
 ID="LinkTarget_11125"
><FONT size="+1"><B>7.11 Organizes ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>Organizes ReferenceType</I> is a concrete <I>ReferenceType</I> and can be used directly. It is a subtype of <I>HierarchicalReferences</I>. </P
><P 

>The semantic of this <I>ReferenceType</I> is to organise <I>Nodes</I> in the <I>AddressSpace</I>. It can be used to span multiple hierarchies independent of any hierarchy created with the non-looping <I>Aggregates</I> <I>References</I>. </P
><P 

>The <I>SourceNode</I> of <I>References</I> of this type shall be an <I>Object</I> or a <I>View.</I> If it is an <I>Object</I> then it should be an <I>Object</I> of the <I>ObjectType</I> <I>FolderType</I> or one of its subtypes (see <A href="#LinkTarget_7871" href="#">
5.5.3</A>
). </P
><P 

>The <I>TargetNode</I> of this <I>ReferenceType</I> can be of any <I>NodeClass</I>. </P
><H2 
 ID="LinkTarget_11135"
><FONT size="+1"><B>7.12 HasModellingRule ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>HasModellingRule</I> <I>ReferenceType</I> is a concrete <I>ReferenceType</I> and can be used directly. It is a subtype of <I>NonHierarchicalReferences</I>. </P
><P 

>The semantic of this <I>ReferenceType</I> is to bind the <I>ModellingRule</I> to an <I>Object</I>, <I>Variable</I> or <I>Method</I>. The <I>ModellingRule</I> mechanisms are described in <A href="#LinkTarget_10745" href="#">
6.4.4</A>
. </P
><P 

>The <I>SourceNode</I> of this <I>ReferenceType</I> shall be an <I>Object</I>, <I>Variable</I> or <I>Method</I>. The <I>TargetNode</I> shall be an <I>Object</I> of the <I>ObjectType</I> &ldquo;ModellingRule&rdquo; or one of its subtypes. </P
><P 

>Each <I>Node</I> shall be the <I>SourceNode</I> of at most one <I>HasModellingRule Reference</I>. </P
><H2 
 ID="LinkTarget_11146"
><FONT size="+1"><B>7.13 HasTypeDefinition ReferenceType </H2
><P 

><FONT size="+1"></B>The HasTypeDefinition ReferenceType is a concrete ReferenceType and can be used directly. It is a subtype of NonHierarchicalReferences. </P
><P 

>The semantic of this <I>ReferenceType</I> is to bind an <I>Object</I> or <I>Variable</I> to its <I>ObjectType </I>or<I> VariableType</I>,<I> </I>respectively<I>.</I> The relationships between types and instances are described in <A href="#LinkTarget_6232" href="#">
4.5</A>
. </P
><P 

>The <I>SourceNode</I> of this <I>ReferenceType</I> shall be an <I>Object</I> or <I>Variable</I>. If the <I>SourceNode</I> is an <I>Object</I>, then the <I>TargetNode</I> shall be an <I>ObjectType</I>; if the <I>SourceNode</I> is a <I>Variable</I>, then the <I>TargetNode</I> shall be a <I>VariableType</I>. </P
><P 

>Each <I>Variable</I> and each <I>Object</I> shall be the <I>SourceNode</I> of exactly one <I>HasTypeDefinition</I> <I>Reference</I>. </P
><H2 
 ID="LinkTarget_11156"
><FONT size="+1"><B>7.14 HasEncoding ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>HasEncoding</I> <I>ReferenceType</I> is a concrete <I>ReferenceType</I> and can be used directly. It is a subtype of <I>NonHierarchicalReferences</I>. </P
><P 

>The semantic of this <I>ReferenceType</I> is to reference <I>DataTypeEncodings</I> of a <I>DataType</I>. </P
><P 

>The <I>SourceNode</I> of <I>References</I> of this type shall be a <I>DataType</I>. </P
><P 

>The <I>TargetNode</I> of this <I>ReferenceType</I> shall be an <I>Object</I> of the <I>ObjectType</I> <I>DataTypeEncodingType</I> or one of its subtypes (see <A href="#LinkTarget_9473" href="#">
5.8.4</A>
). </P
><H2 
 ID="LinkTarget_11166"
><FONT size="+1"><B>7.15 HasDescription ReferenceType </H2
><P 

><FONT size="+1"></B>The <I>HasDescription</I> <I>ReferenceType</I> is a concrete <I>ReferenceType</I> and can be used directly. It is a subtype of <I>NonHierarchicalReferences</I>. </P
><P 

>The semantic of this <I>ReferenceType</I> is to reference the <I>DataTypeDescription</I> of a <I>DataTypeEncoding</I>. </P
><P 

>The <I>SourceNode</I> of <I>References</I> of this type shall be an <I>Object</I> of the <I>ObjectType</I> <I>DataTypeEncodingType </I>or one of its subtypes. </P
><P 

>The <I>TargetNode</I> of this <I>ReferenceType</I> shall be a <I>Variable</I> of the <I>VariableType</I> <I>DataTypeDescriptionType</I> or one of its subtypes (see <A href="#LinkTarget_9473" href="#">
5.8.4</A>
). </P
><H2 
 ID="LinkTarget_11176"
><FONT size="+1"><B>7.16 GeneratesEvent </H2
><P 

><FONT size="+1"></B>The <I>GeneratesEvent</I> <I>ReferenceType</I> is a concrete <I>ReferenceType</I> and can be used directly. It is a subtype of <I>NonHierarchicalReferences</I>. </P
><P 

>The semantic of this <I>ReferenceType</I> is to identify the types of <I>Events</I> instances of <I>ObjectTypes </I>or <I>VariableTypes</I> may generate and <I>Methods</I> may generate on each <I>Method</I> call. </P
><P 

>The <I>SourceNode</I> of <I>References</I> of this type shall be an <I>ObjectType</I>, a <I>VariableType</I> or a <I>Method</I>. </P
><P 

>The <I>TargetNode</I> of this <I>ReferenceType</I> shall be an <I>ObjectType</I> representing <I>EventTypes</I>, that is, the <I>BaseEventType</I> or one of its subtypes. </P
><H2 
 ID="LinkTarget_11181"
><FONT size="+1"><B>7.17 AlwaysGeneratesEvent </H2
><P 

><FONT size="+1"></B>The <I>AlwaysGeneratesEvent</I> <I>ReferenceType</I> is a concrete <I>ReferenceType</I> and can be used directly. It is a subtype of <I>GeneratesEvent</I>. </P
><P 

>The semantic of this <I>ReferenceType</I> is to identify the types of <I>Events</I> <I>Methods</I> have to generate on each <I>Method</I> call. </P
><P 

>The <I>SourceNode</I> of <I>References</I> of this type shall be a <I>Method</I>. </P
><P 

>The <I>TargetNode</I> of this <I>ReferenceType</I> shall be an <I>ObjectType</I> representing <I>EventTypes</I>, that is, the <I>BaseEventType</I> or one of its subtypes. </P
><H2 
 ID="LinkTarget_11187"
><FONT size="+1"><B>7.18 HasEventSource </H2
><P 

><FONT size="+1"></B>The <I>HasEventSource</I> <I>ReferenceType</I> is a concrete <I>ReferenceType</I> and can be used directly. It is a subtype of <I>HierarchicalReferences</I>. </P
><P 

>The semantic of this <I>ReferenceType</I> is to relate event sources in a hierarchical, non-looping organization. This <I>ReferenceType</I> and any subtypes are intended to be used for discovery of <I>Event</I> generation in a <I>Server</I>. They are not required to be present for a <I>Server</I> to generate an <I>Event</I> from its source (causing the <I>Event</I>) to its notifying <I>Nodes</I>. In particular, the root notifier of a <I>Server</I>, the <I>Server</I> <I>Object</I> defined in <A href="#LinkTarget_5761" href="#">
Part 5</A>
, is always capable of supplying all <I>Events</I> from a <I>Server</I> and as such has implied <I>HasEventSource</I> <I>References</I> to every event source in a <I>Server</I>. </P
><P 

>The <I>SourceNode</I> of this <I>ReferenceType</I> shall be an <I>Object</I> that is a source of event subscriptions. A source of event subscriptions is an <I>Object</I> that has its &ldquo;SubscribeToEvents&rdquo; bit set within the <I>EventNotifier</I> <I>Attribute</I>. </P
><P 

>The <I>TargetNode</I> of this <I>ReferenceType</I> can be a <I>Node</I> of any <I>NodeClass</I> that can generate event notifications via a subscription to the reference source. </P
><P 

>Starting from <I>Node</I> &ldquo;A&rdquo; and only following <I>References</I> of the <I>HasEventSource</I> <I>ReferenceType</I> or of its subtypes it shall never be possible to return to &ldquo;A&rdquo;. But it is permitted that, following the <I>References</I>, there may be more than one path leading to another <I>Node</I> &ldquo;B&rdquo;. </P
><H2 
 ID="LinkTarget_11198"
><FONT size="+1"><B>7.19 HasNotifier </H2
><P 

><FONT size="+1"></B>The <I>HasNotifier</I> <I>ReferenceType</I> is a concrete <I>ReferenceType</I> and can be used directly. It is a subtype of <I>HasEventSource</I>. </P
><P 

>The semantic of this <I>ReferenceType</I> is to relate <I>Object</I> <I>Nodes</I> that are notifiers with other notifier <I>Object</I> <I>Nodes</I>. The <I>ReferenceType</I> is used to establish a hierarchical organization of event notifying <I>Objects</I>. It is a subtype of the <I>HasEventSource</I> <I>ReferenceType</I> defined in <A href="#LinkTarget_11181" href="#">
7.17</A>
. </P
><P 

>The <I>SourceNode</I> of this <I>ReferenceType</I> shall be <I>Objects</I> or <I>Views</I> that are a source of event subscriptions. The <I>TargetNode</I> of this <I>ReferenceType</I> shall be <I>Objects</I> that are a source of event subscriptions. A source of event subscriptions is an <I>Object</I> that has its &ldquo;SubscribeToEvents&rdquo; bit set within the <I>EventNotifier</I> <I>Attribute</I>. </P
><P 

>If the <I>TargetNode</I> of a <I>Reference</I> of this type generates an <I>Event</I>, then this <I>Event</I> shall also be provided in the <I>SourceNode</I> of the <I>Reference</I>. </P
><P 

>An example of a possible organization of <I>Event</I> <I>References</I> is represented in <A href="#LinkTarget_11219" href="#">
Figure 25</A>
. In this example an unfiltered <I>Event</I> subscription directed to the &ldquo;Pump&rdquo; <I>Object</I> will provide the <I>Event</I> sources &ldquo;Start&rdquo; and &ldquo;Stop&rdquo; to the subscriber. An unfiltered <I>Event</I> subscription directed to the &ldquo;Area 1&rdquo; <I>Object</I> will provide <I>Event</I> sources from &ldquo;Machine B&rdquo;, &ldquo;Tank A&rdquo; and all notifier sources below &ldquo;Tank A&rdquo;. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Area 1PumpMachine BTank ATemp SensorCalibrationStopStartHasNotifierReferenceTypeLegendEvent Source NodeEvent Notifier ObjectHasEventSourceReferenceTypePhase Start</DIV
></P
><P 

><B>Figure 25 &ndash; Event Reference Example </P
><P 

></B>A second example of a more complex organization of <I>Event</I> <I>References</I> is represented in <A href="#LinkTarget_11231" href="#">
Figure 26</A>
. In this example, explicit <I>References</I> are included from the <I>Server</I>&rsquo;s <I>Server</I> <I>Object</I>, which is a source of all <I>Server</I> <I>Events</I>. A second <I>Event</I> organization has been introduced to collect the <I>Events</I> related to &ldquo;Tank Farm 1&rdquo;. An unfiltered <I>Event</I> subscription directed to the &ldquo;Tank Farm 1&rdquo; <I>Object</I> will provide <I>Event</I> sources from &ldquo;Tank B&rdquo;, &ldquo;Tank A&rdquo; and all notifier sources below &ldquo;Tank B&rdquo; and &ldquo;Tank A&rdquo;. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Area 1PumpMachine BTank ATemp SensorCalibrationStopStartHasNotifierReferenceTypeLegendEvent Source NodeEvent Notifier ObjectHasEventSourceReferenceTypePhase StartServerObjectTank Farm 1Tank BPhase StartPumpTemp SensorCalibrationStart</DIV
></P
><P 

><B>Figure 26 &ndash; Complex Event Reference Example </P
><H1 
 ID="LinkTarget_11232"
><FONT size="+1">8 Standard DataTypes </H1
><H2 
 ID="LinkTarget_11233"
>8.1 General </H2
><P 

><FONT size="+1"></B>The remainder of <A href="#LinkTarget_11232" href="#">
8</A>
 defines <I>DataTypes</I>. Their representation in the <I>AddressSpace</I> and the <I>DataType</I> hierarchy is specified in <A href="#LinkTarget_5761" href="#">
Part 5</A>
. Other parts of this series of standards may specify additional <I>DataTypes</I>. </P
><H2 
 ID="LinkTarget_11244"
><FONT size="+1"><B>8.2 NodeId </H2
><H3 
 ID="LinkTarget_11246"
><FONT size="+1">8.2.1 General </H3
><P 

></B>This <I>Built-in DataType</I> is composed of three elements that identify a <I>Node</I> within a <I>Server</I>. They are defined in <A href="#LinkTarget_11253" href="#">
Table 17</A>
. </P
><P 

><B>Table 17 &ndash; NodeId Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NodeId </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> namespaceIndex </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>The index for a namespace URI (see <A href="#LinkTarget_11317" href="#">
8.2.2</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> identifierType </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
></TD
><TD  
 valign="top"
><P 

>The format and data type of the identifier (see <A href="#LinkTarget_11330" href="#">
8.2.3</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> identifier </P
></TD
><TD  
 valign="top"
><P 

>* </P
></TD
><TD  
 valign="top"
><P 

>The identifier for a <I>Node</I> in the <I>AddressSpace</I> of an OPC UA <I>Server</I> (see <A href="#LinkTarget_11378" href="#">
8.2.4</A>
). </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">See <A href="#LinkTarget_5763" href="#">
Part 6</A>
 for a description of the encoding of the identifier into OPC UA Messages. </P
><H3 
 ID="LinkTarget_11317"
><B>8.2.2 NamespaceIndex </H3
><P 

></B>The namespace is a URI that identifies the naming authority responsible for assigning the identifier element of the <I>NodeId</I>. Naming authorities include the local <I>Server</I>, the underlying system, standards bodies and consortia. It is expected that most <I>Nodes</I> will use the URI of the <I>Server</I> or of the underlying system. </P
><P 

>Using a namespace URI allows multiple OPC UA <I>Servers</I> attached to the same underlying system to use the same identifier to identify the same <I>Object</I>. This enables <I>Clients</I> that connect to those <I>Servers</I> to recognise <I>Objects</I> that they have in common. </P
><P 

>Namespace URIs, like <I>Server</I> names, are identified by numeric values in OPC UA <I>Services</I> to permit more efficient transfer and processing (e.g. table lookups). The numeric values used to identify namespaces correspond to the index into the <I>NamespaceArray</I>. The <I>NamespaceArray</I> is a <I>Variable</I> that is part of the <I>Server</I> <I>Object</I> in the <I>AddressSpace</I> (see <A href="#LinkTarget_5761" href="#">
Part 5</A>
 for its definition). </P
><P 

>The URI for the OPC UA namespace is: </P
><P 

><FONT size="+1">&ldquo;http://opcfoundation.org/UA/&rdquo; </P
><P 

><FONT size="+1">Its corresponding index in the namespace table is 0. </P
><P 

>The namespace URI is case sensitive. </P
><H3 
 ID="LinkTarget_11330"
><B>8.2.3 IdentifierType </H3
><P 

></B>The IdentifierType element identifies the type of the <I>NodeId</I>, its format and its scope. Its values are defined in <A href="#LinkTarget_11337" href="#">
Table 18</A>
. </P
><P 

><B>Table 18 &ndash; IdentifierType Values </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Value </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NUMERIC_0 </P
></TD
><TD  
 valign="top"
><P 

>Numeric value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>STRING_1 </P
></TD
><TD  
 valign="top"
><P 

>String value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>GUID_2 </P
></TD
><TD  
 valign="top"
><P 

>Globally Unique Identifier </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OPAQUE_3 </P
></TD
><TD  
 valign="top"
><P 

>Namespace specific format </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">Normally the scope of <I>NodeIds</I> is the <I>Server</I> in which they are defined. For certain types of <I>NodeIds</I>, <I>NodeIds</I> can uniquely identify a <I>Node</I> within a system, or across systems (e.g. GUIDs). System-wide and globally-unique identifiers allow <I>Clients</I> to track <I>Nodes</I>, such as work orders, as they move between OPC UA <I>Servers</I> as they progress through the system. </P
><P 

>Opaque identifiers are identifiers that are free-format byte strings that might or might not be human interpretable. </P
><P 

>String identifiers are case sensitive. That is, <I>Clients</I> shall consider them case sensitive. <I>Servers</I> are allowed to provide alternative <I>NodeIds</I> (see <A href="#LinkTarget_6551" href="#">
5.2.2</A>
) and using this mechanism severs can handle <I>NodeIds</I> as case insensitive. </P
><H3 
 ID="LinkTarget_11378"
><B>8.2.4 Identifier value </H3
><P 

></B>The identifier value element is used within the context of the first three elements to identify the <I>Node</I>. Its data type and format is defined by the IdType. </P
><P 

>Identifier values of IdType STRING_1 are restricted to 4 096 characters. Identifier values of IdType OPAQUE_3 are restricted to 4 096 bytes. </P
><P 

>A null <I>NodeId</I> has special meaning. For example, many services defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 define special behaviour if a null <I>NodeId</I> is passed as a parameter. Each IdType has a set of identifier values that represent a null <I>NodeId</I>. These values are summarised in <A href="#LinkTarget_11392" href="#">
Table 19</A>
. </P
><P 

><B>Table 19 &ndash; NodeId Null Values </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">IdType </P
></TD
><TD  
 valign="top"
><P 

>Identifier </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NUMERIC_0 </P
></TD
><TD  
 valign="top"
><P 

>0 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>STRING_1 </P
></TD
><TD  
 valign="top"
><P 

>A null or Empty String (&ldquo;&rdquo;) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>GUID_2 </P
></TD
><TD  
 valign="top"
><P 

>A Guid initialised with zeros (e.g. 00000000-0000-0000-0000-000000) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OPAQUE_3 </P
></TD
><TD  
 valign="top"
><P 

>A ByteString with Length=0 </P
></TD
></TR
></TABLE
><P 

><FONT size="+1">A null <I>NodeId</I> always has a NamespaceIndex equal to 0. </P
><P 

>A <I>Node</I> in the <I>AddressSpace</I> shall not have a null as its <I>NodeId</I>. </P
><H2 
 ID="LinkTarget_11426"
><FONT size="+1"><B>8.3 QualifiedName </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> contains a qualified name. It is, for example, used as <I>BrowseName</I>. Its elements are defined in <A href="#LinkTarget_11433" href="#">
Table 20</A>
. The name part of the <I>QualifiedName</I> is restricted to 512 characters. </P
><P 

><B>Table 20 &ndash; QualifiedName Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> namespaceIndex </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>Index that identifies the namespace that defines the name. </P
><P 

>This index is the index of that namespace in the local <I>Server</I>&rsquo;s <I>NamespaceArray</I>. </P
><P 

>The <I>Client</I> may read the <I>NamespaceArray</I> <I>Variable</I> to access the string value of the namespace. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> name </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The text portion of the QualifiedName. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_11470"
><FONT size="+1"><B>8.4 LocaleId </H2
><P 

><FONT size="+1"></B>This <I>Simple</I> <I>DataType</I> is specified as a string that is composed of a language component and a country/region component as specified by <A href="#LinkTarget_5780" href="#">
IEEE 754-1985, <I>IEEE Standard for Binary Floating-Point Arithmetic</I>,http://ieeexplore.ieee.org/servlet/opac?punumber=2355 </A>
</P
><P 

><A>
IETF RFC 3066</A>
. The &lt;country/region&gt; component is always preceded by a hyphen. The format of the <I>LocaleId</I> string is shown below: </P
><P 

> &lt;language&gt;[-&lt;country/region&gt;], where   &lt;language&gt; is the two letter <A href="#LinkTarget_5777" href="#">
ISO 639</A>
 code for a language,   &lt;country/region&gt; is the two letter <A href="#LinkTarget_5778" href="#">
ISO 3166</A>
 code for the country/region. </P
><P 

>The rules for constructing <I>LocaleIds</I> defined by <A href="#LinkTarget_5780" href="#">
IEEE 754-1985, <I>IEEE Standard for Binary Floating-Point Arithmetic</I>,http://ieeexplore.ieee.org/servlet/opac?punumber=2355 </A>
</P
><P 

><A>
IETF RFC 3066</A>
 are restricted as follows: </P
><DL 

><DD 

>a) this specification permits only zero or one &lt;country/region&gt; component to follow the &lt;language&gt; component; </DD
><DD 

>b) this specification also permits the &ldquo;-CHS&rdquo; and &ldquo;-CHT&rdquo; three-letter &lt;country/region&gt; codes for &ldquo;Simplified&rdquo; and &ldquo;Traditional&rdquo; Chinese locales; </DD
></DL
><DL 

><DD 

>c) this specification also allows the use of other &lt;country/region&gt; codes as deemed necessary by the <I>Client</I> or the <I>Server</I>. </DD
></DL
><P 

><A href="#LinkTarget_11515" href="#">
Table 21</A>
 shows examples of OPC UA <I>LocaleIds</I>. <I>Clients</I> and <I>Servers</I> always provide <I>LocaleIds</I> that explicitly identify the language and the country/region. </P
><P 

><B>Table 21 &ndash;LocaleId Examples </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Locale </P
></TD
><TD  
 valign="top"
><P 

>OPC UA LocaleId </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>English  </P
></TD
><TD  
 valign="top"
><P 

>en </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>English (US)  </P
></TD
><TD  
 valign="top"
><P 

>en-US </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>German  </P
></TD
><TD  
 valign="top"
><P 

>de </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>German (Germany)  </P
></TD
><TD  
 valign="top"
><P 

>de-DE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>German (Austrian)  </P
></TD
><TD  
 valign="top"
><P 

>de-AT </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">An empty or null string indicates that the LocaleId is unknown. </P
><H2 
 ID="LinkTarget_11556"
><FONT size="+1"><B>8.5 LocalizedText </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a structure containing a String in a locale-specific translation specified in the identifier for the locale. Its elements are defined in <A href="#LinkTarget_11563" href="#">
Table 22</A>
. </P
><P 

><B>Table 22 &ndash; LocalizedText Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> text </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The localized text.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> locale </P
></TD
><TD  
 valign="top"
><P 

>LocaleId </P
></TD
><TD  
 valign="top"
><P 

>The identifier for the locale (e.g. &ldquo;en-US&rdquo;). </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_11598"
><FONT size="+1"><B>8.6 Argument </H2
><P 

><FONT size="+1"></B>This <I>Structured</I> <I>DataType</I> defines a <I>Method</I> input or output argument specification. It is for example used in the input and output argument <I>Properties</I> for <I>Methods</I>. Its elements are described in <A href="#LinkTarget_11605" href="#">
Table 23</A>
. </P
><P 

><B>Table 23 &ndash; Argument Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Argument </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> name </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The name of the argument. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> dataType </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeId</I> of the <I>DataType</I> of this argument. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> valueRank </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>Indicates whether the <I>dataType</I> is an array and how many dimensions the array has. </P
><P 

>It may have the following values: </P
><P 

><I>n</I> &gt; 1: the dataType is an array with the specified number of dimensions. </P
><P 

>OneDimension (1): The dataType is an array with one dimension. </P
><P 

>OneOrMoreDimensions (0): The dataType is an array with one or more dimensions. </P
><P 

>Scalar (&minus;1): The dataType is not an array. </P
><P 

>Any (&minus;2): The dataType can be a scalar or an array with any number of dimensions. </P
><P 

>ScalarOrOneDimension (&minus;3): The dataType can be a scalar or a one dimensional array. </P
><P 

>NOTE All DataTypes are considered to be scalar, even if they have array-like semantics like ByteString and String. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> arrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>UInt32[] </P
></TD
><TD  
 valign="top"
><P 

>Specifies the length of each dimension for an array dataType. It is intended to describe the capability of the dataType, not the current size. </P
><P 

>The number of elements shall be equal to the value of the <I>valueRank</I>. Shall be null if <I>valueRank</I> &le; 0. </P
><P 

>A value of 0 for an individual dimension indicates that the dimension has a variable length. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>A localised description of the argument. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_11674"
><FONT size="+1"><B>8.7 BaseDataType </H2
><P 

><FONT size="+1"></B>This abstract <I>DataType</I> defines a value that can have any valid <I>DataType</I>. </P
><P 

>It defines a special value null indicating that a value is not present. </P
><H2 
 ID="LinkTarget_11677"
><FONT size="+1"><B>8.8 Boolean </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that is either TRUE or FALSE. </P
><H2 
 ID="LinkTarget_11680"
><FONT size="+1"><B>8.9 Byte </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value in the range of 0 to 255. </P
><H2 
 ID="LinkTarget_11682"
><FONT size="+1"><B>8.10 ByteString </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that is a sequence of Byte values. </P
><H2 
 ID="LinkTarget_11684"
><FONT size="+1"><B>8.11 DateTime </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a Gregorian calendar date. Details about this <I>DataType</I> are defined in <A href="#LinkTarget_5763" href="#">
Part 6</A>
. </P
><H2 
 ID="LinkTarget_11691"
><FONT size="+1"><B>8.12 Double </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that adheres to the <A href="#LinkTarget_5780" href="#">
IEEE 754-1985</A>
 double precision data type definition. </P
><H2 
 ID="LinkTarget_11698"
><FONT size="+1"><B>8.13 Duration </H2
><P 

><FONT size="+1"></B>This <I>Simple</I> <I>DataType</I> is a <I>Double</I> that defines an interval of time in milliseconds (fractions can be used to define sub-millisecond values). Negative values are generally invalid but may have special meanings where the <I>Duration</I> is used. </P
><H2 
 ID="LinkTarget_11700"
><FONT size="+1"><B>8.14 Enumeration </H2
><P 

><FONT size="+1"></B>This abstract <I>DataType</I> is the base <I>DataType</I> for all enumeration <I>DataTypes</I> like <I>NodeClass</I> defined in <A href="#LinkTarget_11889" href="#">
8.30</A>
. All <I>DataTypes</I> inheriting from this <I>DataType</I> have special handling for the encoding as defined in <A href="#LinkTarget_5763" href="#">
Part 6</A>
. All enumeration <I>DataTypes</I> shall inherit from this <I>DataType</I>. </P
><P 

>Some special rules apply when subtyping enumerations. Any enumeration <I>DataType</I> not directly inheriting from the <I>Enumeration</I> <I>DataType</I> can only restrict the enumeration values of its supertype. That is, it shall neither add enumeration values nor change the text associated to the enumeration value. As an example, the enumeration Days having {&lsquo;Mo&rsquo;, &lsquo;Tu&rsquo;, &lsquo;We&rsquo;, &lsquo;Th&rsquo;, &lsquo;Fr&rsquo;, &lsquo;Sa&rsquo;, &lsquo;Su&rsquo;} as values can be subtyped to the enumeration Workdays having {&lsquo;Mo&rsquo;, &lsquo;Tu&rsquo;, &lsquo;We&rsquo;, &lsquo;Th&rsquo;, &lsquo;Fr&rsquo;}. The other direction, subtyping Workdays to Days would not be allowed as Days has values not allowed by Workdays (&lsquo;Sa&rsquo; and &lsquo;Su&rsquo;). </P
><H2 
 ID="LinkTarget_11712"
><FONT size="+1"><B>8.15 Float </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that adheres to the <A href="#LinkTarget_5780" href="#">
IEEE 754-1985</A>
 single precision data type definition. </P
><H2 
 ID="LinkTarget_11719"
><FONT size="+1"><B>8.16 Guid </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that is a 128-bit Globally Unique Identifier. Details about this <I>DataType</I> are defined in <A href="#LinkTarget_5763" href="#">
Part 6</A>
. </P
><H2 
 ID="LinkTarget_11726"
><FONT size="+1"><B>8.17 SByte </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that is a signed integer between &minus;128 and 127 inclusive. </P
><H2 
 ID="LinkTarget_11728"
><FONT size="+1"><B>8.18 IdType </H2
><P 

><FONT size="+1"></B>This <I>DataType</I> is an enumeration that identifies the IdType of a <I>NodeId</I>. Its values are defined in <A href="#LinkTarget_11337" href="#">
Table 18</A>
. See <A href="#LinkTarget_11330" href="#">
8.2.3</A>
 for a description of the use of this <I>DataType</I> in <I>NodeIds</I>. </P
><H2 
 ID="LinkTarget_11739"
><FONT size="+1"><B>8.19 Image </H2
><P 

><FONT size="+1"></B>This abstract <I>DataType</I> defines a <I>ByteString</I> representing an image. </P
><H2 
 ID="LinkTarget_11741"
><FONT size="+1"><B>8.20 ImageBMP </H2
><P 

><FONT size="+1"></B>This <I>Simple</I> <I>DataType</I> defines a <I>ByteString</I> representing an image in BMP format. </P
><H2 
 ID="LinkTarget_11743"
><FONT size="+1"><B>8.21 ImageGIF </H2
><P 

><FONT size="+1"></B>This <I>Simple</I> <I>DataType</I> defines a <I>ByteString</I> representing an image in GIF format. </P
><H2 
 ID="LinkTarget_11746"
><FONT size="+1"><B>8.22 ImageJPG </H2
><P 

><FONT size="+1"></B>This <I>Simple</I> <I>DataType</I> defines a <I>ByteString</I> representing an image in JPG format. JPG is defined in <A href="#LinkTarget_5755" href="#">
Part 1: OPC UA Specification: Part 1 &ndash; Overview and Concepts  </A>
</P
><P 

><A>
http://www.opcfoundation.org/UA/Part1/ </A>
</P
><P 

><A>
Part 2: OPC UA Specification: Part 2 &ndash; Security Model </A>
</P
><P 

><A>
http://www.opcfoundation.org/UA/Part2/ </A>
</P
><P 

><A>
Part 4: OPC UA Specification: Part 4 &ndash; Services </A>
</P
><P 

><A>
http://www.opcfoundation.org/UA/Part4/ </A>
</P
><P 

><A>
Part 5: OPC UA Specification: Part 5 &ndash; Information Model </A>
</P
><P 

><A>
http://www.opcfoundation.org/UA/Part5/ </A>
</P
><P 

><A>
Part 6: OPC UA Specification: Part 6 &ndash; Mappings </A>
</P
><P 

><A>
http://www.opcfoundation.org/UA/Part6/ </A>
</P
><P 

><A>
Part 8: OPC UA Specification: Part 8 &ndash; Data Access </A>
</P
><P 

><A>
http://www.opcfoundation.org/UA/Part8/ </A>
</P
><P 

><A>
Part 9: OPC UA Specification: Part 9 &ndash; Alarms and conditions </A>
</P
><P 

><A>
http://www.opcfoundation.org/UA/Part9/ </A>
</P
><P 

><A>
Part 11: OPC UA Specification: Part 11 &ndash; Historical Access </A>
</P
><P 

><A>
http://www.opcfoundation.org/UA/Part11/ </A>
</P
><P 

><A>
ISO/IEC 10918-1</A>
. </P
><H2 
 ID="LinkTarget_11801"
><FONT size="+1"><B>8.23 ImagePNG </H2
><P 

><FONT size="+1"></B>This <I>Simple</I> <I>DataType</I> defines a <I>ByteString</I> representing an image in PNG format. PNG is defined in <A href="#LinkTarget_5776" href="#">
ISO/IEC 15948</A>
. </P
><H2 
 ID="LinkTarget_11808"
><FONT size="+1"><B>8.24 Integer </H2
><P 

><FONT size="+1"></B>This abstract <I>DataType</I> defines an integer whose length is defined by its subtypes. </P
><H2 
 ID="LinkTarget_11810"
><FONT size="+1"><B>8.25 Int16 </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that is a signed integer between &minus;32 768 and 32 767 inclusive. </P
><H2 
 ID="LinkTarget_11812"
><FONT size="+1"><B>8.26 Int32 </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that is a signed integer between &minus;2 147 483 648 and 2 147 483 647 inclusive. </P
><H2 
 ID="LinkTarget_11814"
><FONT size="+1"><B>8.27 Int64 </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that is a signed integer between &minus;9 223 372 036 854 775 808 and 9 223 372 036 854 775 807 inclusive. </P
><H2 
 ID="LinkTarget_11816"
><FONT size="+1"><B>8.28 TimeZoneDataType </H2
><P 

><FONT size="+1"></B>This <I>Structured</I> <I>DataType</I> defines the local time that may or may not take daylight saving time into account. Its elements are described in <A href="#LinkTarget_11824" href="#">
Table 24</A>
. </P
><P 

><B>Table 24 &ndash; TimeZoneDataType Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>TimeZoneDataType </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> offset </P
></TD
><TD  
 valign="top"
><P 

>Int16 </P
></TD
><TD  
 valign="top"
><P 

>The offset in minutes from UtcTime </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> daylightSavingInOffset </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>If TRUE, then daylight saving time (DST) is in effect and <I>offset</I> includes the DST correction. If FALSE then the <I>offset</I> does not include the DST correction and DST may or may not have been in effect. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_11859"
><FONT size="+1"><B>8.29 NamingRuleType </H2
><P 

><FONT size="+1"></B>This <I>DataType</I> is an enumeration that identifies the <I>NamingRule</I> (see <A href="#LinkTarget_10777" href="#">
6.4.4.2.1</A>
). Its values are defined in <A href="#LinkTarget_11870" href="#">
Table 25</A>
. </P
><P 

><B>Table 25 &ndash; NamingRuleType Values </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>MANDATORY_1 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OPTIONAL_2 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CONSTRAINT_3 </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_11889"
><FONT size="+1"><B>8.30 NodeClass </H2
><P 

><FONT size="+1"></B>This <I>DataType</I> is an enumeration that identifies a <I>NodeClass</I>. Its values are defined in <A href="#LinkTarget_11896" href="#">
Table 26</A>
. </P
><P 

><B>Table 26 &ndash; NodeClass Values </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>OBJECT_1 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>VARIABLE_2 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>METHOD_4 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OBJECT_TYPE_8 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>VARIABLE_TYPE_16 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>REFERENCE_TYPE_32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DATA_TYPE_64 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>VIEW_128 </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_11935"
><FONT size="+1"><B>8.31 Number </H2
><P 

><FONT size="+1"></B>This abstract <I>DataType</I> defines a number. Details are defined by its subtypes. </P
><H2 
 ID="LinkTarget_11937"
><FONT size="+1"><B>8.32 String </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a Unicode character string that should exclude control characters that are not whitespaces. </P
><H2 
 ID="LinkTarget_11939"
><FONT size="+1"><B>8.33 Structure </H2
><P 

><FONT size="+1"></B>This abstract <I>DataType</I> is the base <I>DataType</I> for all <I>Structured</I> <I>DataTypes</I> like <I>Argument</I> defined in <A href="#LinkTarget_11598" href="#">
8.6</A>
. All <I>DataTypes</I> inheriting from this <I>DataType</I> have special handling for the encoding as defined in <A href="#LinkTarget_5763" href="#">
Part 6</A>
.  </P
><H2 
 ID="LinkTarget_11950"
><FONT size="+1"><B>8.34 UInteger </H2
><P 

><FONT size="+1"></B>This abstract <I>DataType</I> defines an unsigned integer whose length is defined by its subtypes. </P
><H2 
 ID="LinkTarget_11952"
><FONT size="+1"><B>8.35 UInt16 </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that is an unsigned integer between 0 and 65 535 inclusive. </P
><H2 
 ID="LinkTarget_11954"
><FONT size="+1"><B>8.36 UInt32 </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that is an unsigned integer between 0 and 4 294 967 295 inclusive. </P
><H2 
 ID="LinkTarget_11957"
><FONT size="+1"><B>8.37 UInt64 </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> defines a value that is an unsigned integer between 0 and 18 446 744 073 709 551 615 inclusive. </P
><H2 
 ID="LinkTarget_11959"
><FONT size="+1"><B>8.38 UtcTime </H2
><P 

><FONT size="+1"></B>This <I>simple DataType</I> is a <I>DateTime</I> used to define Coordinated Universal Time (UTC) values. All time values conveyed between OPC UA <I>Servers</I> and <I>Clients</I> are UTC values. <I>Clients</I> shall provide any conversions between UTC and local time.  </P
><P 

>UTC has the concept of leap seconds. Leap seconds can lead to repeating seconds. Therefore applications are allowed to use TAI<FONT size="+1">1<FONT size="+1"> (International Atomic Time) instead of UTC in any place where UtcTime is used. Details on time synchronization are discussed in <A href="#LinkTarget_5763" href="#">
Part 6</A>
. </P
><DIV class="Note" 

><P 

><FONT size="+1">1 TAI = t<I>emps atomique international. </I></P
></DIV
><H2 
 ID="LinkTarget_11969"
><FONT size="+1"><B>8.39 XmlElement </H2
><P 

><FONT size="+1"></B>This <I>Built-in</I> <I>DataType</I> is used to define XML elements. <A href="#LinkTarget_5763" href="#">
Part 6</A>
 defines details about this <I>DataType</I>. </P
><P 

>XML data can always be modelled as a subtype of the <I>Structure</I> <I>DataType</I> with a single <I>DataTypeEncoding</I> that represents the XML complexType that defines the XML element (it is not necessary to have access to the XML Schema to define a <I>DataTypeEncoding</I>). For this reason a <I>Server</I> should never define <I>Variables</I> that use the <I>XmlElement</I> <I>DataType</I> unless the <I>Server</I> has no information about the XML elements that might be in the <I>Variable</I> <I>Value. </I></P
><H2 
 ID="LinkTarget_11977"
><FONT size="+1"><B>8.40 EnumValueType </H2
><P 

><FONT size="+1"></B>This <I>Structured</I> <I>DataType</I> is used to represent a human-readable representation of an Enumeration. Its elements are described in<A href="#LinkTarget_11984" href="#">
Table 27</A>
. When this type is used in an array representing human-readable representations of an enumeration, each Value shall be unique in that array. </P
><P 

><B>Table 27 &ndash; EnumValueType Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EnumValueType </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Value </P
></TD
><TD  
 valign="top"
><P 

>Int64 </P
></TD
><TD  
 valign="top"
><P 

>The Integer representation of an Enumeration. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> DisplayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>A human-readable representation of the Value of the Enumeration. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>A localized description of the enumeration value. This field can contain an empty string if no description is available. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

>Note that the <I>EnumValueType</I> has been defined with a Int64 Value to meet a variety of usages. When it is used to define the string representation of an Enumeration <I>DataType</I>, the value range is limited to Int32, because the Enumeration <I>DataType</I> is a subtype of Int32. Part 8 specifies other usages where the actual value might be between 8 and 64 Bit. </P
><H2 
 ID="LinkTarget_12028"
><FONT size="+1"><B>8.41 OptionSet </H2
><P 

><FONT size="+1"></B>This abstract <I>DataType</I> is the base <I>DataType</I> for all <I>DataTypes</I> representing a bit mask. All <I>OptionSet</I> <I>DataTypes</I> representing bit masks shall inherit from this <I>DataType</I>. Its elements are described in <A href="#LinkTarget_12036" href="#">
Table 28</A>
.  </P
><P 

><B>Table 28 &ndash; OptionSet Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>OptionSet </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> value </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>Array of bytes representing the bits in the option set. The length of the ByteString depends on the number of bits. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> validBits </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>Array of bytes with same size as value representing the valid bits in the value parameter. </P
><P 

>When the <I>Server</I> returns the value to the <I>Client</I>, the <I>validBits</I> provides information of which bits in the bit mask have a meaning. When the <I>Client</I> passes the value to the <I>Server</I>, the <I>validBits</I> defines which bits should be written. Only those bits defined in <I>validBits</I> are changed in the bit mask, all others stay the same. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>DataType</I> <I>Nodes</I> representing concrete subtypes of the <I>OptionSet</I> shall have an <I>OptionSetValues</I> <I>Property</I> defined in <A href="#LinkTarget_9286" href="#">
Table 11</A>
. </P
><H2 
 ID="LinkTarget_12079"
><FONT size="+1"><B>8.42 Union </H2
><P 

><FONT size="+1"></B>This abstract <I>DataType</I> is the base <I>DataType</I> for all union <I>DataTypes</I>. The <I>DataType</I> is a subtype of <I>Structure DataType</I>. All <I>DataTypes</I> inheriting from this <I>DataType</I> have special handling for the encoding as defined in Part 6. All union <I>DataTypes</I> shall inherit from this <I>DataType</I>. </P
><H2 
 ID="LinkTarget_12081"
><FONT size="+1"><B>8.43 DateString </H2
><P 

><FONT size="+1"></B>This <I>Simple DataType</I> defines a value which is a day in the Gregorian calendar in string. Lexical representation of the string shall conform to calendar date defined in ISO 8601-2000.  </P
><P 

><FONT size="+1">NOTE: According to ISO 8601-2000, &lsquo;calendar date representations are in the form [YYYY-MM-DD]. [YYYY] indicates a four-digit year, 0000 through 9999. [MM] indicates a two-digit month of the year, 01 through 12. [DD] indicates a two-digit day of that month, 01 through 31. For example, &quot;the 5th of April 1981&quot; may be represented as either &quot;1981-04-05&quot; in the extended format or &quot;19810405&quot; in the basic format.&rsquo; </P
><P 

>NOTE: ISO 8601-2000 also allows for calendar dates to be written with reduced precision. For example, one may write &quot;1981-04&quot; to mean &quot;1981 April&quot;, and one may simply write &quot;1981&quot; to refer to that year or &quot;19&quot; to refer to the century from 1900 to 1999 inclusive. </P
><P 

>NOTE: Although ISO 8601-2000 allows both the YYYY-MM-DD and YYYYMMDD formats for complete calendar date representations, if the day [DD] is omitted then only the YYYY-MM format is allowed. By disallowing dates of the form YYYYMM, ISO 8601-2000 avoids confusion with the truncated representation YYMMDD (still often used).<FONT size="+1"> </P
><H2 
 ID="LinkTarget_12086"
><FONT size="+1"><B>8.44 DecimalString </H2
><P 

><FONT size="+1"></B>This <I>Simple DataType</I> defines a value that represens a decimal number as a string. Lexical representation of the string shall conform to decimal type defined in W3C XML Schema Definition Language (XSD) 1.1 Part 2: DataTypes. </P
><P 

>The <I>DecimalString</I> is a numeric string with an optional sign and decimal point. </P
><H2 
 ID="LinkTarget_12089"
><FONT size="+1"><B>8.45 DurationString </H2
><P 

><FONT size="+1"></B>This <I>Simple DataType</I> defines a value that represents a duration of time as a string. It shall conform to duration as defined in ISO 8601-2000. </P
><P 

><FONT size="+1">NOTE: According to ISO 8601&mdash;2000 &lsquo;Durations are represented by the format P[n]Y[n]M[n]DT[n]H[n]M[n]S or P[n]W as shown to the right. In these representations, the [n] is replaced by the value for each of the date and time elements that follow the [n]. Leading zeros are not required, but the maximum number of digits for each element should be agreed to by the communicating parties. The capital letters <I>P</I>, <I>Y</I>, <I>M</I>, <I>W</I>, <I>D</I>, <I>T</I>, <I>H</I>, <I>M</I>, and <I>S</I> are designators for each of the date and time elements and are not replaced. </P
><DL 

><DD 

><FONT size="+1">&#61623; <FONT size="+1"><I>P</I> is the duration designator (historically called &quot;period&quot;) placed at the start of the duration representation.  </DD
><DD 

><FONT size="+1">&#61623; <FONT size="+1"><I>Y</I> is the year designator that follows the value for the number of years.  </DD
><DD 

><FONT size="+1">&#61623; <FONT size="+1"><I>M</I> is the month designator that follows the value for the number of months.  </DD
></DL
><DL 

><DD 

><FONT size="+1">&#61623; <FONT size="+1"><I>W</I> is the week designator that follows the value for the number of weeks.  </DD
><DD 

><FONT size="+1">&#61623; <FONT size="+1"><I>D</I> is the day designator that follows the value for the number of days.  </DD
><DD 

><FONT size="+1">&#61623; <FONT size="+1"><I>T</I> is the time designator that precedes the time components of the representation.  </DD
><DD 

><FONT size="+1">&#61623; <FONT size="+1"><I>H</I> is the hour designator that follows the value for the number of hours.  </DD
><DD 

><FONT size="+1">&#61623; <FONT size="+1"><I>M</I> is the minute designator that follows the value for the number of minutes.  </DD
><DD 

><FONT size="+1">&#61623; <FONT size="+1"><I>S</I> is the second designator that follows the value for the number of seconds.  </DD
></DL
><P 

>For example, &quot;P3Y6M4DT12H30M5S&quot; represents a duration of &quot;three years, six months, four days, twelve hours, thirty minutes, and five seconds&quot;. Date and time elements including their designator may be omitted if their value is zero, and lower order elements may also be omitted for reduced precision. For example, &quot;P23DT23H&quot; and &quot;P4Y&quot; are both acceptable duration representations.&rsquo; </P
><H2 
 ID="LinkTarget_12114"
><FONT size="+1"><B>8.46 NormalizedString </H2
><P 

><FONT size="+1"></B>This <I>Simple DataType</I> defines a string value that shall be normalized according to Unicode Annex 15, Version 7.0.0, Normalization Form C.  </P
><P 

><FONT size="+1">NOTE: Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters. Unicode defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character. The Win32 and the .NET Framework currently support normalization forms C, D, KC, and KD, as defined in Annex 15 of Unicode. <I>NormalizedString</I> uses Normalization Form C for all content, because this form avoids potential interoperability problems caused by the use of canonically equivalent, yet different, character sequences in document formats. </P
><H2 
 ID="LinkTarget_12117"
><FONT size="+1"><B>8.47 TimeString </H2
><P 

><FONT size="+1"></B>This <I>Simple</I> <I>DataType</I> defines a value that represents a time as a string. It shall conform to time of day as defined in ISO 8601-2000. </P
><P 

><FONT size="+1">NOTE: ISO 8601-2000 uses the 24-hour clock system. The <I>basic format</I> is [hh][mm][ss] and the <I>extended format</I> is [hh]:[mm]:[ss]. </P
><DL 

><DD 

><FONT size="+1">&#61623; <FONT size="+1">[hh] refers to a zero-padded hour between 00 and 24 (where 24 is only used to notate midnight at the end of a calendar day).  </DD
><DD 

><FONT size="+1">&#61623; <FONT size="+1">[mm] refers to a zero-padded minute between 00 and 59.  </DD
><DD 

><FONT size="+1">&#61623; <FONT size="+1">[ss] refers to a zero-padded second between 00 and 60 (where 60 is only used to notate an added leap second).  </DD
></DL
><P 

>So a time might appear as either &quot;134730&quot; in the <I>basic format</I> or &quot;13:47:30&quot; in the <I>extended format</I>. </P
><P 

>It is also acceptable to omit lower order time elements for reduced accuracy: [hh]:[mm], [hh][mm] and [hh] are all used. </P
><P 

>Midnight is a special case and can be referred to as both &quot;00:00&quot; and &quot;24:00&quot;. The notation &quot;00:00&quot; is used at the beginning of a calendar day and is the more frequently used. At the end of a day use &quot;24:00&quot;<FONT size="+1"> </P
><P 

> </P
><H1 
 ID="LinkTarget_12131"
><FONT size="+1"><B>9 Standard EventTypes </H1
><H2 
 ID="LinkTarget_12132"
>9.1 General </H2
><P 

><FONT size="+1"></B>The remainder of <A href="#LinkTarget_12131" href="#">
9</A>
 defines <I>EventTypes</I>. Their representation in the <I>AddressSpace</I> is specified in <A href="#LinkTarget_5761" href="#">
Part 5</A>
. Other parts of this series of standards may specify additional <I>EventTypes</I>. <A href="#LinkTarget_12152" href="#">
Figure 27</A>
 informally describes the hierarchy of these <I>EventTypes. </I></P
><P 

> <DIV class="Sect" 
 Alt=""
>AuditEventTypeAuditNodeManagement EventTypeAuditUpdate EventTypeAuditAddNodes EventTypeAuditSecurity EventTypeAuditSession EventTypeAuditChannel EventTypeAuditAddReferences EventTypeAuditDeleteNodes EventTypeAuditOpenSecure ChannelEventTypeAuditDelete ReferencesEventTypeAuditActivateSessionEventTypeAuditCreateSessionEventTypeBaseEventTypeSystemEventTypeSemanticChangeEventTypeBaseModelChange EventTypeGeneralModel ChangeEventTypeDeviceFailure EventTypeAuditUpdateMethod EventTypeAuditHistory UpdateEventTypeAuditWrite UpdateEventTypeAuditCancel EventTypeAuditCertificateDataMismatchEventTypeAuditCertificate InvalidEventTypeAuditCertificate ExpiredEventTypeAuditCertificate MismatchEventTypeAuditCertificate UntrustedEventTypeAuditCertificate RevokedEventTypeAuditCertificate EventTypeAuditUrlMismatchEventTypeSystemStatusChange EventTypeProgressEventType</DIV
></P
><P 

><B>Figure 27 &ndash; Standard EventType Hierarchy </P
><H2 
 ID="LinkTarget_12153"
><FONT size="+1">9.2 BaseEventType </H2
><P 

><FONT size="+1"></B>The <I>BaseEventType</I> defines all general characteristics of an <I>Event</I>. All other <I>EventTypes</I> derive from it. There is no other semantic associated with this type. </P
><H2 
 ID="LinkTarget_12155"
><FONT size="+1"><B>9.3 SystemEventType </H2
><P 

><FONT size="+1"></B><I>SystemEvents</I> are <I>Events</I> of <I>SystemEventType</I> that are generated as a result of some <I>Event</I> that occurs within the <I>Server</I> or by a system that the <I>Server</I> is representing. </P
><H2 
 ID="LinkTarget_12157"
><FONT size="+1"><B>9.4 ProgressEventType </H2
><P 

><FONT size="+1"></B><I>ProgressEvents</I> are <I>Events</I> of <I>ProgressEventType</I> that are generated to identify the progress of an operation. An operation can be a service call or something application specific like a program execution. </P
><H2 
 ID="LinkTarget_12159"
><FONT size="+1"><B>9.5 AuditEventType </H2
><P 

><FONT size="+1"></B><I>AuditEvents</I> are <I>Events</I> of <I>AuditEventType</I> that are generated as a result of an action taken on the <I>Server</I> by a <I>Client</I> of the <I>Server</I>. For example, in response to a <I>Client</I> issuing a write to a </P
><P 

><I>Variable</I>, the <I>Server</I> would generate an <I>AuditEvent</I> describing the <I>Variable</I> as the source and the user and <I>Client</I> session as the initiators of the <I>Event</I>. </P
><P 

><A href="#LinkTarget_12174" href="#">
Figure 28</A>
 illustrates the defined behaviour of an OPC UA <I>Server</I> in response to an auditable action request. If the action is accepted, then an action <I>AuditEvent</I> is generated and processed by the <I>Server</I>. If the action is not accepted due to security reasons, a security <I>AuditEvent</I> is generated and processed by the <I>Server</I>. The <I>Server</I> may involve the underlying device or system in the process but it is the <I>Server</I>&rsquo;s responsibility to provide the <I>Event</I> to any interested <I>Clients</I>. <I>Clients</I> are free to subscribe to <I>Events</I> from the <I>Server</I> and will receive the <I>AuditEvents</I> in response to normal Publish requests. </P
><P 

>All action requests include a human readable <I>AuditEntryId</I>. The <I>AuditEntryId</I> is included in the <I>AuditEvent</I> to allow human readers to correlate an <I>Event</I> with the initiating action. The <I>AuditEntryId </I>typically contains who initiated the action and from where it was initiated. </P
><P 

>The <I>Server</I> may elect to optionally persist the <I>AuditEvents</I> in addition to the mandatory <I>Event</I> <I>Subscription</I> delivery to <I>Clients</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>AcceptRequest?Action RequestGenerate Action AuditEventYesGenerate Security AuditEventNoEvent NotificationsReturn ResultReturn ErrorAcceptRequest?Publish RequestReturn Event NotificationsNoGenerate Security AuditEventYesReturn ResultReturn ErrorPerform Action</DIV
></P
><P 

><B>Figure 28 &ndash; Audit Behaviour of a Server </P
><P 

><A href="#LinkTarget_12186" href="#">
</B>Figure 29</A>
 illustrates the expected behaviour of an aggregating <I>Server</I> in response to an auditable action request. This use case involves the aggregating <I>Server</I> passing on the action to one of its aggregated <I>Servers</I>. The general behaviour described above is extended by this behaviour and not replaced. That is, the request could fail and generate a security <I>AuditEvent</I> within the aggregating <I>Server</I>. The normal process is to pass the action down to an aggregated <I>Server</I> for processing. The aggregated <I>Server</I> will, in turn, follow this behaviour or the general behaviour and generate the appropriate <I>AuditEvents</I>. The aggregating <I>Server</I> periodically issues publish requests to the aggregated <I>Servers</I>. These collected <I>Events</I> are merged with self-generated <I>Events</I> and made available to subscribing <I>Clients</I>. If the aggregating <I>Server</I> supports the optional persisting of <I>AuditEvent</I>, then<I> </I>the collected <I>Events</I> are persisted along with locally-generated <I>Events</I>. </P
><P 

>The aggregating <I>Server</I> may map the authenticated user account making the request to one of its own accounts when passing on the request to an aggregated <I>Server</I>. It shall, however, preserve the <I>AuditEntryId</I> by passing it on as received. The aggregating <I>Server</I> may also generate its own <I>AuditEvent</I> for the request prior to passing it on to the aggregated <I>Server</I>, in particular, if the aggregating <I>Server</I> needs to break a request into multiple requests that are each directed to separate aggregated <I>Servers</I> or if part of a request is denied due to security on the aggregating <I>Server</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>AcceptRequest?Action RequestYesGenerate Security AuditEventNoEvent NotificationsReturn ResultReturn ErrorAcceptRequest?Publish RequestReturn Event NotificationsNoGenerate Security AuditEventYesReturn SuccessReturn ErrorNoIssue Request to Aggregated ServerRequest Timeout?Return ErrorYesRequest PublishGet AuditEvent Notifications from Aggregated serversGenerate Action AuditEvent if required</DIV
></P
><P 

><B>Figure 29 &ndash; Audit Behaviour of an Aggregating Server </P
><H2 
 ID="LinkTarget_12187"
><FONT size="+1">9.6 AuditSecurityEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditEventType</I> and is used only for categorization of security-related <I>Events</I>. This type follows all behaviour of its parent type. </P
><H2 
 ID="LinkTarget_12189"
><FONT size="+1"><B>9.7 AuditChannelEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditSecurityEventType</I> and is used for categorization of security-related <I>Events</I> from the <I>SecureChannel</I> <I>Service Set</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12196"
><FONT size="+1"><B>9.8 AuditOpenSecureChannelEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditChannelEventType</I> and is used for <I>Events</I> generated from calling the OpenSecureChannel <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12203"
><FONT size="+1"><B>9.9 AuditSessionEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditSecurityEventType</I> and is used for categorization of security-related <I>Events</I> from the <I>Session Service Set </I>defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12210"
><FONT size="+1"><B>9.10 AuditCreateSessionEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditSessionEventType</I> and is used for <I>Events</I> generated from calling the CreateSession <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12217"
><FONT size="+1"><B>9.11 AuditUrlMismatchEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditCreateSessionEventType</I> and is used for <I>Events</I> generated from calling the CreateSession <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 if the EndpointUrl used in the service call does not match the <I>Server</I>&rsquo;s <I>HostNames </I>(see <A href="#LinkTarget_5759" href="#">
Part 4</A>
 for details). </P
><H2 
 ID="LinkTarget_12228"
><FONT size="+1"><B>9.12 AuditActivateSessionEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditSessionEventType</I> and is used for <I>Events</I> generated from calling the ActivateSession <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12236"
><FONT size="+1"><B>9.13 AuditCancelEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditSessionEventType</I> and is used for <I>Events</I> generated from calling the Cancel <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12243"
><FONT size="+1"><B>9.14 AuditCertificateEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditSecurityEventType</I> and is used only for categorization of Certificate related <I>Events</I>. This type follows all behaviours of its parent type. These <I>AuditEvents</I> will be generated for Certificate errors in addition to other <I>AuditEvents</I> related to service calls. </P
><H2 
 ID="LinkTarget_12245"
><FONT size="+1"><B>9.15 AuditCertificateDataMismatchEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditCertificateEventType</I> and is used only for categorization of Certificate related <I>Events</I>. This type follows all behaviours of its parent type. This <I>AuditEvent</I> is generated if the HostName in the URL used to connect to the <I>Server</I> is not the same as one of the HostNames specified in the Certificate or if the Application and Software Certificates contain an application or product URI that does not match the URI specified in the ApplicationDescription provided with the Certificate. For more details on Certificates see <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12253"
><FONT size="+1"><B>9.16 AuditCertificateExpiredEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditCertificateEventType</I> and is used only for categorization of Certificate related <I>Events</I>. This type follows all behaviours of its parent type. This <I>AuditEvent</I> is generated if the current time is outside the validity period&rsquo;s start date and end date. </P
><H2 
 ID="LinkTarget_12255"
><FONT size="+1"><B>9.17 AuditCertificateInvalidEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditCertificateEventType</I> and is used only for categorization of Certificate related <I>Events</I>. This type follows all behaviours of its parent type. This <I>AuditEvent</I> is generated if the certificate structure is invalid or if the Certificate has an invalid signature. </P
><H2 
 ID="LinkTarget_12257"
><FONT size="+1"><B>9.18 AuditCertificateUntrustedEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditCertificateEventType</I> and is used only for categorization of Certificate related <I>Events</I>. This type follows all behaviours of its parent type. This <I>AuditEvent</I> is generated if the Certificate is not trusted, that is, if the Issuer Certificate is unknown. </P
><H2 
 ID="LinkTarget_12259"
><FONT size="+1"><B>9.19 AuditCertificateRevokedEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditCertificateEventType</I> and is used only for categorization of Certificate related <I>Events</I>. This type follows all behaviours of its parent type. This <I>AuditEvent</I> is generated if a Certificate has been revoked or if the revocation list is not available (i.e. a network interruption prevents the Application from accessing the list). </P
><H2 
 ID="LinkTarget_12261"
><FONT size="+1"><B>9.20 AuditCertificateMismatchEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditCertificateEventType</I> and is used only for categorization of Certificate related <I>Events</I>. This type follows all behaviours of its parent type. This <I>AuditEvent</I> is generated if a Certificate set of uses does not match the requested use for the Certificate (i.e. Application, Software or Certificate Authority). </P
><H2 
 ID="LinkTarget_12263"
><FONT size="+1"><B>9.21 AuditNodeManagementEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditEventType</I> and is used for categorization of node management related <I>Events</I>. This type follows all behaviours of its parent type. </P
><H2 
 ID="LinkTarget_12265"
><FONT size="+1"><B>9.22 AuditAddNodesEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditNodeManagementEventType</I> and is used for <I>Events</I> generated from calling the AddNodes <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12272"
><FONT size="+1"><B>9.23 AuditDeleteNodesEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditNodeManagementEventType</I> and is used for <I>Events</I> generated from calling the DeleteNodes <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12280"
><FONT size="+1"><B>9.24 AuditAddReferencesEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditNodeManagementEventType</I> and is used for <I>Events</I> generated from calling the AddReferences <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12287"
><FONT size="+1"><B>9.25 AuditDeleteReferencesEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditNodeManagementEventType</I> and is used for <I>Events</I> generated from calling the DeleteReferences <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
. </P
><H2 
 ID="LinkTarget_12294"
><FONT size="+1"><B>9.26 AuditUpdateEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditEventType</I> and is used for categorization of update related <I>Events</I>. This type follows all behaviours of its parent type. </P
><H2 
 ID="LinkTarget_12296"
><FONT size="+1"><B>9.27 AuditWriteUpdateEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditUpdateEventType</I> and is used for categorization of write update related <I>Events</I>. This type follows all behaviours of its parent type. </P
><H2 
 ID="LinkTarget_12298"
><FONT size="+1"><B>9.28 AuditHistoryUpdateEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditUpdateEventType</I> and is used for categorization of history update related <I>Events</I>. This type follows all behaviours of its parent type. </P
><H2 
 ID="LinkTarget_12300"
><FONT size="+1"><B>9.29 AuditUpdateMethodEventType </H2
><P 

><FONT size="+1"></B>This is a subtype of <I>AuditEventType</I> and is used for categorization of <I>Method</I> related <I>Events</I>. This type follows all behaviours of its parent type. </P
><H2 
 ID="LinkTarget_12302"
><FONT size="+1"><B>9.30 DeviceFailureEventType </H2
><P 

><FONT size="+1"></B>A <I>DeviceFailureEvent</I> is an <I>Event</I> of <I>DeviceFailureEventType</I> that indicates a failure in a device of the underlying system. </P
><H2 
 ID="LinkTarget_12304"
><FONT size="+1"><B>9.31 SystemStatusChangeEventType </H2
><P 

><FONT size="+1"></B>A <I>SystemStatusChangeEvent</I> is an <I>Event</I> of <I>SystemStatusChangeEventType</I> that indicates a status change in a system. For example, if the status indicates an underlying system is not running, then a <I>Client</I> cannot expect any <I>Events</I> from the underlying system. A <I>Server</I> can identify its own status changes using this <I>EventType</I>.  </P
><H2 
 ID="LinkTarget_12306"
><FONT size="+1"><B>9.32 ModelChangeEvents </H2
><H3 
 ID="LinkTarget_12307"
><FONT size="+1">9.32.1 General </H3
><P 

></B><I>ModelChangeEvents</I> are generated to indicate a change of the <I>AddressSpace</I> structure. The change may consist of adding or deleting a <I>Node</I> or <I>Reference.</I> Although the relationship of a <I>Variable</I> or <I>VariableType</I> to its <I>DataType</I> is not modelled using <I>References</I>, changes to the <I>DataType Attribute</I> of a <I>Variable</I> or <I>VariableType</I> are also considered as model changes and therefore a <I>ModelChangeEvent</I> is generated if the <I>DataType Attribute</I> changes. </P
><H3 
 ID="LinkTarget_12309"
><B>9.32.2 NodeVersion Property </H3
><P 

></B>There is a correlation between <I>ModelChangeEvents</I> and the <I>NodeVersion</I> <I>Property </I>of <I>Nodes</I>. Every time a <I>ModelChangeEvent</I> is issued for a <I>Node</I>, its <I>NodeVersion</I> shall be changed, and every time the <I>NodeVersion</I> is changed, a <I>ModelChangeEvent</I> shall be generated. A <I>Server</I> shall support both the <I>ModelChangeEvent</I> and the <I>NodeVersion</I> <I>Property</I> or neither, but never only one of the two mechanisms. </P
><P 

>This relation also implies that only those <I>Nodes</I> of the <I>AddressSpace</I> having a <I>NodeVersion</I> shall trigger a <I>ModelChangeEvent</I>. Other <I>Nodes</I> shall not trigger a <I>ModelChangeEvent</I>. </P
><H3 
 ID="LinkTarget_12312"
><B>9.32.3 Views </H3
><P 

></B>A <I>ModelChangeEvent</I> is always generated in the context of a <I>View,</I> including the default <I>View</I> where the whole <I>AddressSpace</I> is considered. Therefore the only <I>Notifiers</I> which report the <I>ModelChangeEvents</I> are <I>View</I> <I>Nodes</I> and the <I>Server</I> <I>Object</I> representing the default <I>View</I>. Each action generating a <I>ModelChangeEvent</I> may lead to several <I>Events</I> since it may affect different <I>Views</I>. If, for example, a <I>Node</I> was deleted from the <I>AddressSpace</I>, and this <I>Node</I> was also contained in a View &ldquo;A&rdquo;, there would be one <I>Event</I> having the <I>AddressSpace</I> as context and another having the View &ldquo;A&rdquo; as context. If a <I>Node</I> would only be removed from <I>View</I> &ldquo;A&rdquo;, but still exists in the <I>AddressSpace</I>, it would generate only a <I>ModelChangeEvent</I> for <I>View</I> &ldquo;A&rdquo;. </P
><P 

>If a <I>Client</I> does not want to receive duplicates of changes then it shall use the filter mechanisms of the <I>Event</I> subscription to filter only for the default <I>View</I> and suppress the <I>ModelChangeEvents</I> having other <I>Views</I> as the context. </P
><P 

>When a <I>ModelChangeEvent</I> is issued on a <I>View</I> and the <I>View</I> supports the <I>ViewVersion</I> <I>Property</I>, then the <I>ViewVersion</I> shall be updated. </P
><H3 
 ID="LinkTarget_12317"
><B>9.32.4 Event Compression </H3
><P 

></B>An implementation is not required to issue an <I>Event</I> for every update as it occurs. An OPC UA <I>Server</I> may be capable of grouping a series of transactions or simple updates into a larger unit. This series may constitute a logical grouping or a temporal grouping of changes. A single <I>ModelChangeEvent</I> may be issued after the last change of the series, to cover all of the changes. This is referred to as <I>Event</I> <I>compression</I>. A change in the <I>NodeVersion</I> and the <I>ViewVersion </I>may thus reflect a group of changes and not a single change. </P
><H3 
 ID="LinkTarget_12319"
><B>9.32.5 BaseModelChangeEventType </H3
><P 

></B><I>BaseModelChangeEvents</I> are <I>Events</I> of the <I>BaseModelChangeEventType</I>. The <I>BaseModelChangeEventType</I> is the base type for <I>ModelChangeEvents</I> and does not contain information about the changes but only indicates that changes occurred. Therefore the <I>Client</I> shall assume that any or all of the <I>Nodes</I> may have changed. </P
><H3 
 ID="LinkTarget_12321"
><B>9.32.6 GeneralModelChangeEventType </H3
><P 

></B><I>GeneralModelChangeEvents</I> are <I>Events</I> of the <I>GeneralModelChangeEventType</I>. The <I>GeneralModelChangeEventType</I> is a subtype of the <I>BaseModelChangeEventType</I>. It contains information about the <I>Node</I> that was changed and the action that occurred to cause the <I>ModelChangeEvent</I> (e.g. add a <I>Node</I>, delete a <I>Node</I>, etc.). If the affected <I>Node</I> is a <I>Variable</I> or <I>Object</I>, then the <I>TypeDefinitionNode</I> is also present. </P
><P 

>To allow <I>Event</I> compression, a <I>GeneralModelChangeEvent</I> contains an array of changes. </P
><H3 
 ID="LinkTarget_12324"
><B>9.32.7 Guidelines for ModelChangeEvents </H3
><P 

></B>Two types of <I>ModelChangeEvents</I> are defined: the <I>BaseModelChangeEvent</I> that does not contain any information about the changes and the <I>GeneralModelChangeEvent</I> that identifies the changed <I>Nodes</I> via an array. The precision used depends on both the capability of the OPC UA <I>Server</I> and the nature of the update. An OPC UA <I>Server</I> may use either <I>ModelChangeEvent</I> type depending on circumstances. It may also define subtypes of these <I>EventTypes</I> adding additional information. </P
><P 

>To ensure interoperability, the following guidelines for <I>Events</I> should be observed. </P
><DL 

><DD 

>&#61623; If the array of the<I> GeneralModelChangeEvent</I> is present, then it should identify every <I>Node</I> that has changed since the preceding <I>ModelChangeEvent</I>. </DD
><DD 

>&#61623; The OPC UA <I>Server</I> should emit exactly one <I>ModelChangeEvent</I> for an update or series of updates. It should not issue multiple types of <I>ModelChangeEvent</I> for the same update. </DD
><DD 

>&#61623; Any <I>Client</I> that responds to <I>ModelChangeEvents</I> should respond to any <I>Event</I> of the <I>BaseModelChangeEventType </I>including its subtypes like the <I>GeneralModelChangeEventType</I>. </DD
></DL
><P 

>If a <I>Client</I> is not capable of interpreting additional information of the subtypes of the <I>BaseModelChangeEventType</I>, it should treat <I>Events</I> of these types the same way as <I>Events</I> of the <I>BaseModelChangeEventType</I>. </P
><H2 
 ID="LinkTarget_12336"
><FONT size="+1"><B>9.33 SemanticChangeEventType </H2
><H3 
 ID="LinkTarget_12337"
><FONT size="+1">9.33.1 General </H3
><P 

></B><I>SemanticChangeEvents</I> are <I>Events</I> of <I>SemanticChangeEventType</I> that are generated to indicate a change of the <I>AddressSpace</I> semantics. The change consists of a change to the <I>Value</I> <I>Attribute</I> of a <I>Property</I>. </P
><P 

>The <I>SemanticChangeEvent</I> contains information about the <I>Node</I> owning the <I>Property</I> that was changed. If this is a <I>Variable</I> or <I>Object</I>, the <I>TypeDefinitionNode</I> is also present. </P
><P 

>The SemanticChange bit of the <I>AccessLevel</I> <I>Attribute</I> of a <I>Property</I> indicates whether changes of the <I>Property</I> value are considered for <I>SemanticChangeEvents </I>(see <A href="#LinkTarget_7915" href="#">
5.6.2</A>
). </P
><H3 
 ID="LinkTarget_12346"
><B>9.33.2 ViewVersion and NodeVersion Properties </H3
><P 

></B>The <I>ViewVersion</I> and <I>NodeVersion</I> <I>Properties</I> do not change due to the publication of a <I>SemanticChangeEvent</I>. </P
><P 

>There is no standard way to identify which <I>Nodes</I> trigger a <I>SemanticChange</I> <I>Event</I> and which <I>Nodes</I> do not.  </P
><H3 
 ID="LinkTarget_12349"
><B>9.33.3 Views </H3
><P 

></B><I>SemanticChangeEvents</I> are handled in the context of a <I>View</I> the same way as <I>ModelChangeEvents</I>. This is defined in <A href="#LinkTarget_12312" href="#">
9.32.3</A>
. </P
><H3 
 ID="LinkTarget_12356"
><B>9.33.4 Event Compression </H3
><P 

></B><I>SemanticChangeEvents</I> can be compressed the same way as <I>ModelChangeEvents</I>. This is defined in <A href="#LinkTarget_12317" href="#">
9.32.4</A>
. </P
><P 

> </P
><H1 
 ID="LinkTarget_12364"
><FONT size="+1"><B>Annex A </B>(informative)<B>  How to use the Address Space Model  </H1
><H2 
 ID="LinkTarget_12366"
><FONT size="+1">A.1 Overview </H2
><P 

><FONT size="+1"></B>Annex A points out some general considerations on how the Address Space Model can be used. Annex A is for information only, that is, each <I>Server</I> vendor can model its data in the appropriate way that fits its needs. However, it gives some hints the <I>Server</I> vendor may consider. </P
><P 

>Typically OPC UA <I>Servers</I> will offer data provided by an underlying system like a device, a configuration database, an OPC COM <I>Server</I>, etc. Therefore the modelling of the data depends on the model of the underlying system as well as the requirements of the <I>Clients</I> accessing the OPC UA <I>Server</I>. It is also expected that companion specifications will be developed on top of OPC UA with additional rules on how to model the data. However, the remainder of Annex Aill give some general considerations about the different concepts of OPC UA to model data and when they should be used, and when not. </P
><P 

><A href="#LinkTarget_5761" href="#">
Part 5</A>
:&ndash;, Annex A, provides an overview of the design decisions made when modelling the information about the <I>Server</I> defined in <A href="#LinkTarget_5761" href="#">
Part 5</A>
. </P
><H2 
 ID="LinkTarget_12378"
><FONT size="+1"><B>A.2 Type definitions </H2
><P 

><FONT size="+1"></B>Type definitions should be used whenever it is expected that the type information may be used more than once in the same system or for interoperability between different systems supporting the same type definitions. </P
><H2 
 ID="LinkTarget_12380"
><FONT size="+1"><B>A.3 ObjectTypes </H2
><P 

><FONT size="+1"></B>Subclause <A href="#LinkTarget_7312" href="#">
5.5.1</A>
 states: &ldquo;<I>Objects</I> are used to represent systems, system components, real-world objects, and software objects.&rdquo; Therefore <I>ObjectTypes</I> should be used if a type definition of those <I> ObjectTypes</I> is useful (see <A href="#LinkTarget_12378" href="#">
A.2</A>
). </P
><P 

>From a more abstract point of view <I>Objects</I> are used to group <I>Variables</I> and other <I>Objects</I> in the <I>AddressSpace</I>. Therefore <I>ObjectTypes</I> should be used when some common structures/groups of <I>Objects</I> and/or <I>Variables</I> should be described. <I>Clients</I> can use this knowledge to program against the <I>ObjectType</I> structure and use the TranslateBrowsePathsToNodeIds <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 on the instances. </P
><P 

>Simple objects only having one value (e.g. a simple heat sensor) can also be modelled as <I>VariableTypes</I>. However, extensibility mechanisms should be considered (e.g. a complex heat sensor subtype could have several values) and whether that object should be exposed as an object in the <I>Client</I>'s GUI or just as a value. Whenever a modeller is in doubt as to which solution to use the <I>ObjectType</I> having one <I>Variable</I> should be preferred. </P
><H2 
 ID="LinkTarget_12398"
><FONT size="+1"><B>A.4 VariableTypes </H2
><H3 
 ID="LinkTarget_12399"
>A.4.1 General </H3
><P 

><FONT size="+1"></B><I>VariableTypes</I> are only used for <I>DataVariables</I><FONT size="+1">2<FONT size="+1"> and should be used when there are several <I>Variables</I> having the same semantic (e.g. set point). It is not necessary to define a <I>VariableType</I> that only reflects the <I>DataType</I> of a <I>Variable</I>, e.g. an &ldquo;Int32VariableType&rdquo;. </P
><DIV class="Note" 

><P 

><FONT size="+1">2  <I>VariableTypes</I> other than the <I>PropertyType</I> which is used for all <I>Properties</I><I>.</I> </P
></DIV
><H3 
 ID="LinkTarget_12403"
><FONT size="+1"><B>A.4.2 Properties or DataVariables </H3
><P 

><FONT size="+1"></B>Besides the semantic differences of <I>Properties</I> and <I>DataVariables</I> described in Clause <A href="#LinkTarget_6059" href="#">
4</A>
 there are also syntactical differences. A <I>Property</I> is identified by its <I>BrowseName</I>, that is, if <I>Properties</I> </P
><P 

>having the same semantic are used several times, they should always have the same <I>BrowseName</I>. The same semantic of <I>DataVariables</I> is captured in the <I>VariableType</I>. </P
><P 

>If it is not clear which concept to use based on the semantic described in Clause <A href="#LinkTarget_6059" href="#">
4</A>
, then the different syntax can help. The following points identify when it shall be a <I>DataVariable</I>. </P
><DL 

><DD 

>&#61623; If it is a complex <I>Variable</I> or it should contain additional information in the form of <I>Properties</I>. </DD
><DD 

>&#61623; If the type definition may be refined (subtyping). </DD
><DD 

>&#61623; If the type definition should be made available so the <I>Client</I> can use the AddNodes <I>Service</I> defined in <A href="#LinkTarget_5759" href="#">
Part 4</A>
 to create new instances of the type definition. </DD
><DD 

>&#61623; If it is a component of a complex <I>Variable</I> exposing a part of the value of the complex <I>Variable</I>. </DD
></DL
><H3 
 ID="LinkTarget_12434"
><FONT size="+1"><B>A.4.3 Many Variables and / or structured DataTypes </H3
><P 

><FONT size="+1"></B>When structured data structures should be made available to the <I>Client</I> there are basically three different approaches: </P
><DL 

><DD 

>a) Create several simple <I>Variables</I> using simple <I>DataTypes</I> always reflecting parts of the simple structure. <I>Objects</I> are used to group the <I>Variables</I> according to the structure of the data. </DD
><DD 

>b) Create a structured <I>DataType</I> and a simple <I>Variable</I> using this <I>DataType</I>. </DD
><DD 

>c) Create a structured <I>DataType</I> and a complex <I>Variable</I> using this <I>DataType</I> and also exposing the structured data structure as <I>Variables</I> of the complex <I>Variable</I> using simple <I>DataTypes</I>. </DD
></DL
><P 

>The advantages of the first approach are that the complex structure of the data is visible in the <I>AddressSpace</I>. A generic <I>Client</I> can easily access the data without knowledge of user-defined <I>DataTypes</I> and the <I>Client</I> can access individual parts of the structured data. The disadvantages of the first approach are that accessing the individual data does not provide any transactional context and for a specific <I>Client</I> the <I>Server</I> first has to convert the data and the <I>Client</I> has to convert the data, again, to get the data structure the underlying system provides. </P
><P 

>The advantages of the second approach are, that the data is accessed in a transactional context and the structured <I>DataType</I> can be constructed in a way that the <I>Server</I> does not have to convert the data and can pass directly to the specific <I>Client</I> that can directly use them. The disadvantages are that the generic <I>Client</I> might not be able to access and interpret the data or has at least the burden to read the <I>DataTypeDescription</I> to interpret the data. The structure of the data is not visible in the <I>AddressSpace</I>; additional <I>Properties</I> describing the data structure cannot be added to the adequate places since they do not exist in the <I>AddressSpace</I>. Individual parts of the data cannot be read without accessing the whole data structure. </P
><P 

>The third approach combines the other two approaches. Therefore a specific <I>Client</I> can access data in its native format in a transactional context, whereas a generic <I>Client</I> can access simple <I>DataTypes</I> of the components of the complex <I>Variable</I>. The disadvantage is that the <I>Server</I> must be able to provide the native format and also interpret it to be able to provide the information in simple <I>DataTypes</I>. </P
><P 

>It is recommended to use the first approach. When a transactional context is needed or the <I>Client</I> should be able to get a large amount of data instead of subscribing to several individual values, then the third approach is suitable. However, the <I>Server</I> might not always have the knowledge to interpret the structured data of the underlying system and therefore has to use the second approach just passing the data to the specific <I>Client</I> who is able to interpret the data. </P
><H2 
 ID="LinkTarget_12447"
><FONT size="+1"><B>A.5 Views </H2
><P 

><FONT size="+1"></B><I>Server</I>-defined <I>Views</I> can be used to present an excerpt of the <I>AddressSpace</I> suitable for a special class of <I>Clients</I>, for example maintenance <I>Clients</I>, engineering <I>Clients</I>, etc. The <I>View</I> only provides the information needed for the purpose of the <I>Client</I> and hides unnecessary information. </P
><H2 
 ID="LinkTarget_12449"
><FONT size="+1"><B>A.6 Methods </H2
><P 

><FONT size="+1"></B><I>Methods</I> should be used whenever some input is expected and the <I>Server</I> delivers a result. One should avoid using <I>Variables</I> to write the input values and other <I>Variables</I> to get the output results as it was necessary to do in OPC COM since there was no concept of a <I>Method</I> available. However, a simple OPC COM wrapper might not be able to do this. </P
><P 

><I>Methods</I> can also be used to trigger some execution in the <I>Server</I> that does not require input and / or output parameters. </P
><P 

>Global <I>Methods</I>, that is, <I>Methods</I> that cannot directly be assigned to a special <I>Object</I>, should be assigned to the <I>Server</I> <I>Object</I> defined in <A href="#LinkTarget_5761" href="#">
Part 5</A>
. </P
><H2 
 ID="LinkTarget_12459"
><FONT size="+1"><B>A.7 Defining ReferenceTypes </H2
><P 

><FONT size="+1"></B>Defining new <I>ReferenceTypes</I> should only be done if the predefined <I>ReferenceTypes</I> are not suitable. Whenever a new <I>ReferenceType</I> is defined, the most appropriate <I>ReferenceType</I> should be used as its supertype. </P
><P 

>It is expected that <I>Servers</I> will have new defined hierarchical <I>ReferenceTypes</I> to expose different hierarchies, and new non-hierarchical <I>References</I> to expose relationships between <I>Nodes</I> in the <I>AddressSpace</I>. </P
><H2 
 ID="LinkTarget_12462"
><FONT size="+1"><B>A.8 Defining ModellingRules </H2
><P 

><FONT size="+1"></B>New <I>ModellingRules</I> have to be defined if the predefined <I>ModellingRules</I> are not appropriate for the model exposed by the <I>Server</I>. </P
><P 

>Depending on the model used by the underlying system the <I>Server</I> may need to define new <I>ModellingRules</I>, since the OPC UA <I>Server</I> may only pass the data to the underlying system and this system may use its own internal rules for instantiation, subtyping, etc. </P
><P 

>Beside this, the predefined <I>ModellingRules</I> might not be sufficient to specify the required behaviour for instantiation and subtyping. </P
><H1 
 ID="LinkTarget_12466"
><FONT size="+1"><B>Annex B </B>(informative)<B>  OPC UA Meta Model in UML  </H1
><H2 
 ID="LinkTarget_12468"
><FONT size="+1">B.1 Background </H2
><P 

><FONT size="+1"></B>The OPC UA Meta Model (the OPC UA Address Space Model) is represented by UML classes and UML objects marked with the stereotype &lt;&lt;TypeExtension&gt;&gt;. Those stereotyped UML objects represent <I>DataTypes</I> or <I>ReferenceTypes</I>. The domain model can contain user-defined <I>ReferenceTypes </I>and<I> DataTypes</I>, also marked as &lt;&lt;TypeExtension&gt;&gt;. In addition, the domain model contains <I>ObjectTypes</I>, <I>VariableTypes </I>etc. represented as UML objects (see <A href="#LinkTarget_12483" href="#">
Figure B.1</A>
). </P
><P 

>The OPC Foundation specifies not only the OPC UA Meta Model, but also defines some <I>Nodes</I> to organise the <I>AddressSpace</I> and to provide information about the <I>Server</I> as specified in <A href="#LinkTarget_5761" href="#">
Part 5</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Objects &lt;&lt;TypeExtension&gt;&gt; Objects Classes UML Representation OPC UA Meta Model Domain Model  (incl. user-defined  Data and Reference  Types) 0..N </DIV
></P
><P 

><B>Figure B.1 &ndash; Background of OPC UA Meta Model </P
><H2 
 ID="LinkTarget_12486"
><FONT size="+1">B.2 Notation </H2
><P 

><FONT size="+1"></B>An example of a UML class representing the OPC UA concept <I>Base</I> is given in the UML class diagram in <A href="#LinkTarget_12500" href="#">
Figure B.2</A>
. OPC Attributes inherit from the abstract class Attribute and have a value identifying their data type. They are composed of a <I>Node</I> which is either optional (0..1) or required (1), such as <I>BrowseName</I> to <I>Base</I> in <A href="#LinkTarget_12500" href="#">
Figure B.2</A>
. </P
><P 

> </P
><IMG width="480" height="119"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_0.jpg" ><P 

><B>Figure B.2 &ndash; Notation (I) </P
><P 

></B>UML object diagrams are used to display &lt;&lt;TypeExtension&gt;&gt; objects (e.g. <I>HasComponent</I> in <A href="#LinkTarget_12509" href="#">
Figure B.3</A>
). In object diagrams, OPC <I>Attributes</I> are represented as UML attributes without data types and marked with the stereotype &lt;&lt;Attribute&gt;&gt;, like <I>InverseName </I>in the UML object <I>HasComponent</I>. They have values, like <I>InverseName</I> <I>=ComponentOf</I> for <I>HasComponent</I>. To keep the object diagrams simple, not all <I>Attributes</I> are shown (e.g. the <I>NodeId</I> of <I>HasComponent</I>). </P
><P 

> </P
><IMG width="376" height="417"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_1.jpg" ><P 

><B>Figure B.3 &ndash; Notation (II) </P
><P 

></B>OPC <I>References</I> are represented as UML associations marked with the stereotype &lt;&lt;Reference&gt;&gt;. If a particular <I>ReferenceType</I> is used, its name is used as the role name, identifying the direction of the <I>Reference</I> (e.g. <I>Aggregates</I> has the subtype <I>HasComponent</I>). For simplicity, the inverse role name is not shown (in the example <I>SubtypeOf</I>). When no role name is provided, it means that any <I>ReferenceType</I> can be used (only valid for class diagrams). </P
><P 

>There are some special <I>Attributes</I> in OPC UA containing a <I>NodeId</I> and thereby referencing another <I>Node</I>. Those <I>Attributes</I> are represented as associations marked with the stereotype &lt;&lt;Attribute&gt;&gt;. The name of the <I>Attribute</I> is displayed as the role name of the <I>TargetNode</I>. </P
><P 

>The value of the OPC <I>Attribute</I> <I>BrowseName</I> is represented by the UML object name, for example the <I>BrowseName</I> of the UML object <I>HasComponent</I> in <A href="#LinkTarget_12509" href="#">
Figure B.3</A>
 is &ldquo;HasComponent&rdquo;. </P
><P 

>To highlight the classes explained in a class diagram, they are marked in grey (e.g. <I>Base</I> in <A href="#LinkTarget_12500" href="#">
Figure B.2</A>
). Only those classes have all of their relationships to other classes and attributes shown in the diagram. For the other classes, we provide only those attributes and relationships needed to understand the main classes of the diagram. </P
><H2 
 ID="LinkTarget_12524"
><FONT size="+1"><B>B.3 Meta Model </H2
><P 

><FONT size="+1"></B>NOTE: Other parts of this series of standards can extend the OPC UA Meta Model by adding <I>Attributes</I> and defining new <I>ReferenceTypes</I>. </P
><H3 
 ID="LinkTarget_12526"
><FONT size="+1"><B>B.3.1 Base </H3
><P 

><FONT size="+1"></B>Base is shown in <A href="#LinkTarget_12536" href="#">
Figure B.4</A>
. </P
><P 

> </P
><IMG width="616" height="439"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_2.jpg" ><P 

><B>Figure B.4 &ndash; Base </P
><H3 
 ID="LinkTarget_12537"
><FONT size="+1">B.3.2 ReferenceType </H3
><P 

><FONT size="+1"></B><I>ReferenceType</I> is shown in <A href="#LinkTarget_12550" href="#">
Figure B.5</A>
 and predefined <I>ReferenceTypes</I> in <A href="#LinkTarget_12557" href="#">
Figure B.6</A>
. </P
><P 

> </P
><IMG width="571" height="396"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_3.jpg" ><P 

><B>Figure B.5 &ndash; Reference and ReferenceType </P
><P 

></B>If <I>Symmetric</I> is &ldquo;false&rdquo; and <I>IsAbstract</I> is &ldquo;false&rdquo; an <I>InverseName</I> shall be provided. </P
><H3 
 ID="LinkTarget_12552"
><FONT size="+1"><B>B.3.3 Predefined ReferenceTypes </H3
><P 

><FONT size="+1"></B> </P
><IMG width="612" height="729"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_4.jpg" ><P 

><B>Figure B.6 &ndash; Predefined ReferenceTypes </P
><H3 
 ID="LinkTarget_12558"
><FONT size="+1">B.3.4 Attributes </H3
><P 

><FONT size="+1"></B>Attributes are shown in <A href="#LinkTarget_12568" href="#">
Figure B.7</A>
. </P
><P 

> </P
><IMG width="627" height="620"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_5.jpg" ><P 

><B>Figure B.7 &ndash; Attributes </P
><P 

></B>There may be more <I>Attributes</I> defined in other parts of this series of standards. </P
><P 

><I>Attributes</I> used for references, which have a <I>NodeId</I> as <I>DataType</I>, are not shown in this diagram but are shown as stereotyped associations in the other diagrams. </P
><H3 
 ID="LinkTarget_12571"
><FONT size="+1"><B>B.3.5 Object and ObjectType </H3
><P 

><FONT size="+1"></B><I>Objects</I> and <I>ObjectTypes</I> are shown in <A href="#LinkTarget_12581" href="#">
Figure B.8</A>
. </P
><P 

> </P
><IMG width="600" height="495"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_6.jpg" ><P 

><B>Figure B.8 &ndash; Object and ObjectType </P
><H3 
 ID="LinkTarget_12582"
><FONT size="+1">B.3.6 EventNotifier </H3
><P 

><FONT size="+1"></B><I>EventNotifier</I> are shown in <A href="#LinkTarget_12591" href="#">
Figure B.9</A>
. </P
><P 

> </P
><IMG width="492" height="348"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_7.jpg" ><P 

><B>Figure B.9 &ndash; EventNotifier </P
><H3 
 ID="LinkTarget_12592"
><FONT size="+1">B.3.7 Variable and VariableType </H3
><P 

><FONT size="+1"></B>Variable and VariableType are shown in <A href="#LinkTarget_12602" href="#">
Figure B.10</A>
. </P
><P 

> </P
><IMG width="616" height="447"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_8.jpg" ><P 

><B>Figure B.10 &ndash; Variable and VariableType </P
><P 

></B>The <I>DataType</I> of a <I>Variable</I> shall be the same as or a subtype of the <I>DataType</I> of its <I>VariableType</I> (referred with <I>HasTypeDefinition</I>). </P
><P 

>If a <I>HasProperty</I> points to a <I>Variable</I> from a <I>Base</I> &ldquo;A&rdquo; then the following constraints apply: </P
><DL 

><DD 

>&#61623; The Variable shall not be the SourceNode of a HasProperty or any other HierarchicalReferences Reference. </DD
><DD 

>&#61623; All <I>Variables</I> having &ldquo;A&rdquo; as the <I>SourceNode</I> of a <I>HasProperty</I> <I>Reference</I> shall have a unique <I>BrowseName</I> in the context of &ldquo;A&rdquo;. </DD
></DL
><H3 
 ID="LinkTarget_12610"
><FONT size="+1"><B>B.3.8 Method </H3
><P 

><FONT size="+1"></B>Method is shown in <A href="#LinkTarget_12620" href="#">
Figure B.11</A>
 </P
><P 

> </P
><IMG width="592" height="407"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_9.jpg" ><P 

><B>Figure B.11 &ndash; Method </P
><H3 
 ID="LinkTarget_12621"
><FONT size="+1">B.3.9 DataType </H3
><P 

><FONT size="+1"></B>DataType is shown in <A href="#LinkTarget_12631" href="#">
Figure B.12</A>
. </P
><P 

> </P
><IMG width="608" height="439"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_10.jpg" ><P 

><B>Figure B.12 &ndash; DataType </P
><H3 
 ID="LinkTarget_12632"
><FONT size="+1">B.3.10 View </H3
><P 

><FONT size="+1"></B>View is shown in <A href="#LinkTarget_12641" href="#">
Figure B.13</A>
. </P
><P 

> </P
><IMG width="560" height="380"
 src="images/OPC UA Part 3 - Address Space Model 1.03 Specification_img_11.jpg" ><P 

><B>Figure B.13 &ndash; View </P
><H1 
 ID="LinkTarget_12642"
><FONT size="+1">Annex C </B>(normative)<B>  OPC Binary Type Description System  </H1
><H2 
 ID="LinkTarget_12644"
><FONT size="+1">C.1 Concepts </H2
><P 

><FONT size="+1"></B>The OPC Binary XML Schema defines the format of OPC Binary <I>TypeDictionaries</I>. Each OPC Binary <I>TypeDictionary</I> is an XML document that contains one or more <I>TypeDescriptions</I> that describe the format of a binary-encoded value. Applications that have no advanced knowledge of a particular binary encoding can use the OPC Binary <I>TypeDescription</I> to interpret or construct a value. </P
><P 

>The OPC Binary Type Description System does not define a standard mechanism to <I>encode</I> data in binary. It only provides a standard way to describe an existing binary encoding. Many binary encodings will have a mechanism to describe types that could be encoded; however, these descriptions are useful only to applications that have knowledge of the type description system used with each binary encoding. The OPC Binary Type Description System is a generic syntax that can be used by any application to interpret any binary encoding. </P
><P 

>The OPC Binary Type Description System was originally defined in the OPC Complex Data Specification. The OPC Binary Type Description System described in Annex C is quite different and is correctly described as the OPC Binary Type Description System Version 2.0. </P
><P 

>Each <I>TypeDescription </I>is identified by a <I>TypeName </I>which shall be unique within the <I>TypeDictionary</I> that defines it. Each <I>TypeDictionary</I> also has a <I>TargetNamespace</I> which should be unique among all OPC Binary <I>TypeDictionaries</I>. This means that the <I>TypeName</I> qualified with the <I>TargetNamespace</I> for the dictionary<I> </I>should be a globally-unique identifier for a<I> TypeDescription.</I> </P
><P 

><A href="#LinkTarget_12658" href="#">
Figure C.1</A>
 below illustrates the structure of an OPC Binary <I>TypeDictionary</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>TypeDictionaryTypeDictionaryImportsStructuredTypeOpaqueTypeEnumeratedTypeContainsTypeDescriptionFieldTypeReferencesIs Subtype OfContainsIs Subtype Of</DIV
></P
><P 

><B>Figure C.1 &ndash; OPC Binary Dictionary Structure </P
><P 

></B>Each binary encoding is built from a set of opaque building blocks that are either primitive types with a fixed length or variable-length types with a structure that is too complex to describe properly in an XML document. These building blocks are described with an <I>OpaqueType</I>. An instance of one of these building blocks is a binary-encoded value. </P
><P 

>The OPC Binary Type Description System defines a set of standard <I>OpaqueTypes </I>that all OPC Binary <I>TypeDictionaries</I> should use to build their <I>TypeDescriptions</I>. These standard type descriptions are described in Clause <A href="#LinkTarget_13178" href="#">
C.3</A>
. </P
><P 

>In some cases, the binary encoding described by an <I>OpaqueType</I> may have a fixed size which would allow an application to skip an encoded value that it does not understand. If that is the case, then the <I>LengthInBits</I> attribute should be specified for the <I>OpaqueType.</I> If authors of <I>TypeDictionaries </I>need to define new <I>OpaqueTypes</I> that do not have a fixed size then they should use the documentation elements to describe how to encode binary values for the type. This description should provide enough detail to allow a human to write a program that can interpret instances of the type. </P
><P 

>A <I>StructuredType</I> breaks a complex value into a sequence of values that are described by a <I>FieldType</I>. Each <I>FieldType</I> has a name, type and a number of qualifiers that specify when the field is used and how many instances of the type exist. A <I>FieldType</I> is described completely in <A href="#LinkTarget_12930" href="#">
C.2.6</A>
. </P
><P 

>An <I>EnumeratedType</I> describes a numeric value that has a limited set of possible values, each of which has a descriptive name. <I>EnumeratedTypes</I> provide a convenient way to capture semantic information associated with what would otherwise be an opaque numeric value. </P
><H2 
 ID="LinkTarget_12675"
><FONT size="+1"><B>C.2 Schema Description </H2
><H3 
 ID="LinkTarget_12676"
>C.2.1 TypeDictionary </H3
><P 

><FONT size="+1"></B>The <I>TypeDictionary</I> element is the root element of an OPC Binary Dictionary. The components of this element are described in <A href="#LinkTarget_12683" href="#">
Table C.1</A>
. </P
><P 

><B>Table C.1 &ndash; TypeDictionary Components </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Documentation </P
></TD
><TD  
 valign="top"
><P 

>Documentation </P
></TD
><TD  
 valign="top"
><P 

>An element that contains human-readable text and XML that provides an overview of what is contained in the dictionary. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Import </P
></TD
><TD  
 valign="top"
><P 

>ImportDirective[] </P
></TD
><TD  
 valign="top"
><P 

>Zero or more elements that specify other <I>TypeDictionaries</I> that are referenced by <I>StructuredTypes</I> defined in the dictionary. Each import element specifies the <I>NamespaceU</I><I>ri</I> of the <I>TypeDictionary</I> being imported. The <I>TypeDictionary</I> element shall declare an XML namespace prefix for each imported namespace. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TargetNamespace </P
></TD
><TD  
 valign="top"
><P 

>xs:string </P
></TD
><TD  
 valign="top"
><P 

>Specifies the URI that qualifies all <I>TypeDescriptions</I> defined in the dictionary. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DefaultByteOrder </P
></TD
><TD  
 valign="top"
><P 

>ByteOrder </P
></TD
><TD  
 valign="top"
><P 

>Specifies the default <I>ByteOrder</I> for all <I>TypeDescriptions</I> that have the <I>ByteOrderSignificant</I> attribute set to &ldquo;true&rdquo;. </P
><P 

>This value overrides the setting in any imported <I>TypeDictionary</I>. </P
><P 

>This value is overridden by the <I>DefaultByteOrder</I> specified on a <I>TypeDescription</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TypeDescription </P
></TD
><TD  
 valign="top"
><P 

>TypeDescription[] </P
></TD
><TD  
 valign="top"
><P 

>One or more elements that describe the structure of a binary encoded value. </P
><P 

>A TypeDescription is an abstract type. A dictionary may only contain the <I>OpaqueType</I>, <I>EnumeratedType</I> and <I>StructuredType</I> elements. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_12737"
><FONT size="+1"><B>C.2.2 TypeDescription </H3
><P 

><FONT size="+1"></B>A <I>TypeDescription</I> describes the structure of a binary encoded value. A <I>TypeDescription</I> is an abstract base type and only instances of subtypes may appear in a <I>TypeDictionary</I>. The components of a <I>TypeDescription</I> are described in <A href="#LinkTarget_12744" href="#">
Table C.2</A>
. </P
><P 

><B>Table C.2 &ndash; TypeDescription Components </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Documentation </P
></TD
><TD  
 valign="top"
><P 

>Documentation </P
></TD
><TD  
 valign="top"
><P 

>An element that contains human readable text and XML that describes the type. This element should capture any semantic information that would help a human to understand what is contained in the value.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Name </P
></TD
><TD  
 valign="top"
><P 

>xs: NCName </P
></TD
><TD  
 valign="top"
><P 

>An attribute that specifies a name for the <I>TypeDescription</I> that is unique within the dictionary. The fields of structured types reference <I>TypeDescriptions</I> by using this name qualified with the dictionary namespace URI. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DefaultByteOrder </P
></TD
><TD  
 valign="top"
><P 

>ByteOrder </P
></TD
><TD  
 valign="top"
><P 

>An attribute that specifies the default <I>ByteOrder</I> for the type description. </P
><P 

>This value overrides the setting in any <I>TypeDictionary</I> or in any <I>StructuredType </I>that references the type description.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>anyAttribute </P
></TD
><TD  
 valign="top"
><P 

>* </P
></TD
><TD  
 valign="top"
><P 

>Authors of a <I>TypeDictionary</I> may add their own attributes to any <I>TypeDescription </I>that shall be qualified with a namespace defined by the author. Applications should not be required to understand these attributes in order to interpret a binary encoded instance of the type. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_12789"
><FONT size="+1"><B>C.2.3 OpaqueType </H3
><P 

><FONT size="+1"></B>An <I>OpaqueType</I> describes a binary encoded value that is either a primitive fixed length type or that has a structure too complex to capture in an OPC Binary type dictionary. Authors of type dictionaries should avoid defining <I>OpaqueTypes </I>that do not have a fixed length because it would prevent applications from interpreting values that use these types without having built-in knowledge of the <I>OpaqueType.</I> The OPC Binary Type Description System defines many standard <I>OpaqueTypes</I> that should allow authors to describe most binary encoded values as <I>StructuredTypes</I>. </P
><P 

>The components of an <I>OpaqueType</I> are described in <A href="#LinkTarget_12797" href="#">
Table C.3</A>
. </P
><P 

><B>Table C.3 &ndash; OpaqueType Components </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>TypeDescription </P
></TD
><TD  
 valign="top"
><P 

>TypeDescription </P
></TD
><TD  
 valign="top"
><P 

>An <I>OpaqueType</I> inherits all elements and attributes defined for a <I>TypeDescription</I> in <A href="#LinkTarget_12744" href="#">
Table C.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LengthInBits </P
></TD
><TD  
 valign="top"
><P 

>xs:string </P
></TD
><TD  
 valign="top"
><P 

>An attribute which specifies the length of the <I>OpaqueType</I> in bits. This value should always be specified. If this value is not specified the <I>Documentation</I> element should describe the encoding in a way that a human understands. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ByteOrderSignificant </P
></TD
><TD  
 valign="top"
><P 

>xs:boolean </P
></TD
><TD  
 valign="top"
><P 

>An attribute that indicates whether byte order is significant for the type. </P
><P 

>If byte order is significant then the application shall determine the byte order to use for the current context before interpreting the encoded value. The application determines the byte order by looking for the <I>DefaultByteOrder</I> attribute specified for containing <I>StructuredTypes</I> or the <I>TypeDictionary</I>. If <I>StructuredTypes</I><I> </I>are nested the inner <I>StructuredTypes </I>override the byte order of the outer descriptions. </P
><P 

>If the <I>DefaultByteOrder </I>attribute is specified for the<I> </I><I>OpaqueType</I>,<I> </I>then the<I> </I><I>ByteOrder </I>is fixed and does not change according to context. </P
><P 

>If this attribute is &ldquo;true&rdquo;, then the <I>LengthInBits</I> attribute shall be specified and it shall be an integer multiple of 8 bits.  </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_12840"
><FONT size="+1"><B>C.2.4 EnumeratedType </H3
><P 

><FONT size="+1"></B>An <I>EnumeratedType</I> describes a binary-encoded numeric value that has a fixed set of valid values. The encoded binary value described by an <I>EnumeratedType</I> is always an unsigned integer with a length specified by the <I>LengthInBits</I> attribute. </P
><P 

>The names for each of the enumerated values are not required to interpret the binary encoding, however, they form part of the documentation for the type. </P
><P 

>The components of an <I>EnumeratedType</I> are described in <A href="#LinkTarget_12849" href="#">
Table C.4</A>
. </P
><P 

><B>Table C.4 &ndash; EnumeratedType Components </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>OpaqueType </P
></TD
><TD  
 valign="top"
><P 

>OpaqueTypeDescription </P
></TD
><TD  
 valign="top"
><P 

>An <I>EnumeratedType</I> inherits all elements and attributes defined for a <I>TypeDescription</I> in <A href="#LinkTarget_12744" href="#">
Table C.2</A>
 and for an <I>OpaqueType</I> defined in <A href="#LinkTarget_12797" href="#">
Table C.3</A>
. </P
><P 

>The <I>LengthInBits </I>attribute shall always be specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EnumeratedValue </P
></TD
><TD  
 valign="top"
><P 

>EnumeratedValue </P
></TD
><TD  
 valign="top"
><P 

>One or more elements that describe the possible values for the instances of the type.  </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_12887"
><FONT size="+1"><B>C.2.5 StructuredType </H3
><P 

><FONT size="+1"></B>A <I>StructuredType</I> describes a type as a sequence of binary-encoded values. Each value in the sequence is called a <I>Field</I>. Each <I>Field </I>references a<I> TypeDescription </I>that describes the binary-encoded value that appears in the field. A <I>Field</I> may specify that zero, one or multiple instances of the type appear within the sequence described by the <I>StructuredType</I>.<I> </I></P
><P 

>Authors of type dictionaries should use <I>StructuredTypes</I> to describe a variety of common data constructs including arrays, unions and structures. </P
><P 

>Some fields have lengths that are not multiples of 8 bits. Several of these fields may appear in a sequence in a structure, however, the total number of bits used in the sequence shall be fixed and it shall be a multiple of 8 bits. Any field which does not have a fixed length shall be aligned on a byte boundary. </P
><P 

>A sequence of fields which do not line up on byte boundaries are specified from the least significant bit to the most significant bit. Sequences which are longer than one byte overflow from the most significant bit of the first byte into the least significant bit of the next byte.<I> </I></P
><P 

>The components of a <I>StructuredType</I> are described in <A href="#LinkTarget_12898" href="#">
Table C.5</A>
. </P
><P 

><B>Table C.5 &ndash; StructuredType Components </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>TypeDescription </P
></TD
><TD  
 valign="top"
><P 

>TypeDescription </P
></TD
><TD  
 valign="top"
><P 

>A <I>StructuredType</I> inherits all elements and attributes defined for a <I>TypeDescription</I> in <A href="#LinkTarget_12744" href="#">
Table C.2</A>
.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Field </P
></TD
><TD  
 valign="top"
><P 

>FieldType </P
></TD
><TD  
 valign="top"
><P 

>One or more elements that describe the fields of the structure. Each field shall have a name that is unique within the <I>StructuredType</I>. Some fields may reference other fields in the <I>StructuredType</I> by using this name. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_12930"
><FONT size="+1"><B>C.2.6 FieldType </H3
><P 

><FONT size="+1"></B>A <I>FieldType</I> describes a binary encoded value that appears in sequence within a <I>StructuredType</I>. Every <I>FieldType</I> shall reference a <I>TypeDescription</I> that describes the encoded value for the field. </P
><P 

>A <I>FieldType</I> may specify an array of encoded values. </P
><P 

><I>Fields </I>may be optional and they reference other <I>FieldTypes</I>,<I> </I>which<I> </I>indicate if they are present in any specific instance of the type. </P
><P 

>The components of a <I>FieldType</I> are described in <A href="#LinkTarget_12940" href="#">
Table C.6</A>
. </P
><P 

><B>Table C.6 &ndash; FieldType Components </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Name </P
></TH
><TH 
 valign="top"
><P 

>Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Documentation </P
></TD
><TD  
 valign="top"
><P 

>Documentation </P
></TD
><TD  
 valign="top"
><P 

>An element that contains human readable text and XML that describes the field. This element should capture any semantic information that would help a human to understand what is contained in the field. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Name </P
></TD
><TD  
 valign="top"
><P 

>xs:string </P
></TD
><TD  
 valign="top"
><P 

>An attribute that specifies a name for the <I>Field </I>that is unique within the <I>StructuredType</I>. </P
><P 

>Other fields in the structured type reference a<I> </I><I>Field </I>by using this name. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TypeName </P
></TD
><TD  
 valign="top"
><P 

>xs:QName </P
></TD
><TD  
 valign="top"
><P 

>An attribute that specifies the <I>TypeDescription</I> that describes the contents of the field. A field may contain zero or more instances of this type depending on the settings for the other attributes and the values in other fields.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Length </P
></TD
><TD  
 valign="top"
><P 

>xs:unsignedInt </P
></TD
><TD  
 valign="top"
><P 

>An attribute that indicates the length of the field. This value may be the total number of encoded bytes or it may be the number of instances of the type referenced by the field. The <I>IsLengthInBytes</I> attributes specifies which of these definitions applies. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LengthField </P
></TD
><TD  
 valign="top"
><P 

>xs:string </P
></TD
><TD  
 valign="top"
><P 

>An attribute that indicates which other field in the <I>StructuredType</I> specifies the length of the field. The length of the field may be in bytes or it may be the number of instances of the type referenced by the field. The <I>IsLengthInBytes</I> attributes specify which of these definitions applies. </P
><P 

>If this attribute refers to a field that is not present in an encoded value, then the default value for the length is 1. This situation could occur if the field referenced is an optional field (see the <I>SwitchField</I> attribute). </P
><P 

>The length field shall be a fixed length Base-2 representation of an integer. If the length field is one of the standard signed integer types and the value is a negative integer, then the field is not present in the encoded stream. </P
><P 

>The <I>FieldType</I> referenced by this attribute shall precede the field with the <I>StructuredType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsLengthInBytes </P
></TD
><TD  
 valign="top"
><P 

>xs:boolean </P
></TD
><TD  
 valign="top"
><P 

>An attribute that indicates whether the <I>Length</I> or <I>LengthField</I> attributes specify the length of the field in bytes or in the number of instances of the type referenced by the field. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SwitchField </P
></TD
><TD  
 valign="top"
><P 

>xs:string </P
></TD
><TD  
 valign="top"
><P 

>If this attribute is specified, then the field is optional and may not appear in every instance of the encoded value. </P
><P 

>This attribute specifies the name of another <I>Field </I>that controls whether this field is present in the encoded value. The field referenced by this attribute shall be an integer value (see the <I>LengthField</I> attribute). </P
><P 

>The current value of the switch field is compared to the <I>SwitchValue</I> attribute using the <I>SwitchOperand.</I> If the condition evaluates to true then the field appears in the stream. </P
><P 

>If the <I>SwitchValue </I>attribute is not specified, then this field is present if the value of the switch field is non-zero. The <I>SwitchOperand</I> field is ignored if it is present. </P
><P 

>If the <I>SwitchOperand</I> attribute is missing, then the field is present if the value of the switch field is equal to the value of the <I>SwitchValue </I>attribute<I>.</I> </P
><P 

>The <I>Field</I> referenced by this attribute shall precede the field with the <I>StructuredType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SwitchValue </P
></TD
><TD  
 valign="top"
><P 

>xs:unsignedInt </P
></TD
><TD  
 valign="top"
><P 

>This attribute specifies when the field appears in the encoded value. The value of the field referenced by the <I>Switch</I><I>Field</I><I> </I>attribute is compared using the <I>SwitchOperand</I> attribute to this value. The field is present if the expression evaluates to true. The field is not present otherwise. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SwitchOperand </P
></TD
><TD  
 valign="top"
><P 

>xs:string </P
></TD
><TD  
 valign="top"
><P 

>This attribute specifies how the value of the switch field should be compared to the switch value attribute. This field is an enumeration with the following values:  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>Equal </P
></TD
><TD  
 valign="top"
><P 

><I>SwitchField</I> is equal to the <I>SwitchValue</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>GreaterThan </P
></TD
><TD  
 valign="top"
><P 

><I>SwitchField</I> is greater than the <I>SwitchValue</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LessThan </P
></TD
><TD  
 valign="top"
><P 

><I>SwitchField</I> is less than the <I>SwitchValue</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>GreaterThanOrEqual </P
></TD
><TD  
 valign="top"
><P 

><I>SwitchField</I> is greater than or equal to the <I>SwitchValue</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LessThanOrEqual </P
></TD
><TD  
 valign="top"
><P 

><I>SwitchField</I> is less than or equal to the <I>SwitchValue</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NotEqual </P
></TD
><TD  
 valign="top"
><P 

><I>SwitchField</I> is not equal to the <I>SwitchValue</I>. </P
></TD
></TR
></TABLE
><P 

>In each case the field is present if the expression is true. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Terminator </P
></TD
><TD  
 valign="top"
><P 

>xs:hexBinary </P
></TD
><TD  
 valign="top"
><P 

>This attribute indicates that the field contains one or more instances of <I>TypeDescription</I> referenced by this field and that the last value has the binary encoding specified by the value of this attribute. </P
><P 

>If this attribute is specified then the <I>TypeDescription</I> referenced by this field shall either have a fixed byte order (i.e. byte order is not significant or explicitly specified) or the containing <I>StructuredType</I> shall explicitly specify the byte order. </P
><P 

>Examples: </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Name </P
></TH
><TH 
 valign="top"
><P 

>Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

></B> </P
><P 

> Field Data Type Terminator Byte Order Hexadecimal String </P
><P 

> Char  tab character not applicable 09 </P
><P 

> WideChar: tab character BigEndian 0009 </P
><P 

> WideChar: tab character LittleEndian 0900 </P
><P 

> Int16  1  BigEndian 0001 </P
><P 

> Int16  1  LittleEndian 0100 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>anyAttribute </P
></TD
><TD  
 valign="top"
><P 

>* </P
></TD
><TD  
 valign="top"
><P 

>Authors of a <I>TypeDictionary</I> may add their own attributes to any <I>FieldType </I>which shall be qualified with a namespace defined by the authors. Applications should not be required to understand these attributes in order to interpret a binary encoded field value. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_13106"
><FONT size="+1"><B>C.2.7 EnumeratedValue </H3
><P 

><FONT size="+1"></B>An <I>EnumeratedValue</I> describes a possible value for an <I>EnumeratedType</I>. </P
><P 

>The components of an <I>EnumeratedValue</I> are described in <A href="#LinkTarget_13114" href="#">
Table C.7</A>
. </P
><P 

><B>Table C.7 &ndash; EnumeratedValue Components </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Name </P
></TD
><TD  
 valign="top"
><P 

>xs:string </P
></TD
><TD  
 valign="top"
><P 

>This attribute specifies a descriptive name for the enumerated value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>xs:unsignedInt </P
></TD
><TD  
 valign="top"
><P 

>This attribute specifies the numeric value that could appear in the binary encoding. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_13141"
><FONT size="+1"><B>C.2.8 ByteOrder </H3
><P 

><FONT size="+1"></B>A <I>ByteOrder</I> is an enumeration that describes a possible value byte orders for <I>TypeDescriptions</I> that allow different byte orders to be used. There are two possible values: BigEndian and LittleEndian. BigEndian indicates the most significant byte appears first in the binary encoding. LittleEndian indicates that the least significant byte appears first. </P
><H3 
 ID="LinkTarget_13143"
><FONT size="+1"><B>C.2.9 ImportDirective </H3
><P 

><FONT size="+1"></B>An <I>ImportDirective</I> specifies a <I>TypeDictionary</I> that is referenced by types defined in the current dictionary. </P
><P 

>The components of an <I>ImportDirective</I> are described in <A href="#LinkTarget_13151" href="#">
Table C.8</A>
. </P
><P 

><B>Table C.8 &ndash; ImportDirective Components </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Namespace </P
></TD
><TD  
 valign="top"
><P 

>xs:string </P
></TD
><TD  
 valign="top"
><P 

>This attribute specifies the <I>Ta</I><I>rgetNamespace</I> for the <I>TypeDictionary</I> being imported. This may be a well-known URI which means applications need not have access to the physical file to recognise types that are referenced. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Location </P
></TD
><TD  
 valign="top"
><P 

>xs:string </P
></TD
><TD  
 valign="top"
><P 

>This attribute specifies the physical location of the XML file containing the <I>TypeDictionary</I> to import. This value could be a URL for a network resource, a NodeId in an OPC UA <I>Server</I> address space or a local file path. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_13178"
><FONT size="+1"><B>C.3 Standard Type Descriptions </H2
><P 

><FONT size="+1"></B>The OPC Binary Type Description System defines a number of standard type descriptions that can be used to describe many common binary encodings using a <I>StructuredType</I>. The standard type descriptions are described in <A href="#LinkTarget_13185" href="#">
Table C.9</A>
. </P
><P 

><B>Table C.9 &ndash; Standard Type Descriptions </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Type name </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bit </P
></TD
><TD  
 valign="top"
><P 

>A single bit value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A two-state logical value represented as an 8-bit value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SByte </P
></TD
><TD  
 valign="top"
><P 

>An 8-bit signed integer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>An 8-bit unsigned integer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int16 </P
></TD
><TD  
 valign="top"
><P 

>A 16-bit signed integer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>A 16-bit unsigned integer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>A 32-bit signed integer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A 32-bit unsigned integer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int64 </P
></TD
><TD  
 valign="top"
><P 

>A 64-bit signed integer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt64 </P
></TD
><TD  
 valign="top"
><P 

>A 64-bit unsigned integer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Float </P
></TD
><TD  
 valign="top"
><P 

>An <A href="#LinkTarget_5780" href="#">
IEEE 754-1985</A>
 single precision floating point value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>An <A href="#LinkTarget_5780" href="#">
IEEE 754-1985</A>
 double precision floating point value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Char </P
></TD
><TD  
 valign="top"
><P 

>An 8-bit UTF-8 character value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>WideChar </P
></TD
><TD  
 valign="top"
><P 

>A 16-bit UTF-16 character value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A null terminated sequence of UTF-8 characters. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CharArray </P
></TD
><TD  
 valign="top"
><P 

>A sequence of UTF-8 characters preceded by the number of characters. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>WideString </P
></TD
><TD  
 valign="top"
><P 

>A null terminated sequence of UTF-16 characters. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>WideCharArray </P
></TD
><TD  
 valign="top"
><P 

>A sequence of UTF-16 characters preceded by the number of characters. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DateTime </P
></TD
><TD  
 valign="top"
><P 

>A 64-bit signed integer representing the number of 100 nanoseconds intervals since 1601-01-01 00:00:00. This is the same as the WIN32 FILETIME type. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A sequence of bytes preceded by its length in bytes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Guid </P
></TD
><TD  
 valign="top"
><P 

>A 128-bit structured type that represents a WIN32 GUID value. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_13331"
><FONT size="+1"><B>C.4 Type Description Examples </H2
><DL 

><DD 

><FONT size="+1"></B>1. A 128-bit signed integer. </DD
></DL
><P 

><FONT size="+1" color="#0000FF">&lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Int128<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">128<FONT color="#000000">&quot; <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 128-bit signed integer.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>&lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><DL 

><DD 

><FONT size="+1" color="#000000">2. A 16-bit value divided into several fields. </DD
></DL
><P 

><FONT size="+1" color="#0000FF">&lt;<FONT color="#800000">opc:StructuredType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Quality<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">An OPC COM-DA quality value.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">LimitBits<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Bit<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Length<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">2<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">QualityBits<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Bit<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Length<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">6<FONT color="#000000">&quot;<FONT color="#0000FF">/&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">VendorBits<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Byte<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>&lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

><FONT size="+1" color="#000000">When using bit fields, the least significant bits within a byte shall appear first. </P
><DL 

><DD 

>3. A structured type with optional fields. </DD
></DL
><P 

><FONT size="+1" color="#0000FF">&lt;<FONT color="#800000">opc:StructuredType<FONT color="#FF0000"> Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">DataValue<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A value with an associated timestamp, and quality.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ValueSpecified<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Bit<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">StatusCodeSpecified<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Bit<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">TimestampSpecified<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Bit<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Reserved1<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Bit<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Length<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">5<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Value<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Variant<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">SwitchField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ValueSpecified<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Quality<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Quality<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">SwitchField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">StatusCodeSpecified<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Timestamp<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:DateTime<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">SwitchField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">SourceTimestampSpecified<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>&lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt;  </P
><P 

><FONT size="+1" color="#000000">It is necessary to explicitly specify any padding bits required to ensure subsequent fields line up on byte boundaries. </P
><DL 

><DD 

>4. An array of integers. </DD
></DL
><P 

><FONT size="+1" color="#0000FF">&lt;<FONT color="#800000">opc:StructuredType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">IntegerArray<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">An array of integers prefixed by its length.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Size<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Array<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Size<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>&lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

><FONT size="+1" color="#000000">Nothing is encoded for the Array field if the Size field has a value &le; 0. </P
><DL 

><DD 

>5. An array of integers with a terminator instead of a length prefix. </DD
></DL
><P 

><FONT size="+1" color="#0000FF">&lt;<FONT color="#800000">opc:StructuredType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">IntegerArray<FONT color="#000000">&quot; <FONT color="#FF0000">DefaultByteOrder<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">LittleEndian<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">An array of integers terminated with a known value.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Value<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Int16<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Terminator<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">FF7F<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>&lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

><FONT size="+1" color="#000000">The terminator is 32,767 converted to hexadecimal with LittleEndian byte order. </P
><DL 

><DD 

>6. A simple union. </DD
></DL
><P 

><FONT size="+1" color="#0000FF">&lt;<FONT color="#800000">opc:StructuredType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Variant<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A union of several types.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ArrayLengthSpecified<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Bit<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Length<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">1<FONT color="#000000">&quot;<FONT color="#0000FF">/&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">VariantType<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Bit<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Length<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">7<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ArrayLength<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> </P
><P 

>      <FONT color="#FF0000">SwitchField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ArrayLengthSpecified<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ArrayLength<FONT color="#000000">&quot; </P
><P 

><FONT color="#0000FF">      <FONT color="#FF0000">SwitchField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">VariantType<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">SwitchValue<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">1<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">String<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:String<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ArrayLength<FONT color="#000000">&quot; </P
><P 

><FONT color="#FF0000">      SwitchField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">VariantType<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">SwitchValue<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">2<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">DateTime<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:DateTime<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ArrayLength<FONT color="#000000">&quot; </P
><P 

><FONT color="#FF0000">      SwitchField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">VariantType<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">SwitchValue<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">3<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>&lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

><FONT size="+1" color="#000000">The <I>ArrayLength</I> field is optional. If it is not present in an encoded value, then the length of all fields with <I>LengthField</I> set to &ldquo;ArrayLength&rdquo; have a length of 1. </P
><P 

>It is valid for the <I>VariantType</I> field to have a value that has no matching field defined. This simply means all optional fields are not present in the encoded value. </P
><DL 

><DD 

>7. An enumerated type. </DD
></DL
><P 

><FONT size="+1" color="#0000FF">&lt;<FONT color="#800000">opc:EnumeratedType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">TrafficLight<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">32<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">The possible colours for a traffic signal.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:EnumeratedValue<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Red<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">4<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">Red says stop immediately.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:EnumeratedValue<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:EnumeratedValue<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Yellow<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">3<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">Yellow says prepare to stop.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:EnumeratedValue<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:EnumeratedValue<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Green<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">2<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">Green says you may proceed.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:EnumeratedValue<FONT color="#0000FF">&gt; </P
><P 

>&lt;/<FONT color="#800000">opc:EnumeratedType<FONT color="#0000FF">&gt; </P
><P 

><FONT size="+1" color="#000000">The documentation element is used to provide human readable description of the type and values. </P
><DL 

><DD 

>8. A nillable array. </DD
></DL
><P 

><FONT size="+1" color="#0000FF">&lt;<FONT color="#800000">opc:StructuredTypen<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">NillableArray<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">An array where a length of -1 means null.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Length<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> </P
><P 

>      <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> </P
><P 

>      <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">opc:Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> </P
><P 

>      <FONT color="#FF0000">LengthField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Length<FONT color="#000000">&quot; </P
><P 

><FONT color="#0000FF">      <FONT color="#FF0000">SwitchField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Length<FONT color="#000000">&quot;<FONT color="#0000FF"> </P
><P 

>      <FONT color="#FF0000">SwitchValue<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0<FONT color="#000000">&quot;<FONT color="#0000FF"> </P
><P 

>      <FONT color="#FF0000">SwitchOperand<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">GreaterThanOrEqual<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>&lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

><FONT size="+1" color="#000000">If the length of the array is &minus;1 then the array does not appear in the stream. </P
><H2 
 ID="LinkTarget_13431"
><FONT size="+1"><B>C.5 OPC Binary XML Schema </H2
><P 

><FONT size="+1" color="#0000FF"></B>&lt;?<FONT color="#800000">xml<FONT color="#0000FF"> <FONT color="#FF0000">version<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">1.0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">encoding<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">utf-8<FONT color="#000000">&quot;<FONT color="#0000FF"> ?&gt; </P
><P 

>&lt;<FONT color="#800000">xs:schema<FONT color="#0000FF"> </P
><P 

>  <FONT color="#FF0000">targetNamespace<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">http://opcfoundation.org/BinarySchema/<FONT color="#000000">&quot; </P
><P 

><FONT color="#0000FF">  <FONT color="#FF0000">elementFormDefault<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">qualified<FONT color="#000000">&quot; </P
><P 

><FONT color="#0000FF">  <FONT color="#FF0000">xmlns<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">http://opcfoundation.org/BinarySchema/<FONT color="#000000">&quot;<FONT color="#0000FF"> </P
><P 

>  <FONT color="#FF0000">xmlns:xs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">http://www.w3.org/2001/XMLSchema<FONT color="#000000">&quot; </P
><P 

><FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Documentation<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:complexType<FONT color="#0000FF"> <FONT color="#FF0000">mixed<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:choice<FONT color="#0000FF"> <FONT color="#FF0000">minOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">maxOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">unbounded<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>        &lt;<FONT color="#800000">xs:any<FONT color="#0000FF"> <FONT color="#FF0000">minOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">maxOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">unbounded<FONT color="#000000">&quot;<FONT color="#0000FF">/&gt; </P
><P 

>      &lt;/<FONT color="#800000">xs:choice<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:anyAttribute<FONT color="#0000FF">/&gt; </P
><P 

>    &lt;/<FONT color="#800000">xs:complexType<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:element<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">xs:complexType<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ImportDirective<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Namespace<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:string<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Location<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:string<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:complexType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">xs:simpleType<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ByteOrder<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:restriction<FONT color="#0000FF"> <FONT color="#FF0000">base<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:string<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:enumeration<FONT color="#0000FF"> <FONT color="#FF0000">value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">BigEndian<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:enumeration<FONT color="#0000FF"> <FONT color="#FF0000">value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">LittleEndian<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;/<FONT color="#800000">xs:restriction<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:simpleType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">xs:complexType<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">TypeDescription<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">ref<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Documentation<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">minOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">maxOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">1<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;/<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Name<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:NCName<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">required<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">DefaultByteOrder<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ByteOrder<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:anyAttribute<FONT color="#0000FF"> <FONT color="#FF0000">processContents<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">lax<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:complexType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">xs:complexType<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">OpaqueType<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:complexContent<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:extension<FONT color="#0000FF"> <FONT color="#FF0000">base<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">TypeDescription<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>        &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">LengthInBits<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:int<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>        &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ByteOrderSignificant<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:boolean<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">default<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">false<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>      &lt;/<FONT color="#800000">xs:extension<FONT color="#0000FF">&gt; </P
><P 

>    &lt;/<FONT color="#800000">xs:complexContent<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:complexType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">xs:complexType<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">EnumeratedValue<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">ref<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Documentation<FONT color="#000000">&quot;<FONT color="#0000FF">  <FONT color="#FF0000">minOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">maxOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">1<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;/<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Name<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:string<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Value<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:unsignedInt<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:complexType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">xs:complexType<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">EnumeratedType<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:complexContent<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:extension<FONT color="#0000FF"> <FONT color="#FF0000">base<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">OpaqueTypeDescription<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>        &lt;<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>       &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">EnumeratedValue<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">EnumeratedValueDescription<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">maxOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">unbounded<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>        &lt;/<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>      &lt;/<FONT color="#800000">xs:extension<FONT color="#0000FF">&gt; </P
><P 

>    &lt;/<FONT color="#800000">xs:complexContent<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:complexType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">xs:simpleType<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">SwitchOperand<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:restriction<FONT color="#0000FF"> <FONT color="#FF0000">base<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:string<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:enumeration<FONT color="#0000FF"> <FONT color="#FF0000">value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Equals<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:enumeration<FONT color="#0000FF"> <FONT color="#FF0000">value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">GreaterThan<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:enumeration<FONT color="#0000FF"> <FONT color="#FF0000">value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">LessThan<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:enumeration<FONT color="#0000FF"> <FONT color="#FF0000">value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">GreaterThanOrEqual<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:enumeration<FONT color="#0000FF"> <FONT color="#FF0000">value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">LessThanOrEqual<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:enumeration<FONT color="#0000FF"> <FONT color="#FF0000">value<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">NotEqual<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;/<FONT color="#800000">xs:restriction<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:simpleType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">xs:complexType<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">FieldType<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">ref<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Documentation<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">minOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">maxOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">1<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;/<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Name<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:string<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">required<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">TypeName<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:QName<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Length<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:unsignedInt<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">LengthField<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:string<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">IsLengthInBytes<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:boolean<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">default<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">false<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">SwitchField<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:string<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">SwitchValue<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:unsignedInt<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">SwitchOperand<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">SwitchOperand<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Terminator<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:hexBinary<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:anyAttribute<FONT color="#0000FF"> <FONT color="#FF0000">processContents<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">lax<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:complexType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">xs:complexType<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">StructuredType<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:complexContent<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:extension<FONT color="#0000FF"> <FONT color="#FF0000">base<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">TypeDescription<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>        &lt;<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>          &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Field<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">FieldType<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">minOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">maxOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">unbounded<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>        &lt;/<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>      &lt;/<FONT color="#800000">xs:extension<FONT color="#0000FF">&gt; </P
><P 

>    &lt;/<FONT color="#800000">xs:complexContent<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:complexType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">TypeDictionary<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">xs:complexType<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>        &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">ref<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Documentation<FONT color="#000000">&quot;<FONT color="#0000FF">  <FONT color="#FF0000">minOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">maxOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">1<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>        &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Import<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ImportDirective<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">minOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">maxOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">unbounded<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>        &lt;<FONT color="#800000">xs:choice<FONT color="#0000FF"> <FONT color="#FF0000">minOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">maxOccurs<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">unbounded<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>          &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">OpaqueType<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">OpaqueType<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>          &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">EnumeratedType<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">EnumeratedType<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>          &lt;<FONT color="#800000">xs:element<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">StructuredType<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">StructuredType<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>        &lt;/<FONT color="#800000">xs:choice<FONT color="#0000FF">&gt; </P
><P 

>      &lt;/<FONT color="#800000">xs:sequence<FONT color="#0000FF">&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">TargetNamespace<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">xs:string<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">required<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>      &lt;<FONT color="#800000">xs:attribute<FONT color="#0000FF"> <FONT color="#FF0000">name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">DefaultByteOrder<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">type<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ByteOrder<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">use<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">optional<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;/<FONT color="#800000">xs:complexType<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">xs:element<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>&lt;/<FONT color="#800000">xs:schema<FONT color="#0000FF">&gt; </P
><H2 
 ID="LinkTarget_13552"
><FONT size="+1" color="#000000"><B>C.6 OPC Binary Standard TypeDictionary </H2
><P 

><FONT size="+1" color="#0000FF"></B>&lt;?<FONT color="#800000">xml<FONT color="#0000FF"> <FONT color="#FF0000">version<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">1.0<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">encoding<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">utf-8<FONT color="#000000">&quot;<FONT color="#0000FF">?&gt; </P
><P 

>&lt;<FONT color="#800000">opc:TypeDictionary<FONT color="#0000FF"> </P
><P 

>  <FONT color="#FF0000">xmlns<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">http://opcfoundation.org/BinarySchema/<FONT color="#000000">&quot;<FONT color="#0000FF"> </P
><P 

>  <FONT color="#FF0000">xmlns:opc<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">http://opcfoundation.org/BinarySchema/<FONT color="#000000">&quot;<FONT color="#0000FF"> </P
><P 

>  <FONT color="#FF0000">xmlns:xsi<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">http://www.w3.org/2001/XMLSchema-instance<FONT color="#000000">&quot; </P
><P 

><FONT color="#0000FF">  <FONT color="#FF0000">TargetNamespace<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">http://opcfoundation.org/BinarySchema/<FONT color="#000000">&quot; </P
><P 

><FONT color="#0000FF">&gt; </P
><P 

>  &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">This dictionary defines the standard types used by the OPC Binary type description system.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Bit<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">1<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A single bit.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Boolean<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">8<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A two state logical value represented as a 8-bit value.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">SByte<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">8<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">An 8-bit signed integer.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Byte<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">8<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 8-bit unsigned integer.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Int16<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">16<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 16-bit signed integer.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">UInt16<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">16<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 16-bit unsigned integer.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">32<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 32-bit signed integer.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">UInt32<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">32<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 32-bit unsigned integer.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Int64<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">32<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 64-bit signed integer.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">UInt64<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">64<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 64-bit unsigned integer.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Float<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">32<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">An IEEE-754 single precision floating point value.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Double<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">64<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">An IEEE-754 double precision floating point value.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Char<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">8<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 8-bit character value.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:StructuredType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">String<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A UTF-8 null terminated string value.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Value<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Char<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Terminator<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">00<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:StructuredType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">CharArray<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A UTF-8 string prefixed by its length in characters.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Length<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Value<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Char<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Length<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">WideChar<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">16<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 16-bit character value.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:StructuredType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">WideString<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A UTF-16 null terminated string value.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Value<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">WideChar<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Terminator<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">0000<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:StructuredType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">WideCharArray<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A UTF-16 string prefixed by its length in characters.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Length<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Value<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">WideChar<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Length<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:StructuredType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">ByteString<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">An array of bytes prefixed by its length.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Length<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Int32<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Value<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Byte<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthField<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Length<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>  &lt;<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">DateTime<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">LengthInBits<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">64<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">ByteOrderSignificant<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">true<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">The number of 100 nanosecond intervals since January 01, 1601.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:OpaqueType<FONT color="#0000FF">&gt; </P
><P 

>  </P
><P 

>  &lt;<FONT color="#800000">opc:StructuredType<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Guid<FONT color="#000000">&quot;<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt;<FONT color="#000000">A 128-bit globally unique identifier.<FONT color="#0000FF">&lt;/<FONT color="#800000">opc:Documentation<FONT color="#0000FF">&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Data1<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">UInt32<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Data2<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">UInt16<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Data3<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">UInt16<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>    &lt;<FONT color="#800000">opc:Field<FONT color="#0000FF"> <FONT color="#FF0000">Name<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Data4<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">TypeName<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">Byte<FONT color="#000000">&quot;<FONT color="#0000FF"> <FONT color="#FF0000">Length<FONT color="#0000FF">=<FONT color="#000000">&quot;<FONT color="#0000FF">8<FONT color="#000000">&quot;<FONT color="#0000FF"> /&gt; </P
><P 

>  &lt;/<FONT color="#800000">opc:StructuredType<FONT color="#0000FF">&gt; </P
><P 

> </P
><P 

>&lt;/<FONT color="#800000">opc:TypeDictionary<FONT color="#0000FF">&gt; </P
><H1 
 ID="LinkTarget_13661"
><FONT size="+1" color="#000000"><B>Annex D </B>(normative)<B>  Graphical Notation  </H1
><H2 
 ID="LinkTarget_13663"
><FONT size="+1">D.1 General </H2
><P 

><FONT size="+1"></B>Annex D defines a graphical notation for OPC UA data. Annex D is normative, that is, the notation is used in this standard to expose examples of OPC UA data. However, it is not required to use this notation to expose OPC UA data. </P
><P 

>The graphical notation is able to expose all structural data of OPC UA. <I>Nodes</I>, their <I>Attributes</I> including their current value and <I>References</I> between the <I>Nodes</I> including the <I>ReferenceType</I> can be exposed. The graphical notation provides no mechanism to expose events or historical data. </P
><H2 
 ID="LinkTarget_13666"
><FONT size="+1"><B>D.2 Notation </H2
><H3 
 ID="LinkTarget_13667"
>D.2.1 Overview </H3
><P 

><FONT size="+1"></B>The notation is divided into two parts. The simple notation only provides a simplified view on the data hiding some details like <I>Attributes</I>. The extended notation allows exposing all structure information of OPC UA, including <I>Attribute</I> values. The simple and the extended notation can be combined to expose OPC UA data in one figure.  </P
><P 

>Common to both notations is that neither any colour nor the thickness or style of lines is relevant for the notation. Those effects can be used to highlight certain aspects of a figure. </P
><H3 
 ID="LinkTarget_13670"
><FONT size="+1"><B>D.2.2 Simple Notation </H3
><P 

><FONT size="+1"></B>Depending on their <I>NodeClass</I> <I>Nodes</I> are represented by different graphical forms as defined in <A href="#LinkTarget_13677" href="#">
Table D.1</A>
. </P
><P 

><B>Table D.1 &ndash; Notation of Nodes depending on the NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeClass </P
></TD
><TD  
 valign="top"
><P 

>Graphical Representation </P
></TD
><TD  
 valign="top"
><P 

>Comment </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Object </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>Object</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Rectangle including text representing the string-part of the <I>DisplayName</I> of the <I>Object</I>. The font shall not be set to italic. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>ObjectType</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Shadowed rectangle including text representing the string-part of the <I>DisplayName</I> of the <I>ObjectType</I>. The font shall be set in italic. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>Variable</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Rectangle with rounded corners including text representing the string-part of the <I>DisplayName</I> of the <I>Variable</I>. The font shall not be set in italic. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>VariableType </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>VariableType</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Shadowed rectangle with rounded corners including text representing the string-part of the <I>DisplayName</I> of the <I>VariableType</I>. The font shall be set in italic. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>DataType</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Shadowed hexagon including text representing the string-part of the <I>DisplayName</I> of the <I>DataType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReferenceType </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>ReferenceType</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Shadowed six-sided polygon including text representing the string-part of the <I>DisplayName</I> of the <I>ReferenceType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>Method</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Oval including text representing the string-part of the <I>DisplayName</I> of the <I>Method</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>View </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>View</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Trapezium including text representing the string-part of the <I>DisplayName</I> of the <I>View</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><I>References</I> are represented as lines between <I>Nodes</I> as exemplified in <A href="#LinkTarget_13779" href="#">
Figure D.1</A>
. Those lines can vary in their form. They do not have to connect the <I>Nodes</I> with a straight line; they can have angles, arches, etc. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Node1ReferenceNameNode2</DIV
></P
><P 

><B>Figure D.1 &ndash; Example of a Reference connecting two Nodes </P
><P 

><A href="#LinkTarget_13785" href="#">
</B>Table D.2</A>
 defines how symmetric and asymmetric <I>References</I> are represented in general, and also defines shortcuts for some <I>ReferenceTypes</I>. Although it is recommended to use those shortcuts, it is not required. Thus, instead of using the shortcut, the generic solution can also be used. </P
><P 

><B>Table D.2 &ndash; Simple Notation of Nodes depending on the NodeClass </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ReferenceType </P
></TD
><TD  
 valign="top"
><P 

>Graphical Representation </P
></TD
><TD  
 valign="top"
><P 

>Comment </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Any symmetric ReferenceType </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>ReferenceType</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Symmetric <I>ReferenceTypes</I> are represented as lines between <I>Nodes</I> with closed and filled arrows on both sides pointing to the connected <I>Nodes</I>. Near the line has to be a text containing the string-part of the <I>BrowseName</I> of the <I>ReferenceType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Any asymmetric ReferenceType </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>ReferenceType</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Asymmetric <I>ReferenceTypes</I> are represented as lines between <I>Nodes</I> with a closed and filled arrow on the side pointing to the <I>TargetNode</I>. Near the line has to be a text containing the string-part of the <I>BrowseName</I> of the <I>ReferenceType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Any hierarchical ReferenceType </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
>ReferenceType</DIV
></P
></TD
><TD  
 valign="top"
><P 

>Asymmetric <I>ReferenceTypes</I> that are subtypes of <I>HierarchicalReferences</I> should be exposed the same way as asymmetric <I>ReferenceTypes</I> except that an open arrow is used. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
></DIV
></P
></TD
><TD  
 valign="top"
><P 

>The notation provides a shortcut for <I>HasComponent</I> <I>References</I> shown on the left. The single hashed line has to be near the <I>TargetNode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
></DIV
></P
></TD
><TD  
 valign="top"
><P 

>The notation provides a shortcut for <I>HasProperty</I> <I>References</I> shown on the left. The double hashed lines have to be near the <I>TargetNode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
></DIV
></P
></TD
><TD  
 valign="top"
><P 

>The notation provides a shortcut for <I>HasTypeDefinition</I> <I>References</I> shown on the left. The double closed and filled arrows have to point to the <I>TargetNode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
></DIV
></P
></TD
><TD  
 valign="top"
><P 

>The notation provides a shortcut for <I>HasSubtype</I> <I>References</I> shown on the left. The double closed arrows have to point to the <I>SourceNode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasEventSource </P
></TD
><TD  
 valign="top"
><P 

> <DIV class="Sect" 
 Alt=""
></DIV
></P
></TD
><TD  
 valign="top"
><P 

>The notation provides a shortcut for <I>HasEventSource</I> <I>References</I> shown on the left. The closed arrow has to point to the <I>TargetNode</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1">  </P
><H3 
 ID="LinkTarget_13876"
><FONT size="+1"><B>D.2.3 Extended Notation </H3
><P 

><FONT size="+1"></B>In the extended notation some additional concepts are introduced. It is allowed only to use some of those concepts on elements of a figure. </P
><P 

>The following rules define some special handling of structures. </P
><DL 

><DD 

>&#61623; In general, values of all <I>DataTypes</I> should be represented by an appropriate string representation. Whenever a <I>NamespaceIndex</I> or <I>LocaleId</I> is used in those structures they can be omitted. </DD
><DD 

>&#61623; The <I>DisplayName</I> contains a <I>LocaleId</I> and a <I>String</I>. Such a structure can be exposed as [&lt;LocaleId&gt;:]&lt;String&gt; where the <I>LocaleId</I> is optional. For example, a <I>DisplayName</I> can be &ldquo;en:MyName&rdquo;. Instead of that, &ldquo;MyName&rdquo; can also be used. This rule applies whenever a <I>DisplayName</I> is shown, including the text used in the graphical representation of a <I>Node</I>. </DD
><DD 

>&#61623; The <I>BrowseName</I> contains the <I>NamespaceIndex</I> and a <I>String</I>. Such a structure can be exposed as [&lt;NamespaceIndex&gt;:]&lt;String&gt; where the <I>NamespaceIndex</I> is optional. For example, a <I>BrowseName</I> can be &ldquo;1:MyName&rdquo;. Instead of that, &ldquo;MyName&rdquo; can also be used. This rule applies whenever a <I>BrowseName</I> is shown, including the text used in the graphical representation of a <I>Node</I>. </DD
></DL
><P 

>Instead of using the <I>HasTypeDefinition</I> reference to point from an <I>Object</I> or <I>Variable</I> to its <I>ObjectType</I> or <I>VariableType</I> the name of the <I>TypeDefinition</I> can be added to the text used in the <I>Node</I>. The <I>TypeDefinition</I> shall either be prefixed with &ldquo;::&rdquo; or it is put in italic as the top line. <A href="#LinkTarget_13897" href="#">
Figure D.3</A>
 gives an example, where &ldquo;Node1&rdquo; uses a <I>Reference</I> and &ldquo;Node2&rdquo; the shortcut in both notation variants. A figure can contain <I>HasTypeDefinition</I> <I>References</I> for some <I>Nodes</I> and the shortcut for other <I>Nodes</I>. It is not allowed that a <I>Node</I> uses the shortcut and additionally is the <I>SourceNode</I> of a <I>HasTypeDefinition</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Node1Node2::SampleTypeSampleTypeSampleTypeNode2</DIV
></P
><P 

><B>Figure D.3 &ndash; Example of using a TypeDefinition inside a Node </P
><P 

></B>To display <I>Attributes</I> of a <I>Node</I> additional text can be put inside the form representing the <I>Node</I> under the text representing the <I>DisplayName</I>. The <I>DisplayName</I> and the text describing the <I>Attributes</I> have to be separated using a horizontal line. Each <I>Attribute</I> has to be set into a new text line. Each text line shall contain the <I>Attribute</I> name followed by an &ldquo;=&rdquo; and the value of the <I>Attribute</I>. On top of the first text line containing an <I>Attribute</I> shall be a text line containing the underlined text &ldquo;Attribute&rdquo;. It is not required to expose all <I>Attributes</I> of a <I>Node</I>. It is allowed to show only a subset of <I>Attributes</I>. If an optional <I>Attribute</I> is not provided, the <I>Attribute</I> can be marked by a strike-through line, for example &ldquo;Description&rdquo;. Examples of exposing <I>Attributes</I> are shown in <A href="#LinkTarget_13908" href="#">
Figure D.4</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>FT1001AttributeNodeId = &ldquo;1000&ldquo;NodeClass = ObjectDisplayName = &ldquo;FT1001&ldquo;BrowseName = &ldquo;FTX001&ldquo;DescriptionEventNotifier = 0DataItemAttributeNodeClass = VariableDisplayName = &ldquo;DataItem&ldquo;BrowseName = &ldquo;DataItem&ldquo;MinimumSamplingInterval = -1</DIV
></P
><P 

><B>Figure D.4 &ndash; Example of exposing Attributes </P
><P 

></B>To avoid too many <I>Nodes</I> in a figure it is allowed to expose <I>Properties</I> inside a <I>Node</I>, similar to <I>Attributes</I>. Therefore, the text field used for exposing <I>Attributes</I> is extended. Under the last text line containing an <I>Attribute</I> a new text line containing the underlined text &ldquo;Property&rdquo; has to be added. If no <I>Attribute</I> is provided, the text has to start with this text line. After this text line, each new text line shall contain a <I>Property</I>, starting with the <I>BrowseName</I> of the <I>Property</I> followed by &ldquo;=&rdquo; and the value of the <I>Value</I> <I>Attribute</I> of the <I>Property</I>. <A href="#LinkTarget_13920" href="#">
Figure D.5</A>
 shows some examples exposing <I>Properties</I> inline. It is allowed to expose some <I>Properties</I> of a <I>Node</I> inline, and other <I>Properties</I> as <I>Nodes</I>. It is not allowed to show a <I>Property</I> inline as well as an additional <I>Node</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>FT1001AttributeNodeId = &ldquo;1000&ldquo;DisplayName = &ldquo;FT1001&ldquo;BrowseName = &ldquo;FTX001&ldquo;DescriptionEventNotifier = 0PropertyProp1 = 12Prop2 = &ldquo;PropValue&ldquo;DataItemAttributeNodeClass = VariableDisplayName = &ldquo;DataItem&ldquo;BrowseName = &ldquo;DataItem&ldquo;MinimumSamplingInterval = -1PropertyProp1 = 12Prop2 = &ldquo;PropValue&ldquo;FT1002PropertyProp1 = 12Prop2 = &ldquo;PropValue&ldquo;DataItemXPropertyProp1 = 12Prop2 = &ldquo;PropValue&ldquo;</DIV
></P
><P 

><B>Figure D.5 &ndash; Example of exposing Properties inline </P
><P 

></B>It is allowed to add additional information to a figure using the graphical representation, for example callouts. </P
><P 

> </P
><P 

>______________ </P
></DIV
></BODY>
</HTML>
