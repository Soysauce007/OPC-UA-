<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!-- Created from PDF via Acrobat SaveAsXML -->
<!-- Mapping table version: 28-February-2003 -->
<HTML>
<HEAD>
<META
 name="dc.creator"
 content="Randy Armstrong" >
<META
 name="dc.description"
 content="Industrial Communications" >
<META
 name="dc.title"
 content="OPC Unified Architecture" >
<META
 name="dc.date"
 content="2015-07-19T15:27:59-04:00" >
<META
 name="dc.date.modified"
 content="2015-07-19T15:27:59-04:00" >
<META
 name="generator"
 content="Adobe Acrobat Exchange-Pro 8.0" >
</HEAD>
<BODY bgcolor=white text=black link=blue vlink=purple alink=fushia >
<HR>
<UL>
<LI>
<A href="#LinkTarget_2287">FIGURES</A>
</LI>
<LI>
<A href="#LinkTarget_2429">TABLES</A>
</LI>
<LI>
<A href="#LinkTarget_4381">1 Scope</A>
</LI>
<LI>
<A href="#LinkTarget_4402">2 Normative references</A>
</LI>
<LI>
<A href="#LinkTarget_4615">3 Terms, definitions and conventions</A>
<UL>
<LI>
<A href="#LinkTarget_4616">3.1 Terms and definitions</A>
</LI>
<LI>
<A href="#LinkTarget_4675">3.2 Abbreviations and symbols</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_4724">4 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_4787">5 Data encoding</A>
<UL>
<LI>
<A href="#LinkTarget_4788">5.1 General</A>
<UL>
<LI>
<A href="#LinkTarget_4789">5.1.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_4791">5.1.2 Built-in Types</A>
</LI>
<LI>
<A href="#LinkTarget_5024">5.1.3 Guid</A>
</LI>
<LI>
<A href="#LinkTarget_5070">5.1.4 ByteString</A>
</LI>
<LI>
<A href="#LinkTarget_5077">5.1.5 ExtensionObject</A>
</LI>
<LI>
<A href="#LinkTarget_5087">5.1.6 Variant</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_5096">5.2 OPC UA Binary</A>
<UL>
<LI>
<A href="#LinkTarget_5097">5.2.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_5101">5.2.2 Built-in Types</A>
<UL>
<LI>
<A href="#LinkTarget_5102">5.2.2.1 Boolean</A>
</LI>
<LI>
<A href="#LinkTarget_5105">5.2.2.2 Integer</A>
</LI>
<LI>
<A href="#LinkTarget_5116">5.2.2.3 Floating Point</A>
</LI>
<LI>
<A href="#LinkTarget_5189">5.2.2.4 String</A>
</LI>
<LI>
<A href="#LinkTarget_5206">5.2.2.5 DateTime</A>
</LI>
<LI>
<A href="#LinkTarget_5244">5.2.2.6 Guid</A>
</LI>
<LI>
<A href="#LinkTarget_5261">5.2.2.7 ByteString</A>
</LI>
<LI>
<A href="#LinkTarget_5264">5.2.2.8 XmlElement</A>
</LI>
<LI>
<A href="#LinkTarget_5289">5.2.2.9 NodeId</A>
</LI>
<LI>
<A href="#LinkTarget_5588">5.2.2.10 ExpandedNodeId</A>
</LI>
<LI>
<A href="#LinkTarget_5642">5.2.2.11 StatusCode</A>
</LI>
<LI>
<A href="#LinkTarget_5644">5.2.2.12 DiagnosticInfo</A>
</LI>
<LI>
<A href="#LinkTarget_5772">5.2.2.13 QualifiedName</A>
</LI>
<LI>
<A href="#LinkTarget_5813">5.2.2.14 LocalizedText</A>
</LI>
<LI>
<A href="#LinkTarget_5871">5.2.2.15 ExtensionObject</A>
</LI>
<LI>
<A href="#LinkTarget_5954">5.2.2.16 Variant</A>
</LI>
<LI>
<A href="#LinkTarget_6046">5.2.2.17 DataValue</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6165">5.2.3 Enumerations</A>
</LI>
<LI>
<A href="#LinkTarget_6167">5.2.4 Arrays</A>
</LI>
<LI>
<A href="#LinkTarget_6170">5.2.5 Structures</A>
</LI>
<LI>
<A href="#LinkTarget_6299">5.2.6 Structures with optional fields</A>
</LI>
<LI>
<A href="#LinkTarget_6387">5.2.7 Unions</A>
</LI>
<LI>
<A href="#LinkTarget_6465">5.2.8 Messages</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6477">5.3 XML</A>
<UL>
<LI>
<A href="#LinkTarget_6478">5.3.1 Built-in Types</A>
<UL>
<LI>
<A href="#LinkTarget_6479">5.3.1.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_6491">5.3.1.2 Boolean</A>
</LI>
<LI>
<A href="#LinkTarget_6494">5.3.1.3 Integer</A>
</LI>
<LI>
<A href="#LinkTarget_6559">5.3.1.4 Floating Point</A>
</LI>
<LI>
<A href="#LinkTarget_6589">5.3.1.5 String</A>
</LI>
<LI>
<A href="#LinkTarget_6591">5.3.1.6 DateTime</A>
</LI>
<LI>
<A href="#LinkTarget_6607">5.3.1.7 Guid</A>
</LI>
<LI>
<A href="#LinkTarget_6621">5.3.1.8 ByteString</A>
</LI>
<LI>
<A href="#LinkTarget_6631">5.3.1.9 XmlElement</A>
</LI>
<LI>
<A href="#LinkTarget_6640">5.3.1.10 NodeId</A>
</LI>
<LI>
<A href="#LinkTarget_6724">5.3.1.11 ExpandedNodeId</A>
</LI>
<LI>
<A href="#LinkTarget_6815">5.3.1.12 StatusCode</A>
</LI>
<LI>
<A href="#LinkTarget_6822">5.3.1.13 DiagnosticInfo</A>
</LI>
<LI>
<A href="#LinkTarget_6840">5.3.1.14 QualifiedName</A>
</LI>
<LI>
<A href="#LinkTarget_6849">5.3.1.15 LocalizedText</A>
</LI>
<LI>
<A href="#LinkTarget_6857">5.3.1.16 ExtensionObject</A>
</LI>
<LI>
<A href="#LinkTarget_6875">5.3.1.17 Variant</A>
</LI>
<LI>
<A href="#LinkTarget_6926">5.3.1.18 DataValue</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6944">5.3.2 Enumerations</A>
</LI>
<LI>
<A href="#LinkTarget_7003">5.3.3 Arrays</A>
</LI>
<LI>
<A href="#LinkTarget_7014">5.3.4 Structures</A>
</LI>
<LI>
<A href="#LinkTarget_7029">5.3.5 Structures with optional fields</A>
</LI>
<LI>
<A href="#LinkTarget_7046">5.3.6 Unions</A>
</LI>
<LI>
<A href="#LinkTarget_7061">5.3.7 Messages</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_7063">6 Message SecurityProtocols</A>
<UL>
<LI>
<A href="#LinkTarget_7064">6.1 Security handshake</A>
</LI>
<LI>
<A href="#LinkTarget_7201">6.2 Certificates</A>
<UL>
<LI>
<A href="#LinkTarget_7202">6.2.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_7229">6.2.2 Application Instance Certificate</A>
</LI>
<LI>
<A href="#LinkTarget_7420">6.2.3 Signed Software Certificate</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_7582">6.3 Time synchronization</A>
</LI>
<LI>
<A href="#LinkTarget_7596">6.4 UTC and International Atomic Time (TAI)</A>
</LI>
<LI>
<A href="#LinkTarget_7598">6.5 Issued User Identity Tokens</A>
<UL>
<LI>
<A href="#LinkTarget_7600">6.5.1 Kerberos</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_7647">6.6 WS Secure Conversation</A>
</LI>
<LI>
<A href="#LinkTarget_7649">6.7 OPC UA Secure Conversation</A>
<UL>
<LI>
<A href="#LinkTarget_7650">6.7.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_7656">6.7.2 MessageChunk structure</A>
</LI>
<LI>
<A href="#LinkTarget_8018">6.7.3 MessageChunks and error handling</A>
</LI>
<LI>
<A href="#LinkTarget_8072">6.7.4 Establishing a SecureChannel</A>
</LI>
<LI>
<A href="#LinkTarget_8285">6.7.5 Deriving keys</A>
</LI>
<LI>
<A href="#LinkTarget_8418">6.7.6 Verifying Message Security</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8500">7 Transport Protocols</A>
<UL>
<LI>
<A href="#LinkTarget_8501">7.1 OPC UA TCP</A>
<UL>
<LI>
<A href="#LinkTarget_8502">7.1.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_8505">7.1.2 Message structure</A>
</LI>
<LI>
<A href="#LinkTarget_8790">7.1.3 Establishing a connection</A>
</LI>
<LI>
<A href="#LinkTarget_8806">7.1.4 Closing a connection</A>
</LI>
<LI>
<A href="#LinkTarget_8820">7.1.5 Error handling</A>
</LI>
<LI>
<A href="#LinkTarget_8998">7.1.6 Error recovery</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9025">7.2 SOAP/HTTP</A>
</LI>
<LI>
<A href="#LinkTarget_9027">7.3 HTTPS</A>
<UL>
<LI>
<A href="#LinkTarget_9028">7.3.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_9081">7.3.2 XML Encoding</A>
</LI>
<LI>
<A href="#LinkTarget_9125">7.3.3 OPC UA Binary Encoding</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9138">7.4 Well known addresses</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9201">8 Normative Contracts</A>
<UL>
<LI>
<A href="#LinkTarget_9202">8.1 OPC Binary Schema</A>
</LI>
<LI>
<A href="#LinkTarget_9209">8.2 XML Schema and WSDL</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9220">Annex A  (normative)  Constants</A>
<UL>
<LI>
<A href="#LinkTarget_9222">A.1 Attribute Ids</A>
</LI>
<LI>
<A href="#LinkTarget_9364">A.2 Status Codes</A>
</LI>
<LI>
<A href="#LinkTarget_9385">A.3 Numeric Node Ids</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9420">Annex B  (normative)  OPC UA Nodeset</A>
</LI>
<LI>
<A href="#LinkTarget_9442">Annex C  (normative)  Type declarations for the OPC UA native Mapping</A>
</LI>
<LI>
<A href="#LinkTarget_9462">Annex D  (normative)  WSDL for the XML Mapping</A>
<UL>
<LI>
<A href="#LinkTarget_9464">D.1 XML Schema</A>
</LI>
<LI>
<A href="#LinkTarget_9478">D.2 WDSL Port Types</A>
</LI>
<LI>
<A href="#LinkTarget_9503">D.3 WSDL Bindings</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9529">Annex E  (normative)  Security settings management</A>
<UL>
<LI>
<A href="#LinkTarget_9531">E.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_9609">E.2 SecuredApplication</A>
</LI>
<LI>
<A href="#LinkTarget_9862">E.3 CertificateIdentifier</A>
</LI>
<LI>
<A href="#LinkTarget_10046">E.4 CertificateStoreIdentifier</A>
</LI>
<LI>
<A href="#LinkTarget_10101">E.5 CertificateList</A>
</LI>
<LI>
<A href="#LinkTarget_10137">E.6 CertificateValidationOptions</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10212">Annex F  (normative)  Information Model XML Schema</A>
<UL>
<LI>
<A href="#LinkTarget_10214">F.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_10232">F.2 UANodeSet</A>
</LI>
<LI>
<A href="#LinkTarget_10385">F.3 UANode</A>
</LI>
<LI>
<A href="#LinkTarget_10516">F.4 Reference</A>
</LI>
<LI>
<A href="#LinkTarget_10573">F.5 UAType</A>
</LI>
<LI>
<A href="#LinkTarget_10637">F.6 UAInstance</A>
</LI>
<LI>
<A href="#LinkTarget_10738">F.7 UAVariable</A>
</LI>
<LI>
<A href="#LinkTarget_10845">F.8 UAMethod</A>
</LI>
<LI>
<A href="#LinkTarget_10886">F.9 TranslationType</A>
</LI>
<LI>
<A href="#LinkTarget_10974">F.10 UADataType</A>
</LI>
<LI>
<A href="#LinkTarget_11012">F.11 DataTypeDefinition</A>
</LI>
<LI>
<A href="#LinkTarget_11086">F.12 DataTypeField</A>
</LI>
<LI>
<A href="#LinkTarget_11182">F.13 Variant</A>
</LI>
<LI>
<A href="#LinkTarget_11191">F.14 Example (Informative)</A>
</LI>
<LI>
<A href="#LinkTarget_11319">F.15 UANodeSetChanges</A>
</LI>
<LI>
<A href="#LinkTarget_11476">F.16 NodesToAdd</A>
</LI>
<LI>
<A href="#LinkTarget_11520">F.17 ReferencesToChange</A>
</LI>
<LI>
<A href="#LinkTarget_11546">F.18 ReferenceToChange</A>
</LI>
<LI>
<A href="#LinkTarget_11601">F.19 NodesToDelete</A>
</LI>
<LI>
<A href="#LinkTarget_11629">F.20 NodeToDelete</A>
</LI>
<LI>
<A href="#LinkTarget_11665">F.21 UANodeSetChangesStatus</A>
</LI>
<LI>
<A href="#LinkTarget_11805">F.22 NodeSetStatusList</A>
</LI>
<LI>
<A href="#LinkTarget_11837">F.23 NodeSetStatus</A>
</LI>
</UL>
</LI>
</UL>
</HR>
<DIV class="Part" 

><P 

><FONT size="+1" color="#000000"></B> </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"> </P
><P 

> <DIV class="Sect" 
 Alt=""
>  F  O  U  N  D  A  T  I  O  N &reg; </DIV
></P
><FONT size="+1"> <P 

><FONT size="+3"><B>OPC Unified Architecture </P
><P 

>Specification </P
><P 

>Part 6:  Mappings </P
><P 

>Release 1.03 </P
><P 

>July 19th, 2015 </P
><P 

> </P
><P 

> </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"></B>Specification Type </P
></TD
><TD  
 valign="top"
><P 

>Industry Standard Specification </P
></TD
><TD  
 valign="top"
><P 

>Comments: </P
></TD
><TD  
 valign="top"
><P 

>Report or view errata: http://www.opcfoundation.org/errata </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Title: </P
></TD
><TD  
 valign="top"
><P 

>OPC Unified Architecture Mappings </P
></TD
><TD  
 valign="top"
><P 

>Date: </P
></TD
><TD  
 valign="top"
><P 

>July 19th, 2015 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Version: </P
></TD
><TD  
 valign="top"
><P 

>Release 1.03 </P
></TD
><TD  
 valign="top"
><P 

>Software </P
></TD
><TD  
 valign="top"
><P 

>MS-Word </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Source: </P
></TD
><TD  
 valign="top"
><P 

>OPC UA Part 6 - Mappings 1.03 Specification.docx </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Author: </P
></TD
><TD  
 valign="top"
><P 

>OPC Foundation </P
></TD
><TD  
 valign="top"
><P 

>Status: </P
></TD
><TD  
 valign="top"
><P 

>Release </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><DIV class="TOC" 

><FONT size="+1"> <DIV class="TOCI" 

><FONT size="+1">CONTENTS </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_2287" href="#">
<FONT size="+1"><B>FIGURES</B> ............................................................................................................................... iv</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_2429" href="#">
<FONT size="+1"><B>TABLES</B> ................................................................................................................................. iv</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4381" href="#">
<FONT size="+1">1<FONT size="+1"> <FONT size="+1">Scope ............................................................................................................................. 1</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4402" href="#">
<FONT size="+1">2<FONT size="+1"> <FONT size="+1">Normative references ...................................................................................................... 1</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4615" href="#">
<FONT size="+1">3<FONT size="+1"> <FONT size="+1">Terms, definitions and conventions ................................................................................. 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4616" href="#">
<FONT size="+1">3.1<FONT size="+1"> <FONT size="+1">Terms and definitions ............................................................................................. 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4675" href="#">
<FONT size="+1">3.2<FONT size="+1"> <FONT size="+1">Abbreviations and symbols ..................................................................................... 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4724" href="#">
<FONT size="+1">4<FONT size="+1"> <FONT size="+1">Overview ......................................................................................................................... 4</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4787" href="#">
<FONT size="+1">5<FONT size="+1"> <FONT size="+1">Data encoding ................................................................................................................. 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4788" href="#">
<FONT size="+1">5.1<FONT size="+1"> <FONT size="+1">General .................................................................................................................. 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ......................................................................................................... 5</DIV
></DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Built-in Types .................................................................................................. 5</DIV
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Guid ................................................................................................................ 6</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">ByteString ....................................................................................................... 6</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">ExtensionObject .............................................................................................. 7</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Variant ............................................................................................................ 7</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5096" href="#">
5.2<FONT size="+1"> <FONT size="+1">OPC UA Binary ...................................................................................................... 8</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">General ........................................................................................................... 8</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Built-in Types .................................................................................................. 8</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Enumerations ................................................................................................ 17</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Arrays ........................................................................................................... 17</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Structures ..................................................................................................... 17</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Structures with optional fields ....................................................................... 18</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Unions .......................................................................................................... 19</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Messages ..................................................................................................... 20</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6477" href="#">
5.3<FONT size="+1"> <FONT size="+1">XML ..................................................................................................................... 20</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Built-in Types ................................................................................................ 20</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Enumerations ................................................................................................ 26</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Arrays ........................................................................................................... 27</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Structures ..................................................................................................... 27</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Structures with optional fields ....................................................................... 27</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Unions .......................................................................................................... 28</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Messages ..................................................................................................... 28</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7063" href="#">
6<FONT size="+1"> <FONT size="+1">Message SecurityProtocols ........................................................................................... 28</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7064" href="#">
<FONT size="+1">6.1<FONT size="+1"> <FONT size="+1">Security handshake .............................................................................................. 28</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7201" href="#">
<FONT size="+1">6.2<FONT size="+1"> <FONT size="+1">Certificates ........................................................................................................... 30</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">General ......................................................................................................... 30</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Application Instance Certificate ..................................................................... 30</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Signed Software Certificate ........................................................................... 31</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7582" href="#">
6.3<FONT size="+1"> <FONT size="+1">Time synchronization ........................................................................................... 32</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7596" href="#">
<FONT size="+1">6.4<FONT size="+1"> <FONT size="+1">UTC and International Atomic Time (TAI) ............................................................. 32</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7598" href="#">
<FONT size="+1">6.5<FONT size="+1"> <FONT size="+1">Issued User Identity Tokens ................................................................................. 33</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Kerberos ....................................................................................................... 33</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7647" href="#">
6.6<FONT size="+1"> <FONT size="+1">WS Secure Conversation...................................................................................... 33</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7649" href="#">
<FONT size="+1">6.7<FONT size="+1"> <FONT size="+1">OPC UA Secure Conversation .............................................................................. 33</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 33</DIV
><DIV class="TOC" 

><FONT size="+1"> <DIV class="TOCI" 

> <FONT size="+1">MessageChunk<I> </I>structure ............................................................................... 33</DIV
></DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">MessageChunks and error handling .............................................................. 37</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Establishing a SecureChannel....................................................................... 37</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Deriving keys ................................................................................................ 39</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Verifying Message Security ........................................................................... 39</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8500" href="#">
7<FONT size="+1"> <FONT size="+1">Transport Protocols ....................................................................................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8501" href="#">
<FONT size="+1">7.1<FONT size="+1"> <FONT size="+1">OPC UA TCP ....................................................................................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 40</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Message structure......................................................................................... 40</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Establishing a connection ............................................................................. 43</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Closing a connection ..................................................................................... 44</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Error handling ............................................................................................... 44</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Error recovery ............................................................................................... 45</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9025" href="#">
7.2<FONT size="+1"> <FONT size="+1">SOAP/HTTP ......................................................................................................... 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9027" href="#">
<FONT size="+1">7.3<FONT size="+1"> <FONT size="+1">HTTPS ................................................................................................................. 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 46</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">XML Encoding ............................................................................................... 48</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">OPC UA Binary Encoding .............................................................................. 49</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9138" href="#">
7.4<FONT size="+1"> <FONT size="+1">Well known addresses .......................................................................................... 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9201" href="#">
<FONT size="+1">8<FONT size="+1"> <FONT size="+1">Normative Contracts ..................................................................................................... 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9202" href="#">
<FONT size="+1">8.1<FONT size="+1"> <FONT size="+1">OPC Binary Schema ............................................................................................. 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9209" href="#">
<FONT size="+1">8.2<FONT size="+1"> <FONT size="+1">XML Schema and WSDL ...................................................................................... 50</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9220" href="#">
<FONT size="+1">Annex A (normative)  Constants ........................................................................................... 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9222" href="#">
<FONT size="+1">A.1<FONT size="+1"> <FONT size="+1">Attribute Ids .......................................................................................................... 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9364" href="#">
<FONT size="+1">A.2<FONT size="+1"> <FONT size="+1">Status Codes ........................................................................................................ 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9385" href="#">
<FONT size="+1">A.3<FONT size="+1"> <FONT size="+1">Numeric Node Ids ................................................................................................. 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9420" href="#">
<FONT size="+1">Annex B (normative)  OPC UA Nodeset ................................................................................ 53</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9442" href="#">
<FONT size="+1">Annex C (normative)  Type declarations for the OPC UA native Mapping ............................. 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9462" href="#">
<FONT size="+1">Annex D (normative)  WSDL for the XML Mapping ............................................................... 55</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9464" href="#">
<FONT size="+1">D.1<FONT size="+1"> <FONT size="+1">XML Schema ........................................................................................................ 55</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9478" href="#">
<FONT size="+1">D.2<FONT size="+1"> <FONT size="+1">WDSL Port Types ................................................................................................. 55</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9503" href="#">
<FONT size="+1">D.3<FONT size="+1"> <FONT size="+1">WSDL Bindings .................................................................................................... 55</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9529" href="#">
<FONT size="+1">Annex E (normative)  Security settings management ............................................................ 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9531" href="#">
<FONT size="+1">E.1<FONT size="+1"> <FONT size="+1">Overview .............................................................................................................. 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9609" href="#">
<FONT size="+1">E.2<FONT size="+1"> <FONT size="+1">SecuredApplication .............................................................................................. 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9862" href="#">
<FONT size="+1">E.3<FONT size="+1"> <FONT size="+1">CertificateIdentifier ............................................................................................... 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10046" href="#">
<FONT size="+1">E.4<FONT size="+1"> <FONT size="+1">CertificateStoreIdentifier ....................................................................................... 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10101" href="#">
<FONT size="+1">E.5<FONT size="+1"> <FONT size="+1">CertificateList ....................................................................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10137" href="#">
<FONT size="+1">E.6<FONT size="+1"> <FONT size="+1">CertificateValidationOptions ................................................................................. 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10212" href="#">
<FONT size="+1">Annex F (normative)  Information Model XML Schema ......................................................... 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10214" href="#">
<FONT size="+1">F.1<FONT size="+1"> <FONT size="+1">Overview .............................................................................................................. 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10232" href="#">
<FONT size="+1">F.2<FONT size="+1"> <FONT size="+1">UANodeSet .......................................................................................................... 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10385" href="#">
<FONT size="+1">F.3<FONT size="+1"> <FONT size="+1">UANode ............................................................................................................... 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10516" href="#">
<FONT size="+1">F.4<FONT size="+1"> <FONT size="+1">Reference ............................................................................................................ 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10573" href="#">
<FONT size="+1">F.5<FONT size="+1"> <FONT size="+1">UAType ................................................................................................................ 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10637" href="#">
<FONT size="+1">F.6<FONT size="+1"> <FONT size="+1">UAInstance .......................................................................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10738" href="#">
<FONT size="+1">F.7<FONT size="+1"> <FONT size="+1">UAVariable ........................................................................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10845" href="#">
<FONT size="+1">F.8<FONT size="+1"> <FONT size="+1">UAMethod ............................................................................................................ 69</A>
<FONT size="+1"> </DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_10886" href="#">
<FONT size="+1">F.9<FONT size="+1"> <FONT size="+1">TranslationType ................................................................................................... 69</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10974" href="#">
<FONT size="+1">F.10<FONT size="+1"> <FONT size="+1">UADataType ......................................................................................................... 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11012" href="#">
<FONT size="+1">F.11<FONT size="+1"> <FONT size="+1">DataTypeDefinition ............................................................................................... 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11086" href="#">
<FONT size="+1">F.12<FONT size="+1"> <FONT size="+1">DataTypeField ...................................................................................................... 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11182" href="#">
<FONT size="+1">F.13<FONT size="+1"> <FONT size="+1">Variant ................................................................................................................. 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11191" href="#">
<FONT size="+1">F.14<FONT size="+1"> <FONT size="+1">Example (Informative) .......................................................................................... 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11319" href="#">
<FONT size="+1">F.15<FONT size="+1"> <FONT size="+1">UANodeSetChanges............................................................................................. 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11476" href="#">
<FONT size="+1">F.16<FONT size="+1"> <FONT size="+1">NodesToAdd ........................................................................................................ 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11520" href="#">
<FONT size="+1">F.17<FONT size="+1"> <FONT size="+1">ReferencesToChange ........................................................................................... 76</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11546" href="#">
<FONT size="+1">F.18<FONT size="+1"> <FONT size="+1">ReferenceToChange ............................................................................................ 76</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11601" href="#">
<FONT size="+1">F.19<FONT size="+1"> <FONT size="+1">NodesToDelete .................................................................................................... 76</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11629" href="#">
<FONT size="+1">F.20<FONT size="+1"> <FONT size="+1">NodeToDelete ...................................................................................................... 77</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11665" href="#">
<FONT size="+1">F.21<FONT size="+1"> <FONT size="+1">UANodeSetChangesStatus ................................................................................... 77</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11805" href="#">
<FONT size="+1">F.22<FONT size="+1"> <FONT size="+1">NodeSetStatusList ................................................................................................ 77</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11837" href="#">
<FONT size="+1">F.23<FONT size="+1"> <FONT size="+1">NodeSetStatus ..................................................................................................... 78</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1">  </DIV
></DIV
><H1 
 ID="LinkTarget_2287"
><B>FIGURES </H1
><DIV class="TOC" 

><DIV class="TOCI" 

></B> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4775" href="#">
Figure 1 &ndash; The OPC UA Stack Overview ................................................................................ 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5113" href="#">
<FONT size="+1">Figure 2 &ndash; Encoding Integers in a binary stream ..................................................................... 8</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5186" href="#">
<FONT size="+1">Figure 3 &ndash; Encoding Floating Points in a binary stream .......................................................... 9</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5203" href="#">
<FONT size="+1">Figure 4 &ndash; Encoding Strings in a binary stream ...................................................................... 9</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5258" href="#">
<FONT size="+1">Figure 5 &ndash; Encoding Guids in a binary stream ...................................................................... 10</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5287" href="#">
<FONT size="+1">Figure 6 &ndash; Encoding XmlElement in a binary stream ............................................................. 10</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5498" href="#">
<FONT size="+1">Figure 7 &ndash; A String NodeId ................................................................................................... 11</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5540" href="#">
<FONT size="+1">Figure 8 &ndash; A Two Byte NodeId .............................................................................................. 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5584" href="#">
<FONT size="+1">Figure 9 &ndash; A Four Byte NodeId ............................................................................................. 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7086" href="#">
<FONT size="+1">Figure 10 &ndash; Security handshake ........................................................................................... 29</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7666" href="#">
<FONT size="+1">Figure 11 &ndash; OPC UA Secure Conversation MessageChunk .................................................. 34</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8786" href="#">
<FONT size="+1">Figure 12 &ndash; OPC UA TCP Message structure ....................................................................... 43</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8801" href="#">
<FONT size="+1">Figure 13 &ndash; Establishing a OPC UA TCP connection ............................................................ 44</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8816" href="#">
<FONT size="+1">Figure 14 &ndash; Closing a OPC UA TCP connection ................................................................... 44</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9022" href="#">
<FONT size="+1">Figure 15 &ndash; Recovering an OPC UA TCP connection ............................................................ 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9062" href="#">
<FONT size="+1">Figure 16 &ndash; Scenarios for the HTTPS Transport ................................................................... 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1">  </DIV
></DIV
><H1 
 ID="LinkTarget_2429"
><B>TABLES </H1
><DIV class="TOC" 

><DIV class="TOCI" 

></B> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4798" href="#">
Table 1 &ndash; Built-in Data Types ................................................................................................. 6</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5032" href="#">
<FONT size="+1">Table 2 &ndash; Guid structure ......................................................................................................... 6</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5139" href="#">
<FONT size="+1">Table 3 &ndash; Supported Floating Point Types .............................................................................. 9</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5298" href="#">
<FONT size="+1">Table 4 &ndash; NodeId components .............................................................................................. 11</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5346" href="#">
<FONT size="+1">Table 5 &ndash; NodeId DataEncoding values ................................................................................ 11</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5438" href="#">
<FONT size="+1">Table 6 &ndash; Standard NodeId Binary DataEncoding ................................................................. 11</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5509" href="#">
<FONT size="+1">Table 7 &ndash; Two Byte NodeId Binary DataEncoding ................................................................. 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5548" href="#">
<FONT size="+1">Table 8 &ndash; Four Byte NodeId Binary DataEncoding ................................................................ 12</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_5607" href="#">
<FONT size="+1">Table 9 &ndash; ExpandedNodeId Binary DataEncoding ................................................................. 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5658" href="#">
<FONT size="+1">Table 10 &ndash; DiagnosticInfo Binary DataEncoding ................................................................... 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5785" href="#">
<FONT size="+1">Table 11 &ndash; QualifiedName Binary DataEncoding .................................................................. 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5821" href="#">
<FONT size="+1">Table 12 &ndash; LocalizedText Binary DataEncoding .................................................................... 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5881" href="#">
<FONT size="+1">Table 13 &ndash; Extension Object Binary DataEncoding ............................................................... 15</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5963" href="#">
<FONT size="+1">Table 14 &ndash; Variant Binary DataEncoding .............................................................................. 16</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6055" href="#">
<FONT size="+1">Table 15 &ndash; Data Value Binary DataEncoding ........................................................................ 17</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6204" href="#">
<FONT size="+1">Table 16 &ndash; Sample OPC UA Binary Encoded structure ......................................................... 18</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6318" href="#">
<FONT size="+1">Table 17 &ndash; Sample OPC UA Binary Encoded Structure with optional fields ........................... 19</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6412" href="#">
<FONT size="+1">Table 18 &ndash; Sample OPC UA Binary Encoded Structure ........................................................ 20</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6502" href="#">
<FONT size="+1">Table 17 &ndash; XML Data Type Mappings for Integers ................................................................ 21</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6567" href="#">
<FONT size="+1">Table 18 &ndash; XML Data Type Mappings for Floating Points ...................................................... 21</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6650" href="#">
<FONT size="+1">Table 19 &ndash; Components of NodeId ....................................................................................... 22</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6738" href="#">
<FONT size="+1">Table 20 &ndash; Components of ExpandedNodeId ........................................................................ 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6959" href="#">
<FONT size="+1">Table 21 &ndash; Components of Enumeration ............................................................................... 26</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7121" href="#">
<FONT size="+1">Table 22 &ndash; SecurityPolicy ..................................................................................................... 29</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7257" href="#">
<FONT size="+1">Table 23 &ndash; ApplicationInstanceCertificate ............................................................................. 31</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7431" href="#">
<FONT size="+1">Table 24 &ndash; SignedSoftwareCertificate................................................................................... 32</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7617" href="#">
<FONT size="+1">Table 25 &ndash; Kerberos UserTokenPolicy .................................................................................. 33</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7673" href="#">
<FONT size="+1">Table 26 &ndash; OPC UA Secure Conversation<I> </I>Message header .................................................. 34</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7754" href="#">
<FONT size="+1">Table 27 &ndash; Asymmetric algorithm Security header ................................................................ 35</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7882" href="#">
<FONT size="+1">Table 28 &ndash; Symmetric algorithm Security header .................................................................. 36</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7908" href="#">
<FONT size="+1">Table 29 &ndash; Sequence header ................................................................................................ 36</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7952" href="#">
<FONT size="+1">Table 30 &ndash; OPC UA Secure Conversation<I> </I>Message footer ................................................... 36</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8036" href="#">
<FONT size="+1">Table 31 &ndash; OPC UA Secure Conversation<I> </I>Message abort body ............................................ 37</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8103" href="#">
<FONT size="+1">Table 32 &ndash; OPC UA Secure Conversation OpenSecureChannel Service ............................... 38</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8307" href="#">
<FONT size="+1">Table 33 &ndash; Cryptography key generation parameters ............................................................ 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8512" href="#">
<FONT size="+1">Table 34 &ndash; OPC UA TCP<I> </I>Message header ........................................................................... 41</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8566" href="#">
<FONT size="+1">Table 35 &ndash; OPC UA TCP<I> </I>Hello Message .............................................................................. 41</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8655" href="#">
<FONT size="+1">Table 36 &ndash; OPC UA TCP<I> </I>Acknowledge Message.................................................................. 42</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8735" href="#">
<FONT size="+1">Table 37 &ndash; OPC UA TCP<I> </I>Error Message .............................................................................. 42</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8834" href="#">
<FONT size="+1">Table 38 &ndash; OPC UA TCP<I> </I>error codes ................................................................................... 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9149" href="#">
<FONT size="+1">Table 39 &ndash; Well known addresses for Local Discovery Servers............................................. 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9223" href="#">
<FONT size="+1">Table A.1 &ndash; Identifiers assigned to Attributes ....................................................................... 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9621" href="#">
<FONT size="+1">Table E.1 &ndash; SecuredApplication............................................................................................ 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9872" href="#">
<FONT size="+1">Table E.2 &ndash; CertificateIdentifier ............................................................................................ 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10004" href="#">
<FONT size="+1">Table E.3 &ndash; Structured directory store .................................................................................. 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10054" href="#">
<FONT size="+1">Table E.4 &ndash; CertificateStoreIdentfier..................................................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10109" href="#">
<FONT size="+1">Table E.5 &ndash; CertificateList .................................................................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10146" href="#">
<FONT size="+1">Table E.6 &ndash; CertificateValidationOptions .............................................................................. 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10241" href="#">
<FONT size="+1">Table F.1 &ndash; UANodeSet........................................................................................................ 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10397" href="#">
<FONT size="+1">Table F.2 &ndash; UANode ............................................................................................................. 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10524" href="#">
<FONT size="+1">Table F.3 &ndash; Reference .......................................................................................................... 68</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_10585" href="#">
<FONT size="+1">Table F.4 &ndash; UANodeSet Type Nodes .................................................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10658" href="#">
<FONT size="+1">Table F.5 &ndash; UANodeSet Instance Nodes .............................................................................. 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10711" href="#">
<FONT size="+1">Table F.6 &ndash; UAInstance ........................................................................................................ 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10746" href="#">
<FONT size="+1">Table F.7 &ndash; UAVariable ........................................................................................................ 69</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10857" href="#">
<FONT size="+1">Table F.8 &ndash; UAMethod ......................................................................................................... 69</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10927" href="#">
<FONT size="+1">Table F.9 &ndash; TranslationType ................................................................................................. 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10986" href="#">
<FONT size="+1">Table F.10 &ndash; UADataType .................................................................................................... 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11021" href="#">
<FONT size="+1">Table F.11 &ndash; DataTypeDefinition .......................................................................................... 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11095" href="#">
<FONT size="+1">Table F.12 &ndash; DataTypeField ................................................................................................. 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11333" href="#">
<FONT size="+1">Table F.13 &ndash; UANodeSetChanges ........................................................................................ 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11491" href="#">
<FONT size="+1">Table F.14 &ndash; NodesToAdd .................................................................................................... 76</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11529" href="#">
<FONT size="+1">Table F.15 &ndash; ReferencesToChange ...................................................................................... 76</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11556" href="#">
<FONT size="+1">Table F.16 &ndash; ReferencesToChange ...................................................................................... 76</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11610" href="#">
<FONT size="+1">Table F.17 &ndash; NodesToDelete ................................................................................................ 77</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11638" href="#">
<FONT size="+1">Table F.18 &ndash; ReferencesToChange ...................................................................................... 77</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11674" href="#">
<FONT size="+1">Table F.19 &ndash; UANodeSetChangesStatus .............................................................................. 77</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11817" href="#">
<FONT size="+1">Table F.20 &ndash; NodeSetStatusList ........................................................................................... 78</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11846" href="#">
<FONT size="+1">Table F.21 &ndash; NodeSetStatus ................................................................................................ 78</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1"> </DIV
></DIV
><P 

><FONT size="+1"><B>OPC FOUNDATION </P
><P 

><FONT size="+1"></B>____________ </P
><P 

><FONT size="+1"><B> </P
><P 

>UNIFIED ARCHITECTURE &ndash;  </P
><P 

><FONT size="+1">FOREWORD </P
><P 

><FONT size="+1"></B>This specification is the specification for developers of OPC UA applications. The specification is a result of an analysis and design process to develop a standard interface to facilitate the development of applications by multiple vendors that shall inter-operate seamlessly together.  </P
><P 

><B>Copyright &copy; 2006-2015, OPC Foundation, Inc. </P
><P 

><FONT size="+1">AGREEMENT OF USE </P
><P 

><FONT size="+1"></B>COPYRIGHT RESTRICTIONS </P
><P 

>Any unauthorized use of this specification may violate copyright laws, trademark laws, and communications regulations and statutes. This document contains information which is protected by copyright. All Rights Reserved. No part of this work covered by copyright herein may be reproduced or used in any form or by any means--graphic, electronic, or mechanical, including photocopying, recording, taping, or information storage and retrieval systems--without permission of the copyright owner. </P
><P 

>OPC Foundation members and non-members are prohibited from copying and redistributing this specification. All copies must be obtained on an individual basis, directly from the OPC Foundation Web site <FONT size="+1">H<A href="http://www.opcfoundation.org/">
TU<FONT size="+1">http://www.opcfoundation.org<FONT size="+1">UT</A>
H<FONT size="+1">. </P
><P 

>PATENTS </P
><P 

>The attention of adopters is directed to the possibility that compliance with or adoption of OPC specifications may require use of an invention covered by patent rights. OPC shall not be responsible for identifying patents for which a license may be required by any OPC specification, or for conducting legal inquiries into the legal validity or scope of those patents that are brought to its attention. OPC specifications are prospective and advisory only. Prospective users are responsible for protecting themselves against liability for infringement of patents. </P
><P 

>WARRANTY AND LIABILITY DISCLAIMERS </P
><P 

>WHILE THIS PUBLICATION IS BELIEVED TO BE ACCURATE, IT IS PROVIDED &quot;AS IS&quot; AND MAY CONTAIN ERRORS OR MISPRINTS. THE OPC FOUDATION MAKES NO WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, WITH REGARD TO THIS PUBLICATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTY OF TITLE OR OWNERSHIP, IMPLIED WARRANTY OF MERCHANTABILITY OR WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE OR USE. IN NO EVENT SHALL THE OPC FOUNDATION BE LIABLE FOR ERRORS CONTAINED HEREIN OR FOR DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, RELIANCE OR COVER DAMAGES, INCLUDING LOSS OF PROFITS, REVENUE, DATA OR USE, INCURRED BY ANY USER OR ANY THIRD PARTY IN CONNECTION WITH THE FURNISHING, PERFORMANCE, OR USE OF THIS MATERIAL, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. </P
><P 

>The entire risk as to the quality and performance of software developed using this specification is borne by you.  </P
><P 

>RESTRICTED RIGHTS LEGEND </P
><P 

>This Specification is provided with Restricted Rights. Use, duplication or disclosure by the U.S. government is subject to restrictions as set forth in (a) this Agreement pursuant to DFARs 227.7202-3(a); (b) subparagraph (c)(1)(i) of the Rights in Technical Data and Computer Software clause at DFARs 252.227-7013; or (c) the Commercial Computer Software Restricted Rights clause at FAR 52.227-19 subdivision (c)(1) and (2), as applicable. Contractor / manufacturer are the OPC Foundation,. 16101 N. 82nd Street, Suite 3B, Scottsdale, AZ, 85260-1830 </P
><P 

>COMPLIANCE </P
><P 

>The OPC Foundation shall at all times be the sole entity that may authorize developers, suppliers and sellers of hardware and software to use certification marks, trademarks or other special designations to indicate compliance with these materials. Products developed using this specification may claim compliance or conformance with this specification if and only if the software satisfactorily meets the certification requirements set by the OPC Foundation. Products that do not meet these requirements may claim only that the product was based on this specification and must not claim compliance or conformance with this specification.  </P
><P 

>TRADEMARKS </P
><P 

>Most computer and software brand names have trademarks or registered trademarks. The individual trademarks have not been listed here. </P
><P 

>GENERAL PROVISIONS </P
><P 

>Should any provision of this Agreement be held to be void, invalid, unenforceable or illegal by a court, the validity and enforceability of the other provisions shall not be affected thereby.  </P
><P 

>This Agreement shall be governed by and construed under the laws of the State of Minnesota, excluding its choice or law rules. </P
><P 

>This Agreement embodies the entire understanding between the parties with respect to, and supersedes any prior understanding or agreement (oral or written) relating to, this specification.  </P
><P 

>ISSUE REPORTING </P
><P 

>The OPC Foundation strives to maintain the highest quality standards for its published specifications, hence they undergo constant review and refinement. Readers are encouraged to report any issues and view any existing errata here: <FONT size="+1">H<A href="http://www.opcfoundation.org/errata">
TU<FONT size="+1">http://www.opcfoundation.org/errata<FONT size="+1">UT</A>
H </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Revision 1.03 Highlights </P
><P 

></B>The following table includes the Mantis issues resolved with this revision.  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Mantis ID </P
></TH
><TH 
 valign="top"
><P 

>Summary </P
></TH
><TH 
 valign="top"
><P 

>Resolution </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2270">
<FONT color="#0000FF"></B>2270</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>5.1.6 Variant: Clarfication of handling NULL values. </P
></TD
><TD  
 valign="top"
><P 

>Updated clauses <A href="#LinkTarget_5087" href="#">
5.1.6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2277">
<FONT color="#0000FF">2277</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>URI syntax requirements not clear and tested. </P
></TD
><TD  
 valign="top"
><P 

>Updated <I>applicationUri</I> description in <A href="#LinkTarget_7257" href="#">
Table 23</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2295">
<FONT color="#0000FF">2295</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Handling/Replacing of NaN with NaN should cause DataChange notifications. </P
></TD
><TD  
 valign="top"
><P 

>Added statement to <A href="#LinkTarget_5116" href="#">
5.2.2.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2296">
<FONT color="#0000FF">2296</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>XmlElement parsing errors result in a rejected message. </P
></TD
><TD  
 valign="top"
><P 

>Updated clauses <A href="#LinkTarget_5264" href="#">
5.2.2.8</A>
 and <A href="#LinkTarget_5871" href="#">
5.2.2.15</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2487">
<FONT color="#0000FF">2487</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Add Support for Batch Node Add/Delete Operations to UANodeSet Schema. </P
></TD
><TD  
 valign="top"
><P 

>Added Sections <A href="#LinkTarget_11319" href="#">
F.15</A>
 through <A href="#LinkTarget_11837" href="#">
F.23</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2523">
<FONT color="#0000FF">2523</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>SecuredApplication Schema documentation improvements. </P
></TD
><TD  
 valign="top"
><P 

>Updated text in <A href="#LinkTarget_9609" href="#">
E.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2668">
<FONT color="#0000FF">2668</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Bad_TcpUrlRejected vs Bad_TcpEndpointUrlInvalid. </P
></TD
><TD  
 valign="top"
><P 

>Changed text to TcpEndpointUrlInvalid in <A href="#LinkTarget_8505" href="#">
7.1.2</A>
 and <A href="#LinkTarget_8820" href="#">
7.1.5</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2705">
<FONT color="#0000FF">2705</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>DataTypeDefinition: Inconsitency of table and example. </P
></TD
><TD  
 valign="top"
><P 

>Fixed example in <A href="#LinkTarget_11191" href="#">
F.14</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2712">
<FONT color="#0000FF">2712</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>NodeSet2 is missing references. </P
></TD
><TD  
 valign="top"
><P 

>Added text to explain what to do with reverse references in <A href="#LinkTarget_10385" href="#">
F.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2725">
<FONT color="#0000FF">2725</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Add support for Unions. </P
></TD
><TD  
 valign="top"
><P 

>Added clauses <A href="#LinkTarget_6387" href="#">
5.2.7</A>
 and <A href="#LinkTarget_7046" href="#">
5.3.6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2726">
<FONT color="#0000FF">2726</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Add support for optional fields in structures. </P
></TD
><TD  
 valign="top"
><P 

>Added clauses <A href="#LinkTarget_6299" href="#">
5.2.6</A>
 and <A href="#LinkTarget_7029" href="#">
5.3.5</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2741">
<FONT color="#0000FF">2741</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Add optional version field into the namespace table in the UANodeSet </P
></TD
><TD  
 valign="top"
><P 

>Added MinimumVersions, Version and LastModified to <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2766">
<FONT color="#0000FF">2766</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Grouping information necessary in UANodeSet. </P
></TD
><TD  
 valign="top"
><P 

>Added Category element to Table F.2. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2768">
<FONT color="#0000FF">2768</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Difference for latest time between encodings. </P
></TD
><TD  
 valign="top"
><P 

>Updated MaxDate in <A href="#LinkTarget_5206" href="#">
5.2.2.5</A>
 and <A href="#LinkTarget_6591" href="#">
5.3.1.6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2774">
<FONT color="#0000FF">2774</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>The specification should explicitly state that encryption is required for OpenSecureChannel. </P
></TD
><TD  
 valign="top"
><P 

>Added clarification to <A href="#LinkTarget_8072" href="#">
6.7.4</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2785">
<FONT color="#0000FF">2785</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>base64 encoding for DataTypeDescription needs to be accurately documented. </P
></TD
><TD  
 valign="top"
><P 

>Clarified example in <A href="#LinkTarget_11191" href="#">
F.14</A>
. </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Mantis ID </P
></TH
><TH 
 valign="top"
><P 

>Summary </P
></TH
><TH 
 valign="top"
><P 

>Resolution </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2787">
<FONT color="#0000FF"></B>2787</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Incorrect reference in Part 6 Table 13. </P
></TD
><TD  
 valign="top"
><P 

>Fixed reference in <A href="#LinkTarget_5881" href="#">
Table 13</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2800">
<FONT color="#0000FF">2800</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Typos in Data Type table. </P
></TD
><TD  
 valign="top"
><P 

>Updated <A href="#LinkTarget_4798" href="#">
Table 1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2813">
<FONT color="#0000FF">2813</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo (Table 10) in Part 6 has different order of parameters than Part 4 and also different than the XSD. </P
></TD
><TD  
 valign="top"
><P 

>Updated <A href="#LinkTarget_5658" href="#">
Table 10</A>
 and <A href="#LinkTarget_6822" href="#">
5.3.1.13</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2814">
<FONT color="#0000FF">2814</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Add documentation tag to UANodeSet schema. </P
></TD
><TD  
 valign="top"
><P 

>Added Documentation element to <A href="#LinkTarget_10397" href="#">
Table F.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2814">
<FONT color="#0000FF">2819</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Improve description of the matrix dimensions array. </P
></TD
><TD  
 valign="top"
><P 

>Added text to <A href="#LinkTarget_5954" href="#">
5.2.2.16</A>
 and <A href="#LinkTarget_6875" href="#">
5.3.1.17</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2896">
<FONT color="#0000FF">2896</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Security Handshake - Figure 10 &ndash; Security Handshake Sequence graph need clarification. </P
></TD
><TD  
 valign="top"
><P 

>Fixed <A href="#LinkTarget_7086" href="#">
Figure 10</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2910">
<FONT color="#0000FF">2910</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Table 23 - Application Instance Certificate restricts use of IP Address. </P
></TD
><TD  
 valign="top"
><P 

>Fixed text in <A href="#LinkTarget_7257" href="#">
Table 23</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2913">
<FONT color="#0000FF">2913</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Deprecate all text related to WS secure conversation. </P
></TD
><TD  
 valign="top"
><P 

>Depreciated <A href="#LinkTarget_7647" href="#">
6.6</A>
 and <A href="#LinkTarget_9025" href="#">
7.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2923">
<FONT color="#0000FF">2923</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Annex F Information Model XML Schema &ndash;F.3 UANode &ndash; does not provide definition what kind of references must be added to UANode. </P
></TD
><TD  
 valign="top"
><P 

>Added text to <A href="#LinkTarget_10385" href="#">
F.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=3021">
<FONT color="#0000FF">3021</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Security Profiles should state that X509 hashes weaker than the profile requires SHALL be rejected. </P
></TD
><TD  
 valign="top"
><P 

>Added CertificateSignatureAlgorithm to <A href="#LinkTarget_7121" href="#">
Table 22</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=3039">
<FONT color="#0000FF">3039</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Limit depth of recursion for variant arrays and diagnosticInfo. </P
></TD
><TD  
 valign="top"
><P 

>Added requirement to <A href="#LinkTarget_5077" href="#">
5.1.5</A>
, <A href="#LinkTarget_5087" href="#">
5.1.6</A>
 and <A href="#LinkTarget_5644" href="#">
5.2.2.12</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=3069">
<FONT color="#0000FF">3069</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>XML Union + Optional Structure mappings lose information. </P
></TD
><TD  
 valign="top"
><P 

>Changed schema in <A href="#LinkTarget_6299" href="#">
5.2.6</A>
 and <A href="#LinkTarget_6387" href="#">
5.2.7</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=3103">
<FONT color="#0000FF">3103</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Remove relation from Messages to ExtensionObjects from binary encoding description. </P
></TD
><TD  
 valign="top"
><P 

>Updated <A href="#LinkTarget_6465" href="#">
5.2.8</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=3104">
<FONT color="#0000FF">3104</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Explicitly allow -1 for lengths in Asymmetric Algorithm Security Header. </P
></TD
><TD  
 valign="top"
><P 

>Updated <A href="#LinkTarget_7754" href="#">
Table 27</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

> </P
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><P 

><FONT size="+1"><B>OPC Unified Architecture Specification </P
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><P 

> </P
><P 

>Part 6: Mappings </P
><P 

> </P
><P 

> </P
><P 

> </P
><H1 
 ID="LinkTarget_4381"
><FONT size="+1">1 Scope </H1
><P 

><FONT size="+1"></B>This part specifies the OPC Unified Architecture (OPC UA) mapping between the security model described in <A href="#LinkTarget_4405" href="#">
Part 2</A>
, the abstract service definitions, described in <A href="#LinkTarget_4407" href="#">
Part 4</A>
, the data structures defined in <A href="#LinkTarget_4408" href="#">
Part 5</A>
 and the physical network protocols that can be used to implement the OPC UA specification. </P
><H1 
 ID="LinkTarget_4402"
><FONT size="+1"><B>2 Normative references </H1
><P 

><FONT size="+1"></B>The following documents, in whole or in part, are normatively referenced in this document and are indispensable for its application. For dated references, only the edition cited applies. For undated references, the latest edition of the referenced document (including any amendments) applies. </P
><P 

>Part 1: OPC UA Specification: Part 1 &ndash; Overview and Concepts  </P
><P 

>Part 2: OPC UA Specification: Part 2 &ndash; Security Model  </P
><P 

>Part 3: OPC UA Specification: Part 3 &ndash; Address Space Model  </P
><P 

>Part 4: OPC UA Specification: Part 4 &ndash; Services  </P
><P 

>Part 5: OPC UA Specification: Part 5 &ndash; Information Model  </P
><P 

>Part 7: OPC UA Specification: Part 7 &ndash; Profiles  </P
><P 

>XML Schema Part 1: XML Schema Part 1: Structures </P
><P 

><A href="http://www.w3.org/TR/xmlschema-1/">
<FONT color="#0000FF">http://www.w3.org/TR/xmlschema-1/</A>
<FONT color="#000000"> </P
><P 

>XML Schema Part 2: XML Schema Part 2: Datatypes </P
><P 

><A href="http://www.w3.org/TR/xmlschema-2/">
<FONT color="#0000FF">http://www.w3.org/TR/xmlschema-2/</A>
<FONT color="#000000"> </P
><P 

>SOAP Part 1: SOAP Version 1.2 Part 1: Messaging Framework </P
><P 

><A href="http://www.w3.org/TR/soap12-part1/">
<FONT color="#0000FF">http://www.w3.org/TR/soap12-part1/</A>
<FONT color="#000000"> </P
><P 

>SOAP Part 2: SOAP Version 1.2 Part 2: Adjuncts </P
><P 

><A href="http://www.w3.org/TR/soap12-part2/">
<FONT color="#0000FF">http://www.w3.org/TR/soap12-part2/</A>
<FONT color="#000000"> </P
><P 

>XML Encryption: XML Encryption Syntax and Processing </P
><P 

><A href="http://www.w3.org/TR/xmlenc-core/">
<FONT color="#0000FF">http://www.w3.org/TR/xmlenc-core/</A>
<FONT color="#000000"> </P
><P 

>XML Signature: XML-Signature Syntax and Processing </P
><P 

><A href="http://www.w3.org/TR/xmldsig-core/">
<FONT color="#0000FF">http://www.w3.org/TR/xmldsig-core/</A>
<FONT color="#000000"> </P
><P 

>WS Security: SOAP Message Security 1.1 </P
><P 

><A href="http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf">
<FONT color="#0000FF">http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf</A>
<FONT color="#000000"> </P
><P 

>WS Addressing: Web Services Addressing (WS-Addressing) </P
><P 

><A href="http://www.w3.org/Submission/ws-addressing/">
<FONT color="#0000FF">http://www.w3.org/Submission/ws-addressing/</A>
<FONT color="#000000"> </P
><P 

>WS Trust: WS Trust 1.3 </P
><P 

><A href="http://docs.oasis-open.org/ws-sx/ws-trust/v1.3/ws-trust.html">
<FONT color="#0000FF">http://docs.oasis-open.org/ws-sx/ws-trust/v1.3/ws-trust.html</A>
<FONT color="#000000"> </P
><P 

>WS Secure Conversation: WS Secure Conversation 1.3 </P
><P 

><A href="http://docs.oasis-open.org/ws-sx/ws-secureconversation/v1.3/ws-secureconversation.html">
<FONT color="#0000FF">http://docs.oasis-open.org/ws-sx/ws-secureconversation/v1.3/ws-secureconversation.html</A>
<FONT color="#000000"> </P
><P 

>WS Security Policy: WS Security Policy 1.2 </P
><P 

><A href="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/ws-securitypolicy-1.2-spec-os.html">
<FONT color="#0000FF">http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/ws-securitypolicy-1.2-spec-os.html</A>
<FONT color="#000000"> </P
><P 

>SSL/TLS: RFC 5246 &ndash; The TLS Protocol Version 1.2 </P
><P 

><A href="http://tools.ietf.org/html/rfc5246.txt">
<FONT color="#0000FF">http://tools.ietf.org/html/rfc5246.txt</A>
<FONT color="#000000"> </P
><P 

>X509: X.509 Public Key Certificate Infrastructure </P
><P 

><A href="http://www.itu.int/rec/T-REC-X.509-200003-I/e">
<FONT color="#0000FF">http://www.itu.int/rec/T-REC-X.509-200003-I/e</A>
<FONT color="#000000"> </P
><P 

>WS-I Basic Profile 1.1: WS-I Basic Profile Version 1.1 </P
><P 

><A href="http://www.ws-i.org/Profiles/BasicProfile-1.1.html">
<FONT color="#0000FF">http://www.ws-i.org/Profiles/BasicProfile-1.1.html</A>
<FONT color="#000000"> </P
><P 

>WS-I Basic Security Profile 1.1: WS-I Basic Security Profile Version 1.1 </P
><P 

><A href="http://www.ws-i.org/Profiles/BasicSecurityProfile-1.1.html">
<FONT color="#0000FF">http://www.ws-i.org/Profiles/BasicSecurityProfile-1.1.html</A>
<FONT color="#000000"> </P
><P 

>HTTP: RFC 2616 &ndash; Hypertext Transfer Protocol &ndash; HTTP/1.1 </P
><P 

><A href="http://www.ietf.org/rfc/rfc2616.txt">
<FONT color="#0000FF">http://www.ietf.org/rfc/rfc2616.txt</A>
<FONT color="#000000"> </P
><P 

>HTTPS: RFC 2818 &ndash; HTTP Over TLS </P
><P 

><A href="http://www.ietf.org/rfc/rfc2818.txt">
<FONT color="#0000FF">http://www.ietf.org/rfc/rfc2818.txt</A>
<FONT color="#000000"> </P
><P 

>Base64: RFC 3548 &ndash; The Base16, Base32, and Base64 Data Encodings </P
><P 

><A href="http://www.ietf.org/rfc/rfc3548.txt">
<FONT color="#0000FF">http://www.ietf.org/rfc/rfc3548.txt</A>
<FONT color="#000000"> </P
><P 

>X690: ITU-T X.690 &ndash; Basic (BER), Canonical (CER) and  Distinguished (DER) Encoding Rules </P
><P 

><A href="http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf">
<FONT color="#0000FF">http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf</A>
<FONT color="#000000"> </P
><P 

>X200 : ITU-T X.200 &ndash; Open Systems Interconnection &ndash; Basic Reference Model </P
><P 

><A href="http://www.itu.int/rec/T-REC-X.200-199407-I/en">
<FONT color="#0000FF">http://www.itu.int/rec/T-REC-X.200-199407-I/en</A>
<FONT color="#000000"> </P
><P 

>IEEE-754: Standard for Binary Floating-Point Arithmetic </P
><P 

><A href="http://grouper.ieee.org/groups/754/">
<FONT color="#0000FF">http://grouper.ieee.org/groups/754/</A>
<FONT color="#000000"> </P
><P 

>HMAC: HMAC &ndash; Keyed-Hashing for Message Authentication </P
><P 

><A href="http://www.ietf.org/rfc/rfc2104.txt">
<FONT color="#0000FF">http://www.ietf.org/rfc/rfc2104.txt</A>
<FONT color="#000000"> </P
><P 

>PKCS #1: PKCS #1 &ndash; RSA Cryptography Specifications Version 2.0 </P
><P 

><A href="http://www.ietf.org/rfc/rfc2437.txt">
<FONT color="#0000FF">http://www.ietf.org/rfc/rfc2437.txt</A>
<FONT color="#000000"> </P
><P 

>PKCS #12 : PKCS 12 v1.0: Personal Information Exchange Syntax </P
><P 

><A href="ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12v1.pdf">
<FONT color="#0000FF">ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12v1.pdf</A>
<FONT color="#000000"> </P
><P 

> </P
><P 

>FIPS 180-2: Secure Hash Standard (SHA) </P
><P 

><A href="http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf">
<FONT color="#0000FF">http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf</A>
<FONT color="#000000"> </P
><P 

> </P
><P 

>FIPS 197: Advanced Encyption Standard (AES) </P
><P 

><A href="http://www.csrc.nist.gov/publications/fips/fips197/fips-197.pdf">
<FONT color="#0000FF">http://www.csrc.nist.gov/publications/fips/fips197/fips-197.pdf</A>
<FONT color="#000000"> </P
><P 

> </P
><P 

>UTF8: UTF-8, a transformation format of ISO 10646 </P
><P 

><A href="http://tools.ietf.org/html/rfc3629">
<FONT color="#0000FF">http://tools.ietf.org/html/rfc3629</A>
<FONT color="#000000"> </P
><P 

>RFC 3280: RFC 3280 &ndash; X.509 Public Key Infrastructure Certificate and CRL Profile </P
><P 

><A href="http://www.ietf.org/rfc/rfc3280.txt">
<FONT color="#0000FF">http://www.ietf.org/rfc/rfc3280.txt</A>
<FONT color="#000000"> </P
><P 

>RFC 4514: RFC 4514 &ndash; LDAP: String Representation of Distinguished Names </P
><P 

><A href="http://www.ietf.org/rfc/rfc4514.txt">
<FONT color="#0000FF">http://www.ietf.org/rfc/rfc4514.txt</A>
<FONT color="#000000">  </P
><P 

>NTP: RFC 1305 &ndash; Network Time Protocol (Version 3) </P
><P 

><A href="http://www.ietf.org/rfc/rfc1305.txt">
<FONT color="#0000FF">http://www.ietf.org/rfc/rfc1305.txt</A>
<FONT color="#000000"> </P
><P 

>Kerberos: WS Security Kerberos Token Profile 1.1 </P
><P 

><A href="http://docs.oasis-open.org/wss/v1.1/wss-v1.1-spec-os-KerberosTokenProfile.pdf">
<FONT color="#0000FF">http://docs.oasis-open.org/wss/v1.1/wss-v1.1-spec-os-KerberosTokenProfile.pdf</A>
 </P
><P 

><FONT color="#000000">RFC1738: RFC 1738 - Uniform Resource Locators (URL) </P
><P 

><A href="http://www.ietf.org/rfc/rfc1738.txt">
<FONT color="#0000FF">http://www.ietf.org/rfc/rfc1738.txt</A>
<FONT color="#000000"> </P
><P 

>RFC2141: RFC 2141 - URN Syntax </P
><P 

><A href="http://www.ietf.org/rfc/rfc2141.txt">
<FONT color="#0000FF">http://www.ietf.org/rfc/rfc2141.txt</A>
<FONT color="#000000"> </P
><H1 
 ID="LinkTarget_4615"
><FONT size="+1"><B>3 Terms, definitions and conventions </H1
><H2 
 ID="LinkTarget_4616"
><FONT size="+1">3.1 Terms and definitions </H2
><P 

></B>For the purposes of this document the terms and definitions given in <A href="#LinkTarget_4404" href="#">
Part 1</A>
, <A href="#LinkTarget_4405" href="#">
Part 2</A>
 and <A href="#LinkTarget_4406" href="#">
Part 3</A>
 as well as the following apply. </P
><DL 

><DL 

><DL 

><DD 

><B>  </DD
></DL
></DL
></DL
><P 

>DataEncoding </P
><P 

></B>a way to serialize OPC UA <I>Messages</I> and data structures. </P
><DL 

><DL 

><DL 

><DD 

><B>  </DD
></DL
></DL
></DL
><P 

>Mapping </P
><P 

></B>specifies how to implement an OPC UA feature with a specific technology. </P
><P 

><FONT size="+1">Note 1 to entry: For example, the OPC UA Binary Encoding is a <I>Mapping</I> that specifies how to serialize OPC UA data structures as sequences of bytes.  </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Relay </P
><P 

></B>is a intermediary that routes OPC UA <I>Messages</I> between OPC UA applications connect to it. </P
><DL 

><DL 

><DL 

><DD 

><B>  </DD
></DL
></DL
></DL
><P 

>Security Protocol </P
><P 

></B>ensures the integrity and privacy of UA <I>Messages</I> that are exchanged between OPC UA applications </P
><DL 

><DL 

><DL 

><DD 

><B>  </DD
></DL
></DL
></DL
><P 

>Stack Profile </P
><P 

></B>a combination of <I>DataEncodings, SecurityProtocol</I> and <I>TransportProtocol Mappings</I> </P
><P 

><FONT size="+1">Note 1 to entry: OPC UA applications implement one or more <I>StackProfiles</I> and can only communicate with OPC UA applications that support a <I>StackProfile</I> that they support.  </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Transport Protocol </P
><P 

></B>a way to exchange serialized OPC UA <I>Messages</I> between OPC UA applications </P
><H2 
 ID="LinkTarget_4675"
><B>3.2 Abbreviations and symbols </H2
><P 

></B>API Application Programming Interface </P
><P 

>ASN.1 Abstract Syntax Notation #1 (used in <A href="#LinkTarget_4521" href="#">
X690</A>
) </P
><P 

>BP WS-I Basic Profile Version </P
><P 

>BSP WS-I Basic Security Profile </P
><P 

>CSV Comma Separated Value (File Format) </P
><P 

>HTTP Hypertext Transfer Protocol  </P
><P 

>HTTPS Secure Hypertext Transfer Protocol </P
><P 

>IPSec Internet Protocol Security </P
><P 

>RST Request Security Token </P
><P 

>OID Object Identifier (used with ASN.1) </P
><P 

>RSTR Request Security Token Response </P
><P 

>SCT Security Context Token </P
><P 

>SHA1 Secure Hash Algorithm </P
><P 

>SOAP Simple Object Access Protocol </P
><P 

>SSL Secure Sockets Layer (Defined in <A href="#LinkTarget_4479" href="#">
SSL/TLS</A>
) </P
><P 

>TCP Transmission Control Protocol </P
><P 

>TLS Transport Layer Security (Defined in <A href="#LinkTarget_4479" href="#">
SSL/TLS</A>
) </P
><P 

>UTF8 Unicode Transformation Format (8-bit) (Defined in <A href="#LinkTarget_4572" href="#">
UTF8</A>
) </P
><P 

>UA Unified Architecture </P
><P 

>UASC OPC UA Secure Conversation </P
><P 

>WS-* XML Web Services Specifications </P
><P 

>WSS WS Security </P
><P 

>WS-SC WS Secure Conversation </P
><P 

>XML Extensible Markup Language </P
><H1 
 ID="LinkTarget_4724"
><FONT size="+1"><B>4 Overview </H1
><P 

><FONT size="+1"></B>Other parts of this series of standards are written to be independent of the technology used for implementation. This approach means OPC UA is a flexible specification that will continue to be applicable as technology evolves. On the other hand, this approach means that it is not possible to build an OPC UA <I>Application</I> with the information contained in <A href="#LinkTarget_4404" href="#">
Part 1</A>
 through to <A href="#LinkTarget_4408" href="#">
Part 5</A>
 because important implementation details have been left out. </P
><P 

>This standard defines <I>Mappings</I> between the abstract specifications and technologies that can be used to implement them. The <I>Mappings</I> are organized into three groups: <I>DataEncodings, SecurityProtocols </I>and<I> TransportProtocols</I>. Different <I>Mappings</I> are combined together to create <I>StackProfiles</I>. All OPC UA <I>Applications</I> shall implement at least one <I>StackProfile </I>and can only communicate with other OPC UA <I>Applications</I> that implement the same <I>StackProfile. </I></P
><P 

>This standard defines the <I>DataEncodings</I> in Clause <A href="#LinkTarget_4787" href="#">
5</A>
, the <I>SecurityProtocols</I> in Clause <A href="#LinkTarget_7063" href="#">
6</A>
 and the <I>TransportProtocols</I> in <A href="#LinkTarget_8418" href="#">
6.7.6</A>
. The <I>StackProfiles</I> are defined in <A href="#LinkTarget_4409" href="#">
Part 7</A>
. </P
><P 

>All communication between OPC UA <I>Applications</I> is based on the exchange of <I>Messages</I>. The parameters contained in the <I>Messages</I> are defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
; however, their format is specified by the <I>DataEncoding</I> and <I>TransportProtocol</I>. For this reason, each <I>Message</I> defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
 shall have a normative description which specifies exactly what shall be put on the wire. The normative descriptions are defined in the appendices. </P
><P 

>A <I>Stack</I> is a collection of software libraries that implement one or more <I>StackProfiles</I>. The interface between an OPC UA <I>Application</I> and the <I>Stack</I> is a non-normative API which hides the details of the <I>Stack</I> implementation. An API depends on a specific <I>DevelopmentPlatform</I>. Note that the datatypes exposed in the API for a <I>DevelopmentPlatform </I>may not match the datatypes defined by the specification because of limitations of the <I>DevelopmentPlatform. </I>For example, Java does not support an unsigned integer which means that any Java API will need to map unsigned integers onto a signed integer type.<I> </I></P
><P 

><A href="#LinkTarget_4775" href="#">
Figure 1</A>
 illustrates the relationships between the different concepts defined in this standard. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Serialization LayerUA ApplicationAPISecure Channel LayerEncoded MessageTransport  LayerSecured MessageDevelopment Platforms.NET 3.0ANSI C JRE 5.0Data EncodingsUA BinaryUA XMLSecurity ProtocolsWS Secure ConversationUA Secure ConversationTransport ProtocolsUA TCPSOAP/HTTPSecurity TransformsSigningEncryptionWSDL and XML SchemaUA Binary SchemaClientServerMappingsStackWire Protocol</DIV
></P
><P 

><B>Figure 1 &ndash; The OPC UA Stack Overview </P
><P 

></B>The layers described in this specification do not correspond to layers in the OSI 7 layer model [<A href="#LinkTarget_4527" href="#">
X200</A>
]. Each OPC UA <I>StackProfile</I> should be treated as a single Layer 7 (Application) protocol that is built on an existing Layer 5, 6 or 7 protocol such as TCP/IP, TLS or <A href="#LinkTarget_4503" href="#">
HTTP</A>
.The <I>SecureChannel</I> layer is always present even if the <I>SecurityMode</I> is <I>None</I>. In this situation, no security is applied but the <I>SecurityProtocol</I> implementation shall maintain a logical channel with a unique identifier. Users and administrators are expected to understand that a <I>SecureChannel</I> with <I>SecurityMode</I> set to <I>None</I> cannot be trusted unless the <I>Application</I> is operating on a physically secure network or a low level protocol such as IPSec is being used. </P
><H1 
 ID="LinkTarget_4787"
><FONT size="+1"><B>5 Data encoding </H1
><H2 
 ID="LinkTarget_4788"
><FONT size="+1">5.1 General </H2
><H3 
 ID="LinkTarget_4789"
> Overview </H3
><P 

></B>This standard defines two data encodings: OPC UA Binary and OPC UA XML. It describes how to construct <I>Messages</I> using each of these encodings. </P
><H3 
 ID="LinkTarget_4791"
><B> Built-in Types </H3
><P 

></B>All OPC UA <I>DataEncodings</I> are based on rules that are defined for a standard set of built-in types. These built-in types are then used to construct structures, arrays and <I>Messages</I>. The built-in types are described in <A href="#LinkTarget_4798" href="#">
Table 1</A>
. </P
><P 

><B>Table 1 &ndash; Built-in Data Types </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ID </P
></TD
><TD  
 valign="top"
><P 

>Name </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>1 </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A two-state logical value (true or false). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>SByte </P
></TD
><TD  
 valign="top"
><P 

>An integer value between &minus;128 and 127. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>An integer value between 0 and 255. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>Int16 </P
></TD
><TD  
 valign="top"
><P 

>An integer value between &minus;32 768 and 32 767. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>An integer value between 0 and 65 535. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>An integer value between &minus;2 147 483 648 and 2 147 483 647. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>An integer value between 0 and 4 294 967 295. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>8 </P
></TD
><TD  
 valign="top"
><P 

>Int64 </P
></TD
><TD  
 valign="top"
><P 

>An integer value between &minus;9 223 372 036 854 775 808 and 9 223 372 036 854 775 807 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

>UInt64 </P
></TD
><TD  
 valign="top"
><P 

>An integer value between 0 and 18 446 744 073 709 551 615. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

>Float </P
></TD
><TD  
 valign="top"
><P 

>An IEEE single precision (32 bit) floating point value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>11 </P
></TD
><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>An IEEE double precision (64 bit) floating point value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12 </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A sequence of Unicode characters. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>13 </P
></TD
><TD  
 valign="top"
><P 

>DateTime </P
></TD
><TD  
 valign="top"
><P 

>An instance in time. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>14 </P
></TD
><TD  
 valign="top"
><P 

>Guid </P
></TD
><TD  
 valign="top"
><P 

>A 16 byte value that can be used as a globally unique identifier. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>15 </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A sequence of octets. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>16 </P
></TD
><TD  
 valign="top"
><P 

>XmlElement </P
></TD
><TD  
 valign="top"
><P 

>An XML element. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>17 </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>An identifier for a node in the address space of an OPC UA <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>18 </P
></TD
><TD  
 valign="top"
><P 

>ExpandedNodeId </P
></TD
><TD  
 valign="top"
><P 

>A NodeId that allows the namespace URI to be specified instead of an index. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>19 </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>A numeric identifier for a error or condition that is associated with a value or an operation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>20 </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>A name qualified by a namespace. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>21 </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>Human readable text with an optional locale identifier. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>22 </P
></TD
><TD  
 valign="top"
><P 

>ExtensionObject </P
></TD
><TD  
 valign="top"
><P 

>A structure that contains an application specific data type that may not be recognized by the receiver. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>23 </P
></TD
><TD  
 valign="top"
><P 

>DataValue </P
></TD
><TD  
 valign="top"
><P 

>A data value with an associated status code and timestamps. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>24 </P
></TD
><TD  
 valign="top"
><P 

>Variant </P
></TD
><TD  
 valign="top"
><P 

>A union of all of the types specified above. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>25 </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>A structure that contains detailed error and diagnostic information associated with a StatusCode. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Most of these data types are the same as the abstract types defined in <A href="#LinkTarget_4406" href="#">
Part 3</A>
 and <A href="#LinkTarget_4407" href="#">
Part 4</A>
. However, the <I>ExtensionObject</I> and <I>Variant</I> types are defined in this standard. In addition, this standard defines a representation for the <I>Guid</I> type defined in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
><H3 
 ID="LinkTarget_5024"
><B> Guid </H3
><P 

></B>A <I>Guid</I> is a 16-byte globally unique identifier with the layout shown in <A href="#LinkTarget_5032" href="#">
Table 2</A>
. </P
><P 

><B>Table 2 &ndash; Guid structure </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Component </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Data1 </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Data2 </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Data3 </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Data4 </P
></TD
><TD  
 valign="top"
><P 

>Byte[8] </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><I>Guid</I> values may be represented as a string in this form: </P
><P 

><FONT size="+1">&lt;Data1&gt;-&lt;Data2&gt;-&lt;Data3&gt;-&lt;Data4[0:1]&gt;-&lt;Data4[2:7]&gt; </P
><P 

><FONT size="+1">Where Data1 is 8 characters wide, Data2 and Data3 are 4 characters wide and each <I>Byte</I> in Data4 is 2 characters wide. Each value is formatted as a hexadecimal number padded zeros. A typical <I>Guid</I> value would look like this when formatted as a string: </P
><P 

><FONT size="+1">C496578A-0DFE-4b8f-870A-745238C6AEAE </P
><P 

> </P
><H3 
 ID="LinkTarget_5070"
><FONT size="+1"><B> ByteString </H3
><P 

></B>A <I>ByteString</I> is structurally the same as a one dimensional array of <I>Byte.</I> It is represented as a distinct built-in data type because it allows encoders to optimize the transmission of the value. </P
><P 

>However, some <I>DevelopmentPlatforms </I>will not be able to preserve the distinction between a <I>ByteString</I> and a one dimensional array of <I>Byte</I>. </P
><P 

>If a decoder<I> </I>for <I>DevelopmentPlatform </I>cannot preserve the distinction it shall convert all one dimensional arrays of <I>Byte</I> to <I>ByteStrings</I>.  </P
><P 

>Each element in a one dimensional array of <I>ByteString</I> can have a different length which means is structurally different from a two dimensional array of <I>Byte </I>where the length of each dimension is the same. This means decoders shall preserve the distinction between two or more dimension arrays of <I>Byte</I> and one or more dimension arrays of <I>ByteString</I>. </P
><P 

>If a <I>DevelopmentPlatform </I>does not support<I> </I>unsigned integers then it will have to represent <I>ByteStrings</I> as arrays of <I>SByte</I>. In this case, the requirements for <I>Byte</I> would then apply to <I>SByte</I>. </P
><H3 
 ID="LinkTarget_5077"
><B> ExtensionObject </H3
><P 

></B>An <I>ExtensionObject </I>is a container for any <I>Structured DataTypes</I> which cannot be encoded as one of the other built-in data types. The <I>ExtensionObject </I>contains a complex value serialized as a sequence of bytes or as an XML element. It also contains an identifier which indicates what data it contains and how it is encoded. </P
><P 

><I>Structured DataTypes</I> are represented in a <I>Server</I> address space as sub-types of the <I>Structure</I> <I>DataType</I>. The <I>DataEncodings</I> available for any given <I>Structured DataTypes</I> are represented as a <I>DataTypeEncoding</I> <I>Object</I> in the <I>Server</I> <I>AddressSpace</I>. The <I>NodeId</I> for the <I>DataTypeEncoding</I> <I>Object</I> is the identifier stored in the <I>ExtensionObject</I>. <A href="#LinkTarget_4406" href="#">
Part 3</A>
 describes how <I>DataTypeEncoding</I> <I>Nodes</I> are related to other <I>Nodes</I> of the <I>AddressSpace</I>. </P
><P 

><I>Server</I> implementers should use namespace qualified numeric <I>NodeIds</I> for any <I>DataTypeEncoding</I> <I>Objects</I> they define. This will minimize the overhead introduced by packing <I>Structured DataType </I>values into an <I>ExtensionObject</I>. </P
><P 

><I>ExtensionObjects and Variants</I> allow unlimited nesting which could result in stack overflow errors even if the message size is less than the maximum allowed. Decoders shall support at least 100 nesting levels. Decoders shall report an error if the number of nesting levels exceeds what it supports. </P
><H3 
 ID="LinkTarget_5087"
><B> Variant </H3
><P 

></B>A <I>Variant</I> is a union of all built-in data types including an <I>ExtensionObject</I>. <I>Variants</I> can also contain arrays of any of these built-in types. <I>Variants</I> are used to store any value or parameter with a data type of <I>BaseDataType </I>or one of its subtypes. </P
><P 

><I>Variants</I> can be empty. An empty <I>Variant</I> is described as having a null value and should be treated like a null column in a SQL database. A null value in a <I>Variant</I> may not be the same as a null value for data types that support nulls such as <I>Strings</I>.  Some <I>Development</I> Platforms may not be able to preserve the distinction between a null for a <I>DataType</I> and a null for a <I>Variant</I>. Therefore <I>Applications</I> shall not rely on this distinction. </P
><P 

><I>Variants</I> can contain arrays of <I>Variants</I> but they cannot directly contain another <I>Variant</I>. </P
><P 

><I>DataValue and DiagnosticInfo </I>types only have meaning when returned in a response message with an associated <I>StatusCode</I>. As a result,<I> Variants</I> cannot contain instances of <I>DataValue or DiagnosticInfo.</I> This requirement means that if an <I>Attribute</I> supports the writing of a null value it shall also support writing of an empty <I>Variant </I>and vice versa. </P
><P 

><I>Variables</I> with a <I>DataType</I> of <I>BaseDataType</I> are mapped to a <I>Variant</I>, however, the <I>ValueRank</I> and <I>ArrayDimensions</I> <I>Attributes</I> place restrictions on what is allowed in the <I>Variant</I>. For example, if the <I>ValueRank</I> is <I>Scalar</I> then the <I>Variant</I> may only contain scalar values. </P
><P 

><I>ExtensionObjects and Variants</I> allow unlimited nesting which could result in stack overflow errors even if the message size is less than the maximum allowed. Decoders shall support at least 100 nesting levels. Decoders shall report an error if the number of nesting levels exceeds what it supports. </P
><P 

> </P
><H2 
 ID="LinkTarget_5096"
><B>5.2 OPC UA Binary </H2
><H3 
 ID="LinkTarget_5097"
> General </H3
><P 

></B>The OPC UA <I>Binary</I> <I>DataEncoding</I> is a data format developed to meet the performance needs of OPC UA <I>Applications</I>. This format is designed primarily for fast encoding and decoding, however, the size of the encoded data on the wire was also a consideration. </P
><P 

>The OPC UA <I>Binary</I> <I>DataEncoding</I> relies on several primitive data types with clearly defined encoding rules that can be sequentially written to or read from a binary stream. A structure is encoded by sequentially writing the encoded form of each field. If a given field is also a structure then the values of its fields are written sequentially before writing the next field in the containing structure. All fields shall be written to the stream even if they contain null values. The encodings for each primitive type specify how to encode either a null or a default value for the type. </P
><P 

>The OPC UA <I>Binary</I> <I>DataEncoding</I> does not include any type or field name information because all OPC UA applications are expected to have advance knowledge of the services and structures that they support. An exception is an <I>ExtensionObject</I> which provides an identifier and a size for the <I>Structured</I><I> </I><I>Data</I><I>Type</I> structure it represents. This allows a decoder to skip over types that it does not recognize. </P
><H3 
 ID="LinkTarget_5101"
><B> Built-in Types </H3
><H4 
 ID="LinkTarget_5102"
>5.2.2.1 Boolean </H4
><P 

></B>A <I>Boolean</I> value shall be encoded as a single byte where a value of 0 (zero) is false and any non-zero value is true. </P
><P 

>Encoders shall use the value of 1 to indicate a true value; however, decoders shall treat any non-zero value as true. </P
><H4 
 ID="LinkTarget_5105"
><B>5.2.2.2 Integer </H4
><P 

></B>All integer types shall be encoded as little endian values where the least significant byte appears first in the stream. </P
><P 

><A href="#LinkTarget_5113" href="#">
Figure 2</A>
 illustrates how value 1 000 000 000 (Hex: 3B9ACA00) should be encoded as a 32 bit integer in the stream. </P
><P 

> <DIV class="Sect" 
 Alt=""
>00CA9A3B01234</DIV
></P
><P 

><B>Figure 2 &ndash; Encoding Integers in a binary stream </P
><H4 
 ID="LinkTarget_5116"
>5.2.2.3 Floating Point </H4
><P 

></B>All floating point values shall be encoded with the appropriate <A href="#LinkTarget_4527" href="#">
X200 : ITU-T X.200 &ndash; Open Systems Interconnection &ndash; Basic Reference Model </A>
</P
><P 

><A>
http://www.itu.int/rec/T-REC-X.200-199407-I/en </A>
</P
><P 

><A>
IEEE-754</A>
 binary representation which has three basic components: the sign, the exponent, and the fraction. The bit ranges assigned to each component depend on the width of the type. <A href="#LinkTarget_5139" href="#">
Table 3</A>
 lists the bit ranges for the supported floating point types. </P
><P 

><B>Table 3 &ndash; Supported Floating Point Types </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Width (bits) </P
></TD
><TD  
 valign="top"
><P 

>Fraction </P
></TD
><TD  
 valign="top"
><P 

>Exponent </P
></TD
><TD  
 valign="top"
><P 

>Sign </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Float </P
></TD
><TD  
 valign="top"
><P 

>32 </P
></TD
><TD  
 valign="top"
><P 

>0-22 </P
></TD
><TD  
 valign="top"
><P 

>23-30 </P
></TD
><TD  
 valign="top"
><P 

>31 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>64 </P
></TD
><TD  
 valign="top"
><P 

>0-51 </P
></TD
><TD  
 valign="top"
><P 

>52-62 </P
></TD
><TD  
 valign="top"
><P 

>63 </P
></TD
></TR
></TABLE
><P 

><FONT size="+1">In addition, the order of bytes in the stream is significant. All floating point values shall be encoded with the least significant byte appearing first (i.e. little endian). </P
><P 

><A href="#LinkTarget_5186" href="#">
Figure 3</A>
 illustrates how the value &minus;6,5 (Hex: C0D00000) should be encoded as a <I>Float</I>. </P
><P 

>The floating point type supports positive and negative infinity and not-a-number (NaN). The IEEE specification allows for multiple NaN variants, however, the encoders/decoders may not preserve the distinction. Encoders shall encode a NaN value as an IEEE quiet-NAN (000000000000F8FF) or (0000C0FF). Any unsupported types such as denormalized numbers shall also be encoded as an IEEE quiet-NAN. Any test for equality between NaN values always fails. This means a NaN value for a Variable always produces a <I>DataChange</I> each time the SamplingInterval elapses. </P
><P 

><B> <DIV class="Sect" 
 Alt=""
>0000D0C001234</DIV
></P
><P 

>Figure 3 &ndash; Encoding Floating Points in a binary stream </P
><H4 
 ID="LinkTarget_5189"
>5.2.2.4 String </H4
><P 

></B>All <I>String</I> values are encoded as a sequence of <A href="#LinkTarget_4572" href="#">
UTF8</A>
 characters without a null terminator and preceded by the length in bytes. </P
><P 

>The length in bytes is encoded as <I>Int32</I>. A value of &minus;1 is used to indicate a &lsquo;null&rsquo; string. </P
><P 

><A href="#LinkTarget_5203" href="#">
Figure 4</A>
 illustrates how the multilingual string &ldquo;&#27700;Boy&rdquo; should be encoded in a byte stream. </P
><P 

> <DIV class="Sect" 
 Alt=""
>012345606000000&#27700;B0B4426F79LengthE6Boy78910</DIV
></P
><P 

><B>Figure 4 &ndash; Encoding Strings in a binary stream </P
><H4 
 ID="LinkTarget_5206"
>5.2.2.5 DateTime </H4
><P 

></B>A <I>DateTime</I> value shall be encoded as a 64-bit signed integer (see Clause <A href="#LinkTarget_5105" href="#">
5.2.2.2</A>
) which represents the number of 100 nanosecond intervals since January 1, 1601 (UTC). </P
><P 

>Not all <I>DevelopmentPlatforms</I> will be able to represent the full range of dates and times that can be represented with this <I>DataEncoding</I>. For example, the UNIX time_t structure only has a 1 second resolution and cannot represent dates prior to 1970. For this reason, a number of rules shall be applied when dealing with date/time values that exceed the dynamic range of a <I>DevelopmentPlatform</I>. These rules are: </P
><DL 

><DD 

>a) A date/time value is encoded as 0 if either </DD
><DD 

>1) The value is equal to or earlier than 1601-01-01 12:00AM UTC. </DD
><DD 

>2) The value is the earliest date that can be represented with the <I>DevelopmentPlatform</I>&rsquo;s encoding. </DD
><DD 

>b) A date/time is encoded as the maximum value for an <I>Int64</I> if either </DD
><DD 

>3) The value is equal to or greater than 9999-12-31 11:59:59PM UTC, </DD
></DL
><DL 

><DD 

>4) The value is the latest date that can be represented with the <I>DevelopmentPlatform</I>&rsquo;s encoding. </DD
><DD 

>c) A date/time is decoded as the earliest time that can be represented on the platform if either </DD
><DD 

>5) The encoded value is 0, </DD
><DD 

>6) The encoded value represents a time earlier than the earliest time that can be represented with the <I>DevelopmentPlatform</I>&rsquo;s encoding. </DD
><DD 

>d) A date/time is decoded as the latest time that can be represented on the platform if either </DD
><DD 

>7) The encoded value is the maximum value for an <I>Int64</I>, </DD
><DD 

>8) The encoded value represents a time later than the latest time that can be represented with the <I>DevelopmentPlatform</I>&rsquo;s encoding. </DD
></DL
><P 

>These rules imply that the earliest and latest times that can be represented on a given platform are invalid date/time values and should be treated that way by <I>Applications</I>. </P
><P 

>A decoder shall truncate the value if a decoder encounters a <I>DateTime</I> value with a resolution that is greater than the resolution supported on the <I>DevelopmentPlatform</I>. </P
><H4 
 ID="LinkTarget_5244"
><B>5.2.2.6 Guid </H4
><P 

></B>A <I>Guid</I> is encoded in a structure as shown in <A href="#LinkTarget_5032" href="#">
Table 2</A>
. Fields are encoded sequentially according to the data type for field. </P
><P 

><A href="#LinkTarget_5258" href="#">
Figure 5</A>
 illustrates how the <I>Guid</I> &ldquo;72962B91-FA75-4ae6-8D28-B404DC7DAF63&rdquo; should be encoded in a byte stream. </P
><P 

> <DIV class="Sect" 
 Alt=""
>0123456912B9672FAE64A8D28Data17578910B41104DC7D121314AF15Data2Data3Data46316</DIV
></P
><P 

><B>Figure 5 &ndash; Encoding Guids in a binary stream </P
><H4 
 ID="LinkTarget_5261"
>5.2.2.7 ByteString </H4
><P 

></B>A <I>ByteString</I> is encoded as sequence of bytes preceded by its length in bytes. The length is encoded as a 32-bit signed integer as described above. </P
><P 

>If the length of the byte string is &minus;1 then the byte string is &lsquo;null&rsquo;. </P
><H4 
 ID="LinkTarget_5264"
><B>5.2.2.8 XmlElement </H4
><P 

></B>An <I>XmlElement</I> is an XML fragment serialized as <A href="#LinkTarget_4572" href="#">
UTF8</A>
 string and then encoded as <I>ByteString. </I></P
><P 

><A href="#LinkTarget_5287" href="#">
Figure 6</A>
 illustrates how the <I>XmlElement</I> &ldquo;&lt;A&gt;Hot&#27700;&lt;/A&gt;&rdquo; should be encoded in a byte stream. </P
><P 

>.  <DIV class="Sect" 
 Alt=""
>01234563C413E7274E6B0B43C&lt;A&gt;6F789103F11413E1213Hot&#27700;&lt;/A&gt;0D000000Length14151617</DIV
></P
><P 

><B>Figure 6 &ndash; Encoding XmlElement in a binary stream  </P
><P 

></B>A decoder may choose to parse the XML after decoding; if an unrecoverable parsing error occurs then the decoder should try to continue processing the stream For example, if the <I>XmlElement</I> is the body of a <I>Variant</I> or an element in an array which is the body of a <I>Variant</I> then this error can be reported by setting value of the <I>Variant</I> to the <I>StatusCode</I> <I>Bad_DecodingError</I>. </P
><H4 
 ID="LinkTarget_5289"
><B>5.2.2.9 NodeId </H4
><P 

></B>The components of a <I>NodeId</I> are described the <A href="#LinkTarget_5298" href="#">
Table 4</A>
. </P
><P 

><B>Table 4 &ndash; NodeId components </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Namespace </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>The index for a namespace URI. </P
><P 

>An index of 0 is used for OPC UA defined <I>NodeIds</I><I>.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IdentifierType </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
></TD
><TD  
 valign="top"
><P 

>The format and data type of the identifier. </P
><P 

>The value may be one of the following: </P
><P 

> NUMERIC  - the value is an <I>UInteger;</I> </P
><P 

> STRING  - the value is <I>Strin</I><I>g</I>; </P
><P 

> GUID  - the value is a <I>Guid</I>; </P
><P 

> OPAQUE - the value is a <I>ByteString</I>; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>* </P
></TD
><TD  
 valign="top"
><P 

>The identifier for a node in the address space of an OPC UA <I>Server</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>DataEncoding</I> of a <I>NodeId</I> varies according to the contents of the instance. For that reason the first byte of the encoded form indicates the format of the rest of the encoded <I>NodeId</I>. The possible <I>DataEncoding</I> formats are shown in <A href="#LinkTarget_5346" href="#">
Table 5</A>
. The tables that follow describe the structure of each possible format (they exclude the byte which indicates the format). </P
><P 

><B>Table 5 &ndash; NodeId DataEncoding values </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Two Byte </P
></TD
><TD  
 valign="top"
><P 

>0x00 </P
></TD
><TD  
 valign="top"
><P 

>A numeric value that fits into the two byte representation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Four Byte </P
></TD
><TD  
 valign="top"
><P 

>0x01 </P
></TD
><TD  
 valign="top"
><P 

>A numeric value that fits into the four byte representation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Numeric </P
></TD
><TD  
 valign="top"
><P 

>0x02 </P
></TD
><TD  
 valign="top"
><P 

>A numeric value that does not fit into the two or four byte representations. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>0x03 </P
></TD
><TD  
 valign="top"
><P 

>A String value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Guid </P
></TD
><TD  
 valign="top"
><P 

>0x04 </P
></TD
><TD  
 valign="top"
><P 

>A Guid value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>0x05 </P
></TD
><TD  
 valign="top"
><P 

>An opaque (ByteString) value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NamespaceUri Flag </P
></TD
><TD  
 valign="top"
><P 

>0x80 </P
></TD
><TD  
 valign="top"
><P 

>See discussion of <I>ExpandedNodeId</I><I> </I>in <A href="#LinkTarget_5588" href="#">
5.2.2.10</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerIndex Flag </P
></TD
><TD  
 valign="top"
><P 

>0x40 </P
></TD
><TD  
 valign="top"
><P 

>See discussion of <I>ExpandedNodeId</I><I> </I>in <A href="#LinkTarget_5588" href="#">
5.2.2.10</A>
. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The standard <I>NodeId</I> <I>DataEncoding</I> has the structure shown in <A href="#LinkTarget_5438" href="#">
Table 6</A>
. The standard <I>DataEncoding</I> is used for all formats that do not have an explicit format defined. </P
><P 

><B>Table 6 &ndash; Standard NodeId Binary DataEncoding </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Namespace </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>The <I>NamespaceI</I><I>ndex</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Identifier </P
></TD
><TD  
 valign="top"
><P 

>* </P
></TD
><TD  
 valign="top"
><P 

>The identifier which is encoded according to the following rules: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>NUMERIC </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>STRING </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>GUID </P
></TD
><TD  
 valign="top"
><P 

>Guid </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OPAQUE </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
></TR
></TABLE
><P 

><FONT size="+1">  </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">An example of a String <I>NodeId</I> with Namespace = 1 and Identifier = &ldquo;Hot&#27700;&rdquo; is shown in <A href="#LinkTarget_5498" href="#">
Figure 7</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>01234560000007274E6B0B46F78910111213Hot&#27700;03010006LengthEncoding ByteNamespace</DIV
></P
><P 

><B>Figure 7 &ndash; A String NodeId </P
><P 

></B>The Two Byte <I>NodeId</I> <I>DataEncoding</I> has the structure shown in <A href="#LinkTarget_5509" href="#">
Table 7</A>
. </P
><P 

><B>Table 7 &ndash; Two Byte NodeId Binary DataEncoding </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Identifier </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>The <I>Namespace</I> is the default OPC UA namespace (i.e. 0). </P
><P 

>The <I>Identifier</I> Type is &lsquo;Numeric&rsquo;. </P
><P 

>The <I>Identifier</I> shall be in the range 0 to 255. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

> </P
><P 

><FONT size="+1">An example of a Two Byte <I>NodeId</I> with Identifier = 72 is shown in <A href="#LinkTarget_5540" href="#">
Figure 8</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>07212Identifier00Encoding</DIV
></P
><P 

><B>Figure 8 &ndash; A Two Byte NodeId </P
><P 

></B>The Four Byte <I>NodeId</I> <I>DataEncoding</I> has the structure shown in <A href="#LinkTarget_5548" href="#">
Table 8</A>
. </P
><P 

><B>Table 8 &ndash; Four Byte NodeId Binary DataEncoding </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Namespace </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>The <I>Namespace</I> shall be in the range 0 to 255. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Identifier </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>The <I>Identifier</I> Type is &lsquo;Numeric&rsquo;. </P
><P 

>The <I>Identifier</I> shall be an integer in the range 0 to 65 535. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">An example of a Four Byte <I>NodeId</I> with Namespace = 5 and Identifier = 1 025 is shown in <A href="#LinkTarget_5584" href="#">
Figure 9</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>0123401050140IdentifierEncoding ByteNamespace</DIV
></P
><P 

><B>Figure 9 &ndash; A Four Byte NodeId </P
><P 

><FONT size="+1"></B> </P
><H4 
 ID="LinkTarget_5588"
><FONT size="+1"><B>5.2.2.10 ExpandedNodeId </H4
><P 

></B>An <I>ExpandedNodeId </I>extends the <I>NodeId</I> structure by allowing the <I>NamespaceUri</I> to be explicitly specified instead of using the <I>NamespaceIndex</I>. The <I>NamespaceUri</I> is optional. If it is specified then the <I>NamespaceIndex</I> inside the <I>NodeId</I> shall be ignored. </P
><P 

>The <I>ExpandedNodeId </I>is encoded by first encoding a <I>NodeId</I> as described in <A href="#LinkTarget_5289" href="#">
5.2.2.9</A>
 and then encoding <I>NamespaceUri</I> as a <I>String</I>. </P
><P 

>An instance of an <I>ExpandedNodeId </I>may still use the <I>NamespaceIndex</I> instead of the <I>NamespaceUri</I>. In this case, the <I>NamespaceUri</I> is not encoded in the stream. The presence of the <I>NamespaceUri</I> in the stream is indicated by setting the <I>NamespaceUri</I> flag in the encoding format byte for the <I>NodeId</I>. </P
><P 

>If the <I>NamespaceUri</I> is present then the encoder shall encode the <I>NamespaceIndex</I> as 0 in the stream when the <I>NodeId</I> portion is encoded. The unused <I>NamespaceIndex</I> is included in the stream for consistency. </P
><P 

>An <I>ExpandedNodeId </I>may also have a <I>ServerIndex</I> which is encoded as a <I>UInt32</I> after the <I>NamespaceUri. </I>The <I>ServerIndex</I> flag in the <I>NodeId</I> encoding byte indicates whether the <I>ServerIndex</I> is present in the stream. The <I>ServerIndex</I> is omitted if it is equal to zero. </P
><P 

>The <I>ExpandedNodeId</I> encoding has the structure shown in <A href="#LinkTarget_5607" href="#">
Table 9</A>
. </P
><P 

><B>Table 9 &ndash; ExpandedNodeId Binary DataEncoding </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The NamespaceUri and ServerIndex flags in the NodeId encoding indicate whether those fields are present in the stream. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NamespaceUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>Not present if null or Empty. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerIndex </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>Not present if 0. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_5642"
><FONT size="+1"><B>5.2.2.11 StatusCode </H4
><P 

></B>A <I>StatusCode</I> is encoded as a <I>UInt32</I>. </P
><H4 
 ID="LinkTarget_5644"
><B>5.2.2.12 DiagnosticInfo </H4
><P 

></B>A <I>DiagnosticInfo </I>structure is described in <A href="#LinkTarget_4407" href="#">
Part 4</A>
. It specifies a number of fields that could be missing. For that reason, the encoding uses a bit mask to indicate which fields are actually present in the encoded form. </P
><P 

>As described in <A href="#LinkTarget_4407" href="#">
Part 4</A>
, the <I>SymbolicId</I>, <I>NamespaceUri</I>, <I>LocalizedText</I> and <I>Locale</I> fields are indexes in a string table which is returned in the response header. Only the index of the corresponding string in the string table is encoded. An index of &minus;1 indicates that there is no value for the string.  </P
><P 

><I>DiagnosticInfo </I>allows unlimited nesting which could result in stack overflow errors even if the message size is less than the maximum allowed. Decoders shall support at least 100 nesting levels. Decoders shall report an error if the number of nesting levels exceeds what it supports. </P
><P 

><B>Table 10 &ndash; DiagnosticInfo Binary DataEncoding </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Encoding Mask </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields are present in the stream. </P
><P 

>The mask has the following bits: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>0x01 </P
></TD
><TD  
 valign="top"
><P 

>Symbolic Id </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x02 </P
></TD
><TD  
 valign="top"
><P 

>Namespace </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x04 </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x08 </P
></TD
><TD  
 valign="top"
><P 

>Locale </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x10 </P
></TD
><TD  
 valign="top"
><P 

>Additional Info </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x20 </P
></TD
><TD  
 valign="top"
><P 

>InnerStatusCode </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x40 </P
></TD
><TD  
 valign="top"
><P 

>InnerDiagnosticInfo </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">SymbolicId </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>A symbolic name for the status code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NamespaceUri </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>A namespace that qualifies the symbolic id. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Locale </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The locale used for the localized text. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>A human readable summary of the status code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Additional Info </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>Detailed application specific diagnostic information. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Inner StatusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>A status code provided by an underlying system. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Inner DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>Diagnostic info associated with the inner status code. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_5772"
><FONT size="+1"><B>5.2.2.13 QualifiedName </H4
><P 

></B>A <I>QualifiedName </I>structure is encoded as shown in <A href="#LinkTarget_5785" href="#">
Table 11</A>
. </P
><P 

>The abstract <I>QualifiedName </I>structure is defined in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
><P 

><B>Table 11 &ndash; QualifiedName Binary DataEncoding </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NamespaceIndex </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>The namespace index. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Name </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The name. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_5813"
><FONT size="+1"><B>5.2.2.14 LocalizedText </H4
><P 

></B>A <I>LocalizedText </I>structure contains two fields that could be missing. For that reason, the encoding uses a bit mask to indicate which fields are actually present in the encoded form. </P
><P 

>The abstract <I>LocalizedText </I>structure is defined in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
><P 

><B>Table 12 &ndash; LocalizedText Binary DataEncoding </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EncodingMask </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields are present in the stream. </P
><P 

>The mask has the following bits:  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>0x01 </P
></TD
><TD  
 valign="top"
><P 

>Locale </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x02 </P
></TD
><TD  
 valign="top"
><P 

>Text </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Locale </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The locale. </P
><P 

>Omitted is null or empty. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Text </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The text in the specified locale. </P
><P 

>Omitted is null or empty. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_5871"
><FONT size="+1"><B>5.2.2.15 ExtensionObject </H4
><P 

></B>An<I> ExtensionObject</I> is encoded as sequence of bytes prefixed by the <I>NodeId</I> of its <I>DataTypeEncoding</I> and the number of bytes encoded. </P
><P 

>An<I> ExtensionObject</I> may be encoded by the <I>Application</I> which means it is passed as a <I>ByteString </I>or an <I>XmlElement</I> to the encoder. In this case, the encoder will be able to write the number of bytes in the object before it encodes the bytes. However, an <I>ExtensionObject</I> may know how to encode/decode itself which means the encoder shall calculate the number of bytes before it encodes the object or it shall be able to seek backwards in the stream and update the length after encoding the body. </P
><P 

>When a decoder encounters an <I>ExtensionObject</I> it shall check if it recognizes the <I>DataTypeEncoding</I> identifier. If it does then it can call the appropriate function to decode the object body. If the decoder does not recognize the type it shall use the <I>Encoding</I> to determine if the body is a <I>ByteString</I> or an <I>XmlElement</I> and then decode the object body or treat it as opaque data and skip over it<I>.</I> </P
><P 

>The serialized form of an <I>ExtensionObject</I> is shown in <A href="#LinkTarget_5881" href="#">
Table 13</A>
. </P
><P 

><B>Table 13 &ndash; Extension Object Binary DataEncoding </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>TypeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The identifier for the <I>DataTypeEncoding</I> node in the <I>Server</I><I>'s</I> <I>AddressS</I><I>pace</I>.<I> </I><I>ExtensionObjects</I> defined by the OPC UA specification have a numeric node identifier assigned to them with a <I>NamespaceIndex</I> of 0. The numeric identifiers are defined in <A href="#LinkTarget_9385" href="#">
A.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Encoding </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>An enumeration that indicates how the body is encoded. </P
><P 

>The parameter may have the following values: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>0x00 </P
></TD
><TD  
 valign="top"
><P 

>No body is encoded. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x01 </P
></TD
><TD  
 valign="top"
><P 

>The body is encoded as a ByteString. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x02 </P
></TD
><TD  
 valign="top"
><P 

>The body is encoded as a XmlElement. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Length </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The length of the object body. </P
><P 

>The length shall be specified if the body is encoded. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Body </P
></TD
><TD  
 valign="top"
><P 

>Byte[*] </P
></TD
><TD  
 valign="top"
><P 

>The object body. </P
><P 

>This field contains the raw bytes for ByteString bodies. </P
><P 

>For XmlElement bodies this field contains the XML encoded as a UTF-8 string without any null terminator. </P
><P 

>Some binary encoded structures may have a serialized length that is not a multiple of 8 bits. Encoders shall append 0 bits to ensure the serialized length is a multiple of 8 bits. Decoders that understand the serialized format shall ignore the padding bits. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><I>ExtensionObjects </I>are used in two contexts: as values contained in <I>Variant</I> structures or as parameters in OPC UA <I>Messages</I>. </P
><P 

>A decoder may choose to parse an <I>XmlElement</I> body after decoding; if an unrecoverable parsing error occurs then the decoder should try to continue processing the stream. For example, if the <I>ExtensionObject</I> is the body of a <I>Variant</I> or an element in an array that is the body of <I>Variant</I> then this error can be reported by setting value of the <I>Variant</I> to the <I>StatusCode</I> <I>Bad_DecodingError.</I>  </P
><H4 
 ID="LinkTarget_5954"
><B>5.2.2.16 Variant </H4
><P 

></B>A <I>Variant</I> is a union of the built-in types. </P
><P 

>The structure of a <I>Variant</I> is shown in <A href="#LinkTarget_5963" href="#">
Table 14</A>
. </P
><P 

><B>Table 14 &ndash; Variant Binary DataEncoding </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EncodingMask </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>The type of data encoded in the stream. </P
><P 

>The mask has the following bits assigned: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>0:5 </P
></TD
><TD  
 valign="top"
><P 

>Built-in Type Id (see <A href="#LinkTarget_4798" href="#">
Table 1</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>True if the Array Dimensions field is encoded. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>True if an array of values is encoded. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ArrayLength </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The number of elements in the array. </P
><P 

>This field is only present if the array bit is set in the encoding mask. </P
><P 

>Multi-dimensional arrays are encoded as a one dimensional array and this field specifies the total number of elements. The original array can be reconstructed from the dimensions that are encoded after the value field. </P
><P 

>Higher rank dimensions are serialized first. For example an array with dimensions [2,2,2] is written in this order: </P
><P 

> [0,0,0], [0,0,1], [0,1,0], [0,1,1], [1,0,0], [1,0,1], [1,1,0], [1,1,1] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>* </P
></TD
><TD  
 valign="top"
><P 

>The value encoded according to its built-in data type. </P
><P 

>If the array bit is set in the encoding mask then each element in the array is encoded sequentially. Since many types have variable length encoding each element shall be decoded in order. </P
><P 

>The value shall not be a <I>Variant</I> but it could be an array of <I>Variant</I><I>s</I>. </P
><P 

>Many implementation platforms do not distinguish between one dimensional Arrays of <I>Bytes</I> and <I>ByteStrings</I>. For this reason, decoders are allowed to automatically convert an Array of <I>Bytes</I> to a <I>ByteString</I>.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ArrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>Int32[] </P
></TD
><TD  
 valign="top"
><P 

>The length of each dimension. </P
><P 

>This field is only present if the array dimensions flag is set in the encoding mask. The lower rank dimensions appear first in the array. </P
><P 

>All dimensions shall be specified and shall be greater than zero. </P
><P 

>If <I>ArrayDimensions</I> are inconsistent with the <I>ArrayLength</I> then the decoder shall stop and raise a <I>Bad_DecodingError</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The types and their identifiers that can be encoded in a <I>Variant</I> are shown in <A href="#LinkTarget_4798" href="#">
Table 1</A>
. </P
><H4 
 ID="LinkTarget_6046"
><B>5.2.2.17 DataValue </H4
><P 

></B>A <I>DataValue</I> is always preceded by a mask that indicates which fields are present in the stream. </P
><P 

>The fields of a <I>DataValue</I> are described in <A href="#LinkTarget_6055" href="#">
Table 15</A>
. </P
><P 

><B>Table 15 &ndash; Data Value Binary DataEncoding </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Encoding Mask </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields are present in the stream. </P
><P 

>The mask has the following bits: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>0x01 </P
></TD
><TD  
 valign="top"
><P 

>False if the Value is <I>Null</I><I>.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x02 </P
></TD
><TD  
 valign="top"
><P 

>False if the StatusCode is Good. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x04 </P
></TD
><TD  
 valign="top"
><P 

>False if the Source Timestamp is <I>DateTime</I>.<I>MinValue</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x08 </P
></TD
><TD  
 valign="top"
><P 

>False if the <I>Server</I> Timestamp is <I>DateTime</I>.<I>MinValue</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x10 </P
></TD
><TD  
 valign="top"
><P 

>False if the Source Picoseconds is 0. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>0x20 </P
></TD
><TD  
 valign="top"
><P 

>False if the <I>Server</I> Picoseconds is 0. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Value </P
></TD
><TD  
 valign="top"
><P 

>Variant </P
></TD
><TD  
 valign="top"
><P 

>The value. </P
><P 

>Not present if the Value bit in the EncodingMask is False. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Status </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>The status associated with the value. </P
><P 

>Not present if the StatusCode bit in the EncodingMask is False. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SourceTimestamp </P
></TD
><TD  
 valign="top"
><P 

>DateTime </P
></TD
><TD  
 valign="top"
><P 

>The source timestamp associated with the value. </P
><P 

>Not present if the SourceTimestamp bit in the EncodingMask is False. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SourcePicoSeconds </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>The number of 10 picosecond intervals for the SourceTimestamp. </P
><P 

>Not present if the SourcePicoSeconds bit in the EncodingMask is False. </P
><P 

>If the source timestamp is missing the picoseconds are ignored. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerTimestamp </P
></TD
><TD  
 valign="top"
><P 

>DateTime </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> timestamp associated with the value. </P
><P 

>Not present if the ServerTimestamp bit in the EncodingMask is False. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerPicoSeconds </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>The number of 10 picosecond intervals for the ServerTimestamp. </P
><P 

>Not present if the ServerPicoSeconds bit in the EncodingMask is False. </P
><P 

>If the <I>Server</I> timestamp is missing the picoseconds are ignored. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>Picoseconds</I> fields store the difference between a high resolution timestamp with a resolution of 10 picoseconds and the <I>Timestamp</I> field value which only has a 100 ns resolution. The <I>Picoseconds</I> fields shall contain values less than 10 000. The decoder shall treat values greater than or equal to 10 000 as the value &lsquo;9999&rsquo;. </P
><H3 
 ID="LinkTarget_6165"
><B> Enumerations </H3
><P 

></B>Enumerations are encoded as <I>Int32</I> values. </P
><H3 
 ID="LinkTarget_6167"
><B> Arrays </H3
><P 

></B><I>Arrays</I> that occur outside of a <I>Variant</I> are encoded as a sequence of elements preceded by the number of elements encoded as an <I>Int32</I> value. If an <I>Array</I> is null then its length is encoded as &minus;1. An <I>A</I><I>rray</I> of zero length is different from an <I>A</I><I>rray</I> that is null so encoders and decoders shall preserve this distinction. </P
><P 

>Multi-dimensional arrays can only be encoded within a <I>Variant</I>. </P
><H3 
 ID="LinkTarget_6170"
><B> Structures </H3
><P 

></B><I>Structures</I> are encoded as a sequence of fields in the order that they appear in the definition. The encoding for each field is determined by the built-in type for the field. </P
><P 

>All fields specified in the structure shall be encoded If optional fields exist in the structure then see <A href="#LinkTarget_7029" href="#">
5.3.5</A>
.  </P
><P 

><I>Structures</I> do not have a null value. If an encoder is written in a programming language that allows structures to have null values then the encoder shall create a new instance with default values for all fields and serialize that. Encoders shall not generate an encoding error in this situation. </P
><P 

>The following is an example of a structure using C++ syntax: </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">class Type2 </P
><P 

>{ </P
><P 

> Int32 A; </P
><P 

> Int32 B; </P
><P 

>}; </P
><P 

> </P
><P 

>class Type1 </P
><P 

>{ </P
><P 

> Int32 X; </P
><P 

> Int32 NoOfY; </P
><P 

> Type2* Y; </P
><P 

> Int32 Z; </P
><P 

>}; </P
><P 

> </P
><P 

><FONT size="+1">The Y field is a pointer to an array with a length stored in NoOfY. </P
><P 

>An instance of <I>Type1</I> which contains an array of two <I>Type2</I> instances would be encoded as 37 byte sequence. If the instance of <I>Type1</I> was encoded in an <I>ExtensionObject</I> it would have the encoded form shown in <A href="#LinkTarget_6204" href="#">
Table 16</A>
. The <I>TypeId</I>, Encoding and the length are fields defined by the <I>ExtensionObject</I>. The encoding of the <I>Type2</I> instances do not include any type identifier because it is explicitly defined in <I>Type1</I>. </P
><P 

><B>Table 16 &ndash; Sample OPC UA Binary Encoded structure </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Field </P
></TD
><TD  
 valign="top"
><P 

>Bytes </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Type Id </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The identifier for Type1 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Encoding </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>0x1 for ByteString </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Length </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>28 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The value of field &lsquo;X&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NoOfY </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Y.A </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The value of field &lsquo;Y[0].A&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Y.B </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The value of field &lsquo;Y[0].B&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Y.A </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The value of field &lsquo;Y[1].A&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Y.B </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The value of field &lsquo;Y[1].B&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Z </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The value of field &lsquo;Z&rsquo; </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The OPC Binary Schema definition for the example above is: </P
><P 

>&lt;opc:StructuredType Name=&quot;Type2&quot;&gt;   &lt;opc:Field Name=&quot;A&quot; TypeName=&quot;opc:Int32&quot;/&gt;   &lt;opc:Field Name=&quot;B&quot; TypeName=&quot;opc:Int32&quot;/&gt; &lt;/opc:StructuredType&gt; </P
><P 

>&lt;opc:StructuredType Name=&quot;Type1&quot;&gt;   &lt;opc:Field Name=&quot;X&quot; TypeName=&quot;opc:Int32&quot;/&gt;   &lt;opc:Field Name=&quot;NoOfY&quot; TypeName=&quot;opc:Int32&quot;/&gt;   &lt;opc:Field Name=&quot;Y&quot; TypeName=&quot;Type2&quot; LengthField=&quot;NoOfY&quot;/&gt;   &lt;opc:Field Name=&quot;Z&quot; TypeName=&quot;opc:Int32&quot;/&gt; &lt;/opc:StructuredType&gt;<FONT size="+1"> </P
><H3 
 ID="LinkTarget_6299"
><FONT size="+1"><B> Structures with optional fields </H3
><P 

></B><I>Structures</I> with optional fields are encoded with an encoding mask and as a sequence of fields in the order that they appear in the definition. The encoding for each field is determined by the data type for the field. </P
><P 

>The <I>EncodingMask</I> is an unsigned integer. Each optional field is assigned exactly one bit, however, a single bit may control multiple fields. The bits assigned to fields may not be contiguous. Unassigned bits are set to 0 by encoders. Decoders shall report an error if assigned </P
><P 

>bits are not 0. The exact length of the <I>EncodingMask</I> is the minimum multiple of 8 bits that can contain all of the assigned bits. The exact assignment between bits and fields is specified by the schema for a type. </P
><P 

>The following is an example of a structure with optional fields using C++ syntax: </P
><P 

><FONT size="+1"> </P
><P 

><FONT color="#0000FF">class<FONT color="#000000"> TypeA </P
><P 

>{ </P
><P 

> UInt32 EncodingMask; </P
><P 

> <FONT color="#0000FF">Int32<FONT color="#000000"> X; </P
><P 

> <FONT color="#0000FF">Int32<FONT color="#000000"> O1; </P
><P 

> S<FONT color="#0000FF">Byte<FONT color="#000000"> Y; </P
><P 

> <FONT color="#0000FF">Int32<FONT color="#000000"> O2; </P
><P 

>}; </P
><P 

> </P
><P 

><FONT size="+1">O1 and O2 are optional fields. </P
><P 

>An instance of <I>TypeA</I> which contains one mandatory and two optional fields would be encoded as a byte sequence. The length of the byte sequence is depending on the available optional fields. An encoding mask field determines the available optional fields. </P
><P 

>An instance of <I>TypeA</I> where field O2 is available and field O1 is not available would be encoded as a 10 byte sequence. If the instance of <I>TypeA</I> was encoded in an ExtensionObject it would have the encoded form shown in Table 17. The length of the EncodingMask and the The <I>TypeI</I><I>d</I>, <I>Encoding</I> and the <I>Length</I> are fields defined by the <I>ExtensionObject</I>.  </P
><P 

><B>Table 17 &ndash; Sample OPC UA Binary Encoded Structure with optional fields </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Field </P
></TD
><TD  
 valign="top"
><P 

>Bytes </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Type Id </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The identifier for TypeA </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Encoding </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>0x1 for ByteString </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Length </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>10 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EncodingMask </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>0x02 for O2 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The value of X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Y </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>The value of Y </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>O2 </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The value of O2 </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The OPC Binary Schema definition for the example above is: </P
><P 

>&lt;opc:StructuredType Name=&quot;TypeA&quot;&gt;   &lt;opc:Field Name=&quot;Bit0&quot; TypeName=&quot;opc:Bit&quot; /&gt;   &lt;opc:Field Name=&quot;Bit1&quot; TypeName=&quot;opc:Bit&quot; /&gt;   &lt;opc:Field Name=&quot;Reserved&quot; TypeName=&quot;opc:Bit&quot; Length=&quot;6&quot; /&gt;   &lt;opc:Field Name=&quot;X&quot; TypeName=&quot;opc:Int32&quot; /&gt;   &lt;opc:Field Name=&quot;O1&quot; TypeName=&quot;opc:Int32&quot;        SwitchField=&quot;Bit0&quot; SwitchValue=&quot;1&quot; /&gt;   &lt;opc:Field Name=&quot;Y&quot; TypeName=&quot;opc:SByte&quot; /&gt;   &lt;opc:Field Name=&quot;O2&quot; TypeName=&quot;opc:Int32&quot;        SwitchField=&quot;Bit1&quot; SwitchValue=&quot;1&quot; /&gt; &lt;/opc:StructuredType&gt; </P
><H3 
 ID="LinkTarget_6387"
><B> Unions </H3
><P 

></B><I>Unions</I> are encoded as a switch value and one of the possible fields selected by the switch value. The encoding for the selected field is determined by the data type for the field. </P
><P 

>The switch value is a UInt32. </P
><P 

>The switch value is the index of the available union fields starting with 1. If the switch value is 0 then no field is present. For any value greater than the number of defined union fields the encoders or decoders shall report an error. </P
><P 

>A union with no fields present has the same meaning as a NULL value. </P
><P 

>The following is an example of a union using C++ syntax: </P
><P 

><FONT size="+1" color="#0000FF">class<FONT color="#000000"> Type2 </P
><P 

>{ </P
><P 

> <FONT color="#0000FF">Int32<FONT color="#000000"> A; </P
><P 

> <FONT color="#0000FF">Int32<FONT color="#000000"> B; </P
><P 

>}; </P
><P 

> </P
><P 

><FONT color="#0000FF">class<FONT color="#000000"> Type1 </P
><P 

>{ </P
><P 

> U<FONT color="#0000FF">Int32<FONT color="#000000"> SwitchValue; </P
><P 

> union </P
><P 

> { </P
><P 

>  <FONT color="#0000FF">Int32<FONT color="#000000"> Field1; </P
><P 

>  Type2 Field2; </P
><P 

> } Union; </P
><P 

>}; </P
><P 

> </P
><P 

><FONT size="+1">An instance of <I>Type1</I> would be encoded as byte sequence. The length of the byte sequence is depending on the selected field.  </P
><P 

>An instance of <I>Type1 </I>where field <I>Field1 </I>is available would be encoded as 8 byte sequence. If the instance of Type 1 was encoded in an <I>ExtensionObject</I> it would have the encoded form shown in Table 18. The <I>TypeId</I>, <I>Encoding</I> and the <I>Length</I> are fields defined by the <I>ExtensionObject</I>. </P
><P 

><B>Table 18 &ndash; Sample OPC UA Binary Encoded Structure </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Field </P
></TD
><TD  
 valign="top"
><P 

>Bytes </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Type Id </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The identifier for Type1 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Encoding </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>0x1 for ByteString </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Length </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>8 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SwitchValue </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>1 for Field1 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Field1 </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>The value of Field1 </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

>The OPC Binary Schema definition for the example above is: </P
><P 

>&lt;opc:StructuredType Name=&quot;Type1&quot;&gt;   &lt;opc:Field Name=&quot;SwitchValue&quot; TypeName=&quot;opc:UInt32&quot; /&gt;   &lt;opc:Field Name=&quot;Field1&quot; TypeName=&quot;opc:Int32&quot;        SwitchField=&quot;SwitchValue&quot; SwitchValue=&quot;1&quot;/&gt;   &lt;opc:Field Name=&quot;Field2&quot; TypeName=&quot;Type2&quot;        SwitchField=&quot;SwitchValue&quot; SwitchValue=&quot;2&quot;/&gt; &lt;/opc:StructuredType&gt; </P
><H3 
 ID="LinkTarget_6465"
><B> Messages </H3
><P 

></B>Messages are <I>Structures</I> encoded as sequence of bytes prefixed by the <I>NodeId</I> of for the OPC UA Binary <I>DataTypeEncoding</I><I> </I>defined for the Message. </P
><P 

>Each OPC UA <I>Service</I> described in <A href="#LinkTarget_4407" href="#">
Part 4</A>
 has a request and response <I>Message</I>. The <I>DataTypeEncoding</I> IDs assigned to each <I>Service</I> are specified in <A href="#LinkTarget_9385" href="#">
A.3</A>
. </P
><H2 
 ID="LinkTarget_6477"
><B>5.3 XML </H2
><H3 
 ID="LinkTarget_6478"
> Built-in Types </H3
><H4 
 ID="LinkTarget_6479"
>5.3.1.1 General </H4
><P 

></B>Most built-in types are encoded in XML using the formats defined in <A href="#LinkTarget_4416" href="#">
XML Schema Part 2</A>
 specification. Any special restrictions or usages are discussed below. Some of the built-in types have an XML Schema defined for them using the syntax defined in <A href="#LinkTarget_4416" href="#">
XML Schema Part 2</A>
. </P
><P 

>The prefix <I>xs:</I> is used to denote a symbol defined by the XML Schema specification. </P
><H4 
 ID="LinkTarget_6491"
><B>5.3.1.2 Boolean </H4
><P 

></B>A Boolean value is encoded as an <I>xs:boolean</I> value. </P
><H4 
 ID="LinkTarget_6494"
><B>5.3.1.3 Integer </H4
><P 

></B>Integer values are encoded using one of the subtypes of the <I>xs:decimal</I> type. The mappings between the OPC UA integer types and XML schema data types are shown in <A href="#LinkTarget_6502" href="#">
Table 17</A>
. </P
><P 

><B>Table 17 &ndash; XML Data Type Mappings for Integers </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>XML Type </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SByte </P
></TD
><TD  
 valign="top"
><P 

>xs:byte </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>xs:unsignedByte </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int16 </P
></TD
><TD  
 valign="top"
><P 

>xs:short </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>xs:unsignedShort </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>xs:int </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>xs:unsignedInt </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int64 </P
></TD
><TD  
 valign="top"
><P 

>xs:long </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt64 </P
></TD
><TD  
 valign="top"
><P 

>xs:unsignedLong </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_6559"
><FONT size="+1"><B>5.3.1.4 Floating Point </H4
><P 

></B>Floating point values are encoded using one of the XML floating point types. The mappings between the OPC UA floating point types and XML schema data types are shown in <A href="#LinkTarget_6567" href="#">
Table 18</A>
. </P
><P 

><B>Table 18 &ndash; XML Data Type Mappings for Floating Points </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>XML Type </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Float </P
></TD
><TD  
 valign="top"
><P 

>xs:float </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>xs:double </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The XML floating point type supports positive infinity (INF), negative infinity (-INF) and not-a-number (NaN).  </P
><H4 
 ID="LinkTarget_6589"
><B>5.3.1.5 String </H4
><P 

></B>A <I>String</I> value is encoded as an <I>xs:string</I> value. </P
><H4 
 ID="LinkTarget_6591"
><B>5.3.1.6 DateTime </H4
><P 

></B>A <I>DateTime</I> value is encoded as an <I>xs:dateTime</I> value. </P
><P 

>All DateTime values shall be encoded as UTC times or with the time zone explicitly specified. </P
><P 

>Correct: </P
><P 

><FONT size="+1">2002-10-10T00:00:00+05:00 </P
><P 

>2002-10-09T19:00:00Z </P
><P 

><FONT size="+1">Incorrect: </P
><P 

><FONT size="+1">2002-10-09T19:00:00 </P
><P 

><FONT size="+1">It is recommended that all <I>xs:dateTime</I> values be represented in UTC format. </P
><P 

>The earliest and latest date/time values that can be represented on a <I>DevelopmentPlatform</I> have special meaning and shall not be literally encoded in XML. </P
><P 

>The earliest date/time value on a <I>DevelopmentPlatform</I> shall be encoded in XML as '0001-01-01T00:00:00Z'. </P
><P 

>The latest date/time value on a <I>DevelopmentPlatform</I> shall be encoded in XML as '9999-12-31T23:59:59Z' </P
><P 

>If a decoder encounters a <I>xs:dateTime</I> value that cannot be represented on the <I>DevelopmentPlatform</I> it should convert the value to either the earliest or latest date/time that </P
><P 

>can be represented on the <I>DevelopmentPlatform</I>. The XML decoder should not generate an error if it encounters an out of range date value. </P
><P 

>The earliest date/time value on a <I>DevelopmentPlatform</I> is equivalent to a null date/time value. </P
><H4 
 ID="LinkTarget_6607"
><B>5.3.1.7 Guid </H4
><P 

></B>A <I>Guid</I> is encoded using the string representation defined in <A href="#LinkTarget_5024" href="#">
5.1.3</A>
. </P
><P 

>The XML schema for a <I>Guid</I> is: </P
><P 

>&lt;xs:complexType name=&quot;Guid&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;String&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><H4 
 ID="LinkTarget_6621"
><B>5.3.1.8 ByteString </H4
><P 

></B>A <I>ByteString</I> value is encoded as an <I>xs:base64Binary</I> value (see <A href="#LinkTarget_4515" href="#">
Base64</A>
). </P
><P 

>The XML schema for a <I>ByteString </I>is: </P
><P 

>&lt;xs:element name=&quot;ByteString&quot; type=&quot;xs:base64Binary&quot; nillable=&quot;true&quot;/&gt; </P
><P 

> </P
><H4 
 ID="LinkTarget_6631"
><B>5.3.1.9 XmlElement </H4
><P 

></B>An <I>XmlElement</I> value is encoded as an <I>xs:complexType</I> with the following XML schema: </P
><P 

>&lt;xs:complexType name=&quot;XmlElement&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:any minOccurs=&quot;0&quot; maxOccurs=&quot;1&quot; processContents=&quot;lax&quot; /&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">XmlElements may only be used inside <I>Variant</I> or <I>ExtensionObject</I> values. </P
><H4 
 ID="LinkTarget_6640"
><B>5.3.1.10 NodeId </H4
><P 

></B>A <I>NodeId</I> value is encoded as an xs:string with the syntax: </P
><P 

><FONT size="+1">ns=&lt;namespaceindex&gt;;&lt;type&gt;=&lt;value&gt; </P
><P 

><FONT size="+1">The elements of the syntax are described in <A href="#LinkTarget_6650" href="#">
Table 19</A>
. </P
><P 

><B>Table 19 &ndash; Components of NodeId </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Field </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>&lt;namespaceindex&gt; </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>The <I>NamespaceI</I><I>ndex</I> formatted as a base 10 number. </P
><P 

>If the index is 0 then the entire 'ns=0;' clause shall be omitted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&lt;type&gt; </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
></TD
><TD  
 valign="top"
><P 

>A flag that specifies the <I>IdentifierType</I>. </P
><P 

>The flag has the following values: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>i </P
></TD
><TD  
 valign="top"
><P 

>NUMERIC (UInteger) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>s </P
></TD
><TD  
 valign="top"
><P 

>STRING (String) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>g </P
></TD
><TD  
 valign="top"
><P 

>GUID (Guid) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>b </P
></TD
><TD  
 valign="top"
><P 

>OPAQUE (ByteString) </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">&lt;value&gt; </P
></TD
><TD  
 valign="top"
><P 

>* </P
></TD
><TD  
 valign="top"
><P 

>The <I>I</I><I>dentifier</I> encoded as string. </P
><P 

>The <I>Identifier</I> is formatted using the XML data type mapping for the <I>IdentifierT</I><I>ype</I>. </P
><P 

>Note that the <I>Identifier</I> may contain any non-null UTF8 character including whitespace. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

>Examples of <I>NodeIds:</I> </P
><P 

>i=13 </P
><P 

>ns=10;i=-1 </P
><P 

>ns=10;s=Hello:World </P
><P 

>g=09087e75-8e5e-499b-954f-f2a9603db28a </P
><P 

>ns=1;b=M/RbKBsRVkePCePcx24oRA== </P
><P 

>The XML schema for a <I>NodeId</I> is: </P
><P 

>&lt;xs:complexType name=&quot;NodeId&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;Identifier&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><H4 
 ID="LinkTarget_6724"
><B>5.3.1.11 ExpandedNodeId </H4
><P 

></B>An <I>ExpandedNodeId </I>value is encoded as an xs:string with the syntax: </P
><P 

><FONT size="+1">svr=&lt;serverindex&gt;;ns=&lt;namespaceindex&gt;;&lt;type&gt;=&lt;value&gt; </P
><P 

>or </P
><P 

>svr=&lt;serverindex&gt;;nsu=&lt;uri&gt;;&lt;type&gt;=&lt;value&gt; </P
><P 

> </P
><P 

><FONT size="+1">The possible fields are shown in <A href="#LinkTarget_6738" href="#">
Table 20</A>
. </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Table 20 &ndash; Components of ExpandedNodeId </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Field </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>&lt;serverindex&gt; </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The <I>ServerI</I><I>ndex</I> formatted as a base 10 number. </P
><P 

>If the <I>ServerIndex</I> is 0 then the entire 'svr=0;' clause shall be omitted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&lt;namespaceindex&gt; </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>The <I>NamespaceI</I><I>ndex</I> formatted as a base 10 number. </P
><P 

>If the <I>NamespaceIndex</I> is 0 then the entire 'ns=0;' clause shall be omitted. </P
><P 

>The <I>NamespaceIndex</I> shall not be present if the URI is present. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&lt;uri&gt; </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The <I>NamespaceUri</I> formatted as a string. </P
><P 

>Any reserved characters in the URI shall be replaced with a &lsquo;%&rsquo; followed by its 8 bit ANSI value encoded as two hexadecimal digits (case insensitive). For example, the character &lsquo;;&rsquo; would be replaced by &lsquo;%3B&rsquo;. </P
><P 

>The reserved characters are  &lsquo;;&rsquo; and &lsquo;%&rsquo;. </P
><P 

>If the <I>NamespaceUri</I> is null or empty then 'nsu=;' clause shall be omitted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&lt;type&gt; </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
></TD
><TD  
 valign="top"
><P 

>A flag that specifies the <I>IdentifierType</I><I>.</I> </P
><P 

>This field is described in <A href="#LinkTarget_6650" href="#">
Table 19</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&lt;value&gt; </P
></TD
><TD  
 valign="top"
><P 

>* </P
></TD
><TD  
 valign="top"
><P 

>The <I>Identifier</I><I> </I>encoded as string. </P
><P 

>This field is described in <A href="#LinkTarget_6650" href="#">
Table 19</A>
. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The XML schema for an <I>ExpandedNodeId</I> is: </P
><P 

>&lt;xs:complexType name=&quot;ExpandedNodeId&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;Identifier&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><P 

><FONT color="#0000FF"> </P
><H4 
 ID="LinkTarget_6815"
><FONT color="#000000"><B>5.3.1.12 StatusCode </H4
><P 

></B>A <I>StatusCode </I>is encoded as an <I>xs:unsignedInt</I> with the following XML schema: </P
><P 

>&lt;xs:complexType name=&quot;StatusCode&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;Code&quot; type=&quot;xs:unsignedInt&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><H4 
 ID="LinkTarget_6822"
><B>5.3.1.13 DiagnosticInfo </H4
><P 

></B>An <I>DiagnosticInfo </I>value is encoded as an <I>xs:complexType</I> with the following XML schema: </P
><P 

>&lt;xs:complexType name=&quot;DiagnosticInfo&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;SymbolicId&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;NamespaceUri&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;Locale&quot; type=&quot;xs:int&quot; minOccurs=&quot;0/&gt; </P
><P 

>    &lt;xs:element name=&quot;LocalizedText&quot; type=&quot;xs:int&quot; minOccurs=&quot;0/&gt;     </P
><P 

>    &lt;xs:element name=&quot;AdditionalInfo&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt; </P
><P 

>    &lt;xs:element name=&quot;InnerStatusCode&quot; type=&quot;tns:StatusCode&quot; </P
><P 

>      minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;InnerDiagnosticInfo&quot; type=&quot;tns:DiagnosticInfo&quot; </P
><P 

>      minOccurs=&quot;0&quot; /&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><P 

><I>DiagnosticInfo </I>allows unlimited nesting which could result in stack overflow errors even if the message size is less than the maximum allowed. Decoders shall support at least 100 nesting levels. Decoders shall report an error if the number of nesting levels exceeds what it supports. </P
><P 

> </P
><H4 
 ID="LinkTarget_6840"
><B>5.3.1.14 QualifiedName </H4
><P 

></B>A <I>QualifiedName</I> value is encoded as an <I>xs:complexType</I> with the following XML schema: </P
><P 

>&lt;xs:complexType name=&quot;QualifiedName&quot;&gt; </P
><P 

>   &lt;xs:sequence&gt; </P
><P 

>     &lt;xs:element name=&quot;NamespaceIndex&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>     &lt;xs:element name=&quot;Name&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>   &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_6849"
><FONT size="+1"><B>5.3.1.15 LocalizedText </H4
><P 

></B>A <I>LocalizedText</I> value is encoded as an <I>xs:complexType</I> with the following XML schema: </P
><P 

>&lt;xs:complexType name=&quot;LocalizedText&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;Locale&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;Text&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><H4 
 ID="LinkTarget_6857"
><B>5.3.1.16 ExtensionObject </H4
><P 

></B>An <I>ExtensionObject </I>value is encoded as an <I>xs:complexType</I> with the following XML schema: </P
><P 

>&lt;xs:complexType name=&quot;ExtensionObject&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;TypeId&quot; type=&quot;tns:NodeId&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;Body&quot; minOccurs=&quot;0&quot;&gt; </P
><P 

>      &lt;xs:complexType&gt; </P
><P 

>        &lt;xs:sequence&gt; </P
><P 

>          &lt;xs:any minOccurs=&quot;0&quot; processContents=&quot;lax&quot;/&gt; </P
><P 

>        &lt;/xs:sequence&gt; </P
><P 

>      &lt;/xs:complexType&gt; </P
><P 

>    &lt;/xs:element&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><P 

>The body of the <I>ExtensionObject </I>contains a single element which is either a <I>ByteString</I> or XML encoded <I>Structure</I>. A decoder can distinguish between the two by inspecting the top level </P
><P 

>element. An element with the name tns:ByteString contains an OPC UA Binary encoded body. Any other name shall contain an OPC UA XML encoded body. </P
><P 

>The <I>TypeId</I> is the <I>NodeId</I> for the <I>DataTypeEncoding</I> <I>Object</I>. </P
><H4 
 ID="LinkTarget_6875"
><B>5.3.1.17 Variant </H4
><P 

></B>A <I>Variant </I>value is encoded as an <I>xs:complexType</I> with the following XML schema: </P
><P 

>&lt;xs:complexType name=&quot;Variant&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;Value&quot; minOccurs=&quot;0&quot; nillable=&quot;true&quot;&gt; </P
><P 

>      &lt;xs:complexType&gt; </P
><P 

>        &lt;xs:sequence&gt; </P
><P 

>          &lt;xs:any minOccurs=&quot;0&quot; processContents=&quot;lax&quot;/&gt; </P
><P 

>        &lt;/xs:sequence&gt; </P
><P 

>      &lt;/xs:complexType&gt; </P
><P 

>    &lt;/xs:element&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><P 

><FONT color="#0000FF"> </P
><P 

><FONT color="#000000">If the <I>Variant</I> represents a scalar value then it shall contain a single child element with the name of the built-in type. For example, the single precision floating point value 3,141 5 would be encoded as: </P
><P 

> </P
><P 

>&lt;tns:Float&gt;3.1415&lt;/tns:Float&gt; </P
><P 

> </P
><P 

>If the <I>Variant</I> represents a single dimensional array then it shall contain a single child element with the prefix 'ListOf' and the name built-in type. For example an <I>Array</I> of strings would be encoded as: </P
><P 

> </P
><P 

>&lt;tns:ListOfString&gt; </P
><P 

>  &lt;tns:String&gt;Hello&lt;/tns:String&gt; </P
><P 

>  &lt;tns:String&gt;World&lt;/tns:String&gt; </P
><P 

>&lt;/tns:ListOfString&gt; </P
><P 

> </P
><P 

>If the <I>Variant</I> represents a multidimensional <I>Array</I> then it shall contain a child element with the name &lsquo;<I>Matrix&rsquo;</I> with the two sub-elements shown in this example: </P
><P 

> </P
><P 

>&lt;tns:Matrix&gt; </P
><P 

>  &lt;tns:Dimensions&gt; </P
><P 

>    &lt;tns:Int32&gt;2&lt;/tns:Int32&gt; </P
><P 

>    &lt;tns:Int32&gt;2&lt;/tns:Int32&gt; </P
><P 

>  &lt;/tns:Dimensions&gt; </P
><P 

>  &lt;tns:Elements&gt; </P
><P 

>    &lt;tns:String&gt;A&lt;/tns:String&gt; </P
><P 

>    &lt;tns:String&gt;B&lt;/tns:String&gt; </P
><P 

>    &lt;tns:String&gt;C&lt;/tns:String&gt; </P
><P 

>    &lt;tns:String&gt;D&lt;/tns:String&gt; </P
><P 

>  &lt;/tns:Elements&gt; </P
><P 

>&lt;/tns:Matrix&gt; </P
><P 

><FONT color="#0000FF"> </P
><P 

><FONT color="#000000">In this example, the array has the following elements: </P
><P 

><FONT size="+1"> [0,0] = &quot;A&quot;; [0,1] = &quot;B&quot;; [1,0] = &quot;C&quot;; [1,1] = &quot;D&quot; </P
><P 

><FONT size="+1">The elements of a multi-dimensional <I>Array</I> are always flattened into a single dimensional <I>Array</I> where the higher rank dimensions are serialized first. This single dimensional <I>Array</I> is encoded as a child of the &lsquo;Elements&rsquo; element. The &lsquo;Dimensions&rsquo; element is an <I>Array</I> of <I>Int32</I> values that specify the dimensions of the array starting with the lowest rank dimension. The multi-dimensional <I>Array</I> can be reconstructed by using the dimensions encoded. All dimensions shall be specified and shall be greater than zero. If the dimensions are inconsistent with the number of elements in the array then the decoder shall stop and raise a <I>Bad_DecodingError</I>. </P
><P 

>The complete set of built-in type names is found in <A href="#LinkTarget_4798" href="#">
Table 1</A>
. </P
><H4 
 ID="LinkTarget_6926"
><B>5.3.1.18 DataValue </H4
><P 

></B>A <I>DataValue</I> value is encoded as a <I>xs:complexType</I> with the following XML schema: </P
><P 

>&lt;xs:complexType name=&quot;DataValue&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;Value&quot; type=&quot;tns:Variant&quot; minOccurs=&quot;0&quot; </P
><P 

>      nillable=&quot;true&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;StatusCode&quot; type=&quot;tns:StatusCode&quot; </P
><P 

>      minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;SourceTimestamp&quot; type=&quot;xs:dateTime&quot; </P
><P 

>      minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;SourcePicoseconds&quot; type=&quot;xs:unsignedShort&quot; </P
><P 

>      minOccurs=&quot;0&quot;/&gt; </P
><P 

>    &lt;xs:element name=&quot;ServerTimestamp&quot; type=&quot;xs:dateTime&quot; </P
><P 

>      minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;ServerPicoseconds&quot; type=&quot;xs:unsignedShort&quot; </P
><P 

>      minOccurs=&quot;0&quot;/&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><H3 
 ID="LinkTarget_6944"
><B> Enumerations </H3
><P 

></B><I>Enumerations</I> that are used as parameters in the <I>Messages</I> defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
 are encoded as <I>xs:string</I> with the following syntax: </P
><P 

><FONT size="+1">&lt;symbol&gt;_&lt;value&gt; </P
><P 

><FONT size="+1">The elements of the syntax are described in <A href="#LinkTarget_6959" href="#">
Table 21</A>
. </P
><P 

><B>Table 21 &ndash; Components of Enumeration </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Field </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>&lt;symbol&gt; </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The symbolic name for the enumerated value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&lt;value&gt; </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The numeric value associated with enumerated value. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

>For example, the XML schema for the <I>NodeClass</I> enumeration is: </P
><P 

>&lt;xs:simpleType name=&quot;NodeClass&quot;&gt; </P
><P 

>  &lt;xs:restriction base=&quot;xs:string&quot;&gt; </P
><P 

>    &lt;xs:enumeration value=&quot;Unspecified_0&quot; /&gt; </P
><P 

>    &lt;xs:enumeration value=&quot;Object_1&quot; /&gt; </P
><P 

>    &lt;xs:enumeration value=&quot;Variable_2&quot; /&gt; </P
><P 

>    &lt;xs:enumeration value=&quot;Method_4&quot; /&gt; </P
><P 

>    &lt;xs:enumeration value=&quot;ObjectType_8&quot; /&gt; </P
><P 

>    &lt;xs:enumeration value=&quot;VariableType_16&quot; /&gt; </P
><P 

>    &lt;xs:enumeration value=&quot;ReferenceType_32&quot; /&gt; </P
><P 

>    &lt;xs:enumeration value=&quot;DataType_64&quot; /&gt; </P
><P 

>    &lt;xs:enumeration value=&quot;View_128&quot; /&gt; </P
><P 

>  &lt;/xs:restriction&gt; </P
><P 

>&lt;/xs:simpleType&gt; </P
><P 

><FONT color="#0000FF"> </P
><P 

><FONT color="#000000"><I>Enumerations</I> that are stored in a <I>Variant</I> are encoded as an <I>Int32</I> value. </P
><P 

>For example, any <I>Variable</I> could have a value with a <I>DataType</I> of <I>NodeClass</I>. In this case the corresponding numeric value is placed in the <I>Variant</I> (e.g. <I>NodeClass</I>::<I>Object</I> would be stored as a 1). </P
><H3 
 ID="LinkTarget_7003"
><B> Arrays </H3
><P 

></B><I>Array</I> parameters are always encoded by wrapping the elements in a container element and inserting the container into the structure. The name of the container element should be the name of the parameter. The name of the element in the array shall be the type name. </P
><P 

>For example, the <I>Read</I> service takes an array of <I>ReadValueIds. </I>The XML schema would look like: </P
><P 

>&lt;xs:complexType name=&quot;ListOfReadValueId&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;ReadValueId&quot; type=&quot;tns:ReadValueId&quot; </P
><P 

>       minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot; nillable=&quot;true&quot; /&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><P 

>The nillable attribute shall be specified because XML encoders will drop elements in arrays if those elements are empty. </P
><H3 
 ID="LinkTarget_7014"
><B> Structures </H3
><P 

></B>Structures are encoded as a <I>xs:complexType</I> with all of the fields appearing in a sequence. All fields are encoded as an <I>xs:element</I>. All elements have minOccurs set 0 to allow for compact XML representations. If an element is missing the default value for the field type is used. If the field type is a structure the default value is an instance of the structure with default values for each contained field. </P
><P 

>Types which have a NULL value defined shall have the nillable=&quot;true&quot; flag set. </P
><P 

>For example, the Read service has a <I>ReadValueId</I> structure in the request. The XML schema would look like: </P
><P 

>&lt;xs:complexType name=&quot;ReadValueId&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;NodeId&quot; type=&quot;tns:NodeId&quot; </P
><P 

>       minOccurs=&quot;0&quot; nillable=&quot;true&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;AttributeId&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;IndexRange&quot; type=&quot;xs:string&quot; </P
><P 

>       minOccurs=&quot;0&quot; nillable=&quot;true&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;DataEncoding&quot; type=&quot;tns:NodeId&quot;  </P
><P 

>       minOccurs=&quot;0&quot; nillable=&quot;true&quot; /&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt;<FONT color="#0000FF">  </P
><H3 
 ID="LinkTarget_7029"
><FONT color="#000000"><B> Structures with optional fields </H3
><P 

></B><I>Structures</I> with optional fields are encoded as a <I>xs:complexType</I> with all of the fields appearing in a sequence. The first element is a bit mask that specifies what fields are encoded. The assignment of bits in the mask is defined by the <I>EncodingTable</I> attribute. The remaining elements are the fields. If a particular field does not have a bit assigned in the <I>EncodingTable</I> then the field is mandatory.  </P
><P 

>To allow for compact XML, any field can be omitted from the XML so decoders shall assign default values based on the field type for any mandatory fields. </P
><P 

>The<I> EncodingTable</I> attribute is sequence of comma seperated values. Each value consists of the name of a field and a zero based bit position in the <I>EncodingMask </I>element<I>.</I>  </P
><P 

>For example the following <I>Structure</I> has one mandatory and two optional fields. The XML schema would look like: </P
><P 

>&lt;xs:complexType name=&quot;OptionalType&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;EncodingMask&quot; type=&quot;xs:unsignedLong&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;X&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;O1&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;Y&quot; type=&quot;xs:byte&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>    &lt;xs:element name=&quot;O2&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot; /&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>  &lt;xs:attribute name=&quot;EncodingTable&quot; fixed=&quot;O1:0,O2:1&quot; /&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><P 

>In the example above, the EncodingMask has a value of 3 if both O1 and O2 are encoded. Encoders shall set unused bits to 0 and decoders shall ignore unused bits. </P
><H3 
 ID="LinkTarget_7046"
><B> Unions </H3
><P 

></B>Unions are encoded as a <I>xs:complexType</I> containing a <I>xs:sequence</I> with two entries.  </P
><P 

>The first entry in the sequence is the <I>SwitchField</I> <I>xs:element</I> and specifies a numeric value which identifies which element in the xs:choice is encoded. The name of element may be any valid text. </P
><P 

>The second entry in the sequence is an xs:choice which specifies the possible fields. The order in the xs:choice determines the value of the <I>SwitchField </I>when that choice is encoded. The first element has a <I>SwitchField </I>value<I> </I>of 1 and the last value has a <I>SwitchField </I>equal to the number of choices.  </P
><P 

>No additional elements in the sequence are permitted. If the <I>SwitchField </I>is missing or 0 then the union has a NULL value.<I> </I>Encoders or decoders shall report an error for any <I>SwitchField</I> value greater than the number of defined union fields.  </P
><P 

>For example the following union has two fields. The XML schema would look like: </P
><P 

>&lt;xs:complexType name=&quot;Type1&quot;&gt; </P
><P 

>  &lt;xs:sequence&gt; </P
><P 

>    &lt;xs:element name=&quot;SwitchField&quot;  </P
><P 

>       type=&quot;xs:unsignedInt&quot; minOccurs=&quot;0&quot;/&gt; </P
><P 

>    &lt;xs:choice&gt; </P
><P 

>      &lt;xs:element name=&quot;Field1&quot; type=&quot;xs:int&quot; minOccurs=&quot;0&quot;/&gt; </P
><P 

>      &lt;xs:element name=&quot;Field2&quot; type=&quot;tns:Field2&quot; minOccurs=&quot;0&quot;/&gt;     &lt;/xs:choice&gt; </P
><P 

>  &lt;/xs:sequence&gt; </P
><P 

>&lt;/xs:complexType&gt; </P
><H3 
 ID="LinkTarget_7061"
><B> Messages </H3
><P 

></B><I>Messages</I> are encoded as an <I>xs:</I>complexType. The parameters in each <I>Message </I>are serialized in the same way the fields of a <I>Structure</I> are serialized. </P
><H1 
 ID="LinkTarget_7063"
><FONT size="+1"><B>6 Message SecurityProtocols </H1
><H2 
 ID="LinkTarget_7064"
><FONT size="+1">6.1 Security handshake </H2
><P 

></B>All <I>SecurityProtocols</I> shall implement the <I>OpenSecureChannel</I> and <I>CloseSecureChannel</I> services defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
. These <I>Services</I> specify how to establish a <I>SecureChannel</I> and how to apply security to <I>Messages</I> exchanged over that <I>SecureChannel</I>. The <I>Messages</I> exchanged and the security algorithms applied to them are shown in <A href="#LinkTarget_7086" href="#">
Figure 10</A>
. </P
><P 

><I>SecurityProtocols</I> shall support three <I>SecurityModes</I>: <I>None</I>, <I>Sign</I> and <I>SignAndEncrypt</I>. If the <I>SecurityMode</I> is <I>None</I> then no security is used and the security handshake shown in  <A href="#LinkTarget_7086" href="#">
Figure 10</A>
 is not required. However, a <I>SecurityProtocol</I> implementation shall still maintain a logical channel and provide a unique identifier for the <I>SecureChannel</I>.  </P
><P 

> <DIV class="Sect" 
 Alt=""
>ClientServerOpenSecureChannel RequestSigned with Client Private KeyEncrypted with Server Public KeyAsymmetricSignatureAlgorithmAsymmetricEncryptionAlgorithmorAsymmetricKeyWrapAlgorithmSymmetricEncryptionAlgorithmOpenSecureChannel ResponseSigned with Server Private KeyEncrypted with Client Public KeyCreateSession RequestSigned with Client Signing KeyEncrypted with Server Encryption KeySymmetricEncryptionAlgorithmKeyDerivationAlgorithmSymmetricSignatureAlgorithmKeyDerivationAlgorithmDerivedSignatureKeyLengthCreateSession ResponseSigned with Server Signing KeyEncrypted with Client Encryption Key</DIV
></P
><P 

><B>Figure 10 &ndash; Security handshake </P
><P 

></B>Each <I>SecurityProtocol</I> mapping specifies exactly how to apply the security algorithms to the <I>Message</I>. A set of security algorithms that shall be used together during a security handshake is called a <I>SecurityPolicy</I>. <A href="#LinkTarget_4409" href="#">
Part 7</A>
 defines standard <I>SecurityPolicies</I> as parts of the standard <I>Profiles</I> which OPC UA applications are expected to support. <A href="#LinkTarget_4409" href="#">
Part 7</A>
 also defines a URI for each standard <I>SecurityPolicy</I>. </P
><P 

>A <I>Stack</I> is expected to have built in knowledge of the <I>SecurityPolicies</I> that it supports. <I>Applications</I> specify the<I> SecurityPolicy </I>they wish to use by passing the URI to the<I> Stack</I>. </P
><P 

><A href="#LinkTarget_7121" href="#">
Table 22</A>
 defines the contents of a <I>SecurityPolicy</I><I>. </I>Each<I> </I><I>SecurityProtocol</I> mapping specifies how to use each of the parameters in the <I>SecurityPolic</I><I>y. A </I><I>SecurityProtocol</I><I> </I>mapping<I> </I>may not make use of all of the parameters. </P
><P 

><B>Table 22 &ndash; SecurityPolicy </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PolicyUri </P
></TD
><TD  
 valign="top"
><P 

>The URI assigned to the <I>SecurityPolicy</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SymmetricSignatureAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>The URI of the symmetric signature algorithm to use. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SymmetricEncryptionAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>The URI of the symmetric key encryption algorithm to use. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AsymmetricSignatureAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>The URI of the asymmetric signature algorithm to use. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AsymmetricKeyWrapAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>The URI of the asymmetric key wrap algorithm to use. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AsymmetricEncryptionAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>The URI of the asymmetric key encryption algorithm to use. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MinAsymmetricKeyLength  </P
></TD
><TD  
 valign="top"
><P 

>The minimum length for an asymmetric key. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MaxAsymmetricKeyLength  </P
></TD
><TD  
 valign="top"
><P 

>The maximum length for an asymmetric key. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>KeyDerivationAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>The key derivation algorithm to use. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DerivedSignatureKeyLength </P
></TD
><TD  
 valign="top"
><P 

>The length in bits of the derived key used for <I>Message</I> authentication. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CertificateSignatureAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>The URI of the hash algorithm used to sign certificates. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>AsymmetricEncryptionAlgorithm</I> is used when encrypting the entire <I>Message</I> with an asymmetric key. Some <I>SecurityProtocol</I><I>s </I>do not encrypt the entire <I>Message</I> with an asymmetric key. Instead, they use the <I>AsymmetricKeyWrapAlgorithm</I> to encrypt a symmetric key and then use the <I>SymmetricEncryptionAlgorithm</I> to encrypt the <I>Messag</I><I>e</I>. </P
><P 

>The <I>AsymmetricSignatureAlgorithm</I> is used to sign a <I>Message</I> with an asymmetric key. </P
><P 

>The <I>KeyDerivationAlgorithm</I> is used to create the keys used to secure <I>Messages</I> sent over the <I>SecureChannel</I>. The length of the keys used for encryption is implied by the <I>SymmetricEncryptionAlgorithm</I>. The length of the keys used for creating <I>Symmetric Signatures</I> depends on the <I>SymmetricSignatureAlgorithm</I> and may be different from the encryption key length. </P
><P 

>The <I>CertificateSignatureAlgorithm</I> is used to sign the <I>Certificates</I> used for asymmetric cryptogrophy. This algorithm is minimum required algorithm. Stronger algorithms are allowed. </P
><H2 
 ID="LinkTarget_7201"
><B>6.2 Certificates </H2
><H3 
 ID="LinkTarget_7202"
> General </H3
><P 

></B>OPC UA<I> Applications</I> use <I>Certificates</I> to store the <I>Public Keys</I> needed for <I>Asymmetric Cryptography </I>operations. All <I>SecurityProtocols</I> use X509 Version 3 <I>Certificates</I> (see <A href="#LinkTarget_4485" href="#">
X509</A>
) encoded using the DER format (see <A href="#LinkTarget_4521" href="#">
X690</A>
). <I>Certificates</I> used by OPC UA <I>Applications</I> shall also conform to <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
 which defines a profile for X509 <I>Certificates</I> when they are used as part of an Internet based <I>Application</I>. </P
><P 

>The <I>ServerCertificate</I> and <I>ClientCertificate</I> parameters used in the abstract <I>OpenSecureChannel</I> service are instances of the <I>ApplicationInstance Certificate</I> <I>Data Type</I>. Subclause <A href="#LinkTarget_7229" href="#">
6.2.2</A>
 describes how to create an X509 <I>Certificate</I> that can be used as an <I>ApplicationInstance Certificate</I>. </P
><P 

>The <I>ServerSoftwareCertificates</I> and <I>ClientSoftwareCertificates</I> parameters in the abstract <I>CreateSession</I> and <I>ActivateSession</I> <I>Services</I> are instances of the <I>SignedSoftwareCertificate</I> <I>Data Type</I>. Subclause <A href="#LinkTarget_7420" href="#">
6.2.3</A>
 describes how to create an X509 <I>Certificate</I> that can be used as a <I>SignedSoftwareCertificate</I>. </P
><H3 
 ID="LinkTarget_7229"
><B> Application Instance Certificate </H3
><P 

></B>An <I>ApplicationInstance Certificate</I> is a <I>ByteString</I> containing the DER encoded form (see <A href="#LinkTarget_4521" href="#">
X690</A>
) of an X509v3 <I>Certificate</I>. This <I>Certificate</I> is issued by certifying authority and identifies an instance of an <I>Application</I> running on a single host. The X509v3 fields contained in an <I>ApplicationInstance Certificate</I> are described in <A href="#LinkTarget_7257" href="#">
Table 23</A>
. The fields are defined completely in <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
. </P
><P 

><A href="#LinkTarget_7257" href="#">
Table 23</A>
 also provides a mapping from the <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
 terms to the terms used in the abstract definition of an <I>ApplicationInstanceCertificate</I> defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
.  </P
><P 

><B>Table 23 &ndash; ApplicationInstanceCertificate </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Part 4  Parameter Name </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ApplicationInstanceCertificate </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>An X509v3 <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> version </P
></TD
><TD  
 valign="top"
><P 

> version </P
></TD
><TD  
 valign="top"
><P 

>shall be &ldquo;V3&rdquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serialNumber </P
></TD
><TD  
 valign="top"
><P 

> serialNumber </P
></TD
><TD  
 valign="top"
><P 

>The serial number assigned by the issuer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> signatureAlgorithm </P
></TD
><TD  
 valign="top"
><P 

> signatureAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>The algorithm used to sign the <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> signature </P
></TD
><TD  
 valign="top"
><P 

> signature </P
></TD
><TD  
 valign="top"
><P 

>The signature created by the Issuer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> issuer </P
></TD
><TD  
 valign="top"
><P 

> issuer </P
></TD
><TD  
 valign="top"
><P 

>The distinguished name of the <I>Certificate</I> used to create the signature. </P
><P 

>The <I>issuer </I>field is completely described in <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> validity </P
></TD
><TD  
 valign="top"
><P 

> validTo, validFrom </P
></TD
><TD  
 valign="top"
><P 

>When the <I>Certificate</I> becomes valid and when it expires. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subject </P
></TD
><TD  
 valign="top"
><P 

> subject </P
></TD
><TD  
 valign="top"
><P 

>The distinguished name of the <I>Application</I><I> </I><I>I</I><I>nstance</I>. </P
><P 

>The Common Name attribute shall be specified and should be the <I>productName</I> or a suitable equivalent. The Organization Name attribute shall be the name of the Organization that executes the <I>Application</I> instance. This organization is usually not the vendor of the <I>Application</I>. </P
><P 

>Other attributes may be specified. </P
><P 

>The <I>subject </I>field is completely described in <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subjectAltName </P
></TD
><TD  
 valign="top"
><P 

> applicationUri, </P
><P 

> hostnames </P
></TD
><TD  
 valign="top"
><P 

>The alternate names for the <I>Application</I><I> </I><I>Instance</I>. </P
><P 

>Shall include a uniformResourceIdentifier which is equal to the <I>applicationUri</I>. The URI shall be a valid URL (see <A href="#LinkTarget_4603" href="#">
RFC1738</A>
) or a valid URN (see <A href="#LinkTarget_4609" href="#">
RFC2141</A>
). </P
><P 

><I>Servers</I> shall specify a dNSName<I> </I><I>or </I>IPAddress<I> </I>which identifies the machine where the <I>Application</I><I> </I><I>Instance</I> runs. Additional dNSNames may be specified if the machine has multiple names.  </P
><P 

>The <I>subjectAltName</I><I> </I>field<I> </I>is completely described in <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> publicKey </P
></TD
><TD  
 valign="top"
><P 

> publicKey </P
></TD
><TD  
 valign="top"
><P 

>The public key associated with the <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> keyUsage </P
></TD
><TD  
 valign="top"
><P 

> keyUsage </P
></TD
><TD  
 valign="top"
><P 

>Specifies how the <I>Certificate</I> key may be used. </P
><P 

>Shall include digitalSignature, nonRepudiation, keyEncipherment and dataEncipherment. </P
><P 

>Other key uses are allowed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> extendedKeyUsage </P
></TD
><TD  
 valign="top"
><P 

> keyUsage </P
></TD
><TD  
 valign="top"
><P 

>Specifies additional key uses for the <I>Certificate</I>. </P
><P 

>Shall specify 'serverAuth and/or clientAuth. </P
><P 

>Other key uses are allowed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> authorityKeyIdentifier </P
></TD
><TD  
 valign="top"
><P 

> (no mapping) </P
></TD
><TD  
 valign="top"
><P 

>Provides more information about the key used to sign the <I>Certificate</I>. It shall be specified for <I>Certificates</I> signed by a CA. It should be specified for self-signed <I>Certificates</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_7420"
><FONT size="+1"><B> Signed Software Certificate </H3
><P 

></B>A <I>SignedSoftwareCertificate</I> is a <I>ByteString</I> containing the DER encoded form of an X509v3 <I>Certificate</I>. This <I>Certificate</I> is issued by a certifying authority and contains an X509v3 extension with the <I>SoftwareCertificate</I> which specifies the claims verified by the certifying authority. The X509v3 fields contained in a <I>SignedSoftwareCertificate</I> are described in  <A href="#LinkTarget_7431" href="#">
Table 24</A>
. The fields are defined completely in <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
. </P
><P 

><B>Table 24 &ndash; SignedSoftwareCertificate </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SignedSoftwareCertificate </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>An X509v3 <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> version </P
></TD
><TD  
 valign="top"
><P 

> version </P
></TD
><TD  
 valign="top"
><P 

>Shall be &ldquo;V3&rdquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serialNumber </P
></TD
><TD  
 valign="top"
><P 

> serialNumber </P
></TD
><TD  
 valign="top"
><P 

>The serial number assigned by the issuer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> signatureAlgorithm </P
></TD
><TD  
 valign="top"
><P 

> signatureAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>The algorithm used to sign the <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> signature </P
></TD
><TD  
 valign="top"
><P 

> signature </P
></TD
><TD  
 valign="top"
><P 

>The signature created by the Issuer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> issuer </P
></TD
><TD  
 valign="top"
><P 

> issuer </P
></TD
><TD  
 valign="top"
><P 

>The distinguished name of the <I>Certificate</I> used to create the signature. </P
><P 

>The <I>issuer </I>field is completely described in <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> validity </P
></TD
><TD  
 valign="top"
><P 

> validTo, validFrom </P
></TD
><TD  
 valign="top"
><P 

>When the <I>Certificate</I> becomes valid and when it expires. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subject </P
></TD
><TD  
 valign="top"
><P 

> subject </P
></TD
><TD  
 valign="top"
><P 

>The distinguished name of the product. </P
><P 

>The Common Name attribute shall be the same as the <I>productName</I> in the <I>SoftwareCertificate</I> and the Organization Name attribute shall be the <I>vendorName</I> in the <I>SoftwareCertificate</I>. </P
><P 

>Other attributes may be specified. </P
><P 

>The <I>subject </I>field is completely described in <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subjectAltName </P
></TD
><TD  
 valign="top"
><P 

> productUri </P
></TD
><TD  
 valign="top"
><P 

>The alternate names for the product. </P
><P 

>It shall include a &lsquo;uniformResourceIdentifier&rsquo; which is equal to the <I>productUri</I> specified in the <I>SoftwareCertificate</I>. </P
><P 

>The <I>subjectAltName</I><I> </I>field<I> </I>is completely described in <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> publicKey </P
></TD
><TD  
 valign="top"
><P 

> publicKey </P
></TD
><TD  
 valign="top"
><P 

>The public key associated with the <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> keyUsage </P
></TD
><TD  
 valign="top"
><P 

> keyUsage </P
></TD
><TD  
 valign="top"
><P 

>Specifies how the <I>Certificate</I> key may be used. </P
><P 

>shall be &lsquo;digitalSignature&rsquo; and &lsquo;nonRepudiation&rsquo; </P
><P 

>Other key uses are not allowed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> extendedKeyUsage </P
></TD
><TD  
 valign="top"
><P 

> keyUsage </P
></TD
><TD  
 valign="top"
><P 

>Specifies additional key uses for the <I>Certificate</I>. </P
><P 

>May specify &lsquo;codeSigning&rsquo;. </P
><P 

>Other key usages are not allowed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> softwareCertificate </P
></TD
><TD  
 valign="top"
><P 

> softwareCertificate </P
></TD
><TD  
 valign="top"
><P 

>The XML encoded form of the <I>SoftwareCertificate </I>stored as UTF8 text. </P
><P 

>Subclause <A href="#LinkTarget_7014" href="#">
5.3.4</A>
 describes how to encode a <I>SoftwareCertificate in </I><I>XML.</I><I> </I></P
><P 

>The ASN.1 Object Identifier (OID) for this extension is: 1.2.840.113556.1.8000.2264.1.6.1 </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_7582"
><FONT size="+1"><B>6.3 Time synchronization </H2
><P 

></B>All <I>Security Protocols</I> require that system clocks on communicating machines be reasonably synchronized in order to check the expiry times for <I>Certificates</I> or <I>Messages</I>. The amount of clock skew that can be tolerated depends on the system security requirements and <I>Applications</I> shall allow administrators to configure the acceptable clock skew when verifying times. A suitable default value is 5 minutes. </P
><P 

>The Network Time Protocol (<A href="#LinkTarget_4591" href="#">
NTP</A>
) provides a standard way to synchronize a machine clock with a time server on the network. Systems running on a machine with a full featured operating system like Windows or Linux will already support NTP or an equivalent. Devices running embedded operating systems should support NTP. </P
><P 

>If a device operating system cannot practically support NTP then an OPC UA <I>Application</I> can use the <I>Timestamps</I> in the <I>ResponseHeader</I> (see <A href="#LinkTarget_4407" href="#">
Part 4</A>
) to synchronize its clock. In this scenario the OPC UA <I>Application</I> will have to know the URL for a <I>Discovery Server</I> on a machine known to have the correct time. The OPC UA <I>Application</I> or a separate background utility would call the <I>FindServers</I> <I>Service</I> and set its clock to the time specified in the <I>ResponseHeader</I>. This process will need to be repeated periodically because clocks can drift over time. </P
><H2 
 ID="LinkTarget_7596"
><B>6.4 UTC and International Atomic Time (TAI) </H2
><P 

></B>All times in OPC UA are in UTC, however, UTC can include discontinuities due to leap seconds or repeating seconds added to deal with variations in the earth&rsquo;s orbit and rotation. <I>Servers</I> that have access to source for International Atomic Time (TAI) may choose to use this instead of UTC. That said, <I>Clients</I> must always be prepared to deal with discontinuities due to the UTC or simply because the system clock is adjusted on the <I>Server</I> machine. </P
><H2 
 ID="LinkTarget_7598"
><B>6.5 Issued User Identity Tokens </H2
><H3 
 ID="LinkTarget_7600"
> Kerberos </H3
><P 

></B>Kerberos <I>UserIdentityTokens</I> can be passed to the <I>Server</I> using the <I>IssuedIdentityToken</I>. The body of the token is an XML element that contains the WS-Security token as defined in the Kerberos Token Profile (<A href="#LinkTarget_4597" href="#">
Kerberos</A>
) specification.  </P
><P 

><I>Servers</I> that support Kerberos authentication shall provide a <I>UserTokenPolicy</I> which specifies what version of the Kerberos Token Profile is being used, the Kerberos Realm and the Kerberos Principal Name for the <I>Server</I>. The Realm and Principal name are combined together with a simple syntax and placed in the <I>issuerEndpointUri</I> as shown in <A href="#LinkTarget_7617" href="#">
Table 25</A>
. </P
><P 

><B>Table 25 &ndash; Kerberos UserTokenPolicy </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>tokenType </P
></TD
><TD  
 valign="top"
><P 

>ISSUEDTOKEN_3 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>issuedTypeType </P
></TD
><TD  
 valign="top"
><P 

>http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>issuerEndpointUri </P
></TD
><TD  
 valign="top"
><P 

>A string with the form \\&lt;realm&gt;\&lt;server principal name&gt; where </P
><P 

> &lt;realm&gt; is the Kerberos realm name (e.g. Windows Domain); </P
><P 

> &lt;server principal name&gt; is the Kerberos principal name for the OPC UA Server. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

>The interface between the <I>Client</I> and <I>Server</I> applications and the Kerberos Authentication Service is application specific. The realm is the DomainName when using a Windows Domain controller as the Kerberos provider. </P
><H2 
 ID="LinkTarget_7647"
><B>6.6 WS Secure Conversation </H2
><P 

><FONT size="+1"></B>Note: Deprecated in Version 1.03 because WS-SecureConversation has not been widely adopted by industry.&hellip;.. </P
><H2 
 ID="LinkTarget_7649"
><FONT size="+1"><B>6.7 OPC UA Secure Conversation </H2
><H3 
 ID="LinkTarget_7650"
> Overview </H3
><P 

></B>OPC UA Secure Conversation (UASC) is a binary version of WS-Secure Conversation. It allows secure communication over transports that do not use SOAP or XML. </P
><P 

>UASC is designed to operate with different <I>TransportProtocols</I> that may have limited buffer sizes. For this reason, OPC UA Secure Conversation will break OPC UA <I>Messages</I> into several pieces (called &lsquo;<I>MessageChunks</I><I>&rsquo;</I>) that are smaller than the buffer size allowed by the <I>TransportProtocol</I>. UASC requires a <I>TransportProtocol </I>buffer size that is at least 8196 bytes. </P
><P 

>All security is applied to individual <I>MessageChunks</I> and not the entire OPC UA <I>Message</I>. A <I>Stack</I> that implements UASC is responsible for verifying the security on each <I>MessageChunk</I> received and reconstructing the original OPC UA <I>Message</I>. </P
><P 

>All <I>MessageChunks</I> will have a 4-byte sequence assigned to them. These sequence numbers are used to detect and prevent replay attacks. </P
><P 

>UASC requires a <I>TransportProtocol</I> that will preserve the order of <I>MessageChunks</I>, however, a UASC implementation does not necessarily process the <I>Messages</I> in the order that they were received. </P
><H3 
 ID="LinkTarget_7656"
><B> MessageChunk<I> </I>structure </H3
><P 

><A href="#LinkTarget_7666" href="#">
</B>Figure 11</A>
 shows the structure of a <I>MessageChunk</I> and how security is applied to the <I>Message</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Message HeaderSecurity HeaderBodySignatureData To SignData To EncryptSequence HeaderPadding</DIV
></P
><P 

><B>Figure 11 &ndash; OPC UA Secure Conversation MessageChunk </P
><P 

></B>Every <I>MessageChunk</I> has a <I>Message</I> header with the fields defined in <A href="#LinkTarget_7673" href="#">
Table 26</A>
. </P
><P 

><B>Table 26 &ndash; OPC UA Secure Conversation<I> </I>Message header </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>MessageType </P
></TD
><TD  
 valign="top"
><P 

>Byte[3] </P
></TD
><TD  
 valign="top"
><P 

>A three byte ASCII code that identifies the <I>Message</I> type. </P
><P 

>The following values are defined at this time: </P
><P 

> MSG A <I>Message</I> secured with the keys associated with a channel. </P
><P 

> OPN  OpenSecureChannel <I>Message</I>. </P
><P 

> CLO  CloseSecureChannel <I>Message</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsFinal </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>A one byte ASCII code that indicates whether the <I>MessageChunk</I> is the final chunk in a <I>Message</I>. </P
><P 

>The following values are defined at this time: </P
><P 

> C  An intermediate chunk. </P
><P 

> F  The final chunk. </P
><P 

> A  The final chunk (used when an error occurred and the <I>Message</I> is aborted). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MessageSize </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The length of the <I>MessageChunk</I>, in bytes. This value includes size of the <I>Message</I> header. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SecureChannelId </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A unique identifier for the <I>SecureChannel</I> assigned by the <I>Server</I>. </P
><P 

>If a <I>Server</I> receives a SecureChannelId which it does not recognize it shall return an appropriate transport layer error. </P
><P 

>When a <I>Server</I> starts the first <I>SecureChannelId</I> used should be a value that is likely to be unique after each restart. This ensures that a <I>Server</I> restart does not cause previously connected <I>Clients</I> to accidently &lsquo;reuse&rsquo; <I>SecureChannels</I> that did not belong to them. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>Message</I> header is followed by a security header which specifies what cryptography operations have been applied to the <I>Message</I>. There are two versions of the security header which depend on the type of security applied to the <I>Message</I>. The security header used for asymmetric algorithms is defined in <A href="#LinkTarget_7754" href="#">
Table 27</A>
. Asymmetric algorithms are used to secure the <I>OpenSecureChannel</I> <I>Messages</I>. <A href="#LinkTarget_4545" href="#">
PKCS #1</A>
defines a set of asymmetric algorithms that may be used by UASC implementations. The <I>AsymmetricKeyWrapAlgorithm</I> element of the <I>SecurityPolicy</I> structure defined in <A href="#LinkTarget_7121" href="#">
Table 22</A>
 is not used by UASC implementations. </P
><P 

><B>Table 27 &ndash; Asymmetric algorithm Security header </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SecurityPolicyUriLength </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The length of the <I>SecurityPolicyUri</I> in bytes. </P
><P 

>This value shall not exceed 255 bytes. </P
><P 

>If a URI is not specified this value may be 0 or -1. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SecurityPolicyUri </P
></TD
><TD  
 valign="top"
><P 

>Byte[*] </P
></TD
><TD  
 valign="top"
><P 

>The URI of the <I>Security P</I><I>olicy</I> used to secure the <I>Message</I>. </P
><P 

>This field is encoded as a UTF8 string without a null terminator. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SenderCertificateLength </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The length of the <I>SenderCertificate</I> in bytes. </P
><P 

>This value shall not exceed <I>MaxCertificateSize</I> bytes.  </P
><P 

>If a certificate is not specified this value may be 0 or -1. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SenderCertificate </P
></TD
><TD  
 valign="top"
><P 

>Byte[*] </P
></TD
><TD  
 valign="top"
><P 

>The X509v3 <I>Certificate</I> assigned to the sending <I>Application</I><I> </I><I>I</I><I>nstance</I>. </P
><P 

>This is a DER encoded blob. </P
><P 

>The structure of an X509 <I>Certificate</I> is defined in <A href="#LinkTarget_4485" href="#">
X509</A>
. </P
><P 

>The DER format for a <I>Certificate</I> is defined in <A href="#LinkTarget_4521" href="#">
X690</A>
 </P
><P 

>This indicates what <I>Private K</I><I>ey</I> was used to sign the <I>Message</I><I>Chunk</I>. </P
><P 

>The <I>Stack</I> shall close the channel and report an error to the <I>Application</I> if the <I>SenderCertificate</I> is too large for the buffer size supported by the transport layer. </P
><P 

>This field shall be null if the <I>Message</I> is not signed. </P
><P 

>If the <I>Certificate</I> is signed by a CA the DER encoded CA <I>Certificate</I> may be appended after the Certificate in the byte array. If the CA <I>Certificate</I> is also signed by another CA this process is repeated until the entire Certificate chain is in the buffer or if <I>MaxSenderCertif</I><I>icateSize</I> limit is reached (the process stops after the last whole <I>Certificate</I> that can be added without exceeding the <I>MaxSenderCertificateSize</I> limit). </P
><P 

>Receivers can extract the <I>Certificates</I> from the byte array by using the <I>Certificate</I> size contained in DER header (see X509). </P
><P 

>Receivers that do not handle <I>Certificate</I> chains shall ignore the extra bytes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReceiverCertificateThumbprintLength </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The length of the <I>ReceiverCertificateThumbprint</I> in bytes. </P
><P 

>If a thumbprint is specified, the length of this field is 20 bytes.  </P
><P 

>If a thumbprint is not specified this value may be 0 or -1. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReceiverCertificateThumbprint </P
></TD
><TD  
 valign="top"
><P 

>Byte[*] </P
></TD
><TD  
 valign="top"
><P 

>The thumbprint of the X509v3 <I>Certificate</I> assigned to the receiving <I>Application</I><I> </I><I>I</I><I>nstance</I>. </P
><P 

>The thumbprint is the SHA1 digest of the DER encoded form of the <I>Certificate</I>. </P
><P 

>This indicates what public key was used to encrypt the <I>MessageChunk</I>. </P
><P 

>This field shall be null if the <I>Message</I> is not encrypted. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The receiver shall close the communication channel if any of the fields in the security header have invalid lengths. </P
><P 

>The <I>SenderCertificate, </I>including<I> </I>any chains<I>,</I> shall be small enough to fit into a single <I>MessageChunk</I> and leave room for at least one byte of body information. The maximum size for the <I>SenderCertificate</I> can be calculated with this formula: </P
><P 

><FONT size="+1">MaxSenderCertificateSize =  </P
><P 

> MessageChunkSize &ndash; </P
><P 

> 12 -     // Header size </P
><P 

> 4 -      // SecurityPolicyUriLength </P
><P 

> SecurityPolicyUri - // UTF-8 encoded string </P
><P 

> 4 -      // SenderCertificateLength </P
><P 

> 4 -      // ReceiverCertificateThumbprintLength </P
><P 

> 20 -      // ReceiverCertificateThumbprint </P
><P 

> 8 -     // SequenceHeader size </P
><P 

> 1 -     // Minimum body size </P
><P 

> 1 -     // PaddingSize if present </P
><P 

> Padding -   // Padding if present </P
><P 

> ExtraPadding -  // ExtraPadding if present </P
><P 

> AsymmetricSignatureSize // If present </P
><P 

><FONT size="+1">The <I>MessageChunkSize</I> depends on the transport protocol but shall be at least 8196 bytes. The <I>AsymmetricSignatureSize</I> depends on the number of bits in the public key for the <I>SenderCertificate</I>. The <I>Int32FieldLength</I> is the length of an encoded Int32 value and it is always 4 bytes. </P
><P 

>The security header used for symmetric algorithms defined in <A href="#LinkTarget_7882" href="#">
Table 28</A>
. Symmetric algorithms are used to secure all <I>Messages</I> other than the <I>OpenSecureChannel</I> <I>Messages</I>. <A href="#LinkTarget_4565" href="#">
FIPS 197</A>
 </P
><P 

>define symmetric encryption algorithms that UASC implementations may use. <A href="#LinkTarget_4558" href="#">
FIPS 180-2</A>
 and <A href="#LinkTarget_4539" href="#">
HMAC</A>
 define some symmetric signature algorithms. </P
><P 

><B>Table 28 &ndash; Symmetric algorithm Security header </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>TokenId </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A unique identifier for the <I>SecureChannel</I> <I>SecurityToken</I> used to secure the <I>Message</I>. </P
><P 

>This identifier is returned by the <I>Server</I> in an <I>OpenSecureChannel</I> response <I>Message</I>. If a <I>Server</I> receives a TokenId which it does not recognize it shall return an appropriate transport layer error. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The security header is always followed by the sequence header which is defined in <A href="#LinkTarget_7908" href="#">
Table 29</A>
. The sequence header ensures that the first encrypted block of every <I>Message</I> sent over a channel will start with different data. </P
><P 

><B>Table 29 &ndash; Sequence header </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SequenceNumber </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A monotonically increasing sequence number assigned by the sender to each <I>MessageChunk</I> sent over the <I>SecureChannel</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>RequestId </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>An identifier assigned by the <I>Client</I> to OPC UA request <I>Message</I>. All <I>MessageChunks</I> for the request and the associated response use the same identifier. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">A<I> SequenceNumber </I>may not be reused for any <I>TokenId</I>. The <I>SecurityToken</I> lifetime should be short enough to ensure that this never happens; however, if it does the receiver should treat it as a transport error and force a reconnect. </P
><P 

>The <I>SequenceNumber</I> shall also monotonically increase for all <I>Messages</I> and shall not wrap around until it is greater than 4 294 966 271 (UInt32.MaxValue &ndash; 1 024). The first number after the wrap around shall be less than 1 024. Note that this requirement means that a <I>SequenceNumber</I> does not reset when a new <I>TokenId</I> is issued. The <I>SequenceNumber</I> shall be incremented by exactly one for each <I>MessageChunk</I> sent unless the communication channel was interrupted and re-established. Gaps are permitted between the <I>SequenceNumber</I> for the last <I>MessageChunk</I> received before the interruption and the <I>SequenceNumber</I> for first <I>MessageChunk</I> received after communication was reestablished. Note that the first <I>MessageChunk</I> after a network interruption is always an <I>OpenSecureChannel</I> request or response. </P
><P 

>The sequence header is followed by the <I>Message</I> body which is encoded with the OPC UA Binary encoding as described in <A href="#LinkTarget_6299" href="#">
5.2.6</A>
. The body may be split across multiple <I>MessageChunks</I>. </P
><P 

>Each <I>MessageChunk</I> also has a footer with the fields defined in <A href="#LinkTarget_7952" href="#">
Table 30</A>
. </P
><P 

><B>Table 30 &ndash; OPC UA Secure Conversation<I> </I>Message footer </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PaddingSize </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>The number of padding bytes (not including the byte for the PaddingSize). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Padding </P
></TD
><TD  
 valign="top"
><P 

>Byte[*] </P
></TD
><TD  
 valign="top"
><P 

>Padding added to the end of the <I>Message</I> to ensure length of the data to encrypt is an integer multiple of the encryption block size. </P
><P 

>The value of each byte of the padding is equal to PaddingSize. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ExtraPaddingSize </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>The most significant byte of a two byte integer used to specify the padding size when the key used to encrypt the message chunk is larger than 2048 bits. This field is omitted if the key length is less than or equal to 2048 bits.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Signature </P
></TD
><TD  
 valign="top"
><P 

>Byte[*] </P
></TD
><TD  
 valign="top"
><P 

>The signature for the <I>MessageChunk</I>. </P
><P 

>The signature includes the all headers, all <I>Message</I> data, the PaddingSize and the Padding. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The formula to calculate the amount of padding depends on the amount of data that needs to be sent (called <I>BytesToWrite</I>). The sender shall first calculate the maximum amount of space available in the <I>MessageChunk</I> (called <I>MaxBodySize</I>) using the following formula: </P
><P 

><FONT size="+1">MaxBodySize = PlainTextBlockSize * Floor((MessageChunkSize &ndash; </P
><P 

>  HeaderSize &ndash; SignatureSize - 1)/CipherTextBlockSize) &ndash; </P
><P 

>   SequenceHeaderSize; </P
><P 

><FONT size="+1">The <I>HeaderSize</I> includes the <I>MessageHeader</I> and the <I>SecurityHeader</I>. The <I>SequenceHeaderSize</I> is always 8 bytes. </P
><P 

>During encryption a block with a size equal to <I>PlainTextBlockSize</I> is processed to produce a block with size equal to <I>CipherTextBlockSize</I>. These values depend on the encryption algorithm and may be the same. </P
><P 

>The OPC UA <I>Message</I> can fit into a single chunk if <I>BytesToWrite</I> is less than or equal to the <I>MaxBodySize</I>. In this case the <I>PaddingSize</I> is calculated with this formula: </P
><P 

><FONT size="+1">PaddingSize = PlainTextBlockSize &ndash; </P
><P 

>((BytesToWrite + SignatureSize + 1) % PlainTextBlockSize); </P
><P 

><FONT size="+1">If the <I>BytesToWrite</I> is greater than <I>MaxBodySize</I> the sender shall write <I>MaxBodySize</I> bytes with a PaddingSize of 0. The remaining <I>BytesToWrite</I> &ndash; <I>MaxBodySize</I> bytes shall be sent in subsequent <I>MessageChunk</I><I>s.</I> </P
><P 

>The <I>PaddingSize</I> and <I>Padding</I> fields are not present if the <I>MessageChunk</I> is not encrypted. </P
><P 

>The Signature field is not present if the <I>MessageChunk </I>is not signed. </P
><H3 
 ID="LinkTarget_8018"
><B> MessageChunks and error handling </H3
><P 

></B><I>MessageChunks</I> are sent as they are encoded. <I>MessageChunks</I> belonging to the same <I>Message</I> shall be sent sequentially. If an error occurs creating a <I>MessageChunk </I>then the sender shall send a final <I>MessageC</I><I>hunk </I>to the receiver that tells the receiver that an error occurred and that it should discard the previous chunks. The sender indicates that the <I>MessageC</I><I>hunk </I>contains an error by setting the IsFinal flag to &lsquo;A&rsquo; (for Abort). <A href="#LinkTarget_8036" href="#">
Table 31</A>
 specifies the contents of the <I>Message</I> abort <I>MessageChunk</I>. </P
><P 

><B>Table 31 &ndash; OPC UA Secure Conversation<I> </I>Message abort body </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Error </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The numeric code for the error. </P
><P 

>This shall be one of the values listed in <A href="#LinkTarget_8834" href="#">
Table 38</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reason </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A more verbose description of the error. </P
><P 

>This string shall not be more than 4 096 characters. </P
><P 

>A <I>Client</I> shall ignore strings that are longer than this. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The receiver shall check the security on the abort <I>MessageChunk </I>before processing it. If everything is ok then the receiver shall ignore the <I>Message</I> but shall not close the <I>SecureChannel</I>. The <I>Client</I> shall report the error back to the <I>Application</I> as <I>StatusCode</I> for the request. If the <I>Client</I> is the sender then it shall report the error without waiting for a response from the <I>Server</I>. </P
><H3 
 ID="LinkTarget_8072"
><B> Establishing a SecureChannel </H3
><P 

></B>Most <I>Messages</I> require a <I>SecureChannel</I> to be established. A <I>Client</I> does this by sending an <I>OpenSecureChannel</I> request to the <I>Server</I>. The <I>Server</I> shall validate the <I>Message</I> and the <I>ClientCertificate</I> and return an <I>OpenSecureChannel</I> response. Some of the parameters defined for the <I>OpenSecureChannel</I> service are specified in the security header (see <A href="#LinkTarget_7656" href="#">
6.7.2</A>
) instead of the body of the <I>Message</I>. For this reason, the <I>OpenSecureChannel</I> <I>Service</I> is not the same as the one specified in <A href="#LinkTarget_4407" href="#">
Part 4</A>
. <A href="#LinkTarget_8103" href="#">
Table 32</A>
 lists the parameters that appear in the body of the <I>Message</I>. </P
><P 

><B>Table 32 &ndash; OPC UA Secure Conversation OpenSecureChannel Service </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ClientProtocolVersion </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> RequestType </P
></TD
><TD  
 valign="top"
><P 

>SecurityTokenRequestType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> SecurityMode </P
></TD
><TD  
 valign="top"
><P 

>MessageSecurityMode </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ClientNonce </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> RequestedLifetime </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ServerProtocolVersion </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> SecurityToken </P
></TD
><TD  
 valign="top"
><P 

>ChannelSecurityToken </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  SecureChannelId </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  TokenId </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  CreatedAt </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  RevisedLifetime </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ServerNonce </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>ClientProtocolVersion</I> and <I>ServerProtocolVersion</I> parameters are not defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
 and are added to the <I>Message</I> to allow backward compatibility if OPC UA-SecureConversation needs to be updated in the future. Receivers always accept numbers greater than the latest version that they support. The receiver with the higher version number is expected to ensure backward compatibility. </P
><P 

>If OPC UA-<I>SecureConversation</I> is used with the OPC UA-TCP protocol (see <A href="#LinkTarget_8501" href="#">
7.1</A>
) then the version numbers specified in the <I>OpenSecureChannel</I> <I>Messages</I> shall be the same as the version numbers specified in the OPC UA-TCP protocol <I>Hello/Acknowledge</I> <I>Messages</I>. The receiver shall close the channel and report a <I>Bad</I>_<I>ProtocolVersionUnsupported</I> error if there is a mismatch. </P
><P 

>The <I>Server</I> shall return an error response as described in <A href="#LinkTarget_4407" href="#">
Part 4</A>
 if there are any errors with the parameters specified by the <I>Client</I>. </P
><P 

>The <I>RevisedLifetime</I> tells the <I>Client</I> when it shall renew the <I>SecurityToken</I> by sending another <I>OpenSecureChannel</I> request. The <I>Client</I> shall continue to accept the old <I>SecurityToken</I> until it receives the <I>OpenSecureChannel</I> response. The <I>Server</I> has to accept requests secured with the old <I>SecurityToken</I> until that <I>SecurityToken</I> expires or until it receives a <I>Message</I> from the <I>Client</I> secured with the new <I>SecurityToken</I>. The <I>Server</I> shall reject renew requests if the <I>SenderCertificate</I> is not the same as the one used to create the <I>SecureChannel</I> or if there is a problem decrypting or verifying the signature. The <I>Client</I> shall abandon the <I>SecureChannel</I> if the <I>Certificate</I> used to sign the response is not the same as the <I>Certificate</I> used to encrypt the request. </P
><P 

>The <I>OpenSecureChannel</I> <I>Messages</I> are signed and encrypted if the <I>SecurityMode</I> is not <I>None</I> (even if the <I>SecurityMode </I>is <I>SignOnly).</I> </P
><P 

>The <I>OpenSecureChannel</I> <I>Messages</I> are not signed or encrypted if the <I>SecurityMode</I> is <I>None</I>. The <I>Nonces</I> are ignored and should be set to null. The <I>SecureChannelId</I> and the <I>TokenId</I> are still assigned but no security is applied to <I>Messages</I> exchanged via the channel. The <I>SecurityToken</I> shall still be renewed before the <I>RevisedLifetime</I> expires. Receivers shall still ignore invalid or expired <I>TokenIds</I>. </P
><P 

>If the communication channel breaks the <I>Server</I> shall maintain the <I>S</I><I>ecure </I><I>C</I><I>hannel</I> long enough to allow the <I>Client</I> to reconnect. The <I>ReviseLifetime</I> parameter also tells the <I>Client</I> how long the <I>Server</I> will wait. If the <I>Client</I> cannot reconnect within that period it shall assume the <I>SecureChannel</I> has been closed. </P
><P 

>The <I>AuthenticationToken</I> in the <I>RequestHeader</I> shall be set to null. </P
><P 

>If an error occurs after the <I>Server</I> has verified <I>Message</I> security it shall return a <I>ServiceFault</I> instead of a <I>OpenSecureChannel</I> response. The <I>ServiceFault</I> <I>Message</I> is described in <A href="#LinkTarget_4407" href="#">
Part 4</A>
. </P
><P 

>If the <I>SecurityMode</I> is not <I>None </I>then the <I>Server</I> shall verify that a <I>SenderCertificate</I> and a <I>ReceiverCertificateThumbprint</I> were specified in the <I>SecurityHeader</I>. </P
><H3 
 ID="LinkTarget_8285"
><B> Deriving keys </H3
><P 

></B>Once the <I>SecureChannel</I> is established the <I>Messages</I> are signed and encrypted with keys derived from the <I>Nonces</I> exchanged in the <I>OpenSecureChannel</I> call. These keys are derived by passing the <I>Nonces</I> to a pseudo-random function which produces a sequence of bytes from a set of inputs. A pseudo-random function is represented by the following function declaration: </P
><P 

><FONT size="+1">Byte[] PRF( </P
><P 

>Byte[] secret,  </P
><P 

>Byte[] seed,  </P
><P 

>Int32 length,  </P
><P 

>Int32 offset) </P
><P 

><FONT size="+1">Where <I>length</I> is the number of bytes to return and <I>offset</I> is a number of bytes from the beginning of the sequence. </P
><P 

>The lengths of the keys that need to be generated depend on the <I>SecurityPolicy</I> used for the channel. The following information is specified by the <I>SecurityPolicy</I>: </P
><DL 

><DD 

>a) <I>SigningKeyLength</I> (from the <I>DerivedSignatureKeyLength</I>); </DD
><DD 

>b) <I>EncryptingKeyLength</I> (implied by the <I>SymmetricEncryptionAlgorithm</I>); </DD
><DD 

>c) <I>EncryptingBlockSize</I> (implied by the <I>SymmetricEncryptionAlgorithm</I>). </DD
></DL
><P 

>The parameters passed to the pseudo random function are specified in <A href="#LinkTarget_8307" href="#">
Table 33</A>
. </P
><P 

><B>Table 33 &ndash; Cryptography key generation parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Key </P
></TD
><TD  
 valign="top"
><P 

>Secret </P
></TD
><TD  
 valign="top"
><P 

>Seed </P
></TD
><TD  
 valign="top"
><P 

>Length </P
></TD
><TD  
 valign="top"
><P 

>Offset </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ClientSigningKey </P
></TD
><TD  
 valign="top"
><P 

>ServerNonce </P
></TD
><TD  
 valign="top"
><P 

>ClientNonce </P
></TD
><TD  
 valign="top"
><P 

>SigningKeyLength </P
></TD
><TD  
 valign="top"
><P 

>0 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ClientEncryptingKey </P
></TD
><TD  
 valign="top"
><P 

>ServerNonce </P
></TD
><TD  
 valign="top"
><P 

>ClientNonce </P
></TD
><TD  
 valign="top"
><P 

>EncryptingKeyLength </P
></TD
><TD  
 valign="top"
><P 

>SigningKeyLength </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ClientInitializationVector </P
></TD
><TD  
 valign="top"
><P 

>ServerNonce </P
></TD
><TD  
 valign="top"
><P 

>ClientNonce </P
></TD
><TD  
 valign="top"
><P 

>EncryptingBlockSize </P
></TD
><TD  
 valign="top"
><P 

>SigningKeyLength+ EncryptingKeyLength </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerSigningKey </P
></TD
><TD  
 valign="top"
><P 

>ClientNonce </P
></TD
><TD  
 valign="top"
><P 

>ServerNonce </P
></TD
><TD  
 valign="top"
><P 

>SigningKeyLength </P
></TD
><TD  
 valign="top"
><P 

>0 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerEncryptingKey </P
></TD
><TD  
 valign="top"
><P 

>ClientNonce </P
></TD
><TD  
 valign="top"
><P 

>ServerNonce </P
></TD
><TD  
 valign="top"
><P 

>EncryptingKeyLength </P
></TD
><TD  
 valign="top"
><P 

>SigningKeyLength </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerInitializationVector </P
></TD
><TD  
 valign="top"
><P 

>ClientNonce </P
></TD
><TD  
 valign="top"
><P 

>ServerNonce </P
></TD
><TD  
 valign="top"
><P 

>EncryptingBlockSize </P
></TD
><TD  
 valign="top"
><P 

>SigningKeyLength+ EncryptingKeyLength </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>Client</I> keys are used to secure <I>Messages</I> sent by the <I>Client</I>. The <I>Server</I> keys are used to secure <I>Messages</I> sent by the <I>Server</I>. </P
><P 

>The <A href="#LinkTarget_4479" href="#">
SSL/TLS</A>
 specification defines a pseudo random function called P_SHA1 which is used for some <I>SecurityProfiles</I>. The P_SHA1 algorithm is defined as follows: </P
><P 

><FONT size="+1">P_SHA1(secret, seed) = HMAC_SHA1(secret, A(1) + seed) + </P
><P 

>                       HMAC_SHA1(secret, A(2) + seed) + </P
><P 

>                       HMAC_SHA1 (secret, A(3) + seed) + ... </P
><P 

>Where A(n) is defined as: </P
><P 

>  A(0) = seed </P
><P 

>  A(n) = HMAC_SHA1(secret, A(n-1)) </P
><P 

>+ indicates that the results are appended to previous results. </P
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_8418"
><FONT size="+1"><B> Verifying Message Security </H3
><P 

></B>The contents of the <I>MessageChunk</I> shall not be interpreted until the <I>Message</I> is decrypted and the signature and sequence number verified. </P
><P 

>If an error occurs during <I>Message</I> verification the receiver shall close the communication channel. If the receiver is the <I>Server</I> it shall also send a transport error <I>Message</I> before closing the channel. Once the channel is closed the <I>Client</I> shall attempt to re-open the channel and request a new <I>SecurityToken</I> by sending an <I>OpenSecureChannel</I> request. The mechanism for sending transport errors to the <I>Client</I> depends on the communication channel. </P
><P 

>The receiver shall first check the <I>SecureChannelId</I>. This value may be 0 if the <I>Message</I> is an <I>OpenSecureChannel</I> request. For other <I>Mes</I><I>sages</I> it shall report a </P
><P 

><I>Bad_SecureChannelUnknown</I> error if the <I>SecureChannelId</I> is not recognized. If the <I>Message</I> is an <I>OpenSecureChannel</I> request and the <I>SecureChannelId</I> is not 0 then the <I>SenderCertificate</I> shall be the same as the <I>SenderCertificate</I> used to create the channel. </P
><P 

>If the <I>Message</I> is secured with asymmetric algorithms then the receiver shall verify that it supports the requested <I>Securi</I>t<I>yPolicy</I>. If the <I>Message</I> is the response sent to the <I>Client</I> then the <I>SecurityPolicy</I> shall be the same as the one specified in the request. In the <I>Server</I> the <I>SecurityPolicy</I> shall be the same as the one used to originally create the <I>SecureChannel</I>. The receiver shall check that the Certificate is trusted first and return <I>Bad_CertificateUntrusted</I> on error. The receiver shall then verify the <I>SenderCertificate</I> using the rules defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
. The receiver shall report the appropriate error if <I>Certificate</I> validation fails. The receiver shall verify the <I>ReceiverCertificateThumbprint</I> and report a <I>Bad_CertificateUnknown </I>error if it does not recognize it. </P
><P 

>If the <I>Message</I> is secured with symmetric algorithms then a <I>Bad_SecureChannelTokenUnknown e</I>rror shall be reported if the <I>TokenId</I><I> </I>refers to a <I>SecurityToken</I> that has expired or is not recognized. </P
><P 

>If decryption or signature validation fails then a <I>Bad_SecurityChecksFailed</I> error is reported. If an implementation allows multiple <I>SecurityModes</I> to be used the receiver shall also verify that the <I>Message</I> was secured properly as required by the <I>SecurityMode</I> specified in the <I>OpenSecureChannel</I> request. </P
><P 

>After the security validation is complete the receiver shall verify the <I>RequestId</I> and the <I>SequenceNumber</I>. If these checks fail a <I>Bad_Secu</I><I>rityChecksFailed</I> error is reported. The <I>RequestId</I><I> </I>only needs to be verified by the <I>Client</I> since only the <I>Client</I> knows if it is valid or not. </P
><P 

>At this point the <I>SecureChannel</I> knows it is dealing with an authenticated <I>Message</I> that was not tampered with or resent. This means the <I>SecureChannel</I> can return secured error responses if any further problems are encountered. </P
><P 

><I>Stacks</I> that implement UASC shall have a mechanism to log errors when invalid <I>Messages</I> are discarded. This mechanism is intended for developers, systems integrators and administrators to debug network system configuration issues and to detect attacks on the network. </P
><H1 
 ID="LinkTarget_8500"
><FONT size="+1"><B>7 Transport Protocols </H1
><H2 
 ID="LinkTarget_8501"
><FONT size="+1">7.1 OPC UA TCP </H2
><H3 
 ID="LinkTarget_8502"
> Overview </H3
><P 

></B>OPC UA TCP is a simple TCP based protocol that establishes a full duplex channel between a <I>Client</I> and <I>Server</I>. This protocol has two key features that differentiate it from HTTP. First, this protocol allows responses to be returned in any order. Second, this protocol allows responses to be returned on a different TCP transport end-point if communication failures cause temporary TCP session interruption. </P
><P 

>The OPC UA TCP protocol is designed to work with the <I>SecureChannel</I> implemented by a layer higher in the stack. For this reason, the OPC UA TCP protocol defines its interactions with the <I>SecureChannel</I> in addition to the wire protocol. </P
><H3 
 ID="LinkTarget_8505"
><B> Message structure </H3
><P 

></B>Every OPC UA TCP <I>Message</I> has a header with the fields defined in <A href="#LinkTarget_8512" href="#">
Table 34</A>
. </P
><P 

><B>Table 34 &ndash; OPC UA TCP<I> </I>Message header </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>MessageType </P
></TD
><TD  
 valign="top"
><P 

>Byte[3] </P
></TD
><TD  
 valign="top"
><P 

>A three byte ASCII code that identifies the <I>Message</I> type. </P
><P 

>The following values are defined at this time: </P
><P 

> HEL  a <I>Hello</I> <I>Message</I>. </P
><P 

> ACK  an <I>Acknowledge</I> <I>Message</I>. </P
><P 

> ERR  an <I>Error</I> <I>Message</I>. </P
><P 

>The <I>SecureChannel</I> layer defines additional values which the OPC UA TCP layer shall accept. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>Byte[1] </P
></TD
><TD  
 valign="top"
><P 

>Ignored. shall be set to the ASCII codes for &lsquo;F&rsquo; if the <I>MessageType</I> is one of the values supported by the OPC UA TCP protocol. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MessageSize </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The length of the <I>Message</I>, in bytes. This value includes the 8 bytes for the <I>Message</I> header. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The layout of the OPC UA TCP <I>Message</I> header is intentionally identical to the first 8 bytes of the OPC UA Secure Conversation <I>Message</I> header defined in <A href="#LinkTarget_7673" href="#">
Table 26</A>
. This allows the OPC UA TCP layer to extract the <I>SecureChannel</I> <I>Messages</I> from the incoming stream even if it does not understand their contents. </P
><P 

>The OPC UA TCP layer shall verify the <I>MessageType</I> and make sure the <I>MessageSize</I> is less than the negotiated <I>ReceiveBufferSize</I> before passing any <I>Message</I> onto the <I>SecureChannel</I> layer. </P
><P 

>The Hello <I>Message</I> has the additional fields shown in <A href="#LinkTarget_8566" href="#">
Table 35</A>
. </P
><P 

><B>Table 35 &ndash; OPC UA TCP<I> </I>Hello Message </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ProtocolVersion </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The latest version of the OPC UA TCP protocol supported by the <I>Client</I>. </P
><P 

>The <I>Server</I> may reject the <I>Client</I> by returning <I>Bad_ProtocolVersionUnsupported</I>. </P
><P 

>If the <I>Server</I> accepts the connection is responsible for ensuring that it returns <I>Messages</I> that conform to this version of the protocol. </P
><P 

>The <I>Server</I> shall always accept versions greater than what it supports. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReceiveBufferSize </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The largest <I>Message</I><I>Chunk</I> that the sender can receive. </P
><P 

>This value shall be greater than 8 192 bytes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SendBufferSize </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The largest <I>Message</I><I>Chunk</I> that the sender will send. </P
><P 

>This value shall be greater than 8 192 bytes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MaxMessageSize </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The maximum size for any response <I>Message</I>. The <I>Server</I> shall abort the <I>Message</I> with a <I>Bad_ResponseTooLarge</I> <I>StatusCode</I> if a response <I>Message</I> exceeds this value. </P
><P 

>The mechanism for aborting <I>Messages</I> is described fully in <A href="#LinkTarget_8018" href="#">
6.7.3</A>
. </P
><P 

>The <I>Message</I> size is calculated using the unencrypted <I>Message</I> body. </P
><P 

>A value of zero indicates that the <I>Client</I> has no limit. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MaxChunkCount </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The maximum number of chunks in any response <I>Message</I>. </P
><P 

>The <I>Server</I> shall abort the <I>Message</I> with a <I>Bad_ResponseTooLarge</I> <I>StatusCode</I> if a response <I>Message</I> exceeds this value. </P
><P 

>The mechanism for aborting <I>Messages</I> is described fully in <A href="#LinkTarget_8018" href="#">
6.7.3</A>
. </P
><P 

>A value of zero indicates that the <I>Client</I> has no limit. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EndpointUrl </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The URL of the <I>Endpoint</I> which the <I>Client</I> wished to connect to. </P
><P 

>The encoded value shall be less than 4 096 bytes. </P
><P 

><I>Servers</I> shall return a TcpEndpointUrlInvalid error and close the connection if the length exceeds 4 096 or if it does not recognize the resource identified by the URL. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>EndpointUrl</I> parameter is used to allow multiple <I>Servers</I> to share the same port on a machine. The process listening (also known as the proxy) on the port would connect to the <I>Server</I> identified by the <I>EndpointUrl</I> and would forward all <I>Messages</I> to the <I>Server</I> via this socket. If one socket closes then the proxy shall close the other socket. </P
><P 

>The <I>Acknowledge</I> <I>Message</I> has the additional fields shown in <A href="#LinkTarget_8655" href="#">
Table 36</A>
. </P
><P 

><B>Table 36 &ndash; OPC UA TCP<I> </I>Acknowledge Message </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ProtocolVersion </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The latest version of the OPC UA TCP protocol supported by the <I>Server</I>. </P
><P 

>If the <I>Client</I> accepts the connection is responsible for ensuring that it sends <I>Messages</I> that conform to this version of the protocol. </P
><P 

>The <I>Client</I> shall always accept versions greater than what it supports. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReceiveBufferSize </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The largest <I>Message</I><I>Chunk</I> that the sender can receive. </P
><P 

>This value shall not be larger than what the <I>Client</I> requested in the Hello <I>Message</I>. </P
><P 

>This value shall be greater than 8 192 bytes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SendBufferSize </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The largest <I>MessageChunk </I>that the sender will send. </P
><P 

>This value shall not be larger than what the <I>Client</I> requested in the Hello <I>Message</I>. </P
><P 

>This value shall be greater than 8 192 bytes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MaxMessageSize </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The maximum size for any request <I>Message</I>. The <I>Clien</I><I>t</I> shall abort the <I>Message</I> with a <I>Bad_RequestTooLarge</I> <I>StatusCode</I> if a request <I>Message</I> exceeds this value. </P
><P 

>The mechanism for aborting <I>Messages</I> is described fully in <A href="#LinkTarget_8018" href="#">
6.7.3</A>
. </P
><P 

>The <I>Message</I> size is calculated using the unencrypted <I>Message</I> body. </P
><P 

>A value of zero indicates that the <I>Server</I> has no limit. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MaxChunkCount </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The maximum number of chunks in any request <I>Message</I>. </P
><P 

>The <I>Client</I> shall abort the <I>Message</I> with a <I>Bad_RequestTooLarge</I> <I>StatusCode</I> if a request <I>Message</I> exceeds this value. </P
><P 

>The mechanism for aborting <I>Messages</I> is described fully in <A href="#LinkTarget_8018" href="#">
6.7.3</A>
. </P
><P 

>A value of zero indicates that the <I>Server</I> has no limit. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

>The <I>Error</I> <I>Message</I> has the additional fields shown in <A href="#LinkTarget_8735" href="#">
Table 37</A>
. </P
><P 

><B>Table 37 &ndash; OPC UA TCP<I> </I>Error Message </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Error </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The numeric code for the error. </P
><P 

>This shall be one of the values listed in <A href="#LinkTarget_8834" href="#">
Table 38</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reason </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A more verbose description of the error. </P
><P 

>This string shall not be more than 4 096 characters. </P
><P 

>A <I>Client</I> shall ignore strings that are longer than this. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><A href="#LinkTarget_8786" href="#">
<FONT size="+1">Figure 12</A>
 illustrates the structure of a <I>Message</I> placed on the wire. This includes also illustrates how the <I>Message</I> elements defined by the OPC UA Binary Encoding mapping (see <A href="#LinkTarget_5096" href="#">
5.2</A>
) and the OPC UA Secure Conversation mapping (see <A href="#LinkTarget_7649" href="#">
6.7</A>
) relate to the OPC UA TCP <I>Messages</I>. </P
><P 

>The socket is always closed gracefully by the <I>Server</I> after it sends an <I>Error</I> <I>Message</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Chunk 1Chunk 2Chunk 3ExtensionObject PrefixMessage Header (Intermediate Chunk)Message Header (Final Chunk)Security HeaderMessage SignaturePaddingEncrypted DataSigned DataChunk 1Chunk 2Chunk 3MessageSequence Header</DIV
></P
><P 

><B>Figure 12 &ndash; OPC UA TCP Message structure </P
><H3 
 ID="LinkTarget_8790"
> Establishing a connection </H3
><P 

></B>Connections are always initiated by the <I>Client</I> which creates the socket before it sends the first <I>OpenSecureChannel</I> request. After creating the socket the first <I>Message</I> sent shall be a <I>Hello</I> which specifies the buffer sizes that the <I>Client</I> supports. The <I>Server</I> shall respond with an <I>Acknowledge Message</I> which completes the buffer negotiation. The negotiated buffer size shall be reported to the <I>SecureChannel</I> layer. The negotiated <I>SendBufferSize</I> specifies the size of the <I>MessageChunks</I> to use for <I>Messages</I> sent over the connection. </P
><P 

>The <I>Hello/Acknowledge</I> <I>Messages</I> may only be sent once. If they are received again the receiver shall report an error and close the socket. <I>Servers</I> shall close any socket after a period of time if it does not receive a <I>Hello</I> <I>Message</I>. This period of time shall be configurable and have a default value which does not exceed two minutes. </P
><P 

>The <I>Client</I> sends the <I>OpenSecureChannel</I> request once it receives the <I>Acknowledge</I> back from the <I>Server</I>. If the <I>Server</I> accepts the new channel it shall associate the socket with the <I>SecureChannelId</I>. The <I>Server</I> uses this association to determine which socket to use when it has to send a response to the <I>Client</I>. The <I>Client</I> does the same when it receives the <I>OpenSecureChannel</I> response. </P
><P 

>The sequence of <I>Messages</I> when establishing a OPC UA TCP connection are shown in <A href="#LinkTarget_8801" href="#">
Figure 13</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>HelloOpen Secure Channel RequestCreate SessionClientSecure ChannelTCPTCPSecure ChannelServerAcknowledgeOpen Secure Channel ResponseOpen Socket</DIV
></P
><P 

><B>Figure 13 &ndash; Establishing a OPC UA TCP connection </P
><P 

></B>The <I>Server</I> <I>Application</I> does not do any processing while the <I>SecureChannel</I> is negotiated; however, the <I>Server</I> <I>Application</I> shall to provide the <I>Stack</I> with the list of trusted <I>Certificates</I>. The <I>Stack</I> shall provide notifications to the <I>Server</I> <I>Application</I> whenever it receives an <I>OpenSecureChannel</I> request<I>.</I> These notifications shall include the <I>OpenSecureChannel</I> or <I>Error</I> response returned to the <I>Client</I>.<I> </I> </P
><H3 
 ID="LinkTarget_8806"
><B> Closing a connection </H3
><P 

></B>The <I>Client</I> closes the connection by sending a <I>CloseSecureChannel</I> request and closing the socket gracefully. When the <I>Server</I> receives this <I>Message</I> it shall release all resources allocated for the channel. The <I>Server</I> does not send a <I>CloseSecureChannel </I>response<I>.</I> </P
><P 

>If security verification fails for the <I>CloseSecureChannel</I> <I>Message</I> then the <I>Server</I> shall report the error and close the socket. The <I>Server</I> shall allow the <I>Client</I> to attempt to reconnect. </P
><P 

>The sequence of <I>Messages</I> when closing an OPC UA TCP connection is shown in <A href="#LinkTarget_8816" href="#">
Figure 14</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Close Secure Channel RequestClientSecure ChannelTCPTCPSecure ChannelServerClose Socket</DIV
></P
><P 

><B>Figure 14 &ndash; Closing a OPC UA TCP connection </P
><P 

></B>The <I>Server</I> <I>Application</I> does not do any processing when the <I>SecureChannel</I> is closed; however, the <I>Stack</I> shall provide notifications to the <I>Server</I> <I>Application</I> whenever a <I>CloseSecureChannel</I> request is received or when the <I>Stack</I> cleans up an abandoned <I>SecureChannel</I>. </P
><H3 
 ID="LinkTarget_8820"
><B> Error handling </H3
><P 

></B>When a fatal error occurs the <I>Server</I> shall send an Error <I>Message</I> to the <I>Client</I> and close the socket. When a <I>Client</I> encounters one of these errors, it shall also close the socket but does not send an Error <I>Message</I>. After the socket is closed a <I>Client</I> shall try to reconnect automatically using the mechanisms described in <A href="#LinkTarget_8998" href="#">
7.1.6</A>
. </P
><P 

>The possible OPC UA TCP errors are defined in <A href="#LinkTarget_8834" href="#">
Table 38</A>
. </P
><P 

><B>Table 38 &ndash; OPC UA TCP<I> </I>error codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>TcpServerTooBusy </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> cannot process the request because it is too busy. </P
><P 

>It is up to the <I>Server</I> to determine when it needs to return this <I>Message</I>. </P
><P 

>A <I>Server</I> can control the how frequently a <I>Client</I> reconnects by waiting to return this error. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TcpMessageTypeInvalid </P
></TD
><TD  
 valign="top"
><P 

>The type of the <I>Message</I> specified in the header invalid. </P
><P 

>Each <I>Message</I> starts with a 4 byte sequence of ASCII values that identifies the <I>Message</I> type. </P
><P 

>The <I>Server</I> returns this error if the <I>Message</I> type is not accepted. </P
><P 

>Some of the <I>Message</I> types are defined by the <I>SecureChannel</I> layer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TcpSecureChannelUnknown </P
></TD
><TD  
 valign="top"
><P 

>The SecureChannelId and/or TokenId are not currently in use. </P
><P 

>This error is reported by the <I>SecureChannel</I> layer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TcpMessageTooLarge </P
></TD
><TD  
 valign="top"
><P 

>The size of the <I>Message</I> specified in the header is too large. </P
><P 

>The <I>Server</I> returns this error if the <I>Message</I> size exceeds its maximum buffer size or the receive buffer size negotiated during the Hello/Acknowledge exchange. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TcpTimeout </P
></TD
><TD  
 valign="top"
><P 

>A timeout occurred while accessing a resource. </P
><P 

>It is up to the <I>Server</I> to determine when a timeout occurs. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TcpNotEnoughResources </P
></TD
><TD  
 valign="top"
><P 

>There are not enough resources to process the request. </P
><P 

>The <I>Server</I> returns this error when it runs out of memory or encounters similar resource problems. </P
><P 

>A <I>Server</I> can control the how frequently a <I>Client</I> reconnects by waiting to return this error. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TcpInternalError </P
></TD
><TD  
 valign="top"
><P 

>An internal error occurred. </P
><P 

>This should only be returned if an unexpected configuration or programming error occurs. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TcpEndpointUrlInvalid </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> does not recognize the EndpointUrl specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SecurityChecksFailed </P
></TD
><TD  
 valign="top"
><P 

>The <I>Message</I> was rejected because it could not be verified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>RequestInterrupted </P
></TD
><TD  
 valign="top"
><P 

>The request could not be sent because of a network interruption. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>RequestTimeout </P
></TD
><TD  
 valign="top"
><P 

>Timeout occurred while processing the request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SecureChannelClosed </P
></TD
><TD  
 valign="top"
><P 

>The secure channel has been closed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SecureChannelTokenUnknown </P
></TD
><TD  
 valign="top"
><P 

>The <I>SecurityToken</I> has expired or is not recognized. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CertificateUntrusted </P
></TD
><TD  
 valign="top"
><P 

>The sender <I>Certificate</I> is not trusted by the receiver. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CertificateTimeInvalid </P
></TD
><TD  
 valign="top"
><P 

>The sender <I>Certificate</I> has expired or is not yet valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CertificateIssuerTimeInvalid </P
></TD
><TD  
 valign="top"
><P 

>The issuer for the sender <I>Certificate</I> has expired or is not yet valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CertificateUseNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>The sender&rsquo;s <I>Certificate</I> may not be used for establishing a secure channel. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CertificateIssuerUseNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>The issuer <I>Certificate</I> may not be used as a <I>Certificate</I> Authority. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CertificateRevocationUnknown </P
></TD
><TD  
 valign="top"
><P 

>Could not verify the revocation status of the sender&rsquo;s <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CertificateIssuerRevocationUnknown </P
></TD
><TD  
 valign="top"
><P 

>Could not verify the revocation status of the issuer <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CertificateRevoked </P
></TD
><TD  
 valign="top"
><P 

>The sender <I>Certificate</I> has been revoked by the issuer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IssuerCertificateRevoked </P
></TD
><TD  
 valign="top"
><P 

>The issuer <I>Certificate</I> has been revoked by its issuer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CertificateUnknown </P
></TD
><TD  
 valign="top"
><P 

>The receiver <I>Certificate</I> thumbprint is not recognized by the receiver. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The numeric values for these error codes are defined in <A href="#LinkTarget_9364" href="#">
A.2</A>
. </P
><H3 
 ID="LinkTarget_8998"
><B> Error recovery </H3
><P 

></B>Once the <I>SecureChannel</I> has been established, the <I>Client</I> shall go into an error recovery state whenever the socket breaks or if the <I>Server</I> returns an OPC UA TCP Error <I>Message</I> as defined in <A href="#LinkTarget_8735" href="#">
Table 37</A>
. While in this state the <I>Client</I> periodically attempts to reconnect to the <I>Server</I>. If the reconnect succeeds the <I>Client</I> sends a <I>Hello</I> followed by an <I>OpenSecureChannel</I> request (see <A href="#LinkTarget_8072" href="#">
6.7.4</A>
) that re-authenticates the <I>Client</I> and associates the new socket with the existing <I>SecureChannel</I>. </P
><P 

>The <I>Client</I> shall wait between reconnect attempts. The first reconnect shall happen immediately. After that, the wait period should start as 1 second and increase gradually to a maximum of 2 minutes. One sequence would double the period each attempt until reaching the maximum. In other words, the <I>Client</I> would use the following wait periods: { 0, 1, 2, 4, 8, 16, 32, 64, 120, 120, &hellip;}. The <I>Client</I> shall keep attempting to reconnect until the <I>SecureChannel</I> is closed or after the period equal to the <I>RevisedLifetime</I> of the last <I>SecurityToken</I> elapses. </P
><P 

>The <I>Stack</I> in the <I>Server</I> should not discard responses if there is no connection immediately available. It should wait and see if the <I>Client</I> creates a new socket. It is up to the <I>Server</I> stack implementation to decide how long it will wait and how many responses it is willing to hold onto. </P
><P 

>The <I>Stack</I> in the <I>Client</I> shall not fail requests that have already been sent and are waiting for a response when the socket is closed. However, these requests may timeout and report a <I>Bad_TcpRequestTimeout</I> error to the <I>Application</I>. If the <I>Client</I> sends a new request the stack shall either buffer the request or return a <I>Bad_TcpRequestInterrupted </I>error. The <I>Client</I> can stop the reconnect process by closing the <I>SecureChannel</I>. </P
><P 

>The <I>Server</I> may abandon the <I>SecureChannel</I> before a <I>Client</I> is able to reconnect. If this happens the <I>Client</I> will get a <I>Bad_TcpSecureChannelUnknown</I> error in response to the <I>OpenSecureChannel</I> request. The <I>Stack</I> shall return this error to the <I>Application</I> that can attempt to create a new <I>SecureChannel</I>. </P
><P 

>The negotiated buffer sizes should never change when a connection is recovered; however, the buffer sizes are negotiated before the <I>Server</I> knows whether the socket is being used for an existing <I>SecureChannel</I> or a new one. A <I>Client</I> shall treat this as a fatal error, close the <I>SecureChannel</I> and returns an <I>Bad_TcpSecureChannelClosed</I> error to the <I>Application</I>. </P
><P 

>The sequence of <I>Messages</I> when recovering an OPC UA TCP connection is shown in <A href="#LinkTarget_9022" href="#">
Figure 15</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Hello/AcknowledgeOpen Secure ChannelCreate SessionHello/AcknowledgePublish 2Close Secure ChannelClientSecure ChannelTCPTCPSecure ChannelServerClose SessionOpen Secure ChannelErrorErrorPublish 1Publish  1 (Response)Close Socket</DIV
></P
><P 

><B>Figure 15 &ndash; Recovering an OPC UA TCP connection </P
><H2 
 ID="LinkTarget_9025"
>7.2 SOAP/HTTP  </H2
><P 

><FONT size="+1"></B>Note: Deprecated in Version 1.03 because WS-SecureConversation has not been widely adopted by industry. </P
><H2 
 ID="LinkTarget_9027"
><FONT size="+1"><B>7.3 HTTPS </H2
><H3 
 ID="LinkTarget_9028"
> Overview </H3
><P 

><A href="#LinkTarget_4509" href="#">
</B>HTTPS</A>
 refers <A href="#LinkTarget_4503" href="#">
HTTP</A>
 <I>Messages</I> exchanged over a <A href="#LinkTarget_4479" href="#">
SSL/TLS</A>
 connection. The syntax of the HTTP <I>Messages</I> does not change and the only difference is a TLS connection is created instead of a TCP/IP connection. This implies this that profiles which use this transport can also be used with HTTP when security is not a concern. </P
><P 

>HTTPS is a protocol that provides transport security. This means all bytes are secured as they are sent without considering the <I>Message</I> boundaries. Transport security can only work for point to point communication and does not allow untrusted intermediaries or proxy servers to handle traffic.  </P
><P 

>The <I>SecurityPolicy</I> shall be specified, however, it only affects the algorithms used for signing the <I>Nonces</I> during the <I>CreateSession</I>/<I>ActivateSession</I> handshake. A <I>SecurityPolicy</I> of <I>None</I> indicates that the <I>Nonces</I> do not need to be signed. The <I>SecurityMode</I> is set to <I>Sign</I> unless the </P
><P 

><I>SecurityPolicy</I> is <I>None</I>; in this case the <I>SecurityMode</I> shall be set to <I>None</I>. If a UserIdentityToken is to be encrypted it shall be explicitly specified in the UserTokenPolicy. </P
><P 

>An HTTP Header called &lsquo;OPCUA-SecurityPolicy&rsquo; is used by the <I>Client</I> to tell the <I>Server</I> what <I>SecurityPolicy</I> it is using if there are multiple choices available. The value of the header is the URI for the <I>SecurityPolicy</I>. If the <I>Client</I> omits the header then the <I>Server</I> shall assume a <I>SecurityPolicy</I> of <I>None</I>. </P
><P 

>All HTTPS communications via a URL shall be treated as a single <I>SecureChannel</I> that is shared by multiple <I>Clients</I>. <I>Stacks</I> shall provide a unique identifier for the <I>SecureChannel </I>which allows <I>Applications</I> correlate a request with a <I>SecureChannel.</I>This means that <I>Sessions</I> can only be considered secure if the <I>AuthenticationToken</I> (see <A href="#LinkTarget_4407" href="#">
Part 4</A>
) is long (&gt;20 bytes) and HTTPS encryption is enabled.<I> </I> </P
><P 

>The crypography algorithms used by HTTPS have no relationship to the <I>EndpointDescription</I> <I>SecurityPolicy</I> and are determined by the policies set for HTTPS and are outside the scope of OPC UA.  </P
><P 

><A href="#LinkTarget_9062" href="#">
Figure 16</A>
 illustrates a few scenarios where the HTTPS transport could be used. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Web ServerUA ClientUA ServerDirect ConnectionWeb BrowserProxyServerUA ServerHTTPSUA TCPHTTPSBrowser Based Client (e.g. Silverlight) via Web Server ProxyUA ServerUA ClientNormal Client via HTTPS Proxy ServerHTTPSHTTPS</DIV
></P
><P 

><B>Figure 16 &ndash; Scenarios for the HTTPS Transport </P
><P 

></B>In some scenarios, HTTPS communication will rely on an intermediary which is not trusted by the applications. If this is the case then the HTTPS transport cannot be used to ensure security and the applications will have to establish a secure tunnel like a VPN before attempting any OPC UA related communication. </P
><P 

>Applications which support the HTTPS transport shall support <A href="#LinkTarget_4503" href="#">
HTTP</A>
 1.1 and <A href="#LinkTarget_4479" href="#">
SSL/TLS</A>
 1.0.  </P
><P 

>Some HTTPS implementations require that all <I>Servers</I> have a <I>Certificate</I> with a Common Name (CN) that matches the DNS name of the <I>Server</I> machine. This means that a <I>Server</I> with multiple DNS names will need multiple HTTPS certificates. If multiple <I>Servers</I> are on the same machine they may share HTTPS certificates. This means that <I>ApplicationCertificates</I> are not the same as HTTPS <I>Certificates</I>. <I>Applications</I> which use the HTTPS transport and require <I>Application</I> authentication shall check <I>Application</I> <I>Certificates</I> during the CreateSession/ActivateSession handshake. </P
><P 

>HTTPS <I>Certificates</I> can be automatically generated; however, this will cause problems for <I>Client</I>s operating inside a restricted environment such as a web browser. Therefore, HTTPS certificates should be issued by an authority which is accepted by all web browsers which need to access the <I>Server</I>. The set of <I>Certificate</I> authorities accepted by the web browsers is determined by the organization that manages the <I>Client</I> machines. <I>Client</I> applications that are not running inside a web may use the trust list that is used for <I>Application</I> <I>Certificates</I>. </P
><P 

>HTTPS connections have an unpredictable lifetime. Therefore, <I>Servers</I> must rely on the <I>AuthenticationToken</I> passed in the <I>RequestHeader</I> to determine the identity of the <I>Client</I>. This </P
><P 

>means the <I>AuthenticationToken</I> shall be a randomly generated value with at least 32 bytes of data and HTTPS with signing and encryption shall always be used.  </P
><P 

>HTTPS allows <I>Clients</I> to have certificates; however, they are not required by the HTTPS transport. A <I>Server</I> shall allow <I>Clients</I> to connect without an HTTPS <I>Certificate</I>.  </P
><P 

>HTTP 1.1 supports <I>Message</I> chunking where the Content-Length header in the request response is set to &ldquo;chunked&rdquo; and each chunk is prefixed by its size in bytes. All applications that support the HTTPS transport shall supporting HTTP chunking.  </P
><H3 
 ID="LinkTarget_9081"
><B> XML Encoding </H3
><P 

></B>This <I>TransportProfile</I> implements the OPC UA <I>Services</I> using a SOAP request-response message pattern over an HTTPS connection.  </P
><P 

>The body of the HTTP <I>Messages</I> shall be a SOAP 1.2 <I>Message</I> (see <A href="#LinkTarget_4422" href="#">
SOAP Part 1</A>
). WS-Addressing headers are optional.  </P
><P 

>The OPC UA XML Encoding specifies a way to represent an OPC UA <I>Message</I> as an XML element. This element is added to the SOAP <I>Message</I> as the only child of the SOAP body element. If an error occurs in the <I>Server</I> while parsing the request body, the <I>Server</I> may return a SOAP fault or it may return an OPC UA error response. </P
><P 

>The SOAP Action associated with an XML encoded request <I>Message</I> always has the form: </P
><P 

><FONT size="+1">http://opcfoundation.org/UA/2008/02/Services.wsdl/&lt;service name&gt; </P
><P 

><FONT size="+1">Where &lt;service name&gt; is the name of the OPC UA <I>Service</I> being invoked. </P
><P 

>The SOAP Action associated with an XML encoded response <I>Message</I> always has the form: </P
><P 

><FONT size="+1">http://opcfoundation.org/UA/2008/02/Services.wsdl/&lt;service name&gt;Response </P
><P 

><FONT size="+1">All requests shall be HTTP POST requests. The Content-type shall be &quot;application/soap+xml&quot; and the charset and action parameters shall be specified. The charset parameter shall be &quot;utf-8&quot; and the action parameter shall be the URI for the SOAP action.  </P
><P 

>An example HTTP request header is: </P
><P 

><FONT size="+1">POST /UA/SampleServer HTTP/1.1 </P
><P 

>Content-Type: application/soap+xml; charset=&quot;utf-8&quot;; </P
><P 

>    action=&quot;http://opcfoundation.org/UA/2008/02/Services.wsdl/Read&quot; </P
><P 

>Content-Length: nnnn </P
><P 

><FONT size="+1">The action parameter appears on the same line as the Content-Type declaration. </P
><P 

>An example request <I>Message</I>: </P
><P 

><FONT size="+1">&lt;s:Envelope xmlns:s=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt; </P
><P 

>  &lt;s:Body&gt; </P
><P 

>    &lt;ReadRequest xmlns=&quot;http://opcfoundation.org/UA/2008/02/Types.xsd&quot;&gt; </P
><P 

>    &hellip; </P
><P 

>    &lt;/ReadRequest&gt; </P
><P 

>  &lt;/s:Body&gt; </P
><P 

>&lt;/s:Envelope&gt; </P
><P 

><FONT size="+1">An example HTTP response header is: </P
><P 

><FONT size="+1">HTTP/1.1 200 OK </P
><P 

>Content-Type: application/soap+xml; charset=&quot;utf-8&quot;; </P
><P 

>    action=&quot;http://opcfoundation.org/UA/2008/02/Services.wsdl/ReadResponse&quot; </P
><P 

>Content-Length: nnnn </P
><P 

><FONT size="+1">The action parameter appears on the same line as the Content-Type declaration. </P
><P 

>An example response <I>Message</I>: </P
><P 

><FONT size="+1">&lt;s:Envelope xmlns:s=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt; </P
><P 

>  &lt;s:Body&gt; </P
><P 

>    &lt;ReadResponse xmlns=&quot;http://opcfoundation.org/UA/2008/02/Types.xsd&quot;&gt; </P
><P 

>    &hellip; </P
><P 

>    &lt;/ReadResponse&gt; </P
><P 

>  &lt;/s:Body&gt; </P
><P 

>&lt;/s:Envelope&gt; </P
><H3 
 ID="LinkTarget_9125"
><FONT size="+1"><B> OPC UA Binary Encoding </H3
><P 

></B>This <I>TransportProfile</I> implements the OPC UA <I>Services</I> using an OPC UA Binary encoded <I>Messages</I> exchanged over an HTTPS connection.   </P
><P 

>Applications which support the HTTPS <I>Profile</I> shall support HTTP 1.1. </P
><P 

>The body of the HTTP <I>Messages</I> shall be OPC UA Binary encoded blob. The Content-type shall be &quot;application/octet-stream&quot;.  </P
><P 

>An example HTTP request header is: </P
><P 

><FONT size="+1">POST /UA/SampleServer HTTP/1.1 </P
><P 

>Content-Type: application/octet-stream;  </P
><P 

>Content-Length: nnnn </P
><P 

><FONT size="+1">An example HTTP response header is: </P
><P 

><FONT size="+1">HTTP/1.1 200 OK </P
><P 

>Content-Type: application/octet-stream; </P
><P 

>Content-Length: nnnn </P
><P 

><FONT size="+1">The <I>Message</I> body is the request or response structure encoded as an <I>ExtensionObject</I> in OPC UA Binary. </P
><H2 
 ID="LinkTarget_9138"
><B>7.4 Well known addresses </H2
><P 

></B>The <I>Local Discovery Server</I> (LDS) is an OPC UA <I>Server</I> that implements the <I>Discovery Service Set</I> defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
. If an LDS is installed on a machine it shall use one or more of the well-known addresses defined in <A href="#LinkTarget_9149" href="#">
Table 39</A>
. </P
><P 

><B>Table 39 &ndash; Well known addresses for Local Discovery Servers </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Transport Mapping </P
></TD
><TD  
 valign="top"
><P 

>URL </P
></TD
><TD  
 valign="top"
><P 

>Notes </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SOAP/HTTP </P
></TD
><TD  
 valign="top"
><P 

>http://localhost/UADiscovery </P
></TD
><TD  
 valign="top"
><P 

>May require integration with a web <I>Server</I> like IIS. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SOAP/HTTP </P
></TD
><TD  
 valign="top"
><P 

>http://localhost:52601/UADiscovery </P
></TD
><TD  
 valign="top"
><P 

>Alternate if it Port 80 cannot be used by the LDS. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OPC UA TCP </P
></TD
><TD  
 valign="top"
><P 

>opc.tcp://localhost:4840/UADiscovery </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OPC UA HTTPS </P
></TD
><TD  
 valign="top"
><P 

>https:// localhost:4843/UADiscovery </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">OPC UA <I>Applications</I> that make use of the LDS shall allow administrators to change the well known addresses used within a system. </P
><P 

>The <I>Endpoint </I>used by <I>Servers</I> to register with the LDS shall be the base address with the path &ldquo;/registration&rdquo; appended to it (e.g. <A href="http://localhost/UADiscovery/registration">
<FONT color="#0000FF">http://localhost/UADiscovery/registration</A>
<FONT color="#000000">). OPC UA <I>Servers</I> shall allow administrators to configure the address to use for registration.  </P
><P 

>Each OPC UA <I>Server</I> <I>Application</I> implements the <I>Discovery Service Set</I>. If the OPC UA <I>Server</I> requires a different address for this <I>Endpoint</I><I> </I>it shall create the address by appending the path &ldquo;/discovery&rdquo; to its base address. </P
><H1 
 ID="LinkTarget_9201"
><FONT size="+1"><B>8 Normative Contracts </H1
><H2 
 ID="LinkTarget_9202"
><FONT size="+1">8.1 OPC Binary Schema </H2
><P 

></B>The normative contract for the OPC UA Binary encoded <I>Messages</I> is an OPC Binary Schema. This file defines the structure of all types and <I>Messages</I>. The syntax for an OPC Binary Type Schema is described in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. This schema captures normative names for types and their fields as well the order the fields appear when encoded. The data type of each field is also captured. </P
><H2 
 ID="LinkTarget_9209"
><B>8.2 XML Schema and WSDL </H2
><P 

></B>The normative contract for the OPC UA XML encoded <I>Messages</I> is an XML Schema. This file defines the structure of all types and <I>Messages</I>. This schema captures normative names for types and their fields as well the order the fields appear when encoded. The data type of each field is also captured. </P
><P 

>The normative contract for <I>Message</I> sent via the SOAP/HTTP <I>TransportProtocol</I> is a WSDL that includes XML Schema for the OPC UA XML encoded <I>Messages</I>. It also defines the port types for OPC UA <I>Servers</I> and <I>DiscoveryServers</I>. </P
><P 

>Links to the WSDL and XML Schema files can be found in <A href="#LinkTarget_9462" href="#">
Annex D</A>
. </P
><P 

> </P
><H1 
 ID="LinkTarget_9220"
><FONT size="+1"><B>Annex A  </B>(normative) <B> Constants  </H1
><H2 
 ID="LinkTarget_9222"
><FONT size="+1">A.1 Attribute Ids </H2
><P 

><FONT size="+1">Table A.1 &ndash; Identifiers assigned to Attributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Identifier </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NodeId </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>3 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DisplayName </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Description </P
></TD
><TD  
 valign="top"
><P 

>5 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>WriteMask </P
></TD
><TD  
 valign="top"
><P 

>6 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserWriteMask </P
></TD
><TD  
 valign="top"
><P 

>7 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>8 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Symmetric </P
></TD
><TD  
 valign="top"
><P 

>9 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>InverseName </P
></TD
><TD  
 valign="top"
><P 

>10 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ContainsNoLoops </P
></TD
><TD  
 valign="top"
><P 

>11 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EventNotifier </P
></TD
><TD  
 valign="top"
><P 

>12 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>13 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>14 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValueRank </P
></TD
><TD  
 valign="top"
><P 

>15 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ArrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>16 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AccessLevel </P
></TD
><TD  
 valign="top"
><P 

>17 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserAccessLevel </P
></TD
><TD  
 valign="top"
><P 

>18 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MinimumSamplingInterval </P
></TD
><TD  
 valign="top"
><P 

>19 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Historizing </P
></TD
><TD  
 valign="top"
><P 

>20 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Executable </P
></TD
><TD  
 valign="top"
><P 

>21 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserExecutable </P
></TD
><TD  
 valign="top"
><P 

>22 </P
></TD
></TR
></TABLE
><H2 
 ID="LinkTarget_9364"
><FONT size="+1"><B>A.2 Status Codes </H2
><P 

><FONT size="+1"></B>This annex defines the numeric identifiers for all of the StatusCodes defined by the OPC UA Specification. The identifiers are specified in a CSV file with the following syntax: </P
><P 

><FONT size="+1">&lt;SymbolName&gt;, &lt;Code&gt;, &lt;Description&gt; </P
><P 

><FONT size="+1">Where the <I>SymbolName</I> is the literal name for the error code that appears in the specification and the <I>Code</I> is the hexadecimal value for the <I>StatusCode</I> (see <A href="#LinkTarget_4407" href="#">
Part 4</A>
). The severity associated with a particular code is specified by the prefix (<I>Good</I>, <I>Uncertain</I> or <I>Bad</I>). </P
><P 

>The CSV released with this version of the standards can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/1.02/StatusCode.csv">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/1.02/StatusCode.csv</A>
 </P
><P 

><FONT size="+1" color="#000000">NOTE The latest CSV that is compatible with this version of the standard can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/StatusCode.csv">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/StatusCode.csv</A>
<FONT color="#000000"> </P
><H2 
 ID="LinkTarget_9385"
><FONT size="+1"><B>A.3 Numeric Node Ids </H2
><P 

><FONT size="+1"></B>This annex defines the numeric identifiers for all of the numeric <I>NodeIds</I> defined by the OPC UA Specification. The identifiers are specified in a CSV file with the following syntax: </P
><P 

><FONT size="+1">&lt;SymbolName&gt;, &lt;Identifier&gt;, &lt;NodeClass&gt; </P
><P 

><FONT size="+1">Where the <I>SymbolName</I> is either the <I>BrowseName</I> of a <I>Type Node</I> or the <I>BrowsePath</I> for an <I>Instance Node</I> that appears in the specification and the <I>Identifier</I> is numeric value for the <I>NodeId</I>. </P
><P 

>The <I>BrowsePath</I> for an instance <I>Node</I> is constructed by appending the <I>BrowseName</I> of the instance <I>Node</I> to <I>BrowseName</I> for the containing instance or type. A &lsquo;_&rsquo; character is used to separate each <I>BrowseName</I> in the path. For example, <A href="#LinkTarget_4408" href="#">
Part 5</A>
 defines the <I>ServerType</I> </P
><P 

><I>ObjectType</I> <I>Node</I> which has the <I>NamespaceArray Property</I>. The <I>SymbolName</I> for the NamespaceArray <I>InstanceDeclaration</I> within the <I>ServerType</I> declaration is: <I>ServerType_NamespaceArray</I>. <A href="#LinkTarget_4408" href="#">
Part 5</A>
 also defines a standard instance of the <I>ServerType ObjectType</I> with the <I>BrowseName</I> &lsquo;<I>Server</I>&rsquo;. The <I>BrowseName</I> for the <I>NamespaceArray Property</I> of the standard <I>Server Object</I> is: <I>Server_NamespaceArray</I>. </P
><P 

>The <I>NamespaceUri</I> for all <I>NodeIds</I> defined here is <A href="http://opcfoundation.org/UA/">
<FONT color="#0000FF">http://opcfoundation.org/UA/</A>
<FONT color="#000000"> </P
><P 

>The CSV released with this version of the standards can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/1.02/NodeIds.csv">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/1.02/NodeIds.csv</A>
  </P
><P 

><FONT size="+1" color="#000000">NOTE The latest CSV that is compatible with this version of the standard can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/NodeIds.csv">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/NodeIds.csv</A>
<FONT color="#000000"> </P
><H1 
 ID="LinkTarget_9420"
><FONT size="+1"><B>Annex B  </B>(normative) <B> OPC UA Nodeset  </H1
><P 

><FONT size="+1"></B>The OPC UA NodeSet includes the complete Information Model defined in this standard. It follows the XML Information Model schema syntax defined in <A href="#LinkTarget_10212" href="#">
Annex F</A>
 and can thus be read and processed by a computer program. </P
><P 

>The Information Model Schema released with this version of the standard can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.NodeSet2.xml">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.NodeSet2.xml</A>
 </P
><P 

><FONT size="+1" color="#000000">NOTE The latest Information Model schema that is compatible with this version of the standard can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.NodeSet2.xml">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/Opc.Ua.NodeSet2.xml</A>
 </P
><P 

><FONT size="+1" color="#000000"> </P
><P 

> </P
><H1 
 ID="LinkTarget_9442"
><FONT size="+1"><B>Annex C  </B>(normative) <B> Type declarations for the OPC UA native Mapping  </H1
><P 

><FONT size="+1"></B>This Annex defines the OPC UA Binary encoding for all <I>DataTypes</I> and <I>Messages</I> defined in this standard. The schema used to describe the type is defined in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
><P 

>The OPC UA Binary Schema released with this version of the standards can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.Types.bsd.xml">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.Types.bsd.xml</A>
<FONT color="#000000"> </P
><P 

><FONT size="+1">NOTE The latest file that is compatible with this version of the standards can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/Opc.Ua.Types.bsd.xml">
<FONT size="+1" color="#0000FF">http://www.opcfoundation.org/UA/schemas/Opc.Ua.Types.bsd.xml</A>
<FONT color="#000000"> </P
><H1 
 ID="LinkTarget_9462"
><FONT size="+1"><B>Annex D  </B>(normative) <B> WSDL for the XML Mapping  </H1
><H2 
 ID="LinkTarget_9464"
><FONT size="+1">D.1 XML Schema </H2
><P 

><FONT size="+1"></B>This annex defines the XML Schema for all DataTypes and <I>Messages</I> defined in this series of OPC UA standards. </P
><P 

>The XML Schema released with this version of the standards can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.Types.xsd">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.Types.xsd</A>
 </P
><P 

><FONT size="+1" color="#000000">NOTE The latest file that is compatible with this version of the standards can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/2008/02/Types.xsd">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/2008/02/Types.xsd</A>
<FONT color="#000000"> </P
><H2 
 ID="LinkTarget_9478"
><FONT size="+1"><B>D.2 WDSL Port Types </H2
><P 

><FONT size="+1"></B>This annex defines the WSDL Operations and Port Types for all Services defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
. </P
><P 

>The WSDL released with this version of the standards can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.Services.wsdl">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.Services.wsdl</A>
 </P
><P 

><FONT size="+1" color="#000000">NOTE The latest file that is compatible with this version of the standards can be found here: </P
><P 

><A href="http://opcfoundation.org/UA/2008/02/Services.wsdl">
<FONT color="#0000FF">http://opcfoundation.org/UA/2008/02/Services.wsdl</A>
 </P
><P 

><FONT size="+1" color="#000000">This WSDL imports the XML Schema defined in <A href="#LinkTarget_9464" href="#">
D.1</A>
. </P
><H2 
 ID="LinkTarget_9503"
><FONT size="+1"><B>D.3 WSDL Bindings </H2
><P 

><FONT size="+1"></B>This annex defines the WSDL Bindings for all Services defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
. </P
><P 

>The WSDL released with this version of the standards can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.Endpoints.wsdl">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/1.02/Opc.Ua.Endpoints.wsdl</A>
 </P
><P 

><FONT size="+1" color="#000000">NOTE The latest file that is compatible with this version of the standards can be found here: </P
><P 

><A href="http://opcfoundation.org/UA/2008/02/Endpoints.wsdl">
<FONT color="#0000FF">http://opcfoundation.org/UA/2008/02/Endpoints.wsdl</A>
 </P
><P 

><FONT size="+1" color="#000000">This WSDL imports the WSDL defined in <A href="#LinkTarget_9478" href="#">
D.2</A>
. </P
><P 

> </P
><H1 
 ID="LinkTarget_9529"
><FONT size="+1"><B>Annex E  </B>(normative)<B>  Security settings management  </H1
><H2 
 ID="LinkTarget_9531"
><FONT size="+1">E.1 Overview </H2
><P 

><FONT size="+1"></B>All OPC UA applications shall support security; however, this requirement means that Administrators need to configure the security settings for the OPC UA <I>Application</I>. This appendix describes an XML Schema which can be used to read and update the security settings for a OPC UA <I>Application</I>. All OPC UA applications may support configuration by importing/exporting documents that conform to the schema (called the <I>SecuredApplication</I> schema) defined in this Annex.  </P
><P 

>The XML Schema released with this version of the standards can be found here: </P
><P 

><A href="http://www.opcfoundation.org/UA/schemas/1.02/SecuredApplication.xsd">
<FONT color="#0000FF">http://www.opcfoundation.org/UA/schemas/1.02/SecuredApplication.xsd</A>
 </P
><P 

><FONT size="+1" color="#000000">NOTE The latest file that is compatible with this version of this specification can be found here: </P
><P 

><A href="http://opcfoundation.org/UA/2011/03/SecuredApplication.xsd">
<FONT color="#0000FF">http://opcfoundation.org/UA/2011/03/SecuredApplication.xsd</A>
<FONT color="#000000"> </P
><P 

><FONT size="+1">The <I>SecuredApplication</I> schema can be supported in two ways: </P
><DL 

><DD 

>1) Providing an XML configuration file that can be edited directly; </DD
><DD 

>2) Providing a import/export utility that can be run as required; </DD
></DL
><P 

>If the <I>Application</I> supports direct editing of an XML configuration file then that file shall have exactly one element with the local name &lsquo;SecuredApplication&rsquo; and URI equal to the <I>SecuredApplication</I>  schema URI. A third party configuration utility shall be able to parse the XML file, read and update the &lsquo;SecuredApplication&rsquo; element. The administrator shall ensure that only authorized administrators can update this file. The following is an example of a configuration that can be directly edited: </P
><P 

><FONT size="+1">&lt;s1:SampleConfiguration xmlns:s1=&quot;http://acme.com/UA/Sample/Configuration.xsd&quot;&gt; </P
><P 

>  &lt;ApplicationName&gt;ACME UA Server&lt;/ApplicationName&gt; </P
><P 

>  &lt;ApplicationUri&gt;urn:myfactory.com:Machine54:ACME UA Server&lt;/ApplicationUri&gt; </P
><P 

>   </P
><P 

>  &lt;!-- any number of application specific elements --&gt; </P
><P 

> </P
><P 

>  &lt;SecuredApplication xmlns=&quot;http://opcfoundation.org/UA/2011/03/SecuredApplication.xsd&quot;&gt; </P
><P 

>    &lt;ApplicationName&gt;ACME UA Server&lt;/ApplicationName&gt; </P
><P 

>    &lt;ApplicationUri&gt;urn:myfactory.com:Machine54:ACME UA Server&lt;/ApplicationUri&gt; </P
><P 

>    &lt;ApplicationType&gt;Server_0&lt;/ApplicationType&gt; </P
><P 

>    &lt;ApplicationCertificate&gt; </P
><P 

>      &lt;StoreType&gt;Windows&lt;/StoreType&gt; </P
><P 

>      &lt;StorePath&gt;LocalMachine\My&lt;/StorePath&gt; </P
><P 

>      &lt;SubjectName&gt;ACME UA Server&lt;/SubjectName&gt; </P
><P 

>    &lt;/ApplicationCertificate&gt; </P
><P 

>  &lt;/SecuredApplication&gt; </P
><P 

> </P
><P 

>  &lt;!-- any number of application specific elements --&gt; </P
><P 

>   </P
><P 

>  &lt;DisableHiResClock&gt;true&lt;/DisableHiResClock&gt; </P
><P 

>&lt;/s1:SampleConfiguration&gt; </P
><P 

><FONT size="+1">If an <I>Application</I> provides an import/export utility then the import/export file shall be a document that conforms to the <I>SecuredApplication</I> schema. The administrator shall ensure that only authorized administrators can run the utility. The following is an example of a file used by an import/export utility: </P
><P 

><FONT size="+1">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt; </P
><P 

>&lt;SecuredApplication xmlns=&quot;http://opcfoundation.org/UA/2011/03/SecuredApplication.xsd&quot;&gt; </P
><P 

>  &lt;ApplicationName&gt;ACME UA Server&lt;/ApplicationName&gt; </P
><P 

>  &lt;ApplicationUri&gt;urn:myfactory.com:Machine54:ACME UA Server&lt;/ApplicationUri&gt; </P
><P 

>  &lt;ApplicationType&gt;Server_0&lt;/ApplicationType&gt; </P
><P 

>  &lt;ConfigurationMode&gt;urn:acme.com:ACME Configuration Tool&lt;/ConfigurationMode&gt; </P
><P 

>  &lt;LastExportTime&gt;2011-03-04T13:34:12Z&lt;/LastExportTime&gt; </P
><P 

>  &lt;ExecutableFile&gt;%ProgramFiles%\ACME\Bin\ACME UA Server.exe&lt;/ExecutableFile&gt; </P
><P 

>  &lt;ApplicationCertificate&gt; </P
><P 

>    &lt;StoreType&gt;Windows&lt;/StoreType&gt; </P
><P 

>    &lt;StorePath&gt;LocalMachine\My&lt;/StorePath&gt; </P
><P 

>    &lt;SubjectName&gt;ACME UA Server&lt;/SubjectName&gt; </P
><P 

>  &lt;/ApplicationCertificate&gt; </P
><P 

>  &lt;TrustedCertificateStore&gt; </P
><P 

>    &lt;StoreType&gt;Windows&lt;/StoreType&gt; </P
><P 

>    &lt;StorePath&gt;LocalMachine\UA Applications&lt;/StorePath&gt; </P
><P 

>    &lt;!-- Offline CRL Checks by Default --&gt; </P
><P 

>    &lt;ValidationOptions&gt;16&lt;/ValidationOptions&gt;  </P
><P 

>  &lt;/TrustedCertificateStore&gt; </P
><P 

>  &lt;TrustedCertificates&gt; </P
><P 

>    &lt;Certificates&gt; </P
><P 

>      &lt;CertificateIdentifier&gt; </P
><P 

>        &lt;SubjectName&gt;CN=MyFactory CA&lt;/SubjectName&gt; </P
><P 

>        &lt;!--  Online CRL Check for this CA --&gt; </P
><P 

>        &lt;ValidationOptions&gt;32&lt;/ValidationOptions&gt;  </P
><P 

>      &lt;/CertificateIdentifier&gt; </P
><P 

>    &lt;/Certificates&gt; </P
><P 

>  &lt;/TrustedCertificates&gt; </P
><P 

>  &lt;RejectedCertificatesStore&gt; </P
><P 

>    &lt;StoreType&gt;Directory&lt;/StoreType&gt; </P
><P 

>    &lt;StorePath&gt;%CommonApplicationData%\OPC Foundation\RejectedCertificates&lt;/StorePath&gt; </P
><P 

>  &lt;/RejectedCertificatesStore&gt; </P
><P 

>&lt;/SecuredApplication&gt; </P
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_9609"
><FONT size="+1"><B>E.2 SecuredApplication </H2
><P 

><FONT size="+1"></B>The <I>SecuredApplication</I> element specifies the security settings for an <I>Application</I>. The elements contained in a SecuredApplication are described in <A href="#LinkTarget_9621" href="#">
Table E.1</A>
. </P
><P 

>When an instance of a <I>SecuredApplication</I> is imported into an <I>Application</I> the <I>Application</I> updates its configuration based on the information contained within it. If unrecoverable errors occur during import an <I>Application</I> shall not make any changes to its configuration and report the reason for the error.  </P
><P 

>The mechanism used to import or export the configuration depends on the <I>Application</I>. Applications shall ensure that only authorized users are able to access this feature. </P
><P 

>The <I>SecuredApplication</I> element may reference X509 Certificates which are contained in physical stores. Each <I>Application</I> needs to decide whether it uses shared physical stores which the administrator can control directly by changing the location or private stores that can only be accessed via the import/export utility. If the <I>Application</I> uses private stores then the contents of these private stores shall be copied to the export file during export. If the import file references shared physical stores then the import/export utility shall copy the contents of those stores to the private stores. </P
><P 

>The import/export utility shall not export private keys. If the administrator wishes to assign a new public-private key to the <I>Application</I> the administrator shall place the private in a store where it can be accessed by the import/export utility. The import/export utility is then responsible for ensuring it is securely moved to a location where the <I>Application</I> can access it.  </P
><P 

><B>Table E.1 &ndash; SecuredApplication </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Element </P
></TH
><TH 
 valign="top"
><P 

>Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ApplicationName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A human readable name for the <I>Application</I>.  </P
><P 

>Applications shall allow this value to be read or changed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ApplicationUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A globally unique identifier for the instance of the <I>Application</I>.  </P
><P 

>Applications shall allow this value to be read or changed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ApplicationType </P
></TD
><TD  
 valign="top"
><P 

>ApplicationType </P
></TD
><TD  
 valign="top"
><P 

>The type of <I>Application</I>. </P
><P 

>May be one of  </P
><DL 

><DD 

>&#61623; Server_0; </DD
><DD 

>&#61623; Client_1; </DD
><DD 

>&#61623; ClientAndServer_2;  </DD
><DD 

>&#61623; DiscoveryServer_3;  </DD
></DL
><P 

><I>Application</I> shall provide this value. </P
><P 

>Applications do not allow this value to be changed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ProductName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A name for the product. </P
><P 

><I>Application</I> shall provide this value. </P
><P 

>Applications do not allow this value to be changed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ConfigurationMode </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>Indicates how the <I>Application</I> should be configured. </P
><P 

>An empty or missing value indicates that the configuration file can be edited directly. The location of the configuration file shall be provided in this case. </P
><P 

>Any other value is a URI that identifies the configuration utility. The vendor documentation shall explain how to use this utility. </P
><P 

><I>Application</I> shall provide this value. </P
><P 

>Applications do not allow this value to be changed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LastExportTime </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>When the configuration was exported by the import/export utility.  </P
><P 

>It may be omitted if Applications allow direct editing of the security configuration. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ConfigurationFile </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The full path to a configuration file used by the <I>Application</I>. </P
><P 

>Applications do nor provide this value if a import/export utility is used. </P
><P 

>Applications do not allow this value to be changed. </P
><P 

>Permissions set on this file shall control who has rights to change the configuration of the <I>Application</I>.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ExecutableFile </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The full path to an executable file for the <I>Application</I>.  </P
><P 

>Applications may not provide this value. </P
><P 

>Applications do not allow this value to be changed.  </P
><P 

>Permissions set on this file shall control who has rights to launch the <I>Application</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ApplicationCertificate </P
></TD
><TD  
 valign="top"
><P 

>CertificateIdentifier </P
></TD
><TD  
 valign="top"
><P 

>The identifier for the <I>ApplicationInstance </I><I>Certificate</I>.  </P
><P 

>Applications shall allow this value to be read or changed. </P
><P 

>This identifier may reference a <I>Certificate</I> store that contains the private key. If the private key is not accessible to outside applications this value shall contain the X509 <I>Certificate</I> for the <I>Application</I>. </P
><P 

>If the configuration utility assigns a new private key this value shall reference the store where the private key is placed. The import/export utility may delete this private key if it moves it to a secure location accessible to the <I>Application</I>. </P
><P 

>Applications shall allow Administrators to enter the password required to access the private key during the import operation. The exact mechanism depends on the <I>Application</I>. </P
><P 

>Applications shall report an error if the ApplicationCertificate is not valid. </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Element </P
></TH
><TH 
 valign="top"
><P 

>Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>TrustedCertificateStore </P
></TD
><TD  
 valign="top"
><P 

>CertificateStore Identifier </P
></TD
><TD  
 valign="top"
><P 

>The location of the CertificateStore containing the Certificates of Applications or <I>Certificate</I> Authorities (CAs) which can be trusted.  </P
><P 

>Applications shall allow this value to be read or changed. </P
><P 

>This value shall be a reference to a physical store which can be managed separately from the <I>Application</I>. Applications that support shared physical stores shall check this store for changes whenever they validate a <I>Certificate</I>. </P
><P 

>The Administrator is responsible for verifying the signature on all Certificates placed in this store. This means the <I>Application</I> may trust Certificates in this store even if they cannot be verified back to a trusted root. </P
><P 

>Administrators shall place any CA certificates used to verify the signature in the UntrustedIssuerStore or the UntrustedIssuerList. This will allow applications to properly verify the signatures. </P
><P 

>The <I>Application</I> shall check the revocation status of the Certificates in this store if the <I>Certificate</I> was issued by a CA. The <I>Application</I> shall look for the offline <I>Certificate</I> Recovation List (CRL) for a CA in the store where it found the CA <I>Certificate</I>.  </P
><P 

>The location of an online CRL for CA shall be specified with the CRLDistributionPoints (OID= 2.5.29.31) X509 <I>Certificate</I> extension. </P
><P 

>The ValidationOptions parameter is used to specify which revocation list should be used for CAs in this store. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TrustedCertificates </P
></TD
><TD  
 valign="top"
><P 

>CertificateList </P
></TD
><TD  
 valign="top"
><P 

>A list of Certificates for Applications for CAs that can be trusted.  </P
><P 

>Applications shall allow this value to be read or changed. </P
><P 

>The value is an explicit list of Certificates which is private to the <I>Application</I>. It is used when the <I>Application</I> does not support shared physical <I>Certificate</I> stores or when Administrators need to specify ValidationOptions for individual Certificates. </P
><P 

>If the TrustedCertificateStore and the TrustedCertificates parameters are both specified then the <I>Application</I> shall use the TrustedCertificateStore for checking trust relationships. The TrustedCertificates parameter is only used to lookup ValidationOptions for individual Certificates. It may also be used to provide CRLs for CA certificates. </P
><P 

>If the TrustedCertificateStore is not specified then TrustedCertificates parameter shall contain the complete X509 <I>Certificate</I> for each entry. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IssuerStore </P
></TD
><TD  
 valign="top"
><P 

>CertificateStore Identifier </P
></TD
><TD  
 valign="top"
><P 

>The location of the CertificateStore containing CA Certificates which are not trusted but are needed to check signatures on Certificates. </P
><P 

>Applications shall allow this value to be read or changed. </P
><P 

>This value shall be a reference to a physical store which can be managed separately from the <I>Application</I>. Applications that support shared physical stores shall check this store for changes whenever they validate a <I>Certificate</I>. </P
><P 

>This store may also contain CRLs for the CAs. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IssuerCertificates </P
></TD
><TD  
 valign="top"
><P 

>CertificateList </P
></TD
><TD  
 valign="top"
><P 

>A list of Certificates for CAs which are not trusted but are needed to check signatures on Certificates. </P
><P 

>Applications shall allow this value to be read or changed. </P
><P 

>The value is an explicit list of Certificates which is private to the <I>Application</I>. It is used when the <I>Application</I> does not support shared physical <I>Certificate</I> stores or when Administrators need to specify ValidationOptions for individual Certificates. </P
><P 

>If the IssuerStore and the IssuerCertificates parameters are both specified then the <I>Application</I> shall use the IssuerStore for checking signatures. The IssuerCertificates parameter is only used to lookup ValidationOptions for individual Certificates. It may also be used to provide CRLs for CA certificates. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>RejectedCertificatesStore </P
></TD
><TD  
 valign="top"
><P 

>CertificateStore Identifier </P
></TD
><TD  
 valign="top"
><P 

>The location of the shared CertificateStore containing the Certificates of Applications which were rejected. </P
><P 

>Applications shall allow this value to be read or changed. </P
><P 

>Applications shall add the DER encoded <I>Certificate</I> into this store whenever it rejects a <I>Certificate</I> because it is untrusted or if it failed one of the validation rules which can be suppressed (see Clause <A href="#LinkTarget_10137" href="#">
E.6</A>
). </P
><P 

>Applications shall not add a <I>Certificate</I> to this store if it was rejected for a reason that cannot be suppressed (e.g. <I>Certificate</I> revoked). </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Element </P
></TH
><TH 
 valign="top"
><P 

>Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BaseAddresses </P
></TD
><TD  
 valign="top"
><P 

>String[] </P
></TD
><TD  
 valign="top"
><P 

>A list of URLs for the <I>Endpoint</I>s supported by a <I>Server</I>. </P
><P 

>Applications shall allow these values to be read or changed.  </P
><P 

>If a <I>Server</I> does not support the scheme for a URL it shall ignore it. </P
><P 

>This list can have multiple entries for the same URL scheme. The first entry for a scheme is the base URL. The rest are assumed to be DNS aliases that point to the first URL.  </P
><P 

>It is the responsibility of the Administrator to configure the network to route these aliases correctly. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SecurityProfileUris </P
></TD
><TD  
 valign="top"
><P 

>SecurityProfile[] </P
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>A list of SecurityPolicyUris supported by a <I>Server</I><I>.</I> The allowed URIs are defined in <A href="#LinkTarget_4409" href="#">
Part 7</A>
. </P
><P 

><I>Applications</I> shall allow these values to be read or changed. </P
><P 

><I>Applications</I> shall allow the Enabled flag to be changed for each <I>SecurityProfile</I> that it supports. </P
><P 

>If the Enabled flag is false the <I>Server</I> shall not allow connections using the <I>SecurityProfile</I>. </P
><P 

>If a <I>Server</I> does not support a SecurityProfile it shall ignore it. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Extensions </P
></TD
><TD  
 valign="top"
><P 

>xs:any </P
></TD
><TD  
 valign="top"
><P 

>A list of vendor defined Extensions attached to the security settings. </P
><P 

>Applications shall ignore Extensions that they do not recognize. </P
><P 

>Applications that update a file containing Extensions shall not delete or modify extensions that they do not recognize. </P
></TD
></TR
></TABLE
><H2 

><FONT size="+1"><B>E.3 CertificateIdentifier </H2
><P 

><FONT size="+1"></B>The <I>CertificateIdentifier</I> element describes an X509 <I>Certificate</I>. The <I>Certificate</I> can be provided explicitly within the element or the element can specify the location of the <I>CertificateStore</I> that contains the <I>Certificate</I>. The elements contained in a <I>CertificateIdentifier</I> are described in <A href="#LinkTarget_9872" href="#">
Table E.2</A>
. </P
><P 

><B>Table E.2 &ndash; CertificateIdentifier </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>StoreType </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The type of CertificateStore that contains the <I>Certificate</I>. </P
><P 

>Predefined values are &quot;Windows&quot; and &quot;Directory&quot;. </P
><P 

>If not specified the RawData element shall be specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>StorePath </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The path to the CertificateStore. </P
><P 

>The syntax depends on the StoreType.  </P
><P 

>If not specified the RawData element shall be specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SubjectName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The SubjectName for the <I>Certificate</I>. </P
><P 

>The Common Name (CN) component of the SubjectName. </P
><P 

>The SubjectName represented as a string that complies with Section 3 of <A href="#LinkTarget_4585" href="#">
RFC 4514</A>
.  </P
><P 

>Values that do not contain '=' characters are presumed to be the Common Name component. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Thumbprint </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The SHA1 thumbprint for the <I>Certificate</I> formatted as a hexadecimal string. </P
><P 

>Case is not significant. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>RawData </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>The DER encoded <I>Certificate</I>. </P
><P 

>The CertificateIdentifier is invalid if the information in the DER <I>Certificate</I> conflicts with the information specified in other fields. Import utilities shall reject configurations containing invalid Certificates. </P
><P 

>This field shall not be specified if the StoreType and StorePath are specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValidationOptions </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The options to use when validating the <I>Certificate</I>.The possible options are described in <A href="#LinkTarget_10137" href="#">
E.6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OfflineRevocationList </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A <I>Certificate</I> Revocation List (CRL) associated with an Issuer <I>Certificate</I>.  </P
><P 

>The format of a CRL is defined by <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
. </P
><P 

>This field is only meaningful for Issuer Certificates. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OnlineRevocationList </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A URL for an Online Revocation List associated with an Issuer <I>Certificate</I>.  </P
><P 

>This field is only meaningful for Issuer Certificates. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

>A &quot;Windows&quot; StoreType specifies a Windows <I>Certificate</I> store.  </P
><P 

>The syntax of the StorePath has the form:  </P
><P 

> [\\HostName\]StoreLocation[\(ServiceName | UserSid)]\StoreName </P
><P 

>where: </P
><P 

> HostName &ndash; the name of the machine where the store resides. </P
><P 

> StoreLocation &ndash; one of LocalMachine, CurrentUser, User or Service </P
><P 

> ServiceName  &ndash; the name of a Windows Service. </P
><P 

> UserSid &ndash; the SID for a Windows user account. </P
><P 

> StoreName &ndash; the name of the store (e.g. My, Root, Trust, CA, etc.). </P
><P 

>Examples of Windows StorePaths are: </P
><P 

> \\MYPC\LocalMachine\My </P
><P 

> \CurrentUser\Trust </P
><P 

> \\MYPC\Service\My UA <I>Server</I>\UA Applications </P
><P 

> \User\S-1-5-25\Root </P
><P 

>A &quot;Directory&quot; StoreType specifies a directory on disk which contains files with DER encoded Certificates. The name of the file is the SHA1 thumbprint for the <I>Certificate</I>. Only public keys may be placed in a &quot;Directory&quot; Store. The StorePath is an absolute file system path with a syntax that depends on the operating system.  </P
><P 

>If a &quot;Directory&quot; store contains a &lsquo;certs&rsquo; subdirectory then it is presumed to be a structured store with the subdirectories described in <A href="#LinkTarget_10004" href="#">
Table E.3</A>
. </P
><P 

><B>Table E.3 &ndash; Structured directory store </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Subdirectory </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>certs </P
></TD
><TD  
 valign="top"
><P 

>Contains the DER encoded X509 Certificates. </P
><P 

>The files shall have a .der file extension. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>private </P
></TD
><TD  
 valign="top"
><P 

>Contains the private keys. </P
><P 

>The format of the file may be <I>Application</I> specific. </P
><P 

>PEM encoded files should have a .pem extension. </P
><P 

>PKCS#12 encoded files should have a .pfx extension. </P
><P 

>The root file name shall be the same as the corresponding public key file in the certs directory.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>crl </P
></TD
><TD  
 valign="top"
><P 

>Contains the DER encoded CRL for any CA Certificates found in the certs or ca directories.  </P
><P 

>The files shall have a .crl file extension. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

>Each <I>Certificate</I> is uniquely identified by its Thumbprint. The SubjectName or the distinguished SubjectName may be used to identify a <I>Certificate</I> to a human; however, they are not unique. The SubjectName may be specified in conjuction with the Thumbprint or the RawData. If there is an inconsistency between the information provided then the <I>CertificateIdentifier</I> is invalid. Invalid <I>CertificateIdentifiers</I> are handled differently depending on where they are used.  </P
><P 

>It is recommended that the SubjectName always be specified. </P
><P 

>A <I>Certificate</I> revocation list (CRL) contains a list of certificates issued by a CA that are no longer trusted. These lists should be checked before an <I>Application</I> can trust a <I>Certificate</I> issued by a trusted CA. The format of a CRL is defined by <A href="#LinkTarget_4578" href="#">
RFC 3280</A>
. </P
><P 

>Offline CRLs are placed in a local <I>Certificate</I> store with the Issuer <I>Certificate</I>. Online CRLs may exist but the protocol depends on the system. An online CRL is identified by a URL. </P
><H2 
 ID="LinkTarget_10046"
><FONT size="+1"><B>E.4 CertificateStoreIdentifier </H2
><P 

><FONT size="+1"></B>The <I>CertificateStoreIdentifier</I> element describes a physical store containing X509 Certificates. The elements contained in a <I>CertificateStoreIdentifier</I> are described in <A href="#LinkTarget_10054" href="#">
Table E.4</A>
. </P
><P 

><B>Table E.4 &ndash; CertificateStoreIdentfier </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>StoreType </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The type of CertificateStore that contains the <I>Certificate</I>. </P
><P 

>Predefined values are &quot;Windows&quot; and &quot;Directory&quot;. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>StorePath </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The path to the CertificateStore. </P
><P 

>The syntax depends on the StoreType. </P
><P 

>See <A href="#LinkTarget_9862" href="#">
E.3</A>
 for a description of the syntax for different StoreTypes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValidationOptions </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The options to use when validating the Certificates contained in the store. </P
><P 

>The possible options are described in E.6. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

>All <I>Certificates</I> are placed in a physical store which can be protected from unauthorized access. The implementation of a store can vary and will depend on the <I>Application</I>, development tool or operating system. A <I>Certificate</I> store may be shared by many applications on the same machine. </P
><P 

>Each <I>Certificate</I> store is identified by a <I>StoreType</I> and a <I>StorePath</I>. The same path on different machines identifies a different store. </P
><H2 
 ID="LinkTarget_10101"
><FONT size="+1"><B>E.5 CertificateList </H2
><P 

><FONT size="+1"></B>The <I>CertificateList</I> element is a list of <I>Certificates</I>. The elements contained in a <I>CertificateList</I> are described in <A href="#LinkTarget_10109" href="#">
Table E.5</A>
. </P
><P 

><B>Table E.5 &ndash; CertificateList </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Certficates </P
></TD
><TD  
 valign="top"
><P 

>CertificateIdentifier[] </P
></TD
><TD  
 valign="top"
><P 

>The list of Certificates contained in the Trust List </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValidationOptions </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The options to use when validating the Certificates contained in the store. </P
><P 

>These options only apply to <I>Certificates</I> that have <I>ValidationOptions</I> with the <I>UseDefaultOptions</I> bit set. The possible options are described in E.6. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_10137"
><FONT size="+1"><B>E.6 CertificateValidationOptions </H2
><P 

><FONT size="+1"></B>The <I>CertificateValidationOptions</I> control the process used to validate a <I>Certificate</I>. Any <I>Certificate</I> can have validation options associated. If none are specified the <I>ValidationOptions</I> for the store or list containing the <I>Certificate</I> are used. The possible options are shown in <A href="#LinkTarget_10146" href="#">
Table E.6</A>
. </P
><P 

><B>Table E.6 &ndash; CertificateValidationOptions </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Field </P
></TD
><TD  
 valign="top"
><P 

>Bit </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SuppressCertificateExpired </P
></TD
><TD  
 valign="top"
><P 

>0 </P
></TD
><TD  
 valign="top"
><P 

>Ignore errors related to the validity time of the <I>Certificate</I> or its issuers. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SuppressHostNameInvalid </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Ignore mismatches between the host name or <I>Application</I> uri.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SuppressRevocationStatusUnknown </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Ignore errors if the issuer&rsquo;s revocation list cannot be found. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CheckRevocationStatusOnline </P
></TD
><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Check the revocation status online. </P
><P 

>If set the validator will look for the URL of the CRL Distribution Point in the <I>Certificate</I> and use the OCSP (Online Certificate Status Protocol) to determine if the <I>Certificate</I> has been revoked. </P
><P 

>If the CRL Distribution Point is not reachable then the validator will look for offline CRLs if the <I>CheckRevocationStatusOffine</I> bit is set. Otherwise, validation fails. </P
><P 

>This option is specified for Issuer <I>Certificates</I> and used when validating Certificates issued by that Issuer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CheckRevocationStatusOffine </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>Check the revocation status offline.  </P
><P 

>If set the validator will look a CRL in the <I>Certificate Store</I> where the CA <I>Certificate</I> was found. </P
><P 

>Valididation fails if a CRL is not found. </P
><P 

>This option is specified for Issuer <I>Certificates</I> and used when validating <I>Certificates</I> issued by that <I>Issuer</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UseDefaultOptions </P
></TD
><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>If set the <I>CertificateValidationOptions</I> from the <I>CertificateList</I> shall be used. </P
><P 

>If a <I>Certificate</I> does not belong to a <I>CertificateList</I> then the default is 0 for all bits. </P
></TD
></TR
></TABLE
><H1 
 ID="LinkTarget_10212"
><FONT size="+1"><B>Annex F  </B>(normative) <B> Information Model XML Schema  </H1
><H2 
 ID="LinkTarget_10214"
><FONT size="+1">F.1 Overview </H2
><P 

><FONT size="+1"></B>Information Model developers define standard <I>AddressSpaces</I> which are implemented by many <I>Servers</I>. There is a need for a standard syntax that Information Model developers can use to formally define their models in a form that can be read by a computer program. This Annex defines an XML-based schema for this purpose. </P
><P 

>The XML Schema released with this version of the standards can be found here:<A href="http://www.opcfoundation.org/UA/schemas/1.02/UANodeSet.xsd">
<FONT color="#0000FF"> </A>
</P
><P 

><A>
http://www.opcfoundation.org/UA/schemas/1.02/UANodeSet.xsd </A>
</P
><P 

><FONT size="+1" color="#000000">NOTE The latest file that is compatible with this version of the standards can be found here: </P
><P 

><A href="http://opcfoundation.org/UA/2011/03/UANodeSet.xsd">
<FONT color="#0000FF">http://opcfoundation.org/UA/2011/03/UANodeSet.xsd</A>
<FONT color="#000000"> </P
><P 

><FONT size="+1">The schema document is the formal definition. The description in this Annex only discusses details of the semantics that cannot be captured in the schema document. Types which are self-describing are not discussed. </P
><P 

>This schema can also be used to serialize (i.e. import or export) an arbitrary set of <I>Nodes</I> in the <I>Server Address Space</I>. This serialized form can be used to save <I>Server</I> state for use by the <I>Server</I> later or to exchange with other applications (e.g. to support offline configuration by a Client).  </P
><H2 
 ID="LinkTarget_10232"
><FONT size="+1"><B>F.2 UANodeSet </H2
><P 

><FONT size="+1"></B>The <I>UANodeSet</I> is the root of the document. It defines a set of <I>Nodes</I>, their <I>Attributes</I> and <I>References</I>. <I>References</I> to <I>Nodes</I> outside of the document are allowed.  </P
><P 

>The structure of a UANodeSet is shown in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
><P 

><B>Table F.1 &ndash; UANodeSet </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NamespaceUris </P
></TD
><TD  
 valign="top"
><P 

>UriTable </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>NamespaceUris</I> used in the <I>UANodeSet</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerUris </P
></TD
><TD  
 valign="top"
><P 

>UriTable </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>ServerUris</I> used in the <I>UANodeSet</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Models </P
></TD
><TD  
 valign="top"
><P 

>ModelTableEntry[] </P
></TD
><TD  
 valign="top"
><P 

>A list of Models that are defined in the UANodeSet along with any dependencies these models have. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ModelUri </P
></TD
><TD  
 valign="top"
><P 

> String </P
></TD
><TD  
 valign="top"
><P 

>The URI for the model.  </P
><P 

>This URI should be one of the entries in the NamespaceUris table. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Version </P
></TD
><TD  
 valign="top"
><P 

> String </P
></TD
><TD  
 valign="top"
><P 

>The version of the model defined in the <I>UANodeSet</I><I>.</I><I> </I></P
><P 

>This is a human readable string and not intended for programmatic comparisons. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> PublicationDate </P
></TD
><TD  
 valign="top"
><P 

> DateTime </P
></TD
><TD  
 valign="top"
><P 

>When the model was published. </P
><P 

>This value is used for comparisons if the Model is defined in multiple <I>UANodeSet</I><I> </I>files<I>.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> RequiredModels </P
></TD
><TD  
 valign="top"
><P 

> ModelTableEntry[] </P
></TD
><TD  
 valign="top"
><P 

>A list of dependencies for the model. </P
><P 

>If the model requires a minimum version the <I>PublicationDate</I> shall be specified. Tools which attempt to resolve these dependencies may accept any  <I>PublicationDate</I><I> </I>after this date.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Aliases </P
></TD
><TD  
 valign="top"
><P 

>AliasTable </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>A</I><I>liases</I> used in the <I>UANodeSet</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Extensions </P
></TD
><TD  
 valign="top"
><P 

>xs:any </P
></TD
><TD  
 valign="top"
><P 

>An element containing any vendor defined extensions to the <I>UANodeSet</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LastModified </P
></TD
><TD  
 valign="top"
><P 

>DateTime </P
></TD
><TD  
 valign="top"
><P 

>The last time a document was modified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&lt;choice&gt; </P
></TD
><TD  
 valign="top"
><P 

>UAObject </P
><P 

>UAVariable </P
><P 

>UAMethod </P
><P 

>UAView </P
><P 

>UAObjectType </P
><P 

>UAVariableType </P
><P 

>UADataType </P
><P 

>UAReferenceType </P
></TD
><TD  
 valign="top"
><P 

>The <I>Nodes</I> in the <I>UANodeSet</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1">The <I>NamespaceUris</I> is a list of URIs for namespaces used in the <I>UANodeSet</I>. The <I>NamespaceIndexes </I>used in <I>NodeId, ExpandedNodeIds</I> and <I>QualifiedNames</I> identify an element in this list. The first index is always 1 (0 is always the OPC UA namespace). </P
><P 

>The <I>ServerUris</I> is a list of URIs for <I>Servers</I> referenced in the <I>UANodeSet</I>. The <I>ServerIndex</I> in <I>ExpandedNodeIds</I> identifies an element in this list. The first index is always 1 (0 is always the current <I>Server</I>). </P
><P 

>The Models element specifies the Models which are formally defined by the <I>UANodeSet</I>. It includes version information as well as information about any dependencies which the model may have. If a Model is defined in the<FONT color="#0000FF"> <FONT color="#000000"><I>UANodeSet</I> then the file shall also define an instance of the <I>NamespaceMetadataType</I> <I>ObjectType</I>. See <A href="#LinkTarget_4408" href="#">
Part 5</A>
 for more information. </P
><P 

>The <I>Aliases</I> are a list of string substitutions for <I>NodeIds</I>. <I>Aliases</I> can be used to make the file more readable by allowing a string like &lsquo;HasProperty&rsquo; in place of a numeric NodeId (i=46). <I>Aliases</I> are optional. </P
><P 

>The <I>Extensions</I> are free form XML data that can be used to attach vendor defined data to the <I>UANodeSet</I>. </P
><H2 
 ID="LinkTarget_10385"
><FONT size="+1"><B>F.3 UANode </H2
><P 

><FONT size="+1"></B>A <I>UANode</I> is an abstract base type for all <I>Nodes</I>. It defines the base set of <I>Attributes</I> and the <I>References</I>. There are subtypes for each <I>NodeClass</I> defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
. Each of these subtypes defines XML elements and attributes for the OPC UA <I>Attributes</I> specific to the <I>NodeClass</I>. The fields in the <I>UANode</I> type are defined in <A href="#LinkTarget_10397" href="#">
Table F.2</A>
. </P
><P 

><B>Table F.2 &ndash; UANode </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>A <I>NodeId</I> serialized as a <I>String</I>. </P
><P 

>The syntax of the serialized <I>String</I> is defined in <A href="#LinkTarget_6640" href="#">
5.3.1.10</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>A <I>QualifiedName</I> serialized as a <I>String</I> with the form: </P
><P 

>&lt;namespace index&gt;:&lt;name&gt;  </P
><P 

>Where the <I>N</I><I>amespace</I><I>I</I><I>ndex</I> refers to the <I>NamespaceUris</I> table. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SymbolicName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A symbolic name for the <I>Node</I> that can be used as a class/field name in autogenerated code. It should only be specified if the <I>BrowseName</I> cannot be used for this purpose.  </P
><P 

>This field does not appear in the <I>AddressSpace</I> and is intended for use by design tools. Only letters, digits or the underscore (&lsquo;_&rsquo;) are permitted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>WriteMask </P
></TD
><TD  
 valign="top"
><P 

>WriteMask </P
></TD
><TD  
 valign="top"
><P 

>The value of the <I>WriteMask</I> Attribute. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserWriteMask </P
></TD
><TD  
 valign="top"
><P 

>WriteMask </P
></TD
><TD  
 valign="top"
><P 

>The value of the <I>UserWriteMask</I> Attribute.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DisplayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText[] </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>DisplayNames</I> for the <I>Node</I> in different locales. </P
><P 

>There shall be only one entry per locale. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText[] </P
></TD
><TD  
 valign="top"
><P 

>The list of the <I>Description</I><I>s</I> for the <I>Node</I> in different locales.  </P
><P 

>There shall be only one entry per locale. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Category </P
></TD
><TD  
 valign="top"
><P 

>String[] </P
></TD
><TD  
 valign="top"
><P 

>A list of identifiers used to group related UANodes together for use by tools that create/edit UANodeSet files. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Documentation </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>Additional non-localized documentation for use by tools that create/edit UANodeSet files. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>References </P
></TD
><TD  
 valign="top"
><P 

>Reference[] </P
></TD
><TD  
 valign="top"
><P 

>The list of <I>R</I><I>eferences</I> for the <I>Node</I>.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Extensions </P
></TD
><TD  
 valign="top"
><P 

>xs:any </P
></TD
><TD  
 valign="top"
><P 

>An element containing any vendor defined extensions to the <I>UANode</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1">The <I>Extensions</I> are free form XML data that can be used to attach vendor defined data to the <I>UANode</I>. </P
><P 

>Array values are denoted with [], however, in the XML Schema arrays are mapped to a complex type starting with the &lsquo;ListOf&rsquo; prefix. </P
><P 

>A <I>UANodeSet</I> is expected to contain many <I>UANodes</I> which reference each other. Tools that create <I>UANodeSets</I> should not add <I>Reference</I> elements for both directions in order to minimize the size of the XML file. Tools that read the <I>UANodeSets</I> shall automatically add reverse references unless reverse references are not appropriate given the <I>ReferenceType</I> semantics. <I>HasTypeDefinition</I> and <I>HasModellingRule</I> are two examples where it is not appropriate to add reverse references.  </P
><P 

>Note that a <I>UANodeSet</I> represents a collection of <I>Nodes</I> in an address space. This implies that any instances shall include the fully inherited <I>InstanceDeclarationHierarchy</I> as defined in <A href="#LinkTarget_4406" href="#">
Part 3</A>
.  </P
><H2 
 ID="LinkTarget_10516"
><FONT size="+1"><B>F.4 Reference </H2
><P 

><FONT size="+1"></B>The <I>Reference</I> type specifies a <I>Reference</I> for a <I>Node</I>. The <I>Reference</I> can be forward or inverse. Only one direction for each <I>Reference</I> needs to be in a <I>UANodeSet</I>. The other direction shall be added automatically during any import operation. The fields in the <I>Reference</I> type are defined in <A href="#LinkTarget_10524" href="#">
Table F.3</A>
. </P
><P 

><B>Table F.3 &ndash; Reference </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeId</I> of the target of the <I>Reference</I> serialized as a <I>String</I>. </P
><P 

>The syntax of the serialized <I>String</I> is defined in <A href="#LinkTarget_6724" href="#">
5.3.1.11</A>
 (ExpandedNodeId). </P
><P 

>This value can be replaced by an <I>Alias</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReferenceType </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The NodeId of the <I>ReferenceType</I> serialized as a <I>String</I>.  </P
><P 

>The syntax of the serialized <I>String</I> is defined in <A href="#LinkTarget_6640" href="#">
5.3.1.10</A>
 (NodeId). </P
><P 

>This value can be replaced by an <I>Alias</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsForward </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>If TRUE the <I>R</I><I>eference</I> is a forward reference. </P
></TD
></TR
></TABLE
><H2 
 ID="LinkTarget_10573"
><FONT size="+1"><B>F.5 UAType </H2
><P 

><FONT size="+1"></B>A <I>UAType</I> is a subtype of the <I>UANode</I> defined in <A href="#LinkTarget_10385" href="#">
F.3</A>
. It is the base type for the types defined in <A href="#LinkTarget_10585" href="#">
Table F.4</A>
. </P
><P 

><B>Table F.4 &ndash; UANodeSet Type Nodes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Subtype </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>UAObjectType </P
></TD
><TD  
 valign="top"
><P 

>Defines an <I>ObjectType</I> <I>Node</I> as described in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UAVariableType </P
></TD
><TD  
 valign="top"
><P 

>Defines a <I>VariableType</I> <I>Node</I> as described in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UADataType </P
></TD
><TD  
 valign="top"
><P 

>Defines a <I>DataType</I> <I>Node</I> as described in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UAReferenceType </P
></TD
><TD  
 valign="top"
><P 

>Defines a <I>ReferenceType</I> <I>Node</I> as described in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
></TD
></TR
></TABLE
><H2 
 ID="LinkTarget_10637"
><FONT size="+1"><B>F.6 UAInstance </H2
><P 

><FONT size="+1"></B>A <I>UAInstance</I> is a subtype of the <I>UANode</I> defined in <A href="#LinkTarget_10385" href="#">
F.3</A>
. It is the base type for the types defined in <A href="#LinkTarget_10658" href="#">
Table F.5</A>
. The fields in the <I>UAInstance</I> type are defined in <A href="#LinkTarget_10711" href="#">
Table F.6</A>
. Subtypes of <I>UAInstance</I> which have fields in addition to those defined in <A href="#LinkTarget_4406" href="#">
Part 3</A>
 are described in detail below.  </P
><P 

><B>Table F.5 &ndash; UANodeSet Instance Nodes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Subtype </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>UAObject </P
></TD
><TD  
 valign="top"
><P 

>Defines an <I>Object</I> <I>Node</I> as described in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UAVariable </P
></TD
><TD  
 valign="top"
><P 

>Defines a <I>Variable</I> <I>Node</I> as described in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UAMethod </P
></TD
><TD  
 valign="top"
><P 

>Defines a <I>Method</I> <I>Node</I> as described in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UAView </P
></TD
><TD  
 valign="top"
><P 

>Defines a <I>View</I> <I>Node</I> as described in <A href="#LinkTarget_4406" href="#">
Part 3</A>
. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><B>Table F.6 &ndash; UAInstance </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>All of the fields from the <I>UANode</I> type described in <A href="#LinkTarget_10385" href="#">
F.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ParentNodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeId</I> of the <I>Node</I> that is the parent of the <I>Node</I> within the information model. This field is used to indicate that a tight coupling exists between the <I>Node</I> and its parent (e.g. when the parent is deleted the child is deleted as well). This information does not appear in the <I>AddressSpace</I> and is intended for use by design tools.  </P
></TD
></TR
></TABLE
><H2 
 ID="LinkTarget_10738"
><FONT size="+1"><B>F.7 UAVariable </H2
><P 

><FONT size="+1"></B>A <I>UAVariable</I> is a subtype of the <I>UAInstance</I> defined in. It represents a Variable Node. The fields in the <I>UAVariable</I> type are defined in <A href="#LinkTarget_10746" href="#">
Table F.7</A>
. </P
><P 

><B>Table F.7 &ndash; UAVariable </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>All of the fields from the <I>UAInstance</I> type described in <A href="#LinkTarget_10637" href="#">
F.6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>Variant </P
></TD
><TD  
 valign="top"
><P 

>The Value of the Node encoding using the UA XML wire encoding. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Translation </P
></TD
><TD  
 valign="top"
><P 

>TranslationType[] </P
></TD
><TD  
 valign="top"
><P 

>A list of translations for the Value if the Value is a LocalizedText or a structure containing LocalizedTexts. </P
><P 

>This field may be omitted. </P
><P 

>If the Value is an array the number of elements in this array shall match the number of elements in the Value. Extra elements are ignored. </P
><P 

>If the Value is a scalar then there is one element in this array. </P
><P 

>If the Value is a structure then the each element contains translations for one or more fields identified by a name. See the TranslationType for more information. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The data type of the value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValueRank </P
></TD
><TD  
 valign="top"
><P 

>ValueRank </P
></TD
><TD  
 valign="top"
><P 

>The value rank. </P
><P 

>If not specified the default value is -1 (Scalar). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ArrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>ArrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>The number of dimensions in an array value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AccessLevel </P
></TD
><TD  
 valign="top"
><P 

>AccessLevel </P
></TD
><TD  
 valign="top"
><P 

>The access level. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserAccessLevel </P
></TD
><TD  
 valign="top"
><P 

>AccessLevel </P
></TD
><TD  
 valign="top"
><P 

>The access level for the current user. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MinimumSamplingInterval </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The minimum sampling interval. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Historizing </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>Whether history is being archived. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_10845"
><FONT size="+1"><B>F.8 UAMethod </H2
><P 

><FONT size="+1"></B>A <I>UAMethod</I> is a subtype of the <I>UAInstance</I> defined in <A href="#LinkTarget_10637" href="#">
F.6</A>
. It represents a Method Node. The fields in the <I>UAMethod</I> type are defined in <A href="#LinkTarget_10857" href="#">
Table F.8</A>
. </P
><P 

><B>Table F.8 &ndash; UAMethod </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>All of the fields from the <I>UAInstance</I> type described in <A href="#LinkTarget_10637" href="#">
F.6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MethodDeclarationId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>May be specified for <I>Method</I> <I>Nodes</I> that are a target of a <I>HasComponent</I> reference from a single <I>Object</I> <I>Node</I>. It is the <I>NodeId</I> of the <I>UAMethod</I> with the same <I>BrowseName</I> contained in the <I>TypeDefinition</I> associated with the <I>Object</I> <I>Node</I>. </P
><P 

>If the <I>TypeDefinition</I> overrides a <I>Method</I> inherited from a base <I>ObjectType</I> then this attribute shall reference the <I>Method</I> <I>Node</I> in the subtype. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"><B> </P
><H2 
 ID="LinkTarget_10886"
><FONT size="+1">F.9 TranslationType </H2
><P 

><FONT size="+1"></B>A <I>TranslationType</I> contains additional translations for <I>LocalizedTexts</I> used in the <I>Value</I> of a <I>Variable</I>. The fields in the <I>TranslationType</I> are defined in <A href="#LinkTarget_10927" href="#">
Table F.9</A>
. If multiple <I>Arguments</I> existed there would be a Translation element for each <I>Argument</I>. </P
><P 

>The type can have two forms depending on whether the <I>Value</I> is a <I>LocalizedText</I> or a <I>Structure</I> containing <I>LocalizedTexts</I>. If it is a <I>LocalizedText</I> is contains a simple list of translations. If it is a <I>Structure</I> it contains a list of fields which each contain a list of translations. Each field is identified by a Name which is unique within the structure. The mapping between the Name and the <I>Structure</I> requires an understanding of the <I>Structure</I> encoding. If the <I>Structure</I> field is encoded as a <I>LocalizedText</I> with UA XML then the name is the unqualified path to the XML element where names in the path are separated by &lsquo;/&rsquo;. For example, a structure with a nested structure containing a LocalizedText could have a path like &ldquo;Server/ApplicationName&rdquo;. </P
><P 

>The following example illustrates how translations for the Description field in the <I>Argument</I> <I>Structure</I> are represented in XML: </P
><P 

><FONT size="+1">&lt;Value&gt; </P
><P 

>  &lt;ListOfExtensionObject xmlns=&quot;http://opcfoundation.org/UA/2008/02/Types.xsd&quot;&gt; </P
><P 

>    &lt;ExtensionObject&gt; </P
><P 

>      &lt;TypeId&gt; </P
><P 

>        &lt;Identifier&gt;i=297&lt;/Identifier&gt; </P
><P 

>      &lt;/TypeId&gt; </P
><P 

>      &lt;Body&gt; </P
><P 

>        &lt;Argument&gt; </P
><P 

>          &lt;Name&gt;ConfigData&lt;/Name&gt; </P
><P 

>          &lt;DataType&gt; </P
><P 

>            &lt;Identifier&gt;i=15&lt;/Identifier&gt; </P
><P 

>          &lt;/DataType&gt; </P
><P 

>          &lt;ValueRank&gt;-1&lt;/ValueRank&gt; </P
><P 

>          &lt;ArrayDimensions /&gt; </P
><P 

>          &lt;Description&gt; </P
><P 

>            &lt;Text&gt;[English Translation for Description]&lt;/Text&gt; </P
><P 

>          &lt;/Description&gt; </P
><P 

>        &lt;/Argument&gt; </P
><P 

>      &lt;/Body&gt; </P
><P 

>    &lt;/ExtensionObject&gt; </P
><P 

>  &lt;/ListOfExtensionObject&gt; </P
><P 

>&lt;/Value&gt; </P
><P 

>&lt;Translation&gt; </P
><P 

>  &lt;Field Name=&quot;Description&quot;&gt; </P
><P 

>    &lt;Text Locale=&quot;de-DE&quot;&gt;[German Translation for Description]&lt;/Text&gt; </P
><P 

>    &lt;Text Locale=&quot;fr-FR&quot;&gt;[French Translation for Description]&lt;/Text&gt; </P
><P 

>  &lt;/Field&gt; </P
><P 

>&lt;/Translation<FONT size="+1">&gt; </P
><P 

> </P
><P 

>If multiple Arguments existed there would be a Translation element for each Argument. </P
><P 

><B>Table F.9 &ndash; TranslationType </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Text </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText[] </P
></TD
><TD  
 valign="top"
><P 

>An array of translations for the Value. </P
><P 

>It only appears if the <I>Value</I> is a <I>LocalizedText</I> or an array of <I>LocalizedText</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Field </P
></TD
><TD  
 valign="top"
><P 

>StructureTranslationType[] </P
></TD
><TD  
 valign="top"
><P 

>An array of structure fields which have translations.  </P
><P 

>It only appears if the Value is a <I>Structure</I> or an array of <I>Structures</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Name </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The name of the field. </P
><P 

>This uniquely identifies the field within the structure. </P
><P 

>The exact mapping depends on the encoding of the structure. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Text </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText[] </P
></TD
><TD  
 valign="top"
><P 

>An array of translations for the structure field. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_10974"
><FONT size="+1"><B>F.10 UADataType  </H2
><P 

><FONT size="+1"></B>A <I>UADataType </I>is a subtype of the <I>UAType</I> defined in <A href="#LinkTarget_10573" href="#">
F.5</A>
. It defines a <I>DataType Node</I>. The fields in the <I>UADataType </I>type are defined in <A href="#LinkTarget_10986" href="#">
Table F.10</A>
. </P
><P 

><B>Table F.10 &ndash; UADataType </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>All of the fields from the <I>UANode</I> type described in <A href="#LinkTarget_10385" href="#">
F.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Definition </P
></TD
><TD  
 valign="top"
><P 

>DataTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>An abstract definition of the data type that can be used by design tools to create code that can serialize the data type in XML and/or Binary forms. It does not appear in the <I>AddressSpace</I>. This is only used to define subtypes of the <I>Structure</I> or<I> </I><I>Enumeratio</I><I>n </I><I>DataType</I><I>s</I>. </P
></TD
></TR
></TABLE
><H2 

><FONT size="+1"><B>F.11 DataTypeDefinition </H2
><P 

><FONT size="+1"></B>A <I>DataTypeDefinition</I> defines an abstract representation of a <I>UADataType</I> that can be used by design tools to automatically create serialization code. The fields in the <I>DataTypeDefinition</I> type are defined in <A href="#LinkTarget_11021" href="#">
Table F.11</A>
.  </P
><P 

><B>Table F.11 &ndash; DataTypeDefinition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Name </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>A unique name for the data type. </P
><P 

>This field is only specified for nested <I>DataTypeDefinitions</I>. </P
><P 

>The <I>BrowseName</I> of the <I>DataType Node</I> is used otherwise. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SymbolicName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A symbolic name for the data type that can be used as a class/structure name in autogenerated code. It should only be specified if the <I>Name</I> cannot be used for this purpose.  </P
><P 

>Only letters, digits or the underscore (&lsquo;_&rsquo;) are permitted.  </P
><P 

>This field is only specified for nested <I>DataTypeDefinitions</I>. </P
><P 

>The <I>SymbolicName</I> of the <I>DataType Node</I> is used otherwise. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>BaseType </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>The name of any base type. </P
><P 

>Note that the BaseType can refer to types defined in other files.  </P
><P 

>The NamespaceUri associated with the Name should indicate where to look for the BaseType definition.  </P
><P 

>This field is only specified for nested <I>DataTypeDefinitions</I>. </P
><P 

>The <I>HasSubtype Reference</I> of the <I>DataType Node</I> is used otherwise. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsUnion </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>This flag indicates if the data type represents a union. </P
><P 

>Only one of the Fields defined for the data type is encoded into a value. </P
><P 

>This field is optional. The default value is false. </P
><P 

>If this value is true the first field is the switch value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Fields </P
></TD
><TD  
 valign="top"
><P 

>DataTypeField[] </P
></TD
><TD  
 valign="top"
><P 

>The list of fields that make up the data type. </P
><P 

>This definition assumes the structure has a sequential layout. </P
><P 

>For enumerations the fields are simply a list of values. </P
><P 

> </P
></TD
></TR
></TABLE
><H2 

><FONT size="+1"><B>F.12 DataTypeField </H2
><P 

><FONT size="+1"></B>A <I>DataTypeField</I> defines an abstract representation of a field within a <I>UADataType</I> that can be used by design tools to automatically create serialization code. The fields in the <I>DataTypeField</I> type are defined in <A href="#LinkTarget_11095" href="#">
Table F.12</A>
.  </P
><P 

><B>Table F.12 &ndash; DataTypeField </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Name </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A name for the field that is unique within the <I>DataTypeDefinition</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SymbolicName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A symbolic name for the field that can be used in autogenerated code.  </P
><P 

>It should only be specified if the <I>Name</I> cannot be used for this purpose.  </P
><P 

>Only letters, digits or the underscore (&lsquo;_&rsquo;) are permitted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeId</I> of the <I>DataType</I> for the field. </P
><P 

>This <I>NodeId</I> can refer to another <I>Node</I> with its own <I>DataTypeDefi</I><I>nition</I>.  </P
><P 

>This field is not specified for subtypes of <I>Enumeration</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValueRank </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The value rank for the field. </P
><P 

>It shall be <I>Scalar</I> (-1) or a fixed rank <I>Array</I> (&gt;=1).  </P
><P 

>This field is not specified for subtypes of <I>Enumeration</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText[] </P
></TD
><TD  
 valign="top"
><P 

>A description for the field in multiple locales. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Definition </P
></TD
><TD  
 valign="top"
><P 

>DataTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>The field is a structure with a layout specified by the definition. </P
><P 

>This field is optional. </P
><P 

>This field allows designers to create nested structures without defining a new <I>DataT</I><I>ype</I> <I>Node</I> for each structure. </P
><P 

>This field is not specified for subtypes of <I>Enumeration</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The value associated with the field. </P
><P 

>This field is only specified for subtypes of <I>Enumeration</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsOptional </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>The field indicates if a data type field in a structure is optional. </P
><P 

>This field is optional. The default value is false. </P
><P 

>This field is not specified for subtypes of <I>Enumeration</I> and <I>Union</I>. </P
></TD
></TR
></TABLE
><H2 
 ID="LinkTarget_11182"
><FONT size="+1"><B>F.13 Variant </H2
><P 

><FONT size="+1"></B>The <I>Variant</I> type specifies the value for a <I>Variable</I> or <I>VariableType</I> <I>Node</I>. This type is the same as the type defined in <A href="#LinkTarget_6875" href="#">
5.3.1.17</A>
. As a result, the functions used to serialize <I>Variants</I> during <I>Service</I> calls can be used to serialize <I>Variant</I> in this file syntax. </P
><P 

><I>Variants</I> can contain <I>NodeIds</I>, <I>ExpandedNodeIds</I> and <I>QualifiedNames</I> which must be modified so the <I>NamespaceIndexes</I> and <I>ServerIndexes</I> reference the <I>NamespaceUri and ServerUri</I> tables in the <I>UANodeSet</I>.  </P
><P 

><I>Variants</I> can also contain <I>ExtensionObjects</I> which contain and <I>EncodingId</I> and a <I>Structure</I> with fields which could be are <I>NodeIds</I>, <I>ExpandedNodeIds</I> or <I>QualifiedNames</I>. The <I>NamespaceIndexes</I> and <I>ServerIndexes</I> in these fields shall also reference the tables in the <I>UANodeSet</I>.  </P
><H2 
 ID="LinkTarget_11191"
><FONT size="+1"><B>F.14 Example (Informative) </H2
><P 

><FONT size="+1"></B>An example of the <I>UANodeSet</I> can be found below. </P
><P 

>This example defines the <I>Nodes</I> for an <I>InformationModel</I> with the URI of &ldquo;http://sample.com/Instances&rdquo;.  This example references <I>Nodes</I> defined in the base OPC UA <I>InformationModel</I> and an <I>InformationModel</I> with the URI &ldquo;http://sample.com/Types&rdquo;.   </P
><P 

>The XML namespaces declared at the top include the URIs for the <I>Namespaces</I> referenced in the document because the document includes <I>Complex Data</I>. Documents without <I>Complex Data</I> would not have these declarations. </P
><P 

><FONT size="+1"> </P
><P 

>&lt;UANodeSet   </P
><P 

>xmlns:s1=&quot;http://sample.com/Instances&quot;  </P
><P 

>xmlns:s0=&quot;http://sample.com/Types&quot;  </P
><P 

>xmlns:uax=&quot;http://opcfoundation.org/UA/2008/02/Types.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns=&quot;http://opcfoundation.org/UA/2011/03/UANodeSet.xsd&quot;&gt; </P
><P 

><FONT color="#0000FF"> </P
><P 

><FONT size="+1" color="#000000">The <I>NamespaceUris</I> table includes all <I>Namespaces</I> referenced in the document except for the base OPC UA <I>InformationModel. </I>A <I>NamespaceIndex</I> of 1 refers to the URI &ldquo;http://sample.com/Instances&rdquo;.   </P
><P 

><FONT size="+1"> </P
><P 

>  &lt;NamespaceUris&gt; </P
><P 

>    &lt;Uri&gt;http://sample.com/Instances&lt;/Uri&gt; </P
><P 

>    &lt;Uri&gt;http://sample.com/Types&lt;/Uri&gt; </P
><P 

>  &lt;/NamespaceUris&gt; </P
><P 

><FONT color="#0000FF"> </P
><P 

><FONT size="+1" color="#000000">The <I>Aliases</I> table is provided to enhance readability. There are no rules for what is included. A useful guideline would include standard <I>ReferenceTypes</I> and <I>DataTypes</I> if they are referenced in the document.  </P
><P 

><FONT size="+1"> </P
><P 

>  &lt;Aliases&gt; </P
><P 

>    &lt;Alias Alias=&quot;HasComponent&quot;&gt;i=47&lt;/Alias&gt; </P
><P 

>    &lt;Alias Alias=&quot;HasProperty&quot;&gt;i=46&lt;/Alias&gt; </P
><P 

>    &lt;Alias Alias=&quot;HasSubtype&quot;&gt;i=45&lt;/Alias&gt; </P
><P 

>    &lt;Alias Alias=&quot;HasTypeDefinition&quot;&gt;i=40&lt;/Alias&gt; </P
><P 

>  &lt;/Aliases&gt; </P
><P 

><FONT color="#0000FF"> </P
><P 

><FONT size="+1" color="#000000">The <I>BicycleType</I> is a <I>DataType</I> <I>Node</I> that inherits from a <I>DataType</I> defined in another <I>InformationModel</I> (ns=2;i=314). It is assumed that any <I>Application</I> importing this file will already know about the referenced <I>InformationModel</I>. A <I>Server</I> could map the references onto another OPC UA <I>Server</I> by adding a <I>ServerIndex</I> to <I>TargetNode</I> <I>NodeIds</I>. The structure of the <I>DataType</I> is defined by the <I>Definition</I> element. This information can be used by code generators to automatically create serializers for the <I>DataType</I>. </P
><P 

><FONT size="+1"> </P
><P 

>&lt;UADataType NodeId=&quot;ns=1;i=365&quot; BrowseName=&quot;1:BicycleType&quot;&gt; </P
><P 

>  &lt;DisplayName&gt;BicycleType&lt;/DisplayName&gt; </P
><P 

>  &lt;References&gt; </P
><P 

>    &lt;Reference ReferenceType=&quot;HasSubtype&quot; IsForward=&quot;false&quot;&gt;ns=2;i=314&lt;/Reference&gt; </P
><P 

>  &lt;/References&gt; </P
><P 

>  &lt;Definition Name=&quot;BicycleType&quot;&gt; </P
><P 

>    &lt;Field Name=&quot;NoOfGears&quot; DataType=&quot;UInt32&quot; /&gt; </P
><P 

>    &lt;Field Name=&quot;ManufacterName&quot; DataType=&quot;QualifiedName&quot; /&gt; </P
><P 

>  &lt;/Definition&gt; </P
><P 

>&lt;/UADataType&gt; </P
><P 

><FONT color="#0000FF"> </P
><P 

><FONT size="+1" color="#000000">This <I>Node</I> is an instance of an <I>Object</I> <I>TypeDefinition</I> <I>Node</I> defined in another <I>InformationModel</I> (ns=2;i=341). It has a single <I>Property</I> which is declared later in the document. </P
><P 

><FONT size="+1">&lt;UAObject NodeId=&quot;ns=1;i=375&quot; BrowseName=&quot;1:DriverOfTheMonth&quot; ParentNodeId=&quot;ns=1;i=281&quot;&gt; </P
><P 

>  &lt;DisplayName&gt;DriverOfTheMonth&lt;/DisplayName&gt; </P
><P 

>  &lt;References&gt; </P
><P 

>    &lt;Reference ReferenceType=&quot;HasProperty&quot;&gt;ns=1;i=376&lt;/Reference&gt; </P
><P 

>    &lt;Reference ReferenceType=&quot;HasTypeDefinition&quot;&gt;ns=2;i=341&lt;/Reference&gt; </P
><P 

>    &lt;Reference ReferenceType=&quot;HasComponent&quot; IsForward=&quot;false&quot;&gt;ns=1;i=281&lt;/Reference&gt; </P
><P 

>  &lt;/References&gt; </P
><P 

>&lt;/UAObject&gt;  </P
><P 

><FONT color="#0000FF"> </P
><P 

><FONT size="+1" color="#000000">This <I>Node</I> is an instance of a <I>Variable</I> <I>TypeDefinition</I> <I>Node</I> defined in base OPC UA <I>InformationModel</I> (i=68). The <I>DataType</I> is the base type for the <I>BicycleType DataType.</I> The <I>AccessLevels</I> declare the <I>Variable</I> as <I>Readable</I> and <I>Writeable</I>. The ParentNodeId indicates that this Node is tightly coupled with the Parent (DriverOfTheMonth) and will be deleted if the Parent is deleted.<FONT size="+1"> </P
><P 

>&lt;UAVariable NodeId=&quot;ns=1;i=376&quot; BrowseName=&quot;2:PrimaryVehicle&quot;  </P
><P 

>  ParentNodeId=&quot;ns=1;i=375&quot; DataType=&quot;ns=2;i=314&quot; AccessLevel=&quot;3&quot; UserAccessLevel=&quot;3&quot;&gt; </P
><P 

>  &lt;DisplayName&gt;PrimaryVehicle&lt;/DisplayName&gt; </P
><P 

>  &lt;References&gt; </P
><P 

>    &lt;Reference ReferenceType=&quot;HasTypeDefinition&quot;&gt;i=68&lt;/Reference&gt; </P
><P 

>    &lt;Reference ReferenceType=&quot;HasProperty&quot; IsForward=&quot;false&quot;&gt;ns=1;i=375&lt;/Reference&gt; </P
><P 

>  &lt;/References&gt; </P
><P 

><FONT size="+1">This <I>Value</I> is an instance of a <I>BicycleType DataType</I>. It is wrapped in an <I>ExtensionObject</I> which declares that the value is serialized using the <I>Default XML</I> <I>DataTypeEncoding</I> for the <I>DataType</I>. The <I>Value</I> could be serialized using the <I>Default Binary</I> <I>DataTypeEncoding</I> but that would result </P
><P 

>in a document that cannot be edited by hand. No matter which <I>DataTypeEncoding</I> is used, the <I>NamespaceIndex</I> used in the <I>ManufacterName</I> field refers to the <I>NamespaceUris</I> table in this document. The <I>Application</I> is responsible for changing whatever value it needs to be when the document is loaded by an <I>Application</I>.<FONT size="+1" color="#0000FF"> </P
><P 

><FONT color="#000000"> </P
><P 

>    &lt;Value&gt; </P
><P 

>      &lt;ExtensionObject xmlns=&quot;http://opcfoundation.org/UA/2008/02/Types.xsd&quot;&gt; </P
><P 

>        &lt;TypeId&gt; </P
><P 

>          &lt;Identifier&gt;ns=1;i=366&lt;/Identifier&gt; </P
><P 

>        &lt;/TypeId&gt; </P
><P 

>        &lt;Body&gt; </P
><P 

>          &lt;s1:BicycleType&gt; </P
><P 

>            &lt;s0:Make&gt;Trek&lt;/s0:Make&gt; </P
><P 

>            &lt;s0:Model&gt;Compact&lt;/s0:Model&gt; </P
><P 

>            &lt;s1:NoOfGears&gt;10&lt;/s1:NoOfGears&gt; </P
><P 

>              &lt;s1:ManufacterName&gt; </P
><P 

>                &lt;uax:NamespaceIndex&gt;1&lt;/uax:NamespaceIndex&gt; </P
><P 

>                &lt;uax:Name&gt;Hello&lt;/uax:Name&gt; </P
><P 

>            &lt;/s1:ManufacterName&gt; </P
><P 

>          &lt;/s1:BicycleType&gt; </P
><P 

>        &lt;/Body&gt; </P
><P 

>      &lt;/ExtensionObject&gt; </P
><P 

>    &lt;/Value&gt; </P
><P 

>  &lt;/UAVariable&gt;<FONT size="+1">  </P
><P 

><FONT size="+1" color="#0000FF"> </P
><P 

><FONT size="+1" color="#000000">These are the <I>DataTypeEncoding</I> <I>Nodes</I> for the <I>BicyleType</I> <I>DataType</I>.<FONT size="+1" color="#0000FF"> </P
><P 

><FONT color="#000000">  &lt;UAObject NodeId=&quot;ns=1;i=366&quot; BrowseName=&quot;Default XML&quot;&gt; </P
><P 

>    &lt;DisplayName&gt;Default XML&lt;/DisplayName&gt; </P
><P 

>    &lt;References&gt; </P
><P 

>      &lt;Reference ReferenceType=&quot;HasEncoding&quot; IsForward=&quot;false&quot;&gt;ns=1;i=365&lt;/Reference&gt; </P
><P 

>      &lt;Reference ReferenceType=&quot;HasDescription&quot;&gt;ns=1;i=367&lt;/Reference&gt; </P
><P 

>      &lt;Reference ReferenceType=&quot;HasTypeDefinition&quot;&gt;i=76&lt;/Reference&gt; </P
><P 

>    &lt;/References&gt; </P
><P 

>  &lt;/UAObject&gt; </P
><P 

>  &lt;UAObject NodeId=&quot;ns=1;i=370&quot; BrowseName=&quot;Default Binary&quot;&gt; </P
><P 

>    &lt;DisplayName&gt;Default Binary&lt;/DisplayName&gt; </P
><P 

>    &lt;References&gt; </P
><P 

>      &lt;Reference ReferenceType=&quot;HasEncoding&quot; IsForward=&quot;false&quot;&gt;ns=1;i=365&lt;/Reference&gt; </P
><P 

>      &lt;Reference ReferenceType=&quot;HasDescription&quot;&gt;ns=1;i=371&lt;/Reference&gt; </P
><P 

>      &lt;Reference ReferenceType=&quot;HasTypeDefinition&quot;&gt;i=76&lt;/Reference&gt; </P
><P 

>    &lt;/References&gt; </P
><P 

>  &lt;/UAObject&gt; </P
><P 

><FONT color="#0000FF"> </P
><P 

><FONT size="+1" color="#000000">This is the <I>DataTypeDescription Node</I> for the <I>Default XML</I> <I>DataTypeEncoding</I> of the <I>BicyleType</I> <I>DataType</I>. The <I>Value</I> is one of the built-in types. </P
><P 

><FONT size="+1" color="#0000FF"> </P
><P 

><FONT color="#000000">  &lt;UAVariable NodeId=&quot;ns=1;i=367&quot; BrowseName=&quot;1:BicycleType&quot; DataType=&quot;String&quot;&gt; </P
><P 

>    &lt;DisplayName&gt;BicycleType&lt;/DisplayName&gt; </P
><P 

>    &lt;References&gt; </P
><P 

>      &lt;Reference ReferenceType=&quot;HasTypeDefinition&quot;&gt;i=69&lt;/Reference&gt; </P
><P 

>      &lt;Reference ReferenceType=&quot;HasComponent&quot; IsForward=&quot;false&quot;&gt;ns=1;i=341&lt;/Reference&gt; </P
><P 

>    &lt;/References&gt; </P
><P 

>    &lt;Value&gt; </P
><P 

>      &lt;uax:String&gt;//xs:element[@name='BicycleType']&lt;/uax:String&gt; </P
><P 

>    &lt;/Value&gt; </P
><P 

>  &lt;/UAVariable&gt; </P
><P 

><FONT color="#0000FF"> </P
><P 

><FONT size="+1" color="#000000">This is the <I>DataTypeDictionary Node</I> for the <I>DataTypeDescription </I>declared above. The XML Schema document is a UTF-8 document stored as xs:base64Binary value (see Base64). This allows <I>Clients</I> to read the schema for all <I>DataTypes</I> which belong to the <I>DataTypeDictionary</I>. The value of <I>DataTypeDescription Node </I>for each <I>DataType</I> contains a XPath query that will find the correct definition inside the schema document. </P
><P 

><FONT size="+1">&lt;UAVariable NodeId=&quot;ns=1;i=341&quot; BrowseName=&quot;1:Quickstarts.DataTypes.Instances&quot; DataType=&quot;ByteString&quot;&gt; </P
><P 

>  &lt;DisplayName&gt;Quickstarts.DataTypes.Instances&lt;/DisplayName&gt; </P
><P 

>  &lt;References&gt; </P
><P 

>    &lt;Reference ReferenceType=&quot;HasProperty&quot;&gt;ns=1;i=343&lt;/Reference&gt; </P
><P 

>    &lt;Reference ReferenceType=&quot;HasComponent&quot;&gt;ns=1;i=367&lt;/Reference&gt; </P
><P 

>    &lt;Reference ReferenceType=&quot;HasComponent&quot; IsForward=&quot;false&quot;&gt;i=92&lt;/Reference&gt; </P
><P 

>    &lt;Reference ReferenceType=&quot;HasTypeDefinition&quot;&gt;i=72&lt;/Reference&gt; </P
><P 

>  &lt;/References&gt; </P
><P 

>  &lt;Value&gt; </P
><P 

>    &lt;uax:ByteString&gt;PHhz...W1hPg==&lt;/uax:ByteString&gt; </P
><P 

>  &lt;/Value&gt; &lt;/UAVariable&gt; </P
><P 

><FONT color="#0000FF"> </P
><H2 
 ID="LinkTarget_11319"
><FONT size="+1" color="#000000"><B>F.15 UANodeSetChanges </H2
><P 

><FONT size="+1"></B>The <I>UANodeSetChanges</I> is the root of a document that contains a set of changes to an <I>AddressSpace</I>. It is expected that a single file will contain either a <I>UANodeSet</I> or a <I>UANodeSetChanges</I> element at the root. It provides a list of <I>Nodes</I>/<I>References</I> to add and/or a list <I>Nodes</I>/<I>References</I> to delete. The <I>UANodeSetChangesStatus </I>structure defined in <A href="#LinkTarget_11665" href="#">
F.21</A>
 is produced when a <I>UANodeSetChanges </I>document is applied to an <I>AddressSpace</I>. </P
><P 

>The elements of the type are defined in <A href="#LinkTarget_11333" href="#">
Table F.13</A>
. </P
><P 

><B>Table F.13 &ndash; UANodeSetChanges </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NamespaceUris </P
></TD
><TD  
 valign="top"
><P 

>UriTable </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerUris </P
></TD
><TD  
 valign="top"
><P 

>UriTable </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Models </P
></TD
><TD  
 valign="top"
><P 

>ModelTableEntry[] </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Aliases </P
></TD
><TD  
 valign="top"
><P 

>AliasTable </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Extensions </P
></TD
><TD  
 valign="top"
><P 

>xs:any </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Version </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LastModified </P
></TD
><TD  
 valign="top"
><P 

>DateTime </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodesToAdd </P
></TD
><TD  
 valign="top"
><P 

>NodesToAdd </P
></TD
><TD  
 valign="top"
><P 

>A list of new <I>Nodes</I> to add to the <I>AddressSpace</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReferencesToAdd </P
></TD
><TD  
 valign="top"
><P 

>ReferencesToChange </P
></TD
><TD  
 valign="top"
><P 

>A list of new References to add to the <I>AddressSpace</I><I>.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodesToDelete </P
></TD
><TD  
 valign="top"
><P 

>NodesToDelete </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>Nodes</I> to delete from the <I>AddressSpace</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReferencesToDelete </P
></TD
><TD  
 valign="top"
><P 

>ReferencesToChange </P
></TD
><TD  
 valign="top"
><P 

>A list of References to delete from the <I>AddressSpace</I><I>.</I> </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The<I> Models </I>element specifies the version of one or more <I>Models</I> which the <I>UANodeSetChanges</I> file will create when it is applied to an existing Address Space. The <I>UANodeSetChanges</I> cannot be applied if the current version of the <I>Model</I> in the Address Space is higher. The <I>RequiredModels</I> sub-element (see <A href="#LinkTarget_10241" href="#">
Table F.1</A>
) specifies the versions <I>Models</I> which must already exist before the <I>UANodeSetChanges</I> file can be applied.  When checking dependencies the version of the <I>Model</I> in the existing Address Space must exactly match the required version. </P
><P 

>If a <I>UANodeSetChanges </I>file modifies types and there are existing instances of the types in the Address Space then the <I>Server</I> shall automatically modify the instances to conform to the new type or generate an error. </P
><P 

>A<I> UANodeSetChanges</I> file is processed as a single operation. This allows mandatory <I>Nodes</I> or <I>References</I> to be replaced by specifying a <I>Node</I>/<I>Reference</I> to delete and a <I>Node</I>/<I>Reference</I> to add.  </P
><H2 
 ID="LinkTarget_11476"
><FONT size="+1"><B>F.16 NodesToAdd </H2
><P 

><FONT size="+1"></B>The <I>NodesToAdd</I> type specifies a list of <I>Nodes</I> to add to an <I>AddressSpace</I>. The structure of these <I>Nodes</I> is the defined by the <I>UANodeSet</I> type in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
.  </P
><P 

>The elements of the type are defined in <A href="#LinkTarget_11491" href="#">
Table F.14</A>
. </P
><P 

><B>Table F.14 &ndash; NodesToAdd </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>&lt;choice&gt; </P
></TD
><TD  
 valign="top"
><P 

>UAObject </P
><P 

>UAVariable </P
><P 

>UAMethod </P
><P 

>UAView </P
><P 

>UAObjectType </P
><P 

>UAVariableType </P
><P 

>UADataType </P
><P 

>UAReferenceType </P
></TD
><TD  
 valign="top"
><P 

>The <I>Nodes</I> to add to the <I>AddressSpace</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1">When adding <I>Nodes</I>, <I>References</I> can be specified as part of the <I>Node</I> definition or as a separate <I>ReferenceToAdd</I>.  </P
><P 

>Note that <I>References </I>to <I>Nodes</I> that could exist are always allowed. In other words, a <I>Node</I> is never rejected simply because it has a reference to an unknown <I>Node</I>.  </P
><P 

>Reverse <I>References</I> are added automatically when deemed practical by the processor. </P
><H2 
 ID="LinkTarget_11520"
><FONT size="+1"><B>F.17 ReferencesToChange </H2
><P 

><FONT size="+1"></B>The <I>ReferencesToChange</I> type specifies a list of <I>References</I> to add to or remove from an <I>AddressSpace</I>.  </P
><P 

>The elements of the type are defined in <A href="#LinkTarget_11529" href="#">
Table F.15</A>
. </P
><P 

><B>Table F.15 &ndash; ReferencesToChange </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Reference </P
></TD
><TD  
 valign="top"
><P 

>ReferenceToChange </P
></TD
><TD  
 valign="top"
><P 

>A <I>Reference</I> to add to the <I>AddressSpace</I>. </P
></TD
></TR
></TABLE
><H2 

><FONT size="+1"><B>F.18 ReferenceToChange </H2
><P 

><FONT size="+1"></B>The <I>ReferenceToChange</I> type specifies a single <I>Reference</I> to add to or remove from an <I>AddressSpace</I>.  </P
><P 

>The elements of the type are defined in <A href="#LinkTarget_11556" href="#">
Table F.16</A>
. </P
><P 

><B>Table F.16 &ndash; ReferencesToChange </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Source </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The identifier for the source <I>Node</I> of the <I>Reference</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReferenceType </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The identifier for the type of the <I>Reference</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsForward </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>TRUE if the <I>Reference</I> is a forward reference. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Target </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The identifier for the target <I>Node</I> of the <I>Reference</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"><I>References </I>to <I>Nodes</I> that could exist are always allowed. In other words, a <I>Reference</I> is never rejected simply because the target is unknown <I>Node</I>.  </P
><P 

>The source of the <I>Reference</I> must exist in the <I>AddressSpace</I> or in <I>UANodeSetChanges</I> document being processed. </P
><P 

>Reverse <I>References</I> are added when deemed practical by the processor. </P
><H2 
 ID="LinkTarget_11601"
><FONT size="+1"><B>F.19 NodesToDelete </H2
><P 

><FONT size="+1"></B>The <I>NodesToDelete</I> type specifies a list of <I>Nodes</I> to remove from an <I>AddressSpace</I>.  </P
><P 

>The elements of the type are defined in <A href="#LinkTarget_11610" href="#">
Table F.17</A>
. </P
><P 

><B>Table F.17 &ndash; NodesToDelete </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Node </P
></TD
><TD  
 valign="top"
><P 

>NodeToDelete </P
></TD
><TD  
 valign="top"
><P 

>A <I>Node</I> to delete from the <I>AddressSpace</I>. </P
></TD
></TR
></TABLE
><H2 
 ID="LinkTarget_11629"
><FONT size="+1"><B>F.20 NodeToDelete </H2
><P 

><FONT size="+1"></B>The <I>NodeToDelete</I> type specifies a <I>Node</I> to remove from an <I>AddressSpace</I>.  </P
><P 

>The elements of the type are defined in <A href="#LinkTarget_11638" href="#">
Table F.18</A>
. </P
><P 

><B>Table F.18 &ndash; ReferencesToChange </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Node </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The identifier for the <I>Node</I> to delete. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DeleteReverseReferences </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>If TRUE then <I>References</I> to the <I>Node</I> are deleted as well. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_11665"
><FONT size="+1"><B>F.21 UANodeSetChangesStatus </H2
><P 

><FONT size="+1"></B>The <I>UANodeSetChangesStatus</I> is the root of a document that is produced when a <I>UANodeSetChanges</I> document is processed.  </P
><P 

>The elements of the type are defined in <A href="#LinkTarget_11674" href="#">
Table F.19</A>
. </P
><P 

><B>Table F.19 &ndash; UANodeSetChangesStatus </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NamespaceUris </P
></TD
><TD  
 valign="top"
><P 

>UriTable </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerUris </P
></TD
><TD  
 valign="top"
><P 

>UriTable </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Aliases </P
></TD
><TD  
 valign="top"
><P 

>AliasTable </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Extensions </P
></TD
><TD  
 valign="top"
><P 

>xs:any </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Version </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LastModified </P
></TD
><TD  
 valign="top"
><P 

>DateTime </P
></TD
><TD  
 valign="top"
><P 

>Same as described in <A href="#LinkTarget_10241" href="#">
Table F.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TransactionId </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A globally unique identifier from the original <I>UANodeSet</I><I>Changes</I> document. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodesToAdd </P
></TD
><TD  
 valign="top"
><P 

>NodeSetStatusList </P
></TD
><TD  
 valign="top"
><P 

>A list of results for the <I>NodesToAdd</I> specified in the original document. </P
><P 

>The list is empty if all elements were processed successfully. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReferencesToAdd </P
></TD
><TD  
 valign="top"
><P 

>NodeSetStatusList </P
></TD
><TD  
 valign="top"
><P 

>A list of results for the <I>ReferencesToAdd</I> specified in the original document.  </P
><P 

>The list is empty if all elements were processed successfully. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodesToDelete </P
></TD
><TD  
 valign="top"
><P 

>NodeSetStatusList </P
></TD
><TD  
 valign="top"
><P 

>A list of results for the <I>NodesToDelete</I> specified in the original document.  </P
><P 

>The list is empty if all elements were processed successfully. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReferencesToDelete </P
></TD
><TD  
 valign="top"
><P 

>NodeSetStatusList </P
></TD
><TD  
 valign="top"
><P 

>A list of results for the <I>ReferencesToDelete</I> specified in the original document.  </P
><P 

>The list is empty if all elements were processed successfully. </P
></TD
></TR
></TABLE
><H2 

><FONT size="+1"><B>F.22 NodeSetStatusList </H2
><P 

><FONT size="+1"></B>The <I>NodeSetStatusList</I> type specifies a list of results produced when applying a <I>UANodeSetChanges</I> document to an <I>AddressSpace</I>.  </P
><P 

>If no errors occurred this list is empty.  </P
><P 

>If one or more errors occur then this list contains one element for each operation specified in the original document.  </P
><P 

>The elements of the type are defined in <A href="#LinkTarget_11817" href="#">
Table F.20</A>
. </P
><P 

><B>Table F.20 &ndash; NodeSetStatusList </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Result </P
></TD
><TD  
 valign="top"
><P 

>NodeSetStatus </P
></TD
><TD  
 valign="top"
><P 

>The result of a single operation. </P
></TD
></TR
></TABLE
><H2 
 ID="LinkTarget_11837"
><FONT size="+1"><B>F.23 NodeSetStatus </H2
><P 

><FONT size="+1"></B>The <I>NodeSetStatus</I> type specifies a single results produced when applying an operation specified in a <I>UANodeSetChanges</I> document to an <I>AddressSpace</I>.  </P
><P 

>The elements of the type are defined in <A href="#LinkTarget_11846" href="#">
Table F.21</A>
. </P
><P 

><B>Table F.21 &ndash; NodeSetStatus </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Code </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>The result of the operation.  </P
><P 

>The possible StatusCodes are defined in <A href="#LinkTarget_4407" href="#">
Part 4</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Details </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A string providing information that is not conveyed by the StatusCode. </P
><P 

>This is not a human readable string for the StatusCode. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

> </P
><P 

> </P
><P 

><FONT size="+1">________________ </P
></BODY>
</HTML>
