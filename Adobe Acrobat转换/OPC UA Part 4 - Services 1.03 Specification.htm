<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!-- Created from PDF via Acrobat SaveAsXML -->
<!-- Mapping table version: 28-February-2003 -->
<HTML>
<HEAD>
<META
 name="dc.creator"
 content="Matthias Damm" >
<META
 name="dc.description"
 content="Industrial Communications" >
<META
 name="dc.title"
 content="OPC Unified Architecture" >
<META
 name="dc.date"
 content="2015-07-20T11:25:05-04:00" >
<META
 name="dc.date.modified"
 content="2019-11-29T10:49:43+08:00" >
<META
 name="generator"
 content="Adobe Acrobat Exchange-Pro 8.0" >
</HEAD>
<BODY bgcolor=white text=black link=blue vlink=purple alink=fushia >
<HR>
<UL>
<LI>
<A href="#LinkTarget_4875">FIGURES</A>
</LI>
<LI>
<A href="#LinkTarget_5132">TABLES</A>
</LI>
<LI>
<A href="#LinkTarget_7659">1 Scope</A>
</LI>
<LI>
<A href="#LinkTarget_7676">2 Normative references</A>
</LI>
<LI>
<A href="#LinkTarget_7698">3 Terms, definitions and conventions</A>
<UL>
<LI>
<A href="#LinkTarget_7700">3.1 Terms and definitions</A>
</LI>
<LI>
<A href="#LinkTarget_7814">3.2 Abbreviations and symbols</A>
</LI>
<LI>
<A href="#LinkTarget_7825">3.3 Conventions for Service definitions</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8006">4 Overview</A>
<UL>
<LI>
<A href="#LinkTarget_8007">4.1 Service Set model</A>
</LI>
<LI>
<A href="#LinkTarget_8101">4.2 Request/response Service procedures</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8112">5 Service Sets</A>
<UL>
<LI>
<A href="#LinkTarget_8113">5.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_8130">5.2 Service request and response header</A>
</LI>
<LI>
<A href="#LinkTarget_8145">5.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_8204">5.4 Discovery Service Set</A>
<UL>
<LI>
<A href="#LinkTarget_8205">5.4.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_8238">5.4.2 FindServers</A>
<UL>
<LI>
<A href="#LinkTarget_8239">5.4.2.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_8273">5.4.2.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_8399">5.4.2.3 Service results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8406">5.4.3 FindServersOnNetwork</A>
<UL>
<LI>
<A href="#LinkTarget_8407">5.4.3.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_8413">5.4.3.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_8579">5.4.3.3 Service results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8586">5.4.4 GetEndpoints</A>
<UL>
<LI>
<A href="#LinkTarget_8587">5.4.4.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_8650">5.4.4.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_8774">5.4.4.3 Service Results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8781">5.4.5 RegisterServer</A>
<UL>
<LI>
<A href="#LinkTarget_8782">5.4.5.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_8827">5.4.5.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_8911">5.4.5.3 Service Results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8970">5.4.6 RegisterServer2</A>
<UL>
<LI>
<A href="#LinkTarget_8971">5.4.6.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_8983">5.4.6.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_9097">5.4.6.3 Service results</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9167">5.5 SecureChannel Service Set</A>
<UL>
<LI>
<A href="#LinkTarget_9168">5.5.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_9215">5.5.2 OpenSecureChannel</A>
<UL>
<LI>
<A href="#LinkTarget_9216">5.5.2.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_9239">5.5.2.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_9453">5.5.2.3 Service results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9646">5.5.3 CloseSecureChannel</A>
<UL>
<LI>
<A href="#LinkTarget_9647">5.5.3.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_9650">5.5.3.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_9726">5.5.3.3 Service results</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9756">5.6 Session Service Set</A>
<UL>
<LI>
<A href="#LinkTarget_9757">5.6.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_9759">5.6.2 CreateSession</A>
<UL>
<LI>
<A href="#LinkTarget_9761">5.6.2.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_9828">5.6.2.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_10150">5.6.2.3 Service results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10341">5.6.3 ActivateSession</A>
<UL>
<LI>
<A href="#LinkTarget_10342">5.6.3.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_10356">5.6.3.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_10537">5.6.3.3 Service results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10613">5.6.4 CloseSession</A>
<UL>
<LI>
<A href="#LinkTarget_10615">5.6.4.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_10625">5.6.4.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_10700">5.6.4.3 Service results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10730">5.6.5 Cancel</A>
<UL>
<LI>
<A href="#LinkTarget_10731">5.6.5.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_10733">5.6.5.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_10816">5.6.5.3 Service results</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10824">5.7 NodeManagement Service Set</A>
<UL>
<LI>
<A href="#LinkTarget_10825">5.7.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_10827">5.7.2 AddNodes</A>
<UL>
<LI>
<A href="#LinkTarget_10828">5.7.2.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_10835">5.7.2.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_11031">5.7.2.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_11072">5.7.2.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11183">5.7.3 AddReferences</A>
<UL>
<LI>
<A href="#LinkTarget_11184">5.7.3.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_11187">5.7.3.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_11342">5.7.3.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_11384">5.7.3.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11493">5.7.4 DeleteNodes</A>
<UL>
<LI>
<A href="#LinkTarget_11495">5.7.4.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_11499">5.7.4.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_11619">5.7.4.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_11660">5.7.4.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11730">5.7.5 DeleteReferences</A>
<UL>
<LI>
<A href="#LinkTarget_11731">5.7.5.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_11878">5.7.5.2 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_11919">5.7.5.3 StatusCodes</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12000">5.8 View Service Set</A>
<UL>
<LI>
<A href="#LinkTarget_12001">5.8.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_12009">5.8.2 Browse</A>
<UL>
<LI>
<A href="#LinkTarget_12010">5.8.2.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_12013">5.8.2.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_12303">5.8.2.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_12390">5.8.2.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12481">5.8.3 BrowseNext</A>
<UL>
<LI>
<A href="#LinkTarget_12482">5.8.3.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_12484">5.8.3.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_12606">5.8.3.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_12647">5.8.3.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12732">5.8.4 TranslateBrowsePathsToNodeIds</A>
<UL>
<LI>
<A href="#LinkTarget_12733">5.8.4.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_12739">5.8.4.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_12904">5.8.4.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_12946">5.8.4.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_13036">5.8.5 RegisterNodes</A>
<UL>
<LI>
<A href="#LinkTarget_13037">5.8.5.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_13042">5.8.5.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_13128">5.8.5.3 Service results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_13181">5.8.6 UnregisterNodes</A>
<UL>
<LI>
<A href="#LinkTarget_13182">5.8.6.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_13185">5.8.6.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_13260">5.8.6.3 Service results</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_13302">5.9 Query Service Set</A>
<UL>
<LI>
<A href="#LinkTarget_13303">5.9.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_13308">5.9.2 Querying Views</A>
</LI>
<LI>
<A href="#LinkTarget_13323">5.9.3 QueryFirst</A>
<UL>
<LI>
<A href="#LinkTarget_13324">5.9.3.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_13662">5.9.3.2 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_13785">5.9.3.3 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_13854">5.9.4 QueryNext</A>
<UL>
<LI>
<A href="#LinkTarget_13855">5.9.4.1 Descriptions</A>
</LI>
<LI>
<A href="#LinkTarget_13857">5.9.4.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_13980">5.9.4.3 Service results</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_14010">5.10 Attribute Service Set</A>
<UL>
<LI>
<A href="#LinkTarget_14011">5.10.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_14013">5.10.2 Read</A>
<UL>
<LI>
<A href="#LinkTarget_14014">5.10.2.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_14017">5.10.2.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_14153">5.10.2.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_14211">5.10.2.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_14341">5.10.3 HistoryRead</A>
<UL>
<LI>
<A href="#LinkTarget_14342">5.10.3.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_14362">5.10.3.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_14622">5.10.3.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_14697">5.10.3.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_14821">5.10.4 Write</A>
<UL>
<LI>
<A href="#LinkTarget_14822">5.10.4.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_14829">5.10.4.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_14994">5.10.4.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_15036">5.10.4.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_15203">5.10.5 HistoryUpdate</A>
<UL>
<LI>
<A href="#LinkTarget_15204">5.10.5.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_15206">5.10.5.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_15335">5.10.5.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_15376">5.10.5.4 StatusCodes</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_15445">5.11 Method Service Set</A>
<UL>
<LI>
<A href="#LinkTarget_15446">5.11.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_15456">5.11.2 Call</A>
<UL>
<LI>
<A href="#LinkTarget_15457">5.11.2.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_15461">5.11.2.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_15623">5.11.2.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_15665">5.11.2.4 StatusCodes</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_15798">5.12 MonitoredItem Service Set</A>
<UL>
<LI>
<A href="#LinkTarget_15799">5.12.1 MonitoredItem model</A>
<UL>
<LI>
<A href="#LinkTarget_15800">5.12.1.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_15842">5.12.1.2 Sampling interval</A>
</LI>
<LI>
<A href="#LinkTarget_15873">5.12.1.3 Monitoring mode</A>
</LI>
<LI>
<A href="#LinkTarget_15876">5.12.1.4 Filter</A>
</LI>
<LI>
<A href="#LinkTarget_15880">5.12.1.5 Queue parameters</A>
</LI>
<LI>
<A href="#LinkTarget_15910">5.12.1.6 Triggering model</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_15942">5.12.2 CreateMonitoredItems</A>
<UL>
<LI>
<A href="#LinkTarget_15943">5.12.2.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_15986">5.12.2.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_16208">5.12.2.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_16271">5.12.2.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_16420">5.12.3 ModifyMonitoredItems</A>
<UL>
<LI>
<A href="#LinkTarget_16421">5.12.3.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_16425">5.12.3.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_16616">5.12.3.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_16679">5.12.3.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_16743">5.12.4 SetMonitoringMode</A>
<UL>
<LI>
<A href="#LinkTarget_16744">5.12.4.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_16746">5.12.4.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_16874">5.12.4.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_16938">5.12.4.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_16968">5.12.5 SetTriggering</A>
<UL>
<LI>
<A href="#LinkTarget_16970">5.12.5.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_16979">5.12.5.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_17125">5.12.5.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_17188">5.12.5.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_17219">5.12.6 DeleteMonitoredItems</A>
<UL>
<LI>
<A href="#LinkTarget_17220">5.12.6.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_17223">5.12.6.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_17337">5.12.6.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_17389">5.12.6.4 StatusCodes</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_17419">5.13 Subscription Service Set</A>
<UL>
<LI>
<A href="#LinkTarget_17421">5.13.1 Subscription model</A>
<UL>
<LI>
<A href="#LinkTarget_17422">5.13.1.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_17487">5.13.1.2 State table</A>
</LI>
<LI>
<A href="#LinkTarget_18092">5.13.1.3 State Variables and parameters</A>
</LI>
<LI>
<A href="#LinkTarget_18169">5.13.1.4 Functions</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_18341">5.13.2 CreateSubscription</A>
<UL>
<LI>
<A href="#LinkTarget_18342">5.13.2.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_18346">5.13.2.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_18532">5.13.2.3 Service results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_18558">5.13.3 ModifySubscription</A>
<UL>
<LI>
<A href="#LinkTarget_18559">5.13.3.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_18563">5.13.3.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_18734">5.13.3.3 Service results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_18764">5.13.4 SetPublishingMode</A>
<UL>
<LI>
<A href="#LinkTarget_18765">5.13.4.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_18767">5.13.4.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_18885">5.13.4.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_18926">5.13.4.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_18959">5.13.5 Publish</A>
<UL>
<LI>
<A href="#LinkTarget_18960">5.13.5.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_18972">5.13.5.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_19151">5.13.5.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_19182">5.13.5.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_19218">5.13.6 Republish</A>
<UL>
<LI>
<A href="#LinkTarget_19219">5.13.6.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_19234">5.13.6.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_19341">5.13.6.3 Service results</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_19377">5.13.7 TransferSubscriptions</A>
<UL>
<LI>
<A href="#LinkTarget_19378">5.13.7.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_19387">5.13.7.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_19528">5.13.7.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_19575">5.13.7.4 StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_19617">5.13.8 DeleteSubscriptions</A>
<UL>
<LI>
<A href="#LinkTarget_19618">5.13.8.1 Description</A>
</LI>
<LI>
<A href="#LinkTarget_19623">5.13.8.2 Parameters</A>
</LI>
<LI>
<A href="#LinkTarget_19729">5.13.8.3 Service results</A>
</LI>
<LI>
<A href="#LinkTarget_19770">5.13.8.4 StatusCodes</A>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_19800">6 Service behaviours</A>
<UL>
<LI>
<A href="#LinkTarget_19801">6.1 Security</A>
<UL>
<LI>
<A href="#LinkTarget_19802">6.1.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_19809">6.1.2 Obtaining and Installing an Application Instance Certificate</A>
</LI>
<LI>
<A href="#LinkTarget_19854">6.1.3 Determining if a Certificate is Trusted</A>
</LI>
<LI>
<A href="#LinkTarget_20000">6.1.4 Creating a SecureChannel</A>
</LI>
<LI>
<A href="#LinkTarget_20041">6.1.5 Creating a Session</A>
</LI>
<LI>
<A href="#LinkTarget_20065">6.1.6 Impersonating a User</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_20078">6.2 Software Certificates</A>
</LI>
<LI>
<A href="#LinkTarget_20080">6.3 Auditing</A>
<UL>
<LI>
<A href="#LinkTarget_20081">6.3.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_20093">6.3.2 General audit logs</A>
</LI>
<LI>
<A href="#LinkTarget_20095">6.3.3 General audit Events</A>
</LI>
<LI>
<A href="#LinkTarget_20106">6.3.4 Auditing for Discovery Service Set</A>
</LI>
<LI>
<A href="#LinkTarget_20109">6.3.5 Auditing for SecureChannel Service Set</A>
</LI>
<LI>
<A href="#LinkTarget_20116">6.3.6 Auditing for Session Service Set</A>
</LI>
<LI>
<A href="#LinkTarget_20130">6.3.7 Auditing for NodeManagement Service Set</A>
</LI>
<LI>
<A href="#LinkTarget_20139">6.3.8 Auditing for Attribute Service Set</A>
</LI>
<LI>
<A href="#LinkTarget_20153">6.3.9 Auditing for Method Service Set</A>
</LI>
<LI>
<A href="#LinkTarget_20161">6.3.10 Auditing for View, Query, MonitoredItem and Subscription Service Set</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_20170">6.4 Redundancy</A>
<UL>
<LI>
<A href="#LinkTarget_20171">6.4.1 Redundancy overview</A>
</LI>
<LI>
<A href="#LinkTarget_20191">6.4.2 Server Redundancy</A>
<UL>
<LI>
<A href="#LinkTarget_20192">6.4.2.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_20206">6.4.2.2  Redundant Server Set Requirements</A>
</LI>
<LI>
<A href="#LinkTarget_20228">6.4.2.3 Transparent Redundancy</A>
<UL>
<LI>
<A href="#LinkTarget_20229">6.4.2.3.1.1 Client Behaviour</A>
</LI>
<LI>
<A href="#LinkTarget_20249">6.4.2.3.1.2 Server Requirements</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_20256">6.4.2.4 Non-transparent Redundancy</A>
<UL>
<LI>
<A href="#LinkTarget_20257">6.4.2.4.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_20297">6.4.2.4.2 ServiceLevel</A>
</LI>
<LI>
<A href="#LinkTarget_20374">6.4.2.4.3 Load Balancing</A>
</LI>
<LI>
<A href="#LinkTarget_20385">6.4.2.4.4 Server Failover Modes</A>
</LI>
<LI>
<A href="#LinkTarget_20440">6.4.2.4.5 Client Failover Behaviour</A>
<UL>
<LI>
<A href="#LinkTarget_20441">6.4.2.4.5.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_20652">6.4.2.4.5.2 Cold</A>
</LI>
<LI>
<A href="#LinkTarget_20665">6.4.2.4.5.3 Warm</A>
</LI>
<LI>
<A href="#LinkTarget_20678">6.4.2.4.5.4 Hot</A>
</LI>
<LI>
<A href="#LinkTarget_20701">6.4.2.4.5.5 HotPlusMirrored</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_20714">6.4.2.5 Hiding Failover with a Server Proxy (Informative)</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_20725">6.4.3 Client Redundancy</A>
</LI>
<LI>
<A href="#LinkTarget_20729">6.4.4 Network Redundancy</A>
<UL>
<LI>
<A href="#LinkTarget_20730">6.4.4.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_20733">6.4.4.2 Transparent (Informative)</A>
</LI>
<LI>
<A href="#LinkTarget_20746">6.4.4.3 Non-Transparent</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_20783">6.4.5 Manually Forcing Failover</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_20808">6.5 Re-establishing connections</A>
</LI>
<LI>
<A href="#LinkTarget_20852">6.6 Durable Subscriptions</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_20937">7 Common parameter type definitions</A>
<UL>
<LI>
<A href="#LinkTarget_20938">7.1 ApplicationDescription</A>
</LI>
<LI>
<A href="#LinkTarget_21043">7.2 ApplicationInstanceCertificate</A>
</LI>
<LI>
<A href="#LinkTarget_21183">7.3 BrowseResult</A>
</LI>
<LI>
<A href="#LinkTarget_21247">7.4 ContentFilter</A>
<UL>
<LI>
<A href="#LinkTarget_21248">7.4.1 ContentFilter structure</A>
</LI>
<LI>
<A href="#LinkTarget_21323">7.4.2 ContentFilterResult</A>
</LI>
<LI>
<A href="#LinkTarget_21518">7.4.3 FilterOperator</A>
</LI>
<LI>
<A href="#LinkTarget_23348">7.4.4 FilterOperand parameters</A>
<UL>
<LI>
<A href="#LinkTarget_23349">7.4.4.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_23397">7.4.4.2 ElementOperand</A>
</LI>
<LI>
<A href="#LinkTarget_23431">7.4.4.3 LiteralOperand</A>
</LI>
<LI>
<A href="#LinkTarget_23464">7.4.4.4 AttributeOperand</A>
</LI>
<LI>
<A href="#LinkTarget_23552">7.4.4.5 SimpleAttributeOperand</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_23634">7.5 Counter</A>
</LI>
<LI>
<A href="#LinkTarget_23640">7.6 ContinuationPoint</A>
</LI>
<LI>
<A href="#LinkTarget_23653">7.7 DataValue</A>
<UL>
<LI>
<A href="#LinkTarget_23654">7.7.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_23733">7.7.2 PicoSeconds</A>
</LI>
<LI>
<A href="#LinkTarget_23740">7.7.3 SourceTimestamp</A>
</LI>
<LI>
<A href="#LinkTarget_23748">7.7.4 ServerTimestamp</A>
</LI>
<LI>
<A href="#LinkTarget_23762">7.7.5 StatusCode assigned to a value</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_23786">7.8 DiagnosticInfo</A>
</LI>
<LI>
<A href="#LinkTarget_23895">7.9 DiscoveryConfiguration parameters</A>
<UL>
<LI>
<A href="#LinkTarget_23897">7.9.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_23923">7.9.2 MdnsDiscoveryConfiguration</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_23978">7.10 EndpointDescription</A>
</LI>
<LI>
<A href="#LinkTarget_24114">7.11 ExpandedNodeId</A>
</LI>
<LI>
<A href="#LinkTarget_24217">7.12 ExtensibleParameter</A>
</LI>
<LI>
<A href="#LinkTarget_24266">7.13 Index</A>
</LI>
<LI>
<A href="#LinkTarget_24268">7.14 IntegerId</A>
</LI>
<LI>
<A href="#LinkTarget_24270">7.15 MessageSecurityMode</A>
</LI>
<LI>
<A href="#LinkTarget_24311">7.16 MonitoringParameters</A>
</LI>
<LI>
<A href="#LinkTarget_24407">7.17 MonitoringFilter parameters</A>
<UL>
<LI>
<A href="#LinkTarget_24408">7.17.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_24448">7.17.2 DataChangeFilter</A>
</LI>
<LI>
<A href="#LinkTarget_24538">7.17.3 EventFilter</A>
</LI>
<LI>
<A href="#LinkTarget_24789">7.17.4 AggregateFilter</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_24988">7.18 MonitoringMode</A>
</LI>
<LI>
<A href="#LinkTarget_25023">7.19 NodeAttributes parameters</A>
<UL>
<LI>
<A href="#LinkTarget_25024">7.19.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_25310">7.19.2 ObjectAttributes parameter</A>
</LI>
<LI>
<A href="#LinkTarget_25415">7.19.3 VariableAttributes parameter</A>
</LI>
<LI>
<A href="#LinkTarget_25613">7.19.4 MethodAttributes parameter</A>
</LI>
<LI>
<A href="#LinkTarget_25731">7.19.5 ObjectTypeAttributes parameter</A>
</LI>
<LI>
<A href="#LinkTarget_25836">7.19.6 VariableTypeAttributes parameter</A>
</LI>
<LI>
<A href="#LinkTarget_25994">7.19.7 ReferenceTypeAttributes parameter</A>
</LI>
<LI>
<A href="#LinkTarget_26126">7.19.8 DataTypeAttributes parameter</A>
</LI>
<LI>
<A href="#LinkTarget_26231">7.19.9 ViewAttributes parameter</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_26350">7.20 NotificationData parameters</A>
<UL>
<LI>
<A href="#LinkTarget_26351">7.20.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_26390">7.20.2 DataChangeNotification parameter</A>
</LI>
<LI>
<A href="#LinkTarget_26478">7.20.3 EventNotificationList parameter</A>
</LI>
<LI>
<A href="#LinkTarget_26539">7.20.4 StatusChangeNotification parameter</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_26581">7.21 NotificationMessage</A>
</LI>
<LI>
<A href="#LinkTarget_26644">7.22 NumericRange</A>
</LI>
<LI>
<A href="#LinkTarget_26679">7.23 QueryDataSet</A>
</LI>
<LI>
<A href="#LinkTarget_26731">7.24 ReadValueId</A>
</LI>
<LI>
<A href="#LinkTarget_26831">7.25 ReferenceDescription</A>
</LI>
<LI>
<A href="#LinkTarget_26926">7.26 RelativePath</A>
</LI>
<LI>
<A href="#LinkTarget_27001">7.27 RegisteredServer</A>
</LI>
<LI>
<A href="#LinkTarget_27119">7.28 RequestHeader</A>
</LI>
<LI>
<A href="#LinkTarget_27245">7.29 ResponseHeader</A>
</LI>
<LI>
<A href="#LinkTarget_27337">7.30 ServiceFault</A>
</LI>
<LI>
<A href="#LinkTarget_27383">7.31 SessionAuthenticationToken</A>
</LI>
<LI>
<A href="#LinkTarget_27415">7.32 SignatureData</A>
</LI>
<LI>
<A href="#LinkTarget_27471">7.33 SignedSoftwareCertificate</A>
</LI>
<LI>
<A href="#LinkTarget_27514">7.34 StatusCode</A>
<UL>
<LI>
<A href="#LinkTarget_27515">7.34.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_27844">7.34.2 Common StatusCodes</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_28538">7.35 TimestampsToReturn</A>
</LI>
<LI>
<A href="#LinkTarget_28580">7.36 UserIdentityToken parameters</A>
<UL>
<LI>
<A href="#LinkTarget_28581">7.36.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_28674">7.36.2 AnonymousIdentityToken</A>
</LI>
<LI>
<A href="#LinkTarget_28714">7.36.3 UserNameIdentityToken</A>
</LI>
<LI>
<A href="#LinkTarget_28869">7.36.4 X509IdentityTokens</A>
</LI>
<LI>
<A href="#LinkTarget_28918">7.36.5 IssuedIdentityToken</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_29005">7.37 UserTokenPolicy</A>
</LI>
<LI>
<A href="#LinkTarget_29095">7.38 ViewDescription</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_29151">Annex A  (informative)  BNF definitions</A>
<UL>
<LI>
<A href="#LinkTarget_29153">A.1 Overview over BNF</A>
</LI>
<LI>
<A href="#LinkTarget_29155">A.2 BNF of RelativePath</A>
</LI>
<LI>
<A href="#LinkTarget_29289">A.3 BNF of NumericRange</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_29299">Annex B  (informative)  Content Filter and Query Examples</A>
<UL>
<LI>
<A href="#LinkTarget_29301">B.1 Simple ContentFilter examples</A>
<UL>
<LI>
<A href="#LinkTarget_29302">B.1.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_29322">B.1.2 Example 1</A>
</LI>
<LI>
<A href="#LinkTarget_29519">B.1.3 Example 2</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_29667">B.2 Complex Examples of Query Filters</A>
<UL>
<LI>
<A href="#LinkTarget_29668">B.2.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_29689">B.2.2 Used type model</A>
</LI>
<LI>
<A href="#LinkTarget_29757">B.2.3 Example Notes</A>
</LI>
<LI>
<A href="#LinkTarget_29781">B.2.4 Example 1</A>
</LI>
<LI>
<A href="#LinkTarget_30046">B.2.5 Example 2</A>
</LI>
<LI>
<A href="#LinkTarget_30296">B.2.6 Example 3</A>
</LI>
<LI>
<A href="#LinkTarget_30750">B.2.7 Example 4</A>
</LI>
<LI>
<A href="#LinkTarget_30937">B.2.8 Example 5</A>
</LI>
<LI>
<A href="#LinkTarget_31155">B.2.9 Example 6</A>
</LI>
<LI>
<A href="#LinkTarget_31522">B.2.10 Example 7</A>
</LI>
<LI>
<A href="#LinkTarget_31835">B.2.11 Example 8</A>
</LI>
<LI>
<A href="#LinkTarget_31999">B.2.12 Example 9</A>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</HR>
<DIV class="Part" 

><P 

><FONT size="+1" color="#000000"></B> </P
><P 

> <DIV class="Sect" 
 Alt=""
>  F  O  U  N  D  A  T  I  O  N &reg; </DIV
></P
><FONT size="+1"> <P 

><FONT size="+3"><B>OPC Unified Architecture </P
><P 

>Specification </P
><P 

>Part 4:  Services </P
><P 

>Release  1.03 </P
><P 

>July 19, 2015 </P
><P 

>  </P
><P 

> </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"></B>Specification Type: </P
></TD
><TD  
 valign="top"
><P 

>Industry Standard Specification </P
></TD
><TD  
 valign="top"
><P 

>Comments: </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Title: </P
></TD
><TD  
 valign="top"
><P 

>OPC Unified Architecture  Part 4 :Services </P
></TD
><TD  
 valign="top"
><P 

>Date: </P
></TD
><TD  
 valign="top"
><P 

>July 19, 2015 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Version: </P
></TD
><TD  
 valign="top"
><P 

>Release 1.03 </P
></TD
><TD  
 valign="top"
><P 

>Software: </P
></TD
><TD  
 valign="top"
><P 

>MS-Word </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Source: </P
></TD
><TD  
 valign="top"
><P 

>OPC UA Part 4 - Services 1.03 Specification.docx </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Author: </P
></TD
><TD  
 valign="top"
><P 

>OPC Foundation </P
></TD
><TD  
 valign="top"
><P 

>Status: </P
></TD
><TD  
 valign="top"
><P 

>Release </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><H1 

>  </H1
><P 

><FONT size="+1"> </P
><P 

> </P
><DIV class="TOC" 

><FONT size="+1"> <DIV class="TOCI" 

><FONT size="+1">CONTENTS </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4875" href="#">
<FONT size="+1"><B>FIGURES</B> ............................................................................................................................... v</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5132" href="#">
<FONT size="+1"><B>TABLES</B> ................................................................................................................................. vi</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7659" href="#">
<FONT size="+1">1<FONT size="+1"> <FONT size="+1">Scope ............................................................................................................................. 1</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7676" href="#">
<FONT size="+1">2<FONT size="+1"> <FONT size="+1">Normative references ...................................................................................................... 1</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7698" href="#">
<FONT size="+1">3<FONT size="+1"> <FONT size="+1">Terms, definitions and conventions ................................................................................. 2</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7700" href="#">
<FONT size="+1">3.1<FONT size="+1"> <FONT size="+1">Terms and definitions ............................................................................................. 2</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7814" href="#">
<FONT size="+1">3.2<FONT size="+1"> <FONT size="+1">Abbreviations and symbols ..................................................................................... 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7825" href="#">
<FONT size="+1">3.3<FONT size="+1"> <FONT size="+1">Conventions for Service definitions ........................................................................ 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8006" href="#">
<FONT size="+1">4<FONT size="+1"> <FONT size="+1">Overview ......................................................................................................................... 4</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8007" href="#">
<FONT size="+1">4.1<FONT size="+1"> <FONT size="+1">Service Set model .................................................................................................. 4</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8101" href="#">
<FONT size="+1">4.2<FONT size="+1"> <FONT size="+1">Request/response Service procedures ................................................................... 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8112" href="#">
<FONT size="+1">5<FONT size="+1"> <FONT size="+1">Service Sets ................................................................................................................... 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8113" href="#">
<FONT size="+1">5.1<FONT size="+1"> <FONT size="+1">General .................................................................................................................. 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8130" href="#">
<FONT size="+1">5.2<FONT size="+1"> <FONT size="+1">Service request and response header .................................................................... 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8145" href="#">
<FONT size="+1">5.3<FONT size="+1"> <FONT size="+1">Service results ....................................................................................................... 8</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8204" href="#">
<FONT size="+1">5.4<FONT size="+1"> <FONT size="+1">Discovery Service Set ............................................................................................ 9</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ......................................................................................................... 9</DIV
></DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">FindServers .................................................................................................. 10</DIV
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">FindServersOnNetwork ................................................................................. 11</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">GetEndpoints ................................................................................................ 12</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">RegisterServer .............................................................................................. 14</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">RegisterServer2 ............................................................................................ 16</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9167" href="#">
5.5<FONT size="+1"> <FONT size="+1">SecureChannel Service Set .................................................................................. 17</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 17</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">OpenSecureChannel ..................................................................................... 18</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">CloseSecureChannel .................................................................................... 21</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9756" href="#">
5.6<FONT size="+1"> <FONT size="+1">Session Service Set ............................................................................................. 21</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 21</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">CreateSession .............................................................................................. 22</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">ActivateSession ............................................................................................ 25</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">CloseSession ................................................................................................ 28</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Cancel .......................................................................................................... 28</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10824" href="#">
5.7<FONT size="+1"> <FONT size="+1">NodeManagement Service Set ............................................................................. 29</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 29</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">AddNodes ..................................................................................................... 29</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">AddReferences ............................................................................................. 31</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">DeleteNodes ................................................................................................. 33</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">DeleteReferences ......................................................................................... 34</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12000" href="#">
5.8<FONT size="+1"> <FONT size="+1">View Service Set .................................................................................................. 35</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 35</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Browse .......................................................................................................... 35</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">BrowseNext .................................................................................................. 37</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">TranslateBrowsePathsToNodeIds ................................................................. 38</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">RegisterNodes .............................................................................................. 40</DIV
><DIV class="TOC" 

><FONT size="+1"> <DIV class="TOCI" 

> <FONT size="+1">UnregisterNodes ........................................................................................... 41</DIV
></DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13302" href="#">
5.9<FONT size="+1"> <FONT size="+1">Query Service Set ................................................................................................ 42</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 42</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Querying Views ............................................................................................. 42</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">QueryFirst ..................................................................................................... 42</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">QueryNext ..................................................................................................... 46</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_14010" href="#">
5.10<FONT size="+1"> <FONT size="+1">Attribute Service Set ............................................................................................ 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 47</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Read ............................................................................................................. 47</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">HistoryRead .................................................................................................. 49</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Write ............................................................................................................. 51</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">HistoryUpdate ............................................................................................... 53</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15445" href="#">
5.11<FONT size="+1"> <FONT size="+1">Method Service Set .............................................................................................. 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 54</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Call ............................................................................................................... 55</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15798" href="#">
5.12<FONT size="+1"> <FONT size="+1">MonitoredItem Service Set ................................................................................... 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">MonitoredItem model .................................................................................... 57</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">CreateMonitoredItems ................................................................................... 62</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">ModifyMonitoredItems ................................................................................... 64</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">SetMonitoringMode ....................................................................................... 66</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">SetTriggering ................................................................................................ 67</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">DeleteMonitoredItems ................................................................................... 68</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_17419" href="#">
5.13<FONT size="+1"> <FONT size="+1">Subscription Service Set ...................................................................................... 69</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Subscription model ....................................................................................... 69</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">CreateSubscription ....................................................................................... 75</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">ModifySubscription ........................................................................................ 77</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">SetPublishingMode ....................................................................................... 78</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Publish .......................................................................................................... 80</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Republish ...................................................................................................... 81</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">TransferSubscriptions ................................................................................... 82</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">DeleteSubscriptions ...................................................................................... 83</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19800" href="#">
6<FONT size="+1"> <FONT size="+1">Service behaviours ....................................................................................................... 84</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19801" href="#">
<FONT size="+1">6.1<FONT size="+1"> <FONT size="+1">Security ................................................................................................................ 84</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 84</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Obtaining and Installing an Application Instance Certificate .......................... 84</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Determining if a Certificate is Trusted ........................................................... 86</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Creating a SecureChannel ............................................................................ 88</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Creating a Session ........................................................................................ 90</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Impersonating a User .................................................................................... 91</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20078" href="#">
6.2<FONT size="+1"> <FONT size="+1">Software Certificates ............................................................................................ 91</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20080" href="#">
<FONT size="+1">6.3<FONT size="+1"> <FONT size="+1">Auditing ................................................................................................................ 91</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ....................................................................................................... 91</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">General audit logs ......................................................................................... 91</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">General audit Events..................................................................................... 91</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Auditing for Discovery Service Set ................................................................ 92</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Auditing for SecureChannel Service Set ........................................................ 92</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Auditing for Session Service Set ................................................................... 92</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Auditing for NodeManagement Service Set ................................................... 92</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Auditing for Attribute Service Set .................................................................. 93</DIV
><DIV class="TOC" 

><FONT size="+1"> <DIV class="TOCI" 

> <FONT size="+1">Auditing for Method Service Set .................................................................... 93</DIV
></DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Auditing for View, Query, MonitoredItem and Subscription Service Set ......... 93</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20170" href="#">
6.4<FONT size="+1"> <FONT size="+1">Redundancy ......................................................................................................... 94</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Redundancy overview ................................................................................... 94</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Server Redundancy....................................................................................... 94</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Client Redundancy ...................................................................................... 104</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Network Redundancy .................................................................................. 104</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Manually Forcing Failover ........................................................................... 105</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20808" href="#">
6.5<FONT size="+1"> <FONT size="+1">Re-establishing connections ............................................................................... 106</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20852" href="#">
<FONT size="+1">6.6<FONT size="+1"> <FONT size="+1">Durable Subscriptions ........................................................................................ 107</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20937" href="#">
<FONT size="+1">7<FONT size="+1"> <FONT size="+1">Common parameter type definitions ............................................................................ 108</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20938" href="#">
<FONT size="+1">7.1<FONT size="+1"> <FONT size="+1">ApplicationDescription ........................................................................................ 108</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21043" href="#">
<FONT size="+1">7.2<FONT size="+1"> <FONT size="+1">ApplicationInstanceCertificate ............................................................................ 108</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21183" href="#">
<FONT size="+1">7.3<FONT size="+1"> <FONT size="+1">BrowseResult ..................................................................................................... 109</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21247" href="#">
<FONT size="+1">7.4<FONT size="+1"> <FONT size="+1">ContentFilter ...................................................................................................... 109</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">ContentFilter structure ................................................................................ 109</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">ContentFilterResult ..................................................................................... 110</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">FilterOperator ............................................................................................. 111</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">FilterOperand parameters ........................................................................... 118</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23634" href="#">
7.5<FONT size="+1"> <FONT size="+1">Counter .............................................................................................................. 119</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23640" href="#">
<FONT size="+1">7.6<FONT size="+1"> <FONT size="+1">ContinuationPoint ............................................................................................... 120</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23653" href="#">
<FONT size="+1">7.7<FONT size="+1"> <FONT size="+1">DataValue .......................................................................................................... 120</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">General ....................................................................................................... 120</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">PicoSeconds ............................................................................................... 120</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">SourceTimestamp ....................................................................................... 121</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">ServerTimestamp ........................................................................................ 121</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">StatusCode assigned to a value .................................................................. 121</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23786" href="#">
7.8<FONT size="+1"> <FONT size="+1">DiagnosticInfo .................................................................................................... 122</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23895" href="#">
<FONT size="+1">7.9<FONT size="+1"> <FONT size="+1">DiscoveryConfiguration parameters .................................................................... 123</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ..................................................................................................... 123</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">MdnsDiscoveryConfiguration ....................................................................... 123</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23978" href="#">
7.10<FONT size="+1"> <FONT size="+1">EndpointDescription ........................................................................................... 123</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24114" href="#">
<FONT size="+1">7.11<FONT size="+1"> <FONT size="+1">ExpandedNodeId ................................................................................................ 123</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24217" href="#">
<FONT size="+1">7.12<FONT size="+1"> <FONT size="+1">ExtensibleParameter .......................................................................................... 124</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24266" href="#">
<FONT size="+1">7.13<FONT size="+1"> <FONT size="+1">Index .................................................................................................................. 124</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24268" href="#">
<FONT size="+1">7.14<FONT size="+1"> <FONT size="+1">IntegerId ............................................................................................................ 124</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24270" href="#">
<FONT size="+1">7.15<FONT size="+1"> <FONT size="+1">MessageSecurityMode ....................................................................................... 124</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24311" href="#">
<FONT size="+1">7.16<FONT size="+1"> <FONT size="+1">MonitoringParameters ........................................................................................ 125</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24407" href="#">
<FONT size="+1">7.17<FONT size="+1"> <FONT size="+1">MonitoringFilter parameters ................................................................................ 125</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ..................................................................................................... 125</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">DataChangeFilter ........................................................................................ 126</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">EventFilter .................................................................................................. 126</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">AggregateFilter ........................................................................................... 128</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24988" href="#">
7.18<FONT size="+1"> <FONT size="+1">MonitoringMode.................................................................................................. 130</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_25023" href="#">
<FONT size="+1">7.19<FONT size="+1"> <FONT size="+1">NodeAttributes parameters ................................................................................. 130</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ..................................................................................................... 130</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">ObjectAttributes parameter ......................................................................... 131</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">VariableAttributes parameter ....................................................................... 131</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">MethodAttributes parameter ........................................................................ 132</DIV
><DIV class="TOC" 

><FONT size="+1"> <DIV class="TOCI" 

> <FONT size="+1">ObjectTypeAttributes parameter .................................................................. 132</DIV
></DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">VariableTypeAttributes parameter ............................................................... 132</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">ReferenceTypeAttributes parameter ............................................................ 133</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">DataTypeAttributes parameter .................................................................... 133</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">ViewAttributes parameter ............................................................................ 133</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26350" href="#">
7.20<FONT size="+1"> <FONT size="+1">NotificationData parameters ............................................................................... 134</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ..................................................................................................... 134</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">DataChangeNotification parameter .............................................................. 134</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">EventNotificationList parameter................................................................... 135</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">StatusChangeNotification parameter ........................................................... 135</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26581" href="#">
7.21<FONT size="+1"> <FONT size="+1">NotificationMessage ........................................................................................... 135</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26644" href="#">
<FONT size="+1">7.22<FONT size="+1"> <FONT size="+1">NumericRange ................................................................................................... 136</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26679" href="#">
<FONT size="+1">7.23<FONT size="+1"> <FONT size="+1">QueryDataSet .................................................................................................... 137</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26731" href="#">
<FONT size="+1">7.24<FONT size="+1"> <FONT size="+1">ReadValueId ...................................................................................................... 137</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26831" href="#">
<FONT size="+1">7.25<FONT size="+1"> <FONT size="+1">ReferenceDescription ......................................................................................... 138</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26926" href="#">
<FONT size="+1">7.26<FONT size="+1"> <FONT size="+1">RelativePath ....................................................................................................... 138</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27001" href="#">
<FONT size="+1">7.27<FONT size="+1"> <FONT size="+1">RegisteredServer ............................................................................................... 139</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27119" href="#">
<FONT size="+1">7.28<FONT size="+1"> <FONT size="+1">RequestHeader .................................................................................................. 139</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27245" href="#">
<FONT size="+1">7.29<FONT size="+1"> <FONT size="+1">ResponseHeader ................................................................................................ 140</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27337" href="#">
<FONT size="+1">7.30<FONT size="+1"> <FONT size="+1">ServiceFault ....................................................................................................... 141</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27383" href="#">
<FONT size="+1">7.31<FONT size="+1"> <FONT size="+1">SessionAuthenticationToken .............................................................................. 141</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27415" href="#">
<FONT size="+1">7.32<FONT size="+1"> <FONT size="+1">SignatureData .................................................................................................... 142</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27471" href="#">
<FONT size="+1">7.33<FONT size="+1"> <FONT size="+1">SignedSoftwareCertificate .................................................................................. 143</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27514" href="#">
<FONT size="+1">7.34<FONT size="+1"> <FONT size="+1">StatusCode ........................................................................................................ 143</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">General ....................................................................................................... 143</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">Common StatusCodes ................................................................................ 145</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28538" href="#">
7.35<FONT size="+1"> <FONT size="+1">TimestampsToReturn ......................................................................................... 148</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28580" href="#">
<FONT size="+1">7.36<FONT size="+1"> <FONT size="+1">UserIdentityToken parameters ............................................................................ 148</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

> <FONT size="+1">Overview ..................................................................................................... 148</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">AnonymousIdentityToken ............................................................................ 149</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">UserNameIdentityToken .............................................................................. 149</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">X509IdentityTokens .................................................................................... 150</DIV
><DIV class="TOCI" 

><FONT size="+1"> <FONT size="+1">IssuedIdentityToken .................................................................................... 150</DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29005" href="#">
7.37<FONT size="+1"> <FONT size="+1">UserTokenPolicy ................................................................................................ 151</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29095" href="#">
<FONT size="+1">7.38<FONT size="+1"> <FONT size="+1">ViewDescription ................................................................................................. 151</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29151" href="#">
<FONT size="+1">Annex A (informative)  BNF definitions ............................................................................... 152</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29153" href="#">
<FONT size="+1">A.1<FONT size="+1"> <FONT size="+1">Overview over BNF ............................................................................................ 152</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29155" href="#">
<FONT size="+1">A.2<FONT size="+1"> <FONT size="+1">BNF of RelativePath ........................................................................................... 152</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29289" href="#">
<FONT size="+1">A.3<FONT size="+1"> <FONT size="+1">BNF of NumericRange ........................................................................................ 153</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29299" href="#">
<FONT size="+1">Annex B (informative)  Content Filter and Query Examples ................................................ 154</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29301" href="#">
<FONT size="+1">B.1<FONT size="+1"> <FONT size="+1">Simple ContentFilter examples ........................................................................... 154</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29302" href="#">
<FONT size="+1">B.1.1<FONT size="+1"> <FONT size="+1">Overview ..................................................................................................... 154</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29322" href="#">
<FONT size="+1">B.1.2<FONT size="+1"> <FONT size="+1">Example 1 ................................................................................................... 154</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29519" href="#">
<FONT size="+1">B.1.3<FONT size="+1"> <FONT size="+1">Example 2 ................................................................................................... 155</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29667" href="#">
<FONT size="+1">B.2<FONT size="+1"> <FONT size="+1">Complex Examples of Query Filters .................................................................... 155</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29668" href="#">
<FONT size="+1">B.2.1<FONT size="+1"> <FONT size="+1">Overview ..................................................................................................... 155</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29689" href="#">
<FONT size="+1">B.2.2<FONT size="+1"> <FONT size="+1">Used type model ......................................................................................... 156</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29757" href="#">
<FONT size="+1">B.2.3<FONT size="+1"> <FONT size="+1">Example Notes ............................................................................................ 158</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29781" href="#">
<FONT size="+1">B.2.4<FONT size="+1"> <FONT size="+1">Example 1 ................................................................................................... 159</A>
<FONT size="+1"> </DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_30046" href="#">
<FONT size="+1">B.2.5<FONT size="+1"> <FONT size="+1">Example 2 ................................................................................................... 160</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30296" href="#">
<FONT size="+1">B.2.6<FONT size="+1"> <FONT size="+1">Example 3 ................................................................................................... 161</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30750" href="#">
<FONT size="+1">B.2.7<FONT size="+1"> <FONT size="+1">Example 4 ................................................................................................... 163</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30937" href="#">
<FONT size="+1">B.2.8<FONT size="+1"> <FONT size="+1">Example 5 ................................................................................................... 164</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31155" href="#">
<FONT size="+1">B.2.9<FONT size="+1"> <FONT size="+1">Example 6 ................................................................................................... 166</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31522" href="#">
<FONT size="+1">B.2.10<FONT size="+1"> <FONT size="+1">Example 7 ................................................................................................... 167</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31835" href="#">
<FONT size="+1">B.2.11<FONT size="+1"> <FONT size="+1">Example 8 ................................................................................................... 169</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31999" href="#">
<FONT size="+1">B.2.12<FONT size="+1"> <FONT size="+1">Example 9 ................................................................................................... 170</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1">  </DIV
></DIV
><H1 
 ID="LinkTarget_4875"
><B>FIGURES </H1
><DIV class="TOC" 

><DIV class="TOCI" 

></B> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8024" href="#">
Figure 1 &ndash; Discovery Service Set ........................................................................................... 4</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8032" href="#">
<FONT size="+1">Figure 2 &ndash; SecureChannel Service Set ................................................................................... 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8043" href="#">
<FONT size="+1">Figure 3 &ndash; Session Service Set .............................................................................................. 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8053" href="#">
<FONT size="+1">Figure 4 &ndash; NodeManagement Service Set .............................................................................. 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8063" href="#">
<FONT size="+1">Figure 5 &ndash; View Service Set ................................................................................................... 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8074" href="#">
<FONT size="+1">Figure 6 &ndash; Attribute Service Set .............................................................................................. 6</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8084" href="#">
<FONT size="+1">Figure 7 &ndash; Method Service Set ............................................................................................... 6</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8098" href="#">
<FONT size="+1">Figure 8 &ndash; MonitoredItem and Subscription Service Sets ........................................................ 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8223" href="#">
<FONT size="+1">Figure 9 &ndash; Discovery process ................................................................................................. 9</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8649" href="#">
<FONT size="+1">Figure 10 &ndash; Using a Gateway Server .................................................................................... 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8812" href="#">
<FONT size="+1">Figure 11 &ndash; The Registration Process &ndash; Manually Launched Servers .................................... 15</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8822" href="#">
<FONT size="+1">Figure 12 &ndash; The Registration Process &ndash; Automatically Launched Servers ............................. 15</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9205" href="#">
<FONT size="+1">Figure 13 &ndash; SecureChannel and Session Services ............................................................... 18</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9825" href="#">
<FONT size="+1">Figure 14 &ndash; Multiplexing Users on a Session ........................................................................ 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15810" href="#">
<FONT size="+1">Figure 15 &ndash; MonitoredItem Model ......................................................................................... 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15872" href="#">
<FONT size="+1">Figure 16 &ndash; Typical delay in change detection ...................................................................... 59</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15890" href="#">
<FONT size="+1">Figure 17 &ndash; Queue overflow handling ................................................................................... 60</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15919" href="#">
<FONT size="+1">Figure 18 &ndash; Triggering Model ............................................................................................... 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19842" href="#">
<FONT size="+1">Figure 19 &ndash; Obtaining and Installing an Application Instance Certificate ............................... 85</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19999" href="#">
<FONT size="+1">Figure 20 &ndash; Determining if a Application Instance Certificate is Trusted ................................ 88</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20017" href="#">
<FONT size="+1">Figure 21 &ndash; Establishing a SecureChannel ........................................................................... 89</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20052" href="#">
<FONT size="+1">Figure 22 &ndash; Establishing a Session ...................................................................................... 90</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20077" href="#">
<FONT size="+1">Figure 23 &ndash; Impersonating a User ........................................................................................ 91</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20237" href="#">
<FONT size="+1">Figure 24 &ndash; Transparent Redundancy setup example ........................................................... 95</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20270" href="#">
<FONT size="+1">Figure 25 &ndash; Non-Transparent Redundancy setup .................................................................. 96</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20649" href="#">
<FONT size="+1">Figure 26 &ndash; Client Start-up Steps ......................................................................................... 99</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20663" href="#">
<FONT size="+1">Figure 27 &ndash; Cold Failover ................................................................................................... 100</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20676" href="#">
<FONT size="+1">Figure 28 &ndash; Warm Failover ................................................................................................. 101</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20699" href="#">
<FONT size="+1">Figure 29 &ndash; Hot Failover ..................................................................................................... 102</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20712" href="#">
<FONT size="+1">Figure 30 &ndash; HotPlusMirrored Failover ................................................................................. 103</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20722" href="#">
<FONT size="+1">Figure 31 &ndash; Server proxy for Redundancy .......................................................................... 103</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20736" href="#">
<FONT size="+1">Figure 32 &ndash; Transparent Network Redundancy ................................................................... 104</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20774" href="#">
<FONT size="+1">Figure 33 &ndash; Non-Transparent Network Redundancy ........................................................... 105</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_20819" href="#">
<FONT size="+1">Figure 34 &ndash; Reconnect Sequence ....................................................................................... 106</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27395" href="#">
<FONT size="+1">Figure 35 &ndash; Logical layers of a <I>Server</I> ................................................................................ 141</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27413" href="#">
<FONT size="+1">Figure 36 &ndash; Obtaining a SessionAuthenticationToken ......................................................... 142</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29423" href="#">
<FONT size="+1">Figure B.1 &ndash; Filter Logic Tree Example .............................................................................. 154</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29598" href="#">
<FONT size="+1">Figure B.2 &ndash; Filter Logic Tree Example .............................................................................. 155</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29738" href="#">
<FONT size="+1">Figure B.3 &ndash; Example Type Nodes ..................................................................................... 157</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29756" href="#">
<FONT size="+1">Figure B.4 &ndash; Example Instance Nodes ................................................................................ 158</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29901" href="#">
<FONT size="+1">Figure B.5 &ndash; Example 1 Filter ............................................................................................. 159</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30161" href="#">
<FONT size="+1">Figure B.6 &ndash; Example 2 Filter Logic Tree............................................................................ 161</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30502" href="#">
<FONT size="+1">Figure B.7 &ndash; Example 3 Filter Logic Tree............................................................................ 162</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30853" href="#">
<FONT size="+1">Figure B.8 &ndash; Example 4 Filter Logic Tree............................................................................ 164</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31054" href="#">
<FONT size="+1">Figure B.9 &ndash; Example 5 Filter Logic Tree............................................................................ 165</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31287" href="#">
<FONT size="+1">Figure B.10 &ndash; Example 6 Filter Logic Tree .......................................................................... 166</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31664" href="#">
<FONT size="+1">Figure B.11 &ndash; Example 7 Filter Logic Tree .......................................................................... 168</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31900" href="#">
<FONT size="+1">Figure B.12 &ndash; Example 8 Filter Logic Tree .......................................................................... 169</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_32167" href="#">
<FONT size="+1">Figure B.13 &ndash; Example 9 Filter Logic Tree .......................................................................... 171</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1">  </DIV
></DIV
><H1 
 ID="LinkTarget_5132"
><B>TABLES </H1
><DIV class="TOC" 

><DIV class="TOCI" 

></B> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7832" href="#">
Table 1 &ndash; Service Definition Table .......................................................................................... 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7921" href="#">
<FONT size="+1">Table 2 &ndash; Parameter Types defined in Part 3 .......................................................................... 4</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8280" href="#">
<FONT size="+1">Table 3 &ndash; FindServers Service Parameters........................................................................... 11</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8420" href="#">
<FONT size="+1">Table 4 &ndash; FindServersOnNetwork Service Parameters ......................................................... 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8656" href="#">
<FONT size="+1">Table 5 &ndash; GetEndpoints Service Parameters ........................................................................ 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8833" href="#">
<FONT size="+1">Table 6 &ndash; RegisterServer Service Parameters ...................................................................... 16</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8921" href="#">
<FONT size="+1">Table 7 &ndash; RegisterServer Service Result Codes ................................................................... 16</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8989" href="#">
<FONT size="+1">Table 8 &ndash; RegisterServer2 .................................................................................................... 17</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9107" href="#">
<FONT size="+1">Table 9 &ndash; RegisterServer2 Service Result Codes ................................................................. 17</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9251" href="#">
<FONT size="+1">Table 10 &ndash; OpenSecureChannel Service Parameters ........................................................... 20</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9463" href="#">
<FONT size="+1">Table 11 &ndash; OpenSecureChannel Service Result Codes ........................................................ 21</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9656" href="#">
<FONT size="+1">Table 12 &ndash; CloseSecureChannel Service Parameters ........................................................... 21</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9736" href="#">
<FONT size="+1">Table 13 &ndash; CloseSecureChannel Service Result Codes ........................................................ 21</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9834" href="#">
<FONT size="+1">Table 14 &ndash; CreateSession Service Parameters ..................................................................... 24</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10160" href="#">
<FONT size="+1">Table 15 &ndash; CreateSession Service Result Codes .................................................................. 25</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10362" href="#">
<FONT size="+1">Table 16 &ndash; ActivateSession Service Parameters ................................................................... 27</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10547" href="#">
<FONT size="+1">Table 17 &ndash; ActivateSession Service Result Codes ................................................................ 27</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10631" href="#">
<FONT size="+1">Table 18 &ndash; CloseSession Service Parameters ...................................................................... 28</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10710" href="#">
<FONT size="+1">Table 19 &ndash; CloseSession Service Result Codes ................................................................... 28</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10739" href="#">
<FONT size="+1">Table 20 &ndash; Cancel Service Parameters ................................................................................. 28</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10841" href="#">
<FONT size="+1">Table 21 &ndash; AddNodes Service Parameters ........................................................................... 30</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11041" href="#">
<FONT size="+1">Table 22 &ndash; AddNodes Service Result Codes ........................................................................ 30</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11082" href="#">
<FONT size="+1">Table 23 &ndash; AddNodes Operation Level Result Codes ........................................................... 31</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11193" href="#">
<FONT size="+1">Table 24 &ndash; AddReferences Service Parameters.................................................................... 32</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_11352" href="#">
<FONT size="+1">Table 25 &ndash; AddReferences Service Result Codes ................................................................. 32</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11394" href="#">
<FONT size="+1">Table 26 &ndash; AddReferences Operation Level Result Codes .................................................... 32</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11505" href="#">
<FONT size="+1">Table 27 &ndash; DeleteNodes Service Parameters ....................................................................... 33</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11629" href="#">
<FONT size="+1">Table 28 &ndash; DeleteNodes Service Result Codes .................................................................... 33</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11670" href="#">
<FONT size="+1">Table 29 &ndash; DeleteNodes Operation Level Result Codes ....................................................... 34</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11739" href="#">
<FONT size="+1">Table 30 &ndash; DeleteReferences Service Parameters ................................................................ 34</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11888" href="#">
<FONT size="+1">Table 31 &ndash; DeleteReferences Service Result Codes ............................................................. 34</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11929" href="#">
<FONT size="+1">Table 32 &ndash; DeleteReferences Operation Level Result Codes ................................................ 35</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12019" href="#">
<FONT size="+1">Table 33 &ndash; Browse Service Parameters ................................................................................ 36</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12314" href="#">
<FONT size="+1">Table 34 &ndash; Browse Service Result Codes ............................................................................. 37</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12400" href="#">
<FONT size="+1">Table 35 &ndash; Browse Operation Level Result Codes ................................................................ 37</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12490" href="#">
<FONT size="+1">Table 36 &ndash; BrowseNext Service Parameters ......................................................................... 38</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12616" href="#">
<FONT size="+1">Table 37 &ndash; BrowseNext Service Result Codes ...................................................................... 38</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12657" href="#">
<FONT size="+1">Table 38 &ndash; BrowseNext Operation Level Result Codes ......................................................... 38</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12745" href="#">
<FONT size="+1">Table 39 &ndash; TranslateBrowsePathsToNodeIds Service Parameters ........................................ 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12914" href="#">
<FONT size="+1">Table 40 &ndash; TranslateBrowsePathsToNodeIds Service Result Codes ..................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12956" href="#">
<FONT size="+1">Table 41 &ndash; TranslateBrowsePathsToNodeIds Operation Level Result Codes ........................ 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13048" href="#">
<FONT size="+1">Table 42 &ndash; RegisterNodes Service Parameters .................................................................... 41</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13138" href="#">
<FONT size="+1">Table 43 &ndash; RegisterNodes Service Result Codes.................................................................. 41</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13191" href="#">
<FONT size="+1">Table 44 &ndash; UnregisterNodes Service Parameters ................................................................. 41</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13270" href="#">
<FONT size="+1">Table 45 &ndash; UnregisterNodes Service Result Codes .............................................................. 42</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13359" href="#">
<FONT size="+1">Table 46 &ndash; QueryFirst Request Parameters .......................................................................... 44</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13536" href="#">
<FONT size="+1">Table 47 &ndash; QueryFirst Response Parameters ....................................................................... 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13674" href="#">
<FONT size="+1">Table 48 &ndash; QueryFirst Service Result Codes ........................................................................ 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13795" href="#">
<FONT size="+1">Table 49 &ndash; QueryFirst Operation Level Result Codes ........................................................... 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13863" href="#">
<FONT size="+1">Table 50 &ndash; QueryNext Service Parameters ........................................................................... 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_13990" href="#">
<FONT size="+1">Table 51 &ndash; QueryNext Service Result Codes ........................................................................ 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_14023" href="#">
<FONT size="+1">Table 52 &ndash; Read Service Parameters ................................................................................... 48</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_14163" href="#">
<FONT size="+1">Table 53 &ndash; Read Service Result Codes ................................................................................ 48</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_14221" href="#">
<FONT size="+1">Table 54 &ndash; Read Operation Level Result Codes ................................................................... 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_14368" href="#">
<FONT size="+1">Table 55 &ndash; HistoryRead Service Parameters ........................................................................ 50</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_14632" href="#">
<FONT size="+1">Table 56 &ndash; HistoryRead Service Result Codes ..................................................................... 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_14711" href="#">
<FONT size="+1">Table 57 &ndash; HistoryRead Operation Level Result Codes ........................................................ 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_14835" href="#">
<FONT size="+1">Table 58 &ndash; Write Service Parameters ................................................................................... 52</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15004" href="#">
<FONT size="+1">Table 59 &ndash; Write Service Result Codes ................................................................................ 53</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15046" href="#">
<FONT size="+1">Table 60 &ndash; Write Operation Level Result Codes ................................................................... 53</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15212" href="#">
<FONT size="+1">Table 61 &ndash; HistoryUpdate Service Parameters ..................................................................... 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15345" href="#">
<FONT size="+1">Table 62 &ndash; HistoryUpdate Service Result Codes .................................................................. 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15390" href="#">
<FONT size="+1">Table 63 &ndash; HistoryUpdate Operation Level Result Codes ..................................................... 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15467" href="#">
<FONT size="+1">Table 64 &ndash; Call Service Parameters ..................................................................................... 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15633" href="#">
<FONT size="+1">Table 65 &ndash; Call Service Result Codes .................................................................................. 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15677" href="#">
<FONT size="+1">Table 66 &ndash; Call Operation Level Result Codes ..................................................................... 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_15992" href="#">
<FONT size="+1">Table 67 &ndash; CreateMonitoredItems Service Parameters ......................................................... 63</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_16218" href="#">
<FONT size="+1">Table 68 &ndash; CreateMonitoredItems Service Result Codes ...................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_16281" href="#">
<FONT size="+1">Table 69 &ndash; CreateMonitoredItems Operation Level Result Codes ......................................... 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_16431" href="#">
<FONT size="+1">Table 70 &ndash; ModifyMonitoredItems Service Parameters ......................................................... 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_16626" href="#">
<FONT size="+1">Table 71 &ndash; ModifyMonitoredItems Service Result Codes ...................................................... 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_16689" href="#">
<FONT size="+1">Table 72 &ndash; ModifyMonitoredItems Operation Level Result Codes ......................................... 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_16752" href="#">
<FONT size="+1">Table 73 &ndash; SetMonitoringMode Service Parameters ............................................................. 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_16884" href="#">
<FONT size="+1">Table 74 &ndash; SetMonitoringMode Service Result Codes .......................................................... 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_16948" href="#">
<FONT size="+1">Table 75 &ndash; SetMonitoringMode Operation Level Result Codes ............................................. 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_16985" href="#">
<FONT size="+1">Table 76 &ndash; SetTriggering Service Parameters ...................................................................... 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_17135" href="#">
<FONT size="+1">Table 77 &ndash; SetTriggering Service Result Codes ................................................................... 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_17198" href="#">
<FONT size="+1">Table 78 &ndash; SetTriggering Operation Level Result Codes ...................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_17229" href="#">
<FONT size="+1">Table 79 &ndash; DeleteMonitoredItems Service Parameters ......................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_17347" href="#">
<FONT size="+1">Table 80 &ndash; DeleteMonitoredItems Service Result Codes ...................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_17399" href="#">
<FONT size="+1">Table 81 &ndash; DeleteMonitoredItems Operation Level Result Codes ......................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_17508" href="#">
<FONT size="+1">Table 82 &ndash; Subscription States ............................................................................................. 71</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_17578" href="#">
<FONT size="+1">Table 83 &ndash; Subscription State Table ..................................................................................... 72</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_18100" href="#">
<FONT size="+1">Table 84 &ndash; State variables and parameters .......................................................................... 74</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_18176" href="#">
<FONT size="+1">Table 85 &ndash; Functions ............................................................................................................ 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_18352" href="#">
<FONT size="+1">Table 86 &ndash; CreateSubscription Service Parameters .............................................................. 76</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_18542" href="#">
<FONT size="+1">Table 87 &ndash; CreateSubscription Service Result Codes ........................................................... 77</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_18569" href="#">
<FONT size="+1">Table 88 &ndash; ModifySubscription Service Parameters .............................................................. 78</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_18744" href="#">
<FONT size="+1">Table 89 &ndash; ModifySubscription Service Result Codes ........................................................... 78</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_18773" href="#">
<FONT size="+1">Table 90 &ndash; SetPublishingMode Service Parameters ............................................................. 79</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_18895" href="#">
<FONT size="+1">Table 91 &ndash; SetPublishingMode Service Result Codes........................................................... 79</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_18938" href="#">
<FONT size="+1">Table 92 &ndash; SetPublishingMode Operation Level Result Codes .............................................. 80</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_18978" href="#">
<FONT size="+1">Table 93 &ndash; Publish Service Parameters ................................................................................ 81</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19161" href="#">
<FONT size="+1">Table 94 &ndash; Publish Service Result Codes ............................................................................. 81</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19192" href="#">
<FONT size="+1">Table 95 &ndash; Publish Operation Level Result Codes ................................................................ 81</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19240" href="#">
<FONT size="+1">Table 96 &ndash; Republish Service Parameters ............................................................................ 82</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19351" href="#">
<FONT size="+1">Table 97 &ndash; Republish Service Result Codes ......................................................................... 82</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19393" href="#">
<FONT size="+1">Table 98 &ndash; TransferSubscriptions Service Parameters ......................................................... 83</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19538" href="#">
<FONT size="+1">Table 99 &ndash; TransferSubscriptions Service Result Codes ...................................................... 83</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19585" href="#">
<FONT size="+1">Table 100 &ndash; TransferSubscriptions Operation Level Result Codes ........................................ 83</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19629" href="#">
<FONT size="+1">Table 101 &ndash; DeleteSubscriptions Service Parameters .......................................................... 84</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19739" href="#">
<FONT size="+1">Table 102 &ndash; DeleteSubscriptions Service Result Codes ....................................................... 84</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19780" href="#">
<FONT size="+1">Table 103 &ndash; DeleteSubscriptions Operation Level Result Codes........................................... 84</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_19868" href="#">
<FONT size="+1">Table 104 &ndash; Certificate Validation Steps ............................................................................... 87</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20315" href="#">
<FONT size="+1">Table 105 - ServiceLevel Ranges ......................................................................................... 97</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20396" href="#">
<FONT size="+1">Table 106 &ndash; Server Failover Modes ...................................................................................... 98</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20453" href="#">
<FONT size="+1">Table 107 &ndash; Redundancy Failover actions ............................................................................ 99</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_20945" href="#">
<FONT size="+1">Table 108 &ndash; ApplicationDescription .................................................................................... 108</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21054" href="#">
<FONT size="+1">Table 109 &ndash; ApplicationInstanceCertificate ......................................................................... 109</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21190" href="#">
<FONT size="+1">Table 110 &ndash; BrowseResult .................................................................................................. 109</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_21260" href="#">
<FONT size="+1">Table 111 &ndash; ContentFilter Structure .................................................................................... 110</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21330" href="#">
<FONT size="+1">Table 112 &ndash; ContentFilterResult Structure .......................................................................... 110</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21399" href="#">
<FONT size="+1">Table 113 &ndash; ContentFilterResult Result Codes ................................................................... 110</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21440" href="#">
<FONT size="+1">Table 114 &ndash; ContentFilterResult Operand Result Codes ..................................................... 110</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21533" href="#">
<FONT size="+1">Table 115 &ndash; Basic FilterOperator Definition ........................................................................ 112</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21742" href="#">
<FONT size="+1">Table 116 &ndash; Complex FilterOperator Definition ................................................................... 114</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21813" href="#">
<FONT size="+1">Table 117 &ndash; Wildcard characters ........................................................................................ 115</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_21867" href="#">
<FONT size="+1">Table 118 &ndash; Conversion Rules ........................................................................................... 116</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23130" href="#">
<FONT size="+1">Table 119 &ndash; Data Precedence Rules .................................................................................. 117</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23253" href="#">
<FONT size="+1">Table 120 &ndash; Logical AND Truth Table ................................................................................. 117</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23302" href="#">
<FONT size="+1">Table 121 &ndash; Logical OR Truth Table ................................................................................... 118</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23364" href="#">
<FONT size="+1">Table 122 &ndash; FilterOperand parameter TypeIds.................................................................... 118</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23404" href="#">
<FONT size="+1">Table 123 &ndash; ElementOperand ............................................................................................. 118</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23437" href="#">
<FONT size="+1">Table 124 &ndash; LiteralOperand ................................................................................................ 118</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23470" href="#">
<FONT size="+1">Table 125 &ndash; AttributeOperand ............................................................................................ 119</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23564" href="#">
<FONT size="+1">Table 126 &ndash; SimpleAttributeOperand .................................................................................. 119</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23661" href="#">
<FONT size="+1">Table 127 &ndash; DataValue ....................................................................................................... 120</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23793" href="#">
<FONT size="+1">Table 128 &ndash; DiagnosticInfo ................................................................................................. 122</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23908" href="#">
<FONT size="+1">Table 129 &ndash; DiscoveryConfiguration parameterTypeIds ...................................................... 123</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23929" href="#">
<FONT size="+1">Table 130 &ndash; MdnsDiscoveryConfiguration........................................................................... 123</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_23985" href="#">
<FONT size="+1">Table 131 &ndash; EndpointDescription ........................................................................................ 123</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24121" href="#">
<FONT size="+1">Table 132 &ndash; ExpandedNodeId ............................................................................................ 124</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24231" href="#">
<FONT size="+1">Table 133 &ndash; ExtensibleParameter Base Type ..................................................................... 124</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24277" href="#">
<FONT size="+1">Table 134 &ndash; MessageSecurityMode Values ........................................................................ 124</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24319" href="#">
<FONT size="+1">Table 135 &ndash; MonitoringParameters ..................................................................................... 125</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24421" href="#">
<FONT size="+1">Table 136 &ndash; MonitoringFilter parameterTypeIds .................................................................. 126</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24455" href="#">
<FONT size="+1">Table 137 &ndash; DataChangeFilter ............................................................................................ 126</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24598" href="#">
<FONT size="+1">Table 138 &ndash; EventFilter structure ....................................................................................... 128</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24650" href="#">
<FONT size="+1">Table 139 &ndash; EventFilterResult structure .............................................................................. 128</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24709" href="#">
<FONT size="+1">Table 140 &ndash; EventFilterResult Result Codes ...................................................................... 128</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24812" href="#">
<FONT size="+1">Table 141 &ndash; AggregateFilter structure ................................................................................ 129</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24949" href="#">
<FONT size="+1">Table 142 &ndash; AggregateFilterResult structure....................................................................... 130</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_24995" href="#">
<FONT size="+1">Table 143 &ndash; MonitoringMode Values .................................................................................. 130</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_25035" href="#">
<FONT size="+1">Table 144 &ndash; NodeAttributes parameterTypeIds ................................................................... 130</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_25098" href="#">
<FONT size="+1">Table 145 &ndash; Bit mask for specified Attributes ...................................................................... 131</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_25316" href="#">
<FONT size="+1">Table 146 &ndash; ObjectAttributes .............................................................................................. 131</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_25421" href="#">
<FONT size="+1">Table 147 &ndash; VariableAttributes ........................................................................................... 132</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_25619" href="#">
<FONT size="+1">Table 148 &ndash; MethodAttributes ............................................................................................. 132</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_25737" href="#">
<FONT size="+1">Table 149 &ndash; ObjectTypeAttributes ...................................................................................... 132</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_25842" href="#">
<FONT size="+1">Table 150 &ndash; VariableTypeAttributes .................................................................................... 133</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26000" href="#">
<FONT size="+1">Table 151 &ndash; ReferenceTypeAttributes ................................................................................ 133</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26132" href="#">
<FONT size="+1">Table 152 &ndash; DataTypeAttributes ......................................................................................... 133</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26237" href="#">
<FONT size="+1">Table 153 &ndash; ViewAttributes ................................................................................................. 134</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_26363" href="#">
<FONT size="+1">Table 154 &ndash; NotificationData parameterTypeIds ................................................................. 134</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26408" href="#">
<FONT size="+1">Table 155 &ndash; DataChangeNotification .................................................................................. 135</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26485" href="#">
<FONT size="+1">Table 156 &ndash; EventNotificationList ....................................................................................... 135</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26546" href="#">
<FONT size="+1">Table 157 &ndash; StatusChangeNotification ................................................................................ 135</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26588" href="#">
<FONT size="+1">Table 158 &ndash; NotificationMessage ........................................................................................ 136</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26659" href="#">
<FONT size="+1">Table 159 &ndash; NumericRange ................................................................................................ 136</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26687" href="#">
<FONT size="+1">Table 160 &ndash; QueryDataSet ................................................................................................. 137</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26738" href="#">
<FONT size="+1">Table 161 &ndash; ReadValueId ................................................................................................... 137</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26839" href="#">
<FONT size="+1">Table 162 &ndash; ReferenceDescription ..................................................................................... 138</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_26933" href="#">
<FONT size="+1">Table 163 &ndash; RelativePath ................................................................................................... 138</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27009" href="#">
<FONT size="+1">Table 164 &ndash; RegisteredServer ............................................................................................ 139</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27126" href="#">
<FONT size="+1">Table 165 &ndash; RequestHeader ............................................................................................... 140</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27252" href="#">
<FONT size="+1">Table 166 &ndash; ResponseHeader ............................................................................................ 141</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27351" href="#">
<FONT size="+1">Table 167 &ndash; ServiceFault.................................................................................................... 141</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27422" href="#">
<FONT size="+1">Table 168 &ndash; SignatureData ................................................................................................. 142</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27479" href="#">
<FONT size="+1">Table 169 &ndash; SignedSoftwareCertificate ............................................................................... 143</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27538" href="#">
<FONT size="+1">Table 170 &ndash; StatusCode Bit Assignments ........................................................................... 144</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27707" href="#">
<FONT size="+1">Table 171 &ndash; DataValue InfoBits .......................................................................................... 145</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_27854" href="#">
<FONT size="+1">Table 172 &ndash; Common Service Result Codes ....................................................................... 146</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28238" href="#">
<FONT size="+1">Table 173 &ndash; Common Operation Level Result Codes .......................................................... 147</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28545" href="#">
<FONT size="+1">Table 174 &ndash; TimestampsToReturn Values .......................................................................... 148</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28592" href="#">
<FONT size="+1">Table 175 &ndash; UserIdentityToken parameterTypeIds .............................................................. 148</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28638" href="#">
<FONT size="+1">Table 176 &ndash; UserIdentityToken Encrypted Token Format .................................................... 149</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28681" href="#">
<FONT size="+1">Table 177 &ndash; AnonymousIdentityToken ................................................................................ 149</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28730" href="#">
<FONT size="+1">Table 178 &ndash; UserNameIdentityToken .................................................................................. 149</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28802" href="#">
<FONT size="+1">Table 179 &ndash; EncryptionAlgorithm selection ......................................................................... 150</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28877" href="#">
<FONT size="+1">Table 180 &ndash; X509 Identity Token ........................................................................................ 150</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_28945" href="#">
<FONT size="+1">Table 181 &ndash; IssuedIdentityToken ........................................................................................ 151</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29012" href="#">
<FONT size="+1">Table 183 &ndash; UserTokenPolicy ............................................................................................. 151</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29102" href="#">
<FONT size="+1">Table 184 &ndash; ViewDescription .............................................................................................. 151</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29163" href="#">
<FONT size="+1">Table A.1 &ndash; RelativePath .................................................................................................... 152</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29215" href="#">
<FONT size="+1">Table A.2 &ndash; <I>RelativePath</I> Examples .................................................................................... 153</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29429" href="#">
<FONT size="+1">Table B.1 &ndash; ContentFilter Example ..................................................................................... 155</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29604" href="#">
<FONT size="+1">Table B.2 &ndash; ContentFilter Example ..................................................................................... 155</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29790" href="#">
<FONT size="+1">Table B.3 &ndash; Example 1 NodeTypeDescription ..................................................................... 159</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29907" href="#">
<FONT size="+1">Table B.4 &ndash; Example 1 ContentFilter .................................................................................. 159</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_29962" href="#">
<FONT size="+1">Table B.5 &ndash; Example 1 QueryDataSets .............................................................................. 160</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30055" href="#">
<FONT size="+1">Table B.6 &ndash; Example 2 NodeTypeDescription ..................................................................... 160</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30167" href="#">
<FONT size="+1">Table B.7 &ndash; Example 2 ContentFilter .................................................................................. 161</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30232" href="#">
<FONT size="+1">Table B.8 &ndash; Example 2 QueryDataSets .............................................................................. 161</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30304" href="#">
<FONT size="+1">Table B.9 &ndash; Example 3 - NodeTypeDescription ................................................................... 162</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30508" href="#">
<FONT size="+1">Table B.10 &ndash; Example 3 ContentFilter ................................................................................ 163</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30695" href="#">
<FONT size="+1">Table B.11 &ndash; Example 3 QueryDataSets ............................................................................. 163</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_30759" href="#">
<FONT size="+1">Table B.12 &ndash; Example 4 NodeTypeDescription ................................................................... 164</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30859" href="#">
<FONT size="+1">Table B.13 &ndash; Example 4 ContentFilter ................................................................................ 164</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30912" href="#">
<FONT size="+1">Table B.14 &ndash; Example 4 QueryDataSets ............................................................................. 164</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_30947" href="#">
<FONT size="+1">Table B.15 &ndash; Example 5 NodeTypeDescription ................................................................... 165</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31061" href="#">
<FONT size="+1">Table B.16 &ndash; Example 5 ContentFilter ................................................................................ 165</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31130" href="#">
<FONT size="+1">Table B.17 &ndash; Example 5 QueryDataSets ............................................................................. 165</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31164" href="#">
<FONT size="+1">Table B.18 &ndash; Example 6 NodeTypeDescription ................................................................... 166</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31293" href="#">
<FONT size="+1">Table B.19 &ndash; Example 6 ContentFilter ................................................................................ 166</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31344" href="#">
<FONT size="+1">Table B.20 &ndash; Example 6 QueryDataSets ............................................................................. 167</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31457" href="#">
<FONT size="+1">Table B.21 &ndash; Example 6 QueryDataSets without Additional Information .............................. 167</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31530" href="#">
<FONT size="+1">Table B.22 &ndash; Example 7 NodeTypeDescription ................................................................... 168</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31670" href="#">
<FONT size="+1">Table B.23 &ndash; Example 7 ContentFilter ................................................................................ 168</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31740" href="#">
<FONT size="+1">Table B.24 &ndash; Example 7 QueryDataSets ............................................................................. 168</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31844" href="#">
<FONT size="+1">Table B.25 &ndash; Example 8 NodeTypeDescription ................................................................... 169</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31907" href="#">
<FONT size="+1">Table B.26 &ndash; Example 8 ContentFilter ................................................................................ 170</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_31975" href="#">
<FONT size="+1">Table B.27 &ndash; Example 8 QueryDataSets ............................................................................. 170</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_32007" href="#">
<FONT size="+1">Table B.28 &ndash; Example 9 NodeTypeDescription ................................................................... 170</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_32173" href="#">
<FONT size="+1">Table B.29 &ndash; Example 9 ContentFilter ................................................................................ 171</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_32238" href="#">
<FONT size="+1">Table B.30 &ndash; Example 9 QueryDataSets ............................................................................. 171</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1"> </DIV
></DIV
><P 

><FONT size="+1"><B>OPC FOUNDATION </P
><P 

><FONT size="+1"></B>____________ </P
><P 

><FONT size="+1"><B> </P
><P 

>UNIFIED ARCHITECTURE &ndash;  </P
><P 

><FONT size="+1">FOREWORD </P
><P 

><FONT size="+1"></B>This specification is the specification for developers of OPC UA applications. The specification is a result of an analysis and design process to develop a standard interface to facilitate the development of applications by multiple vendors that shall inter-operate seamlessly together.  </P
><P 

><B>Copyright &copy; 2006-2015, OPC Foundation, Inc. </P
><P 

><FONT size="+1">AGREEMENT OF USE </P
><P 

><FONT size="+1"></B>COPYRIGHT RESTRICTIONS </P
><P 

>Any unauthorized use of this specification may violate copyright laws, trademark laws, and communications regulations and statutes. This document contains information which is protected by copyright. All Rights Reserved. No part of this work covered by copyright herein may be reproduced or used in any form or by any means--graphic, electronic, or mechanical, including photocopying, recording, taping, or information storage and retrieval systems--without permission of the copyright owner. </P
><P 

>OPC Foundation members and non-members are prohibited from copying and redistributing this specification. All copies must be obtained on an individual basis, directly from the OPC Foundation Web site <FONT size="+1">H<A href="http://www.opcfoundation.org/">
TU<FONT size="+1">http://www.opcfoundation.org<FONT size="+1">UT</A>
H<FONT size="+1">. </P
><P 

>PATENTS </P
><P 

>The attention of adopters is directed to the possibility that compliance with or adoption of OPC specifications may require use of an invention covered by patent rights. OPC shall not be responsible for identifying patents for which a license may be required by any OPC specification, or for conducting legal inquiries into the legal validity or scope of those patents that are brought to its attention. OPC specifications are prospective and advisory only. Prospective users are responsible for protecting themselves against liability for infringement of patents. </P
><P 

>WARRANTY AND LIABILITY DISCLAIMERS </P
><P 

>WHILE THIS PUBLICATION IS BELIEVED TO BE ACCURATE, IT IS PROVIDED &quot;AS IS&quot; AND MAY CONTAIN ERRORS OR MISPRINTS. THE OPC FOUDATION MAKES NO WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, WITH REGARD TO THIS PUBLICATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTY OF TITLE OR OWNERSHIP, IMPLIED WARRANTY OF MERCHANTABILITY OR WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE OR USE. IN NO EVENT SHALL THE OPC FOUNDATION BE LIABLE FOR ERRORS CONTAINED HEREIN OR FOR DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, RELIANCE OR COVER DAMAGES, INCLUDING LOSS OF PROFITS, REVENUE, DATA OR USE, INCURRED BY ANY USER OR ANY THIRD PARTY IN CONNECTION WITH THE FURNISHING, PERFORMANCE, OR USE OF THIS MATERIAL, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. </P
><P 

>The entire risk as to the quality and performance of software developed using this specification is borne by you.  </P
><P 

>RESTRICTED RIGHTS LEGEND </P
><P 

>This Specification is provided with Restricted Rights. Use, duplication or disclosure by the U.S. government is subject to restrictions as set forth in (a) this Agreement pursuant to DFARs 227.7202-3(a); (b) subparagraph (c)(1)(i) of the Rights in Technical Data and Computer Software clause at DFARs 252.227-7013; or (c) the Commercial Computer Software Restricted Rights clause at FAR 52.227-19 subdivision (c)(1) and (2), as applicable. Contractor / manufacturer are the OPC Foundation,. 16101 N. 82nd Street, Suite 3B, Scottsdale, AZ, 85260-1830 </P
><P 

>COMPLIANCE </P
><P 

>The OPC Foundation shall at all times be the sole entity that may authorize developers, suppliers and sellers of hardware and software to use certification marks, trademarks or other special designations to indicate compliance with these materials. Products developed using this specification may claim compliance or conformance with this specification if and only if the software satisfactorily meets the certification requirements set by the OPC Foundation. Products that do not meet these requirements may claim only that the product was based on this specification and must not claim compliance or conformance with this specification.  </P
><P 

>TRADEMARKS </P
><P 

>Most computer and software brand names have trademarks or registered trademarks. The individual trademarks have not been listed here. </P
><P 

>GENERAL PROVISIONS </P
><P 

>Should any provision of this Agreement be held to be void, invalid, unenforceable or illegal by a court, the validity and enforceability of the other provisions shall not be affected thereby.  </P
><P 

>This Agreement shall be governed by and construed under the laws of the State of Minnesota, excluding its choice or law rules. </P
><P 

>This Agreement embodies the entire understanding between the parties with respect to, and supersedes any prior understanding or agreement (oral or written) relating to, this specification.  </P
><P 

>ISSUE REPORTING </P
><P 

>The OPC Foundation strives to maintain the highest quality standards for its published specifications, hence they undergo constant review and refinement. Readers are encouraged to report any issues and view any existing errata here: <FONT size="+1">H<A href="http://www.opcfoundation.org/errata">
TU<FONT size="+1">http://www.opcfoundation.org/errata<FONT size="+1">UT</A>
H </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Revision 1.03 Highlights </P
><P 

></B>The following table includes the Mantis issues resolved with this revision.  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Mantis ID </P
></TH
><TH 
 valign="top"
><P 

>Summary </P
></TH
><TH 
 valign="top"
><P 

>Resolution </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Synchronization with IEC version </P
></TD
><TD  
 valign="top"
><P 

>The IEC version Ed2 of part 4 was used as base for this revision. All related changes are only formal and non-technical changes.<FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=1731">
<FONT size="+1" color="#0000FF">1731</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Use of renewed SecurityToken for SecureChannel<FONT size="+1"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Made it mandatory to use a new SecurityToken in the server the first time after the client used it for a request message. <FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2107">
<FONT size="+1" color="#0000FF">2107</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Modify Subscription and MonitoredItem<FONT size="+1"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Clarified that changes are applied directly and will take effect as soon as practical but not later than twice the new time interval.<FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2168">
<FONT size="+1" color="#0000FF">2168</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Error handling HistoryRead for unsupported operations </P
></TD
><TD  
 valign="top"
><P 

>Added Bad_HistoryOperationUnsupported to list of possible operation level status codes </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2189">
<FONT color="#0000FF">2189</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Clarifications for Publish handling </P
></TD
><TD  
 valign="top"
><P 

>Clarified status code for Publish responses if last Subscription is deleted and added clarification that timeoutHint handling is not optional for Publish. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2198">
<FONT color="#0000FF">2198</A>
<FONT size="+1"> </P
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2198">
<FONT size="+1">2617</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Interoperability enhancements for certificate exchange </P
></TD
><TD  
 valign="top"
><P 

>Added backwared compatibility hints for certificate exchange at CreateSession if SecurityPolicy is None. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2241">
<FONT color="#0000FF">2241</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Clarification for EventFilter error handling </P
></TD
><TD  
 valign="top"
><P 

>Clarified that some Servers may not know all possible EventTypes at the time the filter is set and do not return errors for unknown types and browse paths. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2256">
<FONT color="#0000FF">2256</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">EncryptionAlgorithm selection </P
></TD
><TD  
 valign="top"
><P 

>Added table that describes the dependencies for selecting the EncryptionAlgorithm for the UserNameIdentityToken </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2258">
<FONT color="#0000FF">2258</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Default data encoding names </P
></TD
><TD  
 valign="top"
><P 

>Changed default encoding names to Default Binary and Default XML with spaces to match Part 3 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2260">
<FONT color="#0000FF">2260</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Security of OpenSecureChannel messges </P
></TD
><TD  
 valign="top"
><P 

>Added clarification that required security is only applied if SecurityPolicy is not None </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2315">
<FONT color="#0000FF">2315</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Added security hint for unencrypted password </P
></TD
><TD  
 valign="top"
><P 

>Added security related statement that encrypton of passwords is strongly recommended and no security is provided if password is not encrypted </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2358">
<FONT color="#0000FF">2358</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Case sensitivity of Like operator </P
></TD
><TD  
 valign="top"
><P 

>Clarified that Like operator is case sensitive. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2360">
<FONT color="#0000FF">2360</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">FindServers for redundant servers </P
></TD
><TD  
 valign="top"
><P 

>Added clarification that FindServers returns a record for each server in a non-transparent redundant set </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2363">
<FONT color="#0000FF">2363</A>
<FONT size="+1"> </P
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2677">
<FONT size="+1">2677</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Processing order of operations in Write and Call </P
></TD
><TD  
 valign="top"
><P 

>Added clarification that processing order of operations in Write and Call Services is Server specific and is not defined by OPC UA. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2380">
<FONT color="#0000FF">2380</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Null user token </P
></TD
><TD  
 valign="top"
><P 

>Added clarification that a missing user token in ActivateSession will be mapped to anonymous. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2388">
<FONT color="#0000FF">2388</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Status Bad_NonceInvalid </P
></TD
><TD  
 valign="top"
><P 

>Added clarification in OpenSecureChannel and CreateSession that only the check for the length of nonces is mandatory and that checks for duplicated nonces can only be done in special cases. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2481">
<FONT color="#0000FF">2470</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Bad_UserAccessDenied at HistoryUpdate </P
></TD
><TD  
 valign="top"
><P 

>Added Bad_UserAccessDenied as operation level result for HistoryUpdate </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2481">
<FONT color="#0000FF">2481</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Bad_IndexRangeNoData in CreateMonitoredItems </P
></TD
><TD  
 valign="top"
><P 

>Clarified that Bad_IndexRangeNoData can be returned in CreateMonitoredItems or in Publish </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2484">
<FONT color="#0000FF">2484</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Unused SecureChannel </P
></TD
><TD  
 valign="top"
><P 

>Added a clarification that Servers shall close unused secure channels if they exeed configured limits </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2494">
<FONT color="#0000FF">2494</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Reduced queue size when modifying monitored items </P
></TD
><TD  
 valign="top"
><P 

>Clarified that notifications exceeding the new queue size after ModifyMonitoredItems will be discarded </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2511">
<FONT color="#0000FF">2511</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Clarification for OpenSecureChannel audit events </P
></TD
><TD  
 valign="top"
><P 

>OpenSecureChannel for requestType renew does not create audit event if renew succeeded </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2534">
<FONT color="#0000FF">2534</A>
 </P
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2822">
2822</A>
 </P
></TD
><TD  
 valign="top"
><P 

><FONT color="#000000">Clarifications for certificate validation steps </P
></TD
><TD  
 valign="top"
><P 

>Clarified that trust list check is executed first and fails with unspecific error. If trust list check succeeds, the validation steps are executed for the whole certificate chain and specific errors are provided if they fail. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2582">
<FONT color="#0000FF">2582</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Adjusted AggregateFiler to Part 13 </P
></TD
><TD  
 valign="top"
><P 

>Updated AggregateFilter structure to be in sync with Part 13. </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1"><B>Mantis ID </P
></TH
><TH 
 valign="top"
><P 

>Summary </P
></TH
><TH 
 valign="top"
><P 

>Resolution </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2596">
<FONT size="+1" color="#0000FF"></B>2596</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Status code reserved bits </P
></TD
><TD  
 valign="top"
><P 

>Reserved bit 29 for client API use only. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2608">
<FONT color="#0000FF">2608</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">IndexRange optional in Write </P
></TD
><TD  
 valign="top"
><P 

>Clarified that status code Bad_WriteNotSupported is used if writing IndexRange is not supported for a node. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2639">
<FONT color="#0000FF">2639</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Host name substitution </P
></TD
><TD  
 valign="top"
><P 

>Added clarification that a client is responsible for host name substitution </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2649">
<FONT color="#0000FF">2649</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">New durable Subscription </P
></TD
><TD  
 valign="top"
><P 

>Added concept of a durable Subscription </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2717">
<FONT color="#0000FF">2717</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Definition of status codes </P
></TD
><TD  
 valign="top"
><P 

>Added clarification that only OPC UA defines status codes and companion working groups can request status codes from OPC Foundation. Servers are not allowed to define own status codes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2720">
<FONT color="#0000FF">2720</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Error handling for Call parameters </P
></TD
><TD  
 valign="top"
><P 

>Clarified that inputArgumentResults are only filled if method result is BadInvalidArguments. </P
><P 

>Added new status BadTooManyArguments. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2763">
<FONT color="#0000FF">2763</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">New method ResendData </P
></TD
><TD  
 valign="top"
><P 

>ResendData initiates resending of values of all data monitored items in a Subscription. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2805">
<FONT color="#0000FF">2805</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Continuation point handling for large HistoryRead </P
></TD
><TD  
 valign="top"
><P 

>Added clarification that operations may return empty results with continuation point if not all operations can be procssed in the timeout set by the client. Added also missing BadNoContinuationPoints status available for Browse.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2820">
<FONT color="#0000FF">2820</A>
 </P
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2901">
2901</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">CloseSession of not activated Sessions </P
></TD
><TD  
 valign="top"
><P 

>Clarified that CloseSession is allowed on not activated sessions. </P
><P 

>Added a clarification that Servers shall close not activated sessions if they exeed configured limits. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2880">
<FONT color="#0000FF">2880</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Status codes for Method results </P
></TD
><TD  
 valign="top"
><P 

>Added clarification that different StatusCodes can be reused as Method result for application specific meanings. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2876">
<FONT color="#0000FF">2876</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">New services </P
></TD
><TD  
 valign="top"
><P 

>For network wide discovery the two Services FindServersOnNetwork and RegisterServer2 got added. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2908">
<FONT color="#0000FF">2908</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Added license status codes </P
></TD
><TD  
 valign="top"
><P 

>Added license related status codes to be able to indicate license issue related errors. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2926">
<FONT color="#0000FF">2926</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Software Certificates </P
></TD
><TD  
 valign="top"
><P 

>Removed definitions for Software Certificates. Details on SoftwareCertificates need to be defined in a future version. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2931">
<FONT color="#0000FF">2931</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Revised Redundancy </P
></TD
><TD  
 valign="top"
><P 

>Extended description of redundancy definition to be more precise. Added sub-range definitions for ServiceLevel and added more terms for redundancy. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2953">
<FONT color="#0000FF">2953</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Call Service objectId </P
></TD
><TD  
 valign="top"
><P 

>Revised objectId parameter to be insync with a previous change to the description of methodId to allow use of methodIds of Methods from ObjectTypes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2966">
<FONT color="#0000FF">2966</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Bad_SecurityModeInsufficient  </P
></TD
><TD  
 valign="top"
><P 

>Added new status code Bad_SecurityModeInsufficient to distinguish between access error because of user rights or because of insufficient security settings on SecureChannel. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://www.opcfoundation.org/mantis/view.php?id=2980">
<FONT color="#0000FF">2980</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">Clarification for SubscriptionIds </P
></TD
><TD  
 valign="top"
><P 

>Added clarification that SubscriptionIds should start from random values after Server start. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

> </P
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><P 

><FONT size="+1"><B>OPC Unified Architecture Specification </P
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><DIV class="Sect" 

><P 

></P
><P 

></P
></DIV
><P 

><FONT size="+1"></B> </P
><P 

><FONT size="+1"><B>Part 4: Services </P
><P 

> </P
><P 

> </P
><P 

> </P
><H1 
 ID="LinkTarget_7659"
><FONT size="+1">1 Scope </H1
><P 

><FONT size="+1"></B>This specification defines the OPC Unified Architecture (OPC UA) <I>Services</I>. The <I>Services</I> described are the collection of abstract Remote Procedure Calls (RPC) that are implemented by OPC UA <I>Servers</I> and called by OPC UA <I>Clients</I>. All interactions between OPC UA <I>Clients</I> and <I>Servers</I> occur via these <I>Services</I>. The defined <I>Services</I> are considered abstract because no particular RPC mechanism for implementation is defined in this part. <A href="#LinkTarget_7686" href="#">
Part 6</A>
 specifies one or more concrete mappings supported for implementation. For example, one mapping in <A href="#LinkTarget_7686" href="#">
Part 6</A>
 is to XML Web Services. In that case the <I>Services</I> described in this part appear as the Web service methods in the WSDL contract. </P
><P 

>Not all OPC UA <I>Servers</I> will need to implement all of the defined <I>Services</I>. <A href="#LinkTarget_7688" href="#">
Part 7</A>
 defines the <I>Profiles</I> that dictate which Services need to be implemented in order to be compliant with a particular <I>Profile</I>. </P
><H1 
 ID="LinkTarget_7676"
><FONT size="+1"><B>2 Normative references </H1
><P 

><FONT size="+1"></B>The following documents, in whole or in part, are normatively referenced in this document and are indispensable for its application. </P
><P 

>Part 1: OPC UA Specification: Part 1 &ndash; Concepts </P
><P 

>http://www.opcfoundation.org/UA/Part1/ </P
><P 

>Part 2: OPC UA Specification: Part 2 &ndash; Security Model </P
><P 

>http://www.opcfoundation.org/UA/Part2/ </P
><P 

>Part 3: OPC UA Specification: Part 3 &ndash; Address Space Model </P
><P 

>http://www.opcfoundation.org/UA/Part3/ </P
><P 

>Part 5: OPC UA Specification: Part 5 &ndash; Information Model </P
><P 

>http://www.opcfoundation.org/UA/Part5/ </P
><P 

>Part 6: OPC UA Specification: Part 6 &ndash; Mappings </P
><P 

>http://www.opcfoundation.org/UA/Part6/ </P
><P 

>Part 7: OPC UA Specification: Part 7 &ndash; Profiles </P
><P 

>http://www.opcfoundation.org/UA/Part7/ </P
><P 

>Part 8: OPC UA Specification: Part 8 &ndash; Data Access </P
><P 

>http://www.opcfoundation.org/UA/Part8/ </P
><P 

>Part 11: OPC UA Specification: Part 11 &ndash; Historical Access </P
><P 

>http://www.opcfoundation.org/UA/Part11/ </P
><P 

>Part 12: OPC UA Specification: Part 12 &ndash; Discovery </P
><P 

>http://www.opcfoundation.org/UA/Part12/ </P
><P 

>Part 13: OPC UA Specification: Part 13 &ndash; Aggregates </P
><P 

>http://www.opcfoundation.org/UA/Part13/ </P
><H1 
 ID="LinkTarget_7698"
><FONT size="+1"><B>3 Terms, definitions and conventions </H1
><H2 
 ID="LinkTarget_7700"
><FONT size="+1">3.1 Terms and definitions </H2
><P 

></B>For the purposes of this document, the terms and definitions given in <A href="#LinkTarget_7678" href="#">
Part 1</A>
, <A href="#LinkTarget_7680" href="#">
Part 2</A>
, and <A href="#LinkTarget_7682" href="#">
Part 3</A>
, as well as the following apply. </P
><DL 

><DL 

><DL 

><DD 

><B>  </DD
></DL
></DL
></DL
><P 

>Active Server </P
><P 

></B><I>Server </I>which is currently sourcing information </P
><P 

><FONT size="+1">Note 1 to entry: In OPC UA redundant systems, an active <I>Server</I> is the <I>Server</I> that a <I>Client</I> is using as the source of data. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Deadband </P
><P 

></B>permitted range for value changes that will not trigger a data change <I>Notification</I> </P
><P 

><FONT size="+1">Note 1 to entry: <I>Deadband</I> can be applied as a filter when subscribing to <I>Variables</I> and is used to keep noisy signals from updating the <I>Client</I> unnecessarily. This standard defines <I>AbsoluteDeadband</I> as a common filter. <A href="#LinkTarget_7690" href="#">
Part 8</A>
 defines an additional<I> Deadband </I>filter. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Endpoint </P
><P 

></B>physical address available on a network that allows <I>Clients</I> to access one or more <I>Services</I> provided by a <I>Server</I> </P
><P 

><FONT size="+1">Note 1 to entry: Each <I>Server</I> may have multiple <I>Endpoints</I>. The address of an <I>Endpoint</I> must include a <I>HostName</I>. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Failed Server </P
><P 

></B><I>Server </I>that is not operational. </P
><P 

><FONT size="+1">Note 1 to entry: In OPC UA redundant system, a failed <I>Server </I>is a server that is unavailable or is not able to serve data. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Failover </P
><P 

></B>act of switching the source or target of information. </P
><P 

><FONT size="+1">Note 1 to entry: In OPC UA redundant systems, a failover is the act of a <I>Client </I>switching away from a failed or degraded Server to another Server in the reduntant set (Server failover). In some cases a <I>Client </I>may have no knowledge of a failover action occuring (transparent redundancy). The act of an alternate <I>Client </I>replacing an existing failed or degraded <I>Client </I>connection to a <I>Server</I> (<I>Client </I>failover). </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Gateway Server </P
><P 

></B><I>Server</I> that acts as an intermediary for one or more <I>Servers</I> </P
><P 

><FONT size="+1">Note 1 to entry: <I>Gateway Servers</I> may be deployed to limit external access, provide protocol conversion or to provide features that the underlying <I>Servers</I> do not support. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Hostname </P
><P 

></B>unique identifier for a machine on a network </P
><P 

><FONT size="+1">Note 1 to entry: This identifier shall be unique within a local network; however, it may also be globally unique. The identifier can be an IP address. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Security Token </P
><P 

></B>identifier for a cryptographic key set </P
><P 

><FONT size="+1">Note 1 to entry: All <I>Security Tokens</I> belong to a security context. For OPC UA the security context is the <I>SecureChannel</I>. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>SoftwareCertificate </P
><P 

></B>digital certificate for a software product that can be installed on several hosts to describe the capabilities of the software product </P
><P 

><FONT size="+1">Note 1 to entry: Different installations of one software product could have the same software certificate. Software certificates are not relevant for security. They are used to identify a software product and its supported features. SoftwareCertificates are described in <A href="#LinkTarget_20078" href="#">
6.2</A>
. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Redundancy </P
><P 

></B>the presence of duplicate components enabling the continued operation after a failure of an OPC UA component </P
><P 

><FONT size="+1">Note 1 This may apply to <I>Server</I>s, <I>Clients </I>or networks. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>  </DD
></DL
></DL
></DL
><P 

>Redundant Server Set </P
><P 

></B>two or more <I>Servers</I> that are redundant with each other </P
><P 

><FONT size="+1">Note 1 A redundant server set is a group of <I>Servers</I> that are configured to provide <I>Redundancy</I>. These <I>Servers</I> have requirements related to the address space and provide failovers. </P
><H2 
 ID="LinkTarget_7814"
><FONT size="+1"><B>3.2 Abbreviations and symbols </H2
><P 

></B>API Application Programming Interface </P
><P 

>BNF Backus-Naur Form </P
><P 

>CA Certificate Authority </P
><P 

>CRL Certificate Revocation List </P
><P 

>CTL Certificate Trust List </P
><P 

>DA Data Access </P
><P 

>NAT Network Address Translation </P
><P 

>UA Unified Architecture </P
><P 

>URI Uniform Resource Identifier </P
><P 

>URL Uniform Resource Locator </P
><H2 
 ID="LinkTarget_7825"
><B>3.3 Conventions for Service definitions </H2
><P 

></B>OPC UA <I>Services</I> contain parameters that are conveyed between the <I>Client</I> and the <I>Server</I>. The OPC UA <I>Service</I> specifications use tables to describe <I>Service</I> parameters, as shown in <A href="#LinkTarget_7832" href="#">
Table 1</A>
. Parameters are organised in this table into request parameters and response parameters. </P
><P 

><B>Table 1 &ndash; Service Definition Table </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

>Defines the request parameters of the <I>Service</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Simple Parameter Name </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Description of this parameter </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Constructed Parameter Name </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Description of the constructed parameter </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  Component Parameter Name </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Description of the component parameter </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

>Defines the response parameters of the <I>Service</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The Name, Type and Description columns contain the name, data type and description of each parameter. All parameters are mandatory, although some may be unused under certain circumstances. The Description column specifies the value to be supplied when a parameter is unused. </P
><P 

>Two types of parameters are defined in these tables, simple and constructed. Simple parameters have a simple data type, such as <I>Boolean</I> or <I>String</I>. </P
><P 

>Constructed parameters are composed of two or more component parameters, which can be simple or constructed. Component parameter names are indented below the constructed parameter name. </P
><P 

>The data types used in these tables may be base types, common types to multiple <I>Services</I> or <I>Service</I>-specific types. Base data types are defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. The base types used in <I>Services</I> are </P
><P 

>listed in <A href="#LinkTarget_7921" href="#">
Table 2</A>
. Data types that are common to multiple <I>Services</I> are defined in Clause <A href="#LinkTarget_20937" href="#">
7</A>
. Data types that are <I>Service</I>-specific are defined in the parameter table of the <I>Service</I>. </P
><P 

><B>Table 2 &ndash; Parameter Types defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
 </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Parameter Type  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BaseDataType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Boolean </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ByteString </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Double </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Duration </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Guid </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LocaleId </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodeId </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>String </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt16 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInteger </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UtcTime </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>XmlElement </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

>The parameters of the Request and Indication service primitives are represented in <A href="#LinkTarget_7832" href="#">
Table 1</A>
 as Request parameters. Likewise, the parameters of the Response and Confirmation service primitives are represented in <A href="#LinkTarget_7832" href="#">
Table 1</A>
 as Response parameters. All request and response parameters are conveyed between the sender and receiver without change. Therefore, separate columns for request, indication, response and confirmation parameter values are not needed and have been intentionally omitted to improve readability. </P
><H1 
 ID="LinkTarget_8006"
><FONT size="+1"><B>4 Overview </H1
><H2 
 ID="LinkTarget_8007"
><FONT size="+1">4.1 Service Set model </H2
><P 

></B>This clause specifies the OPC UA <I>Services</I>. The OPC UA <I>Service</I> definitions are abstract descriptions and do not represent a specification for implementation. The mapping between the abstract descriptions and the <I>Communication</I> <I>Stack</I> derived from these <I>Services</I> are defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. In the case of an implementation as web services, the OPC UA <I>Services</I> correspond to the web service and an OPC UA <I>Service</I> corresponds to an operation of the web service. </P
><P 

>These <I>Services</I> are organised into <I>Service</I> <I>Sets</I>. Each <I>Service</I> <I>Set</I> defines a set of related <I>Services</I>. The organisation in <I>Service</I> <I>Sets</I> is a logical grouping used in this standard and is not used in the implementation. </P
><P 

>The <I>Discovery</I> <I>Service</I> <I>Set</I>, illustrated in <A href="#LinkTarget_8024" href="#">
Figure 1</A>
, defines <I>Services</I> that allow a <I>Client</I> to discover the <I>Endpoints</I> implemented by a <I>Server</I> and to read the security configuration for each of those <I>Endpoints</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Server Discovery Services Server Description Endpoint Description </DIV
></P
><P 

><B>Figure 1 &ndash; Discovery Service Set </P
><P 

></B>The <I>SecureChannel</I> <I>Service</I> <I>Set</I>, illustrated in <A href="#LinkTarget_8032" href="#">
Figure 2</A>
, defines <I>Services</I> that allow a <I>Client</I> to establish a communication channel to ensure the <I>Confidentiality</I> and <I>Integrity</I> of <I>Messages</I> exchanged with the <I>Server</I>. </P
><P 

>  <DIV class="Sect" 
 Alt=""
> Server SecureChannel services Security Policy Security Token </DIV
></P
><P 

><B>Figure 2 &ndash; SecureChannel Service Set </P
><P 

></B>The <I>Session</I> <I>Service</I> <I>Set</I>, illustrated in <A href="#LinkTarget_8043" href="#">
Figure 3</A>
, defines <I>Services</I> that allow the <I>Client</I> to authenticate the user on whose behalf it is acting and to manage <I>Sessions</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Server Session  services Session </DIV
></P
><P 

><B>Figure 3 &ndash; Session Service Set </P
><P 

></B>The <I>NodeManagement</I> <I>Service</I> <I>Set</I>, illustrated in <A href="#LinkTarget_8053" href="#">
Figure 4</A>
, defines <I>Services</I> that allow the <I>Client</I> to add, modify and delete <I>Nodes</I> in the <I>AddressSpace</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> OPC UA Server  NodeManagement services OPC UA AddressSpace Node Node Node Node Node Node Node Node Node </DIV
></P
><P 

><B>Figure 4 &ndash; NodeManagement Service Set </P
><P 

></B>The <I>View</I> <I>Service</I> <I>Set</I>, illustrated in <A href="#LinkTarget_8063" href="#">
Figure 5</A>
, defines <I>Services</I> that allow <I>Clients</I> to browse through the <I>AddressSpace</I> or subsets of the <I>AddressSpace</I> called <I>Views</I>. The <I>Query Service</I> <I>Set</I> allows <I>Clients</I> to get a subset of data from the <I>AddressSpace</I> or the <I>View</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> OPC UA AddressSpace OPC UA Server  View  services Node Node Node Node Node Node Node Node Node View Query services </DIV
></P
><P 

><B>Figure 5 &ndash; View Service Set </P
><P 

></B>The <I>Attribute</I> <I>Service</I> <I>Set</I> is illustrated in <A href="#LinkTarget_8074" href="#">
Figure 6</A>
. It defines <I>Services</I> that allow <I>Clients</I> to read and write <I>Attributes</I> of <I>Nodes</I>, including their historical values. Since the value of a <I>Variable</I> is modelled as an <I>Attribute</I>, these <I>Services</I> allow <I>Clients</I> to read and write the values of <I>Variables</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> OPC UA Server  OPC UA AddressSpace Object Other Node Types  Attributes   ___  ___ Attribute services  Attributes   ___  ___  Variables  Attributes   ___  ___ </DIV
></P
><P 

><B>Figure 6 &ndash; Attribute Service Set </P
><P 

></B>The <I>Method</I> <I>Service</I> <I>Set</I> is illustrated in <A href="#LinkTarget_8084" href="#">
Figure 7</A>
. It defines <I>Services</I> that allow <I>Clients</I> to call methods. Methods run to completion when called. They may be called with method-specific input parameters and may return method-specific output parameters. </P
><P 

> <DIV class="Sect" 
 Alt=""
> OPC UA Server  OPC UA Address Space Call service  Variables   ___  ___  Methods   ___()  ___() Object Node </DIV
></P
><P 

><B>Figure 7 &ndash; Method Service Set </P
><P 

></B>The <I>MonitoredItem</I> <I>Service</I> <I>Set</I> and the <I>Subscription</I> <I>Service</I> <I>Set</I>, illustrated in <A href="#LinkTarget_8098" href="#">
Figure 8</A>
, are used together to subscribe to <I>Nodes</I> in the OPC UA <I>AddressSpace</I>. </P
><P 

>The <I>MonitoredItem</I> <I>Service</I> <I>Set</I> defines <I>Services</I> that allow <I>Clients</I> to create, modify, and delete <I>MonitoredItems</I> used to monitor <I>Attribut</I>es for value changes and <I>Objects</I> for<I> Events</I>. </P
><P 

>These <I>Notifications</I> are queued for transfer to the <I>Client</I> by <I>Subscriptions</I>. </P
><P 

>The <I>Subscription</I> <I>Service</I> <I>Set</I> defines <I>Services</I> that allow <I>Clients</I> to create, modify and delete <I>Subscriptions</I>. <I>Subscriptions</I> send <I>Notifications</I> generated by <I>MonitoredItems</I> to the <I>Client</I>. <I>Subscription</I> <I>Services</I> also provide for <I>Client</I> recovery from missed <I>Messages</I> and communication failures. </P
><P 

> <DIV class="Sect" 
 Alt=""
> OPC UA Server  Subscription  services MonitoredItem  services   Monitored  Item Subscription Node Attributes   ___  ___ OPC UA AddressSpace Events </DIV
></P
><P 

><B>Figure 8 &ndash; MonitoredItem and Subscription Service Sets </P
><H2 
 ID="LinkTarget_8101"
>4.2 Request/response Service procedures </H2
><P 

></B>Request/response <I>Service</I> procedures describe the processing of requests received by the <I>Server</I>, and the subsequent return of responses. The procedures begin with the requesting <I>Client</I> submitting a <I>Service</I> request <I>Message</I> to the <I>Server</I>. </P
><P 

>Upon receipt of the request, the <I>Server</I> processes the <I>Message</I> in two steps. In the first step, it attempts to decode and locate the <I>Service</I> to execute. The error handling for this step is specific to the communication technology used and is described in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><P 

>If it succeeds, then it attempts to access each operation identified in the request and perform the requested operation. For each operation in the request, it generates a separate success/failure code that it includes in a positive response <I>Message</I> along with any data that is to be returned. </P
><P 

>To perform these operations, both the <I>Client</I> and the <I>Server</I> may make use of the API of a <I>Communication</I> <I>Stack</I> to construct and interpret <I>Messages</I> and to access the requested operation. </P
><P 

>The implementation of each service request or response handling shall check that each service parameter lies within the specified range for that parameter. </P
><H1 
 ID="LinkTarget_8112"
><FONT size="+1"><B>5 Service Sets </H1
><H2 
 ID="LinkTarget_8113"
><FONT size="+1">5.1 General </H2
><P 

></B>This clause defines the OPC UA <I>Service</I> <I>Sets</I> and their <I>Services</I>. Clause <A href="#LinkTarget_20937" href="#">
7</A>
 contains the definitions of common parameters used by these <I>Services</I>. Clause <A href="#LinkTarget_20078" href="#">
6.2</A>
 describes auditing requirements for all services. </P
><P 

>Whether or not a <I>Server</I> supports a <I>Service</I> <I>Set</I>, or a <I>Service</I> within a <I>Service</I> <I>Set</I>, is defined by its <I>Profile</I>. <I>Profiles</I> are described in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. </P
><H2 
 ID="LinkTarget_8130"
><B>5.2 Service request and response header </H2
><P 

></B>Each <I>Service</I> request has a <I>RequestHeader</I> and each <I>Service</I> response has a <I>ResponseHeader</I>. </P
><P 

>The <I>RequestHeader</I> structure is defined in <A href="#LinkTarget_27119" href="#">
7.28</A>
 and contains common request parameters such as <I>authenticationToken</I>, <I>timestamp</I> and <I>requestHandle</I>. </P
><P 

>The <I>ResponseHeader</I> structure is defined in <A href="#LinkTarget_27245" href="#">
7.29</A>
 and contains common response parameters such as <I>serviceResult</I> and <I>diagnosticInfo</I>. </P
><H2 
 ID="LinkTarget_8145"
><B>5.3 Service results </H2
><P 

></B><I>Service</I> results are returned at two levels in OPC UA responses, one that indicates the status of the <I>Service</I> call, and the other that indicates the status of each operation requested by the <I>Service</I>. </P
><P 

><I>Service</I> results are defined via the <I>StatusCode</I> (see <A href="#LinkTarget_27514" href="#">
7.34</A>
). </P
><P 

>The status of the <I>Service</I> call is represented by the <I>serviceResult</I> contained in the <I>ResponseHeader</I> (see <A href="#LinkTarget_27245" href="#">
7.29</A>
). The mechanism for returning this parameter is specific to the communication technology used to convey the <I>Service</I> response and is defined in  <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><P 

>The status of individual operations in a request is represented by individual <I>StatusCode</I>s. </P
><P 

>The following cases define the use of these parameters. </P
><DL 

><DD 

>a) A bad code is returned in <I>serviceResult</I> if the <I>Service</I> itself failed. In this case, a <I>ServiceFault</I> is returned. The <I>ServiceFault</I> is defined in <A href="#LinkTarget_27337" href="#">
7.30</A>
. </DD
><DD 

>b) The good code is returned in <I>serviceResult</I> if the <I>Service</I> fully or partially succeeded. In this case, other response parameters are returned. The <I>Client</I> shall always check the response parameters, especially all <I>StatusCodes</I> associated with each operation. These <I>StatusCodes</I> may indicate bad or uncertain results for one or more operations requested in the <I>Service</I> call. </DD
></DL
><P 

>All <I>Services</I> with arrays of operations in the request shall return a bad code in the <I>serviceResult</I> if the array is empty. </P
><P 

>The <I>Services</I> define various specific <I>StatusCodes</I> and a <I>Server</I> shall use these specific <I>StatusCodes</I> as described in the <I>Service</I>. A <I>Client</I> should be able to handle these <I>Service</I> specific <I>StatusCodes</I>. In addition, a <I>Client</I> shall expect other common <I>StatusCodes </I>defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
 and <A href="#LinkTarget_28238" href="#">
Table 173</A>
. Additional details for <I>Client</I> handling of specific <I>StatusCodes</I> may be defined in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. </P
><P 

>If the <I>Server</I> discovers, through some out-of-band mechanism that the application or user credentials used to create a <I>Session</I> or <I>SecureChannel</I> have been compromised, then the <I>Server</I> should immediately terminate all sessions and channels that use those credentials. In this case, the <I>Service</I> result code should be either <I>Bad</I>_<I>IdentityTokenRejected</I> or <I>Bad</I>_<I>CertificateUntrusted</I>. </P
><P 

>Message parsing can fail due to syntax errors or if data contained within the message exceeds ranges supported by the receiver. When this happens messages shall be rejected by the receiver. If the receiver is a <I>Server</I> then it shall return a <I>ServiceFault</I> with result code of <I>Bad</I>_<I>DecodingError</I> or <I>Bad</I>_<I>EncodingLimitsExceeded</I>. If the receiver is the <I>Client</I> then the <I>Communication Stack</I> should report these errors to the <I>Client</I> application. </P
><P 

>Many applications will place limits on the size of messages and/or data elements contained within these messages. For example, a <I>Server</I> may reject requests containing string values longer than a certain length. These limits are typically set by administrators and apply to all connections between a <I>Client</I> and a <I>Server</I>. </P
><P 

><I>Clients</I> that receive <I>Bad</I>_<I>EncodingLimitsExceeded </I>faults from the <I>Server</I> will likely have to reformulate their requests. The administrator may need to increase the limits for the <I>Client</I> if it receives a response from the <I>Server</I> with this fault. </P
><P 

>In some cases, parsing errors are fatal and it is not possible to return a fault. For example, the incoming message could exceed the buffer capacity of the receiver. In these cases, these errors may be treated as a communication fault which requires the <I>SecureChannel</I> to be re-established (see <A href="#LinkTarget_9167" href="#">
5.5</A>
). </P
><P 

>The <I>Client</I> and <I>Server</I> reduce the chances of a fatal error by exchanging their message size limits in the <I>CreateSession</I> service. This will allow either party to avoid sending a message that causes a communication fault. The <I>Server</I> should return a <I>Bad</I>_<I>ResponseTooLarge </I>fault if a serialized </P
><P 

>response message exceeds the message size specified by the <I>Client</I>. Similarly, the <I>Client</I> <I>Communication Stack</I> should report a <I>Bad</I>_<I>RequestTooLarge</I> error to the application before sending a message that exceeds the <I>Server&rsquo;s</I> limit. </P
><P 

>Note that the message size limits only apply to the raw message body and do not include headers or the effect of applying any security. This means that a message body that is smaller than the specified maximum could still cause a fatal error. </P
><H2 
 ID="LinkTarget_8204"
><B>5.4 Discovery Service Set </H2
><H3 
 ID="LinkTarget_8205"
> Overview </H3
><P 

></B>This <I>Service</I> <I>Set</I> defines <I>Services</I> used to discover the <I>Endpoints</I> implemented by a <I>Server</I> and to read the security configuration for those <I>Endpoints</I>. The <I>Discovery</I> <I>Services</I> are implemented by individual <I>Servers</I> and by dedicated <I>Discovery</I> <I>Servers</I>. <A href="#LinkTarget_7694" href="#">
Part 12</A>
 describes how to use the <I>Discovery</I> <I>Services </I>with dedicated<I> Discovery</I> <I>Servers.</I> </P
><P 

>Every <I>Server</I> shall have a <I>Discovery</I> <I>Endpoint</I> that <I>Clients</I> can access without establishing a <I>Session</I>. This <I>Endpoint</I> may or may not be the same <I>Session</I> <I>Endpoint</I> that <I>Clients</I> use to establish a <I>SecureChannel</I>. Clients read the security information necessary to establish a <I>SecureChannel</I> by calling the <I>GetEndpoints</I> <I>Service</I> on the <I>Discovery</I> <I>Endpoint</I>. </P
><P 

>In addition, <I>Servers</I> may register themselves with a well known <I>Discovery</I> <I>Server</I> using the <I>RegisterServer</I> Service. Clients can later discover any registered <I>Servers</I> by calling the <I>FindServers</I> <I>Service</I> on the <I>Discovery</I> <I>Server</I>. </P
><P 

>The discovery process using <I>FindServers</I> is illustrated in <A href="#LinkTarget_8223" href="#">
Figure 9</A>
. The establishment of a <I>SecureChannel</I> for <I>FindServers</I> and <I>GetEndpoints</I> is not contained in the figure. </P
><P 

> <DIV class="Sect" 
 Alt=""
>GetEndpoints()OpenSecureChannel()ClientServerEndpointDescription[]DiscoveryEndpointSessionEndpointDiscoveryServerFindServers()ServerDescription[]RegisterServer()DiscoveryEndpointRegistrationEndpoint</DIV
></P
><P 

><B>Figure 9 &ndash; Discovery process </P
><P 

></B>The URL for a <I>Discovery Endpoint </I>shall provide all of the information that the <I>Client</I> needs to connect to the<I> Discovery</I> <I>Endpoint</I>. </P
><P 

>Once a <I>Client</I> retrieves the <I>Endpoints</I>, the C<I>lient </I>can save this information and use it to connect directly to the <I>Server</I> again without going through the discovery process. If the <I>Client</I> finds that it cannot connect then the <I>Server</I> configuration may have changed and the <I>Client</I> needs to go through the discovery process again. </P
><P 

><I>Discovery</I> <I>Endpoints</I> shall not require any message security, but it may require transport layer security. In production systems, Administrators may disable discovery for security reasons and <I>Clients</I> shall rely on cached <I>EndpointDescriptions</I>. To provide support for systems with disabled <I>Discovery</I> <I>Services</I> <I>Clients</I> shall allow <I>Administrators</I> to manually update the <I>EndpointDescriptions</I> used to connect to a <I>Server</I>. <I>Servers</I> shall allow <I>Administrators</I> to disable the <I>Discovery</I> <I>Endpoint</I>. </P
><P 

>A <I>Client</I> shall be careful when using the information returned from a <I>Discovery</I> <I>Endpoint</I> since it has no security. A <I>Client</I> does this by comparing the information returned from the <I>Discovery</I> <I>Endpoint</I> to the information returned in the <I>CreateSession</I> response. A <I>Client</I> shall verify that: </P
><DL 

><DD 

>a) The <I>ApplicationUri</I> specified in the <I>Server Certificate</I> is the same as the ApplicationUri provided in the <I>EndpointDescription.</I> </DD
><DD 

>b) The <I>Server</I> <I>Certificate</I> returned in <I>CreateSession</I> response is the same as the <I>Certificate</I> used to create the <I>SecureChannel</I>. </DD
><DD 

>c) The <I>EndpointDescriptions</I> returned from the <I>Discovery</I> <I>Endpoint</I> are the same as the <I>EndpointDescriptions</I> returned in the <I>CreateSession</I> response. </DD
></DL
><P 

>If the <I>Client</I> detects that one of the above requirements is not fulfilled, then the <I>Client</I> shall close the <I>SecureChannel</I> and report an error. </P
><P 

>A <I>Client</I> shall verify the <I>HostName</I> specified in the <I>Server Certificate</I> is the same as the <I>HostName</I> contained in the <I>endpointUrl</I> provided in the <I>EndpointDescription</I> returned by <I>CreateSession</I>. If there is a difference then the <I>Client</I> shall report the difference and may close the <I>SecureChannel</I>. <I>Servers</I> shall add all possible <I>HostNames</I> like MyHost and MyHost.local into the <I>Server Certificate</I>. This includes IP addresses of the host or the <I>HostName</I> exposed by a NAT router used to connect to the <I>Server</I>.  </P
><H3 
 ID="LinkTarget_8238"
><B> FindServers </H3
><H4 
 ID="LinkTarget_8239"
>5.4.2.1 Description </H4
><P 

></B>This <I>Service</I> returns the <I>Servers</I> known to a<I> Server</I> or <I>Discovery Server</I>. The behaviour of <I>Discovery Servers </I>is described in detail in <A href="#LinkTarget_7694" href="#">
Part 12</A>
.  </P
><P 

>The <I>Client</I> may reduce the number of results returned by specifying filter criteria. A <I>Discovery Server</I> returns an empty list if no <I>Servers</I> match the criteria specified by the client. The filter criteria supported by this <I>Service</I> are described in <A href="#LinkTarget_8273" href="#">
5.4.2.2</A>
. </P
><P 

>Every <I>Server</I> shall provide a <I>Discovery Endpoint</I> that supports this <I>Service</I>. The <I>Server</I> shall always return a record that describes itself, however in some cases more than one record may be returned. <I>Gateway Servers</I> shall return a record for each <I>Server</I> that they provide access to plus (optionally) a record that allows the <I>Gateway Server</I> to be accessed as an ordinary OPC UA <I>Server</I>. Non-transparent redundant <I>Servers</I> shall provide a record for each <I>Server</I> in the <I>Redundant Server Set</I>. </P
><P 

>Every <I>Server</I> shall have a globally unique identifier called the <I>ServerUri</I>. This identifier should be a fully qualified domain name; however, it may be a GUID or similar construct that ensures global uniqueness. The <I>ServerUri</I> returned by this <I>Service</I> shall be the same value that appears in index 0 of the <I>ServerArray</I> property (see <A href="#LinkTarget_7684" href="#">
Part 5</A>
). The <I>ServerUri</I> is returned as the <I>applicationUri</I> field in the <I>ApplicationDescription</I> (see <A href="#LinkTarget_20938" href="#">
7.1</A>
) </P
><P 

>Every <I>Server</I> shall also have a human readable identifier called the <I>ServerName</I> which is not necessarily globally unique. This identifier may be available in multiple locales. </P
><P 

>A <I>Server</I> may have multiple <I>HostNames</I>. For this reason, the <I>Client</I> shall pass the URL it used to connect to the <I>Endpoint</I> to this <I>Service</I>. The implementation of this <I>Service</I> shall use this information to return responses that are accessible to the <I>Client</I> via the provided URL. </P
><P 

>This <I>Service</I> shall not require message security but it may require transport layer security. </P
><P 

>Some <I>Servers</I> may be accessed via a <I>Gateway Server</I> and shall have a value specified for <I>gatewayServerUri</I> in their <I>ApplicationDescription</I> (see <A href="#LinkTarget_20938" href="#">
7.1</A>
). The <I>discoveryUrls</I> provided in <I>ApplicationDescription</I> shall belong to the <I>Gateway Server.</I> Some <I>Discovery Servers</I> may return multiple records for the same <I>Server</I> if that <I>Server</I> can be accessed via multiple paths. </P
><P 

>This <I>Service</I> can be used without security and it is therefore vulnerable to Denial Of Service (DOS) attacks. A <I>Server</I> should minimize the amount of processing required to send the response for this <I>Service</I>. This can be achieved by preparing the result in advance. The <I>Server</I> should also add a short delay before starting processing of a request during high traffic conditions. </P
><H4 
 ID="LinkTarget_8273"
><B>5.4.2.2 Parameters </H4
><P 

><A href="#LinkTarget_8280" href="#">
</B>Table 3</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 3 &ndash; FindServers Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters. The <I>authenticationToken</I> is always omitted. The <I>authenticationToken</I> shall be ignored if it is provided. </P
><P 

>The type <I>RequestHeader</I> is defined in <A href="#LinkTarget_27119" href="#">
7.28</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> endpointUrl </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The network address that the <I>Client</I> used to access the <I>Discovery</I> <I>Endpoint</I>. </P
><P 

>The <I>Server</I> uses this information for diagnostics and to determine what URLs to return in the response. </P
><P 

>The <I>Server</I> should return a suitable default URL if it does not recognize the <I>HostName</I> in the URL. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> localeIds [] </P
></TD
><TD  
 valign="top"
><P 

>LocaleId </P
></TD
><TD  
 valign="top"
><P 

>List of locales to use. </P
><P 

>The server should return the <I>applicationName</I>in the ApplicationDescription defined in <A href="#LinkTarget_20938" href="#">
7.1</A>
 using one of locales specified. If the server supports more than one of the requested locales then the server shall use the locale that appears first in this list. If the server does not support any of the requested locales it chooses an appropriate default locale. </P
><P 

>The server chooses an appropriate default locale if this list is empty. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverUris [] </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>List of servers to return. </P
><P 

>All known servers are returned if the list is empty. </P
><P 

>A serverUri matches the <I>applicationUri</I> from the <I>Application</I><I>Description</I> defined in <A href="#LinkTarget_20938" href="#">
7.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters. </P
><P 

>The <I>ResponseHeader</I> type is defined in <A href="#LinkTarget_27245" href="#">
7.29</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> servers [] </P
></TD
><TD  
 valign="top"
><P 

>ApplicationDescription </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Servers</I> that meet criteria specified in the request. </P
><P 

>This list is empty if no servers meet the criteria. </P
><P 

>The <I>ApplicationDescription</I> type is defined in <A href="#LinkTarget_20938" href="#">
7.1</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_8399"
><FONT size="+1"><B>5.4.2.3 Service results </H4
><P 

></B>Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><H3 
 ID="LinkTarget_8406"
><B> FindServersOnNetwork </H3
><H4 
 ID="LinkTarget_8407"
>5.4.3.1 Description </H4
><P 

></B>This <I>Service</I> returns the <I>Servers </I>known to a <I>Discovery</I> <I>Server</I>. Unlike <I>FindServer</I>, this <I>Service</I> is only implemented by <I>Discovery</I> <I>Servers</I>. </P
><P 

>The <I>Client</I> may reduce the number of results returned by specifying filter criteria. An empty list is returned if no <I>Server</I> matches the criteria specified by the <I>Client</I>. </P
><P 

>This <I>Service</I> shall not require message security but it may require transport layer security. </P
><P 

>Each time the <I>Discovery</I> <I>Server</I> creates or updates a record in its cache it shall assign a monotonically increasing identifier to the record. This allows <I>Clients</I> to request records in batches by specifying the identifier for the last record received in the last call to <I>FindServersOnNetwork</I>. To support this the <I>Discovery</I> <I>Server</I> shall return records in numerical order starting from the lowest record identifier. The <I>Discovery</I> <I>Server</I> shall also return the last time the counter was reset for example due to a  restart of the <I>Discovery</I> <I>Server. </I>If a <I>Client</I> detects that this time is more recent than the last time the <I>Client</I> called the <I>Service</I> it shall call the Service again with a startingRecordId of 0. </P
><P 

>This <I>Service</I> can be used without security and it is therefore vulnerable to Denial Of Service (DOS) attacks. A <I>Server</I> should minimize the amount of processing required to send the response for this <I>Service</I>. This can be achieved by preparing the result in advance. </P
><H4 
 ID="LinkTarget_8413"
><B>5.4.3.2 Parameters </H4
><P 

><A href="#LinkTarget_8420" href="#">
</B>Table 4</A>
 defines the parameters for the <I>Service</I>.  </P
><P 

><B>Table 4 &ndash; FindServersOnNetwork Service Parameters  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters. The <I>authenticationToken</I> is always omitted. The <I>authenticationToken</I> shall be ignored if it is provided. </P
><P 

>The type <I>RequestHeader</I> is defined in <A href="#LinkTarget_27119" href="#">
7.28</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>startingRecordId </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>Only records with an identifier greater than this number will be returned.  </P
><P 

>Specify 0 to start with the first record in the cache. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>maxRecordsToReturn </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The maximum number of records to return in the response. </P
><P 

>0 indicates that there is no limit. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>serverCapabilityFilter[] </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>List of <I>S</I><I>erver</I> capability filters. The set of allowed server capabilities are defined in <A href="#LinkTarget_7694" href="#">
Part 12</A>
. </P
><P 

>Only records with all of the specified server capabilities are returned. </P
><P 

>The comparison is case insensitive. </P
><P 

>If this list is empty then no filtering is performed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters. </P
><P 

>The <I>ResponseHeader</I> type is defined in <A href="#LinkTarget_27245" href="#">
7.29</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>lastCounterResetTime </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>The last time the counters were reset. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>servers[] </P
></TD
><TD  
 valign="top"
><P 

>ServerOnNetwork </P
></TD
><TD  
 valign="top"
><P 

>List of DNS service records that meet criteria specified in the request. </P
><P 

>This list is empty if no <I>Servers</I> meet the criteria. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> recordId </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A unique identifier for the record. </P
><P 

>This can be used to fetch the next batch of <I>S</I><I>ervers</I> in a subsequent call to <I>FindServersOnNetwork.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The name of the <I>Server</I> specified in the mDNS announcement (see <A href="#LinkTarget_7694" href="#">
Part 12</A>
). </P
><P 

>This may be the same as the <I>ApplicationName</I> for the <I>Server</I>.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> discoveryUrl </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The URL of the discovery <I>Endpoint</I>.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverCapabilities </P
></TD
><TD  
 valign="top"
><P 

>String[] </P
></TD
><TD  
 valign="top"
><P 

>The set of <I>S</I><I>erver</I> capabilities supported by the <I>Server</I>. </P
><P 

>The set of allowed <I>S</I><I>erver</I> capabilities are defined in <A href="#LinkTarget_7694" href="#">
Part 12</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_8579"
><FONT size="+1"><B>5.4.3.3 Service results </H4
><P 

></B>Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><H3 
 ID="LinkTarget_8586"
><B> GetEndpoints </H3
><H4 
 ID="LinkTarget_8587"
>5.4.4.1 Description </H4
><P 

></B>This <I>Service</I> returns the <I>Endpoints</I> supported by a <I>Server</I> and all of the configuration information required to establish a <I>SecureChannel and a Session</I>. </P
><P 

>This <I>Service</I> shall not require message security but it may require transport layer security. </P
><P 

>A <I>Client</I> may reduce the number of results returned by specifying filter criteria based on <I>LocaleIds</I> and <I>Transport</I> <I>Profile</I> URIs. The <I>Server</I> returns an empty list if no <I>Endpoints</I> match the criteria specified by the client. The filter criteria supported by this <I>Service</I> are described in <A href="#LinkTarget_8650" href="#">
5.4.4.2</A>
. </P
><P 

>A <I>Server</I> may support multiple security configurations for the same <I>Endpoint</I>. In this situation, the <I>Server</I> shall return separate <I>EndpointDescription</I> records for each available configuration. <I>Clients</I> should treat each of these configurations as distinct <I>Endpoints</I> even if the physical URL happens to be the same. </P
><P 

>The security configuration for an <I>Endpoint</I> has four components: </P
><P 

>Server Application Instance Certificate </P
><P 

>Message Security Mode </P
><P 

>Security Policy </P
><P 

>Supported User Identity Tokens </P
><P 

>The <I>ApplicationInstanceCertificate</I> is used to secure the <I>OpenSecureChannel</I> request (see <A href="#LinkTarget_9215" href="#">
5.5.2</A>
). The <I>MessageSecurityMode</I> and the <I>SecurityPolicy </I>tell the <I>Client</I> how to secure messages sent via the <I>SecureChannel</I>. The <I>UserIdentityTokens</I> tell the client which type of user credentials shall be passed to the <I>Server</I> in the <I>ActivateSession</I> request (see <A href="#LinkTarget_10341" href="#">
5.6.3</A>
). </P
><P 

>If the <I>securityPolicyUri</I> is NONE and none of the <I>UserTokenPolicies</I> requires encryption, the <I>Client</I> shall ignore the <I>ApplicationInstanceCertificate</I>. </P
><P 

>Each <I>EndpointDescription</I> also specifies a URI for the <I>Transport</I> <I>Profile</I> that the <I>Endpoint</I> supports. The<I> Transport</I> <I>Profiles</I> specify information such as message encoding format and protocol version and are defined in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. <I>Clients</I> shall fetch the <I>Server&rsquo;s</I> <I>SoftwareCertificates</I> if they want to discover the complete list of <I>Profiles</I> supported by the <I>Server</I> (see <A href="#LinkTarget_27415" href="#">
7.32</A>
). </P
><P 

>Messages are secured by applying standard cryptography algorithms to the messages before they are sent over the network. The exact set of algorithms used depends on the <I>SecurityPolicy</I> for the <I>Endpoint</I>. <A href="#LinkTarget_7688" href="#">
Part 7</A>
 defines <I>Profiles</I> for common <I>SecurityPolicies </I>and assigns a unique URI to them. It is expected that applications have built in knowledge of the <I>SecurityPolicies </I>that they support, as a result, only the Profile URI for the <I>SecurityPolicy </I>is specified in the <I>EndpointDescription</I>. A <I>Client</I> cannot connect to an <I>Endpoint</I> that does not support a <I>SecurityPolicy </I>that it recognizes. </P
><P 

>An <I>EndpointDescription</I> may specify that the message security mode is NONE. This configuration is not recommended unless the applications are communicating on a physically isolated network where the risk of intrusion is extremely small. If the message security is NONE then it is possible for <I>Clients</I> to deliberately or accidentally hijack <I>Sessions</I> created by other <I>Clients</I>. </P
><P 

>A <I>Server</I> may have multiple <I>HostNames</I>. For this reason, the <I>Client</I> shall pass the URL it used to connect to the <I>Endpoint</I> to this <I>Service</I>. The implementation of this <I>Service</I> shall use this information to return responses that are accessible to the <I>Client</I> via the provided URL. </P
><P 

>This <I>Service</I> can be used without security and it is therefore vulnerable to Denial Of Service (DOS) attacks. A <I>Server</I> should minimize the amount of processing required to send the response for this <I>Service</I>. This can be achieved by preparing the result in advance. The <I>Server</I> should also add a short delay before starting processing of a request during high traffic conditions. </P
><P 

>Some of the <I>EndpointDescriptions</I> returned in a response shall specify the <I>Endpoint</I> information for a <I>Gateway Server</I> that can be used to access another <I>Server</I>. In these situations, the <I>gatewayServerUri</I> is specified in the <I>EndpointDescription</I> and all security checks used to verify <I>Certificates</I> shall use the <I>gatewayServerUri</I> (see <A href="#LinkTarget_19854" href="#">
6.1.3</A>
) instead of the <I>serverUri</I>. </P
><P 

>To connect to a <I>Server</I> via the gateway the <I>Client</I> shall first establish a <I>SecureChannel</I> with the <I>Gateway Server</I>. Then the <I>Client</I> shall call the <I>CreateSession</I> service and pass the <I>serverUri</I> specified in the <I>EndpointDescription</I> to the <I>Gateway Server</I>. The <I>Gateway Server</I> shall then connect to the underlying <I>Server</I> on behalf of the <I>Client</I>. The process of connecting to a <I>Server</I> via a <I>Gateway Server</I> is illustrated in <A href="#LinkTarget_8649" href="#">
Figure 10</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>GetEndpoints()OpenSecureChannel()ClientServerEndpointDescription[]SessionEndpointGatewayServerDiscoveryEndpointCreateSession()CreateSession()SessionEndpointCreateSecureChannel()</DIV
></P
><P 

><B>Figure 10 &ndash; Using a Gateway Server </P
><H4 
 ID="LinkTarget_8650"
>5.4.4.2 Parameters </H4
><P 

><A href="#LinkTarget_8656" href="#">
</B>Table 5</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 5 &ndash; GetEndpoints Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters.  </P
><P 

>The <I>authenticationToken</I> is always omitted. The <I>authenticationToken</I> shall be ignored if it is provided. </P
><P 

>The type <I>RequestHeader</I> is defined in <A href="#LinkTarget_27119" href="#">
7.28</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> endpointUrl </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The network address that the <I>Client</I> used to access the <I>Discovery</I> <I>Endpoint</I>. </P
><P 

>The <I>Server</I> uses this information for diagnostics and to determine what URLs to return in the response. </P
><P 

>The <I>Server</I> should return a suitable default URL if it does not recognize the <I>HostName</I> in the URL. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> localeIds [] </P
></TD
><TD  
 valign="top"
><P 

>LocaleId </P
></TD
><TD  
 valign="top"
><P 

>List of locales to use. </P
><P 

>Specifies the locale to use when returning human readable strings. </P
><P 

>This parameter is described in <A href="#LinkTarget_8273" href="#">
5.4.2.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> profileUris [] </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Transport</I> <I>Profile</I> that the returned <I>Endpoints</I> shall support. <A href="#LinkTarget_7688" href="#">
Part 7</A>
 defines URIs for the <I>Transport</I> <I>Profiles</I>. </P
><P 

>All <I>Endpoints</I> are returned if the list is empty. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters. </P
><P 

>The <I>ResponseHeader</I> type is defined in <A href="#LinkTarget_27245" href="#">
7.29</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Endpoints [] </P
></TD
><TD  
 valign="top"
><P 

>EndpointDescription </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Endpoints</I> that meet criteria specified in the request. </P
><P 

>This list is empty if no <I>Endpoints</I> meet the criteria. </P
><P 

>The <I>En</I><I>dpointDescription</I> type is defined in <A href="#LinkTarget_23978" href="#">
7.10</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_8774"
><FONT size="+1"><B>5.4.4.3 Service Results </H4
><P 

></B>Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><H3 
 ID="LinkTarget_8781"
><B> RegisterServer </H3
><H4 
 ID="LinkTarget_8782"
>5.4.5.1 Description </H4
><P 

></B>This Service is implemented by <I>Discovery Servers</I>. </P
><P 

>This <I>Service</I> registers a <I>Server</I> with a <I>Discovery</I> <I>Server</I>. This <I>Service</I> will be called by a <I>Server</I> or a separate configuration utility. <I>Clients</I> will not use this <I>Service</I>. </P
><P 

>A <I>Server</I> shall establish a <I>SecureChannel</I> with the <I>Discovery Server</I> before calling this <I>Service</I>. The <I>SecureChannel</I> is described in <A href="#LinkTarget_9167" href="#">
5.5</A>
. The <I>Administrator</I> of the <I>Server</I> shall provide the <I>Server</I> </P
><P 

>with an <I>EndpointDescription</I> for the <I>Discovery Server </I>as part of the configuration process. <I>Discovery Servers</I> shall reject registrations if the <I>serverUri</I> provided does not match the <I>applicationUri</I> in <I>Server Certificate</I> used to create the <I>SecureChannel</I>. </P
><P 

>This <I>Service</I> can only be invoked via <I>SecureChannels</I> that support <I>Client</I> authentication (i.e. HTTPS cannot be used to call this <I>Service</I>). </P
><P 

>A <I>Server</I> only provides its <I>serverUri</I> and the URLs of the <I>Discovery</I> <I>Endpoints</I> to the <I>Discovery</I> <I>Server</I>. <I>Clients</I> shall use the <I>GetEndpoints</I> service to fetch the most up to date configuration information directly from the <I>Server</I>. </P
><P 

>The <I>Server</I> shall provide a localized name for itself in all locales that it supports. </P
><P 

><I>Servers</I> shall be able to register themselves with a <I>Discovery</I> <I>Server</I> running on the same machine. The exact mechanisms depend on the <I>Discovery</I> <I>Server</I> implementation and are described in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><P 

>There are two types of <I>Server</I> applications: those which are manually launched including a start by the operating system at boot and those that are automatically launched when a <I>Client</I> attempts to connect. The registration process that a <I>Server</I> shall use depends on which category it falls into. </P
><P 

>The registration process for manually launched <I>Servers</I> is illustrated in <A href="#LinkTarget_8812" href="#">
Figure 11</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Start Online registrations expire, Servers must register at least once every 10 minutes   Registration  timer expires Administrator Server Discovery Server Client Stop RegisterServer (IsOnline=True) FindServers() ApplicationDescriptions[ ] Remove expired registrations RegisterServer (IsOnline=True) RegisterServer (IsOnline=True) RegisterServer (IsOnline=False) FindServers()  Nothing to find FindServers()  Nothing to find </DIV
></P
><P 

><B>Figure 11 &ndash; The Registration Process &ndash; Manually Launched Servers </P
><P 

></B>The registration process for automatically launched <I>Servers</I> is illustrated in <A href="#LinkTarget_8822" href="#">
Figure 12</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Install Administrator   Server Discovery Server Client Uninstall RegisterServer FindServers() Application Descriptions[ ] The offline registration is deleted when the semaphore file is no longer available A Server may also mark its self off-line by renaming or moving the semaphore file File System Create Semaphor File CheckSemaphor Save registration Delete Semaphor File Check Semaphor File  Check Semaphor  Delete Registration Load  registrations at startup FindServers() </DIV
></P
><P 

><B>Figure 12 &ndash; The Registration Process &ndash; Automatically Launched Servers </P
><P 

></B>The registration process is designed to be platform independent, robust and able to minimize problems created by configuration errors. For that reason, <I>Servers</I> shall register themselves more than once. </P
><P 

>Under normal conditions, manually launched <I>Servers</I> shall periodically register with the <I>Discovery</I> <I>Server</I> as long as they are able to receive connections from <I>Clients</I>. If a <I>Server</I> goes offline then it shall register itself once more and indicate that it is going offline. The registration frequency should be configurable; however, the maximum is 10 minutes. If an error occurs during registration (e.g. the <I>Discovery Server</I> is not running) then the <I>Server</I> shall periodically re-attempt registration. The frequency of these attempts should start at 1 second but gradually increase until the registration frequency is the same as what it would be if no errors occurred. The recommended approach would be to double the period of each attempt until reaching the maximum. </P
><P 

>When an automatically launched <I>Server</I> (or its install program) registers with the <I>Discovery</I> <I>Server</I> it shall provide a path to a semaphore file which the <I>Discovery</I> <I>Server</I> can use to determine if the <I>Server</I> has been uninstalled from the machine. The <I>Discovery</I> <I>Server </I>shall have read access to the file system that contains the file. </P
><H4 
 ID="LinkTarget_8827"
><B>5.4.5.2 Parameters </H4
><P 

><A href="#LinkTarget_8833" href="#">
</B>Table 6</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 6 &ndash; RegisterServer Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters. </P
><P 

>The <I>authenticationToken</I> is always omitted. </P
><P 

>The type <I>RequestHeader</I> is defined in <A href="#LinkTarget_27119" href="#">
7.28</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Server </P
></TD
><TD  
 valign="top"
><P 

>RegisteredServer </P
></TD
><TD  
 valign="top"
><P 

>The server to register. The type <I>Re</I><I>gisteredServer</I> is defined in <A href="#LinkTarget_27001" href="#">
7.27</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters.  </P
><P 

>The type <I>ResponseHeader</I> is defined in <A href="#LinkTarget_27245" href="#">
7.29</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_8911"
><FONT size="+1"><B>5.4.5.3 Service Results </H4
><P 

><A href="#LinkTarget_8921" href="#">
</B>Table 7</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 7 &ndash; RegisterServer Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_InvalidArgument </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServerUriInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServerNameMissing </P
></TD
><TD  
 valign="top"
><P 

>No <I>ServerName</I> was specified.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DiscoveryUrlMissing </P
></TD
><TD  
 valign="top"
><P 

>No discovery URL was specified.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SemaphoreFileMissing </P
></TD
><TD  
 valign="top"
><P 

>The semaphore file specified is not valid. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_8970"
><FONT size="+1"><B> RegisterServer2  </H3
><H4 
 ID="LinkTarget_8971"
>5.4.6.1 Description </H4
><P 

></B>This Service is implemented by <I>Discovery Servers</I>. </P
><P 

>This <I>Service</I> allows a <I>Server</I> to register its <I>DiscoveryUrls</I> and capabilities with a <I>Discovery</I> <I>Server</I>. It extends the registration information from <I>RegisterServer</I> with information necessary for <I>FindServersOnNetwork</I>. This <I>Service</I> will be called by a <I>Server</I> or a separate configuration utility. <I>Clients</I> will not use this <I>Service</I>. </P
><P 

><I>Servers</I> that support <I>RegisterServer2</I> shall try to register with the <I>Discovery Server</I> using this Service and shall fall back to <I>RegisterServer</I> if <I>RegisterServer2</I> fails with the status Bad_ServiceUnsupported. </P
><P 

>A <I>Discovery</I> <I>Server</I> that implements this <I>Service</I> needs to assign unique record ids each time this <I>Service</I> is called. See <A href="#LinkTarget_8406" href="#">
5.4.3</A>
 for more details. </P
><P 

>This <I>Service</I> can only be invoked via <I>SecureChannels</I> that support <I>Client</I> authentication (i.e. HTTPS cannot be used to call this <I>Service</I>). </P
><H4 
 ID="LinkTarget_8983"
><B>5.4.6.2 Parameters </H4
><P 

><A href="#LinkTarget_8989" href="#">
</B>Table 8</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 8 &ndash; RegisterServer2 </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters. </P
><P 

>The <I>authenticationToken</I> is always omitted. </P
><P 

>The type <I>RequestHeader</I> is defined in <A href="#LinkTarget_27119" href="#">
7.28</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Server </P
></TD
><TD  
 valign="top"
><P 

>RegisteredServer </P
></TD
><TD  
 valign="top"
><P 

>The <I>S</I><I>erver</I> to register. The type <I>Re</I><I>gisteredServer</I> is defined in <A href="#LinkTarget_27001" href="#">
7.27</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> discoveryConfiguration [] </P
></TD
><TD  
 valign="top"
><P 

>ExtensibleParameter DiscoveryConfiguration </P
></TD
><TD  
 valign="top"
><P 

>Additional configuration settings for the <I>Server</I> to register. </P
><P 

>The <I>DiscoveryConfiguration</I> is an extensible parameter type defined in <A href="#LinkTarget_23895" href="#">
7.9</A>
. </P
><P 

>Discovery <I>Servers</I> that do not understand a configuration shall return Bad_NotSupported for this configuration. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters.  </P
><P 

>The type <I>ResponseHeader</I> is defined in <A href="#LinkTarget_27245" href="#">
7.29</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> configurationResults [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of results for the discovery configuration parameters. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the discovery configuration parameters. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_9097"
><FONT size="+1"><B>5.4.6.3 Service results </H4
><P 

><A href="#LinkTarget_9107" href="#">
</B>Table 9</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 9 &ndash; RegisterServer2 Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_InvalidArgument </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServerUriInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServerNameMissing </P
></TD
><TD  
 valign="top"
><P 

>No <I>ServerName</I> was specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DiscoveryUrlMissing </P
></TD
><TD  
 valign="top"
><P 

>No discovery URL was specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SemaphoreFileMissing </P
></TD
><TD  
 valign="top"
><P 

>The semaphore file specified is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NotSupported </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_9167"
><FONT size="+1"><B>5.5 SecureChannel Service Set </H2
><H3 
 ID="LinkTarget_9168"
> Overview </H3
><P 

></B>This <I>Service</I> <I>Set</I> defines <I>Services</I> used to open a communication channel that ensures the confidentiality and <I>Integrity</I> of all <I>Messages</I> exchanged with the <I>Server</I>. The base concepts for OPC UA security are defined in <A href="#LinkTarget_7680" href="#">
Part 2</A>
. </P
><P 

>The <I>SecureChannel</I> <I>Services</I> are unlike other <I>Services</I> because they are not implemented directly by the <I>OPC UA</I> <I>Application</I>. Instead, they are provided by the <I>Communication</I> <I>Stack</I> on which the <I>OPC UA Application</I> is built. For example, an OPC UA <I>Server</I> may be built on a stack that allows applications to establish a <I>SecureChannel</I> using HTTPS. In these cases, the <I>OPC UA Application</I> shall verify that the <I>Message</I> it received was in the context of an HTTPS connection. <A href="#LinkTarget_7686" href="#">
Part 6</A>
 describes how the <I>SecureChannel</I> <I>Services</I> are implemented. </P
><P 

>A <I>SecureChannel</I> is a long-running logical connection between a single <I>Client</I> and a single <I>Server</I>. This channel maintains a set of keys known only to the <I>Client</I> and <I>Server</I>, which are used to authenticate and encrypt <I>Messages</I> sent across the network. The <I>SecureChannel</I> <I>Services</I> allow the <I>Client</I> and <I>Server</I> to securely negotiate the keys to use. </P
><P 

>An <I>EndpointDescription</I> tells a Client how to establish a <I>SecureChannel</I> with a given <I>Endpoint</I>. A <I>Client</I> may obtain the <I>EndpointDescription</I> from a <I>Discovery</I> <I>Server</I>, via some non-UA defined directory server or from its own configuration. </P
><P 

>The exact algorithms used to authenticate and encrypt <I>Messages</I> are described in the <I>SecurityPolicy</I> field of the <I>EndpointDescription</I>. A <I>Client</I> shall use these algorithms when it creates a <I>SecureChannel</I>. </P
><P 

>It should be noted that some <I>SecurityPolicies</I> defined in <A href="#LinkTarget_7688" href="#">
Part 7</A>
 will turn off authentication and encryption resulting in a <I>SecureChannel</I> that provides no security. </P
><P 

>When a <I>Client</I> and <I>Server</I> are communicating via a <I>SecureChannel</I>, they shall verify that all incoming <I>Messages</I> have been signed and encrypted according to the requirements specified in the<I> EndpointDescription</I>. An <I>OPC UA Application</I> shall not process any <I>Message</I> that does not conform to these requirements. </P
><P 

>The relationship between the <I>SecureChannel</I> and the <I>OPC UA Application</I> depends on the implementation technology. <A href="#LinkTarget_7686" href="#">
Part 6</A>
 defines any requirements that depend on the technology used. </P
><P 

>The correlation between the <I>OPC UA Application</I> <I>Session</I> and the <I>SecureChannel</I> is illustrated in <A href="#LinkTarget_9205" href="#">
Figure 13</A>
. The <I>Communication Stack</I> is used by the <I>OPC UA</I> <I>Applications</I> to exchange <I>Messages</I>. In the first step, the <I>SecureChannel</I> <I>Services</I> are used to establish a <I>SecureChannel</I> between the two <I>Communication Stacks</I> which allows the secure exchange of <I>Messages</I>. In the second step, the <I>OPC UA</I> <I>Applications</I> use the <I>Session</I> <I>Service</I> <I>Set</I> to establish an <I>OPC UA Application</I> <I>Session</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> OPC UA Client  OPC UA Server   OPC UA Application  OPC UA Application  Communication Stack  Communication Stack Session SecureChannel </DIV
></P
><P 

><B>Figure 13 &ndash; SecureChannel and Session Services </P
><P 

></B>Once a <I>Client</I> has established a <I>Session</I> it may wish to access the <I>Session</I> from a different <I>SecureChannel</I>. The Client can do this by validating the new <I>SecureChannel</I> with the <I>ActivateSession</I> <I>Service</I> described in <A href="#LinkTarget_10341" href="#">
5.6.3</A>
. </P
><P 

>If a <I>Server</I> acts as a <I>Client</I> to other <I>Servers</I>, which is commonly referred to as <I>Server</I> chaining, then the Server shall be able to maintain user level security. By this we mean that the user identity should be passed to the underlying server or it should be mapped to an appropriate user identity in the underlying server. It is unacceptable to ignore user level security. This is required to ensure that security is maintained and that a user does not obtain information that they should not have access to. Whenever possible a <I>Server</I> should impersonate the original <I>Client</I> by passing the original <I>Client&rsquo;s</I> user identity to the underlying <I>Server</I> when it calls the <I>ActivateSession Service</I>. If impersonation is not an option then the <I>Server</I> shall map the original <I>Client&rsquo;s</I> user identity onto a new user identity which the underlying <I>Server</I> does recognize. </P
><H3 
 ID="LinkTarget_9215"
><B> OpenSecureChannel </H3
><H4 
 ID="LinkTarget_9216"
>5.5.2.1 Description </H4
><P 

></B>This <I>Service</I> is used to open or renew a <I>SecureChannel</I> that can be used to ensure <I>Confidentiality</I> and <I>Integrity</I> for <I>Message</I> exchange during a <I>Session</I>. This <I>Service</I> requires the <I>Communication Stack</I> to apply the various security algorithms to the <I>Messages</I> as they are sent and received. </P
><P 

>Specific implementations of this <I>Service</I> for different <I>Communication Stacks</I> are described in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><P 

>Each <I>SecureChannel</I> has a globally-unique identifier and is valid for a specific combination of <I>Client</I> and <I>Server</I> application instances. Each channel contains one or more <I>SecurityTokens</I> that identify a set of cryptography keys that are used to encrypt and authenticate <I>Messages</I>. <I>SecurityTokens</I> also have globally-unique identifiers which are attached to each <I>Message</I> secured with the token. This allows an authorized receiver to know how to decrypt and verify the <I>Message</I>. </P
><P 

><I>SecurityTokens</I> have a finite lifetime negotiated with this <I>Service</I>. However, differences between the system clocks on different machines and network latencies mean that valid <I>Messages</I> could arrive after the token has expired. To prevent valid <I>Messages</I> from being discarded, the applications should do the following: </P
><DL 

><DD 

>a) <I>Clients</I> should request a new <I>SecurityToken</I> after 75 % of its lifetime has elapsed. This should ensure that <I>Clients</I> will receive the new <I>SecurityToken</I> before the old one actually expires. </DD
><DD 

>b) <I>Servers</I> shall use the existing <I>SecurityToken</I> to secure outgoing <I>Messages</I> until the <I>SecurityToken</I> expires or the <I>Server</I> receives a <I>Message</I> secured with a new <I>SecurityToken</I>. This should ensure that <I>Clients</I> do not reject <I>Messages</I> secured with the new <I>SecurityToken</I> that arrive before the <I>Client</I> receives the new <I>SecurityToken</I>. </DD
><DD 

>c) <I>Clients</I> should accept <I>Messages</I> secured by an expired <I>SecurityToken </I>for up to 25 % of the token lifetime. This should ensure that <I>Messages</I> sent by the <I>Server</I> before the token expired are not rejected because of network delays. </DD
></DL
><P 

>Each <I>SecureChannel</I> exists until it is explicitly closed or until the last token has expired and the overlap period has elapsed. A <I>Server</I> application should limit the number of <I>SecureChannels</I>. To protect against misbehaving Clients and denial of service attacks, the Server shall close the oldest <I>SecureChannel</I> that has no <I>Session</I> assigned before reaching the maximum number of supported <I>SecureChannels</I>. </P
><P 

>The <I>OpenSecureChannel</I> request and response <I>Messages</I> shall be signed with the sender's <I>Certificate</I>. These <I>Messages</I> shall always be encrypted. If the transport layer does not provide encryption, then these <I>Messages</I> shall be encrypted with the receiver's <I>Certificate</I>. These requirements for <I>OpenSecureChannel</I> only apply if the <I>securityPolicyUri</I> is not None. </P
><P 

>The <I>Certificates</I> used in the <I>OpenSecureChannel</I> service shall be the <I>Application Instance Certificates</I>. <I>Clients</I> and <I>Servers</I> shall verify that the same <I>Certificates</I> were used in the <I>CreateSession</I> and <I>ActivateSession</I> services. Certificates are not provided and shall not be verified if the <I>securityPolicyUri</I> is None. </P
><P 

>If the <I>securityPolicyUri</I> is not None, a <I>Client</I> shall verify the <I>HostName</I> specified in the <I>Server Certificate</I> is the same as the <I>HostName</I> contained in the <I>endpointUrl</I>. If there is a difference then the <I>Client</I> shall report the difference and may choose to not open the <I>SecureChannel</I>.<I> Servers</I> shall add all possible <I>HostNames</I> like MyHost and MyHost.local into the <I>Server Certificate</I>. This includes IP addresses of the host or the <I>HostName</I> exposed by a NAT router used to connect to the <I>Server</I>. </P
><P 

><I>Clients</I> should be prepared to replace the <I>HostName</I> returned in the <I>EndpointDescription</I> with the <I>HostName</I> or the IP addresses they used to call <I>GetEndpoints</I>. </P
><H4 
 ID="LinkTarget_9239"
><B>5.5.2.2 Parameters </H4
><P 

><A href="#LinkTarget_9251" href="#">
</B>Table 10</A>
 defines the parameters for the <I>Service</I>. </P
><P 

>Unlike other <I>Services</I>, the parameters for this <I>Service</I> provide only an abstract defintion. The concrete representation on the network depends on the mappings defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><P 

><B>Table 10 &ndash; OpenSecureChannel Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters. The <I>authenticationToken</I> is always omitted. </P
><P 

>The type <I>RequestHeader</I> is defined in <A href="#LinkTarget_27119" href="#">
7.28</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> clientCertificate </P
></TD
><TD  
 valign="top"
><P 

>ApplicationInstance </P
><P 

>Certificate </P
></TD
><TD  
 valign="top"
><P 

>A <I>Certificate</I> that identifies the <I>Client</I>. </P
><P 

>The <I>OpenSecureChannel</I> request shall be signed with this <I>Certificate</I>. </P
><P 

>The <I>ApplicationInstanceCert</I><I>ificate</I> type is defined in <A href="#LinkTarget_21043" href="#">
7.2</A>
. </P
><P 

>If the <I>securityPolicyUri</I> is None, the <I>Server</I> shall ignore the <I>A</I><I>pplication</I><I>I</I><I>nstance</I><I>C</I><I>ertificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestType </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>SecurityToken RequestType </P
></TD
><TD  
 valign="top"
><P 

>The type of <I>SecurityToken</I> request: </P
><P 

>An enumeration that shall be one of the following: </P
><P 

> ISSUE_0 creates a new <I>SecurityToken</I> for a new <I>SecureChannel</I>. </P
><P 

> RENEW_1 creates a new <I>SecurityToken</I> for an existing <I>SecureChannel</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> secureChannelId </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>The identifier for the <I>SecureChannel</I> that the new token should belong to. This parameter shall be null when creating a new <I>SecureChannel</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> securityMode </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>MessageSecurityMode </P
></TD
><TD  
 valign="top"
><P 

>The type of security to apply to the messages.  </P
><P 

>The type <I>MessageSecurityMode</I> type is defined in <A href="#LinkTarget_24270" href="#">
7.15</A>
. </P
><P 

>A <I>SecureChannel</I> may have to be created even if the <I>securityMode</I> is NONE. The exact behaviour depends on the mapping used and is described in the <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> securityPolicyUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The URI for <I>SecurityPolicy</I> to use when securing messages sent over the <I>SecureChannel</I>. </P
><P 

>The set of known URIs and the S<I>ecurityPolicies </I>associated with them are defined in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> clientNonce </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A random number that shall not be used in any other request. A new <I>clientNonce</I> shall be generated for each time a <I>SecureChannel</I> is renewed. </P
><P 

>This parameter shall have a length equal to key size used for the symmetric encryption algorithm that is identified by the <I>securityPolicyUri</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestedLifetime </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The requested lifetime, in milliseconds, for the new <I>SecurityToken</I>. It specifies when the <I>Client</I> expects to renew the <I>SecureChannel</I> by calling the <I>OpenSecureChannel Service</I> again. If a <I>SecureChannel</I> is not renewed, then all <I>Messages</I> sent using the current <I>SecurityTokens</I> shall be rejected by the receiver. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> type definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> securityToken </P
></TD
><TD  
 valign="top"
><P 

>ChannelSecurityToken </P
></TD
><TD  
 valign="top"
><P 

>Describes the new <I>SecurityToken</I> issued by the <I>Server</I>. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  channelId </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A unique identifier for the <I>SecureChannel</I>. This is the identifier that shall be supplied whenever the <I>SecureChannel</I> is renewed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  tokenId </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A unique identifier for a single <I>SecurityToken</I> within the channel. This is the identifier that shall be passed with each <I>Message</I> secured with the <I>SecurityToken</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  createdAt </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>The time when the <I>SecurityToken</I> was created.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  revisedLifetime </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The lifetime of the <I>SecurityToken</I> in milliseconds. The UTC expiration time for the token may be calculated by adding the lifetime to the <I>createdAt</I> time. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverNonce </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A random number that shall not be used in any other request. A new <I>serverNonce</I> shall be generated for each time a <I>SecureChannel</I> is renewed. </P
><P 

>This parameter shall have a length equal to key size used for the symmetric encryption algorithm that is identified by the <I>securityPolicyUri</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_9453"
><FONT size="+1"><B>5.5.2.3 Service results </H4
><P 

><A href="#LinkTarget_9463" href="#">
</B>Table 11</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 11 &ndash; OpenSecureChannel Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SecurityChecksFailed </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateTimeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerTimeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateHostNameInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateUriInvalid  </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateUseNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerUseNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateUntrusted </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateRevocationUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerRevocationUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateRevoked </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerRevoked </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_RequestTypeInvalid </P
></TD
><TD  
 valign="top"
><P 

>The security token request type is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SecurityModeRejected </P
></TD
><TD  
 valign="top"
><P 

>The security mode does not meet the requirements set by the <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SecurityPolicyRejected </P
></TD
><TD  
 valign="top"
><P 

>The security policy does not meet the requirements set by the <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SecureChannelIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NonceInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
><P 

>A server shall check the minimum length of the client nonce and return this status if the length is below 32 bytes. A check for duplicated nonces can only be done in OpenSecureChannel calls with the request type RENEW_1. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_9646"
><FONT size="+1"><B> CloseSecureChannel </H3
><H4 
 ID="LinkTarget_9647"
>5.5.3.1 Description </H4
><P 

></B>This <I>Service</I> is used to terminate a <I>SecureChannel</I>. </P
><P 

>The request <I>Messages</I> shall be signed with the appropriate key associated with the current token for the <I>SecureChannel</I>. </P
><H4 
 ID="LinkTarget_9650"
><B>5.5.3.2 Parameters </H4
><P 

><A href="#LinkTarget_9656" href="#">
</B>Table 12</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 12 &ndash; CloseSecureChannel Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters. The <I>sessionId</I> is always omitted.  </P
><P 

>The type <I>RequestHeader</I> is defined in <A href="#LinkTarget_27119" href="#">
7.28</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> secureChannelId </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>The identifier for the <I>SecureChannel</I> to close. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_9726"
><FONT size="+1"><B>5.5.3.3 Service results </H4
><P 

><A href="#LinkTarget_9736" href="#">
</B>Table 13</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 13 &ndash; CloseSecureChannel Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SecureChannelIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_9756"
><FONT size="+1"><B>5.6 Session Service Set </H2
><H3 
 ID="LinkTarget_9757"
> Overview </H3
><P 

></B>This <I>Service</I> <I>Set</I> defines <I>Services</I> for an application layer connection establishment in the context of a <I>Session</I>. </P
><H3 
 ID="LinkTarget_9759"
><B> CreateSession </H3
><H4 
 ID="LinkTarget_9761"
>5.6.2.1 Description </H4
><P 

></B>This <I>Service</I> is used by an OPC UA <I>Client</I> to create a <I>Session</I> and the <I>Server</I> returns two values which uniquely identify the <I>Session</I>. The first value is the <I>sessionId</I> which is used to identify the <I>Session</I> in the audit logs and in the <I>Server</I><I>&rsquo;s</I> <I>AddressSpace</I>. The second is the a<I>uthenticationToken</I> which is used to associate an incoming request with a <I>Session</I>. </P
><P 

>Before calling this <I>Service</I>, the <I>Client</I> shall create a <I>SecureChannel</I> with the <I>OpenSecureChannel</I> <I>Service</I> to ensure the <I>Integrity</I> of all <I>Messages</I> exchanged during a <I>Session</I>. This <I>SecureChannel</I> has a unique identifier which the <I>Server</I> shall associate with the a<I>uthenticationToken</I>. The <I>Server</I> may accept requests with the a<I>uthenticationToken </I>only if they are associated with the same <I>SecureChannel</I> that was used to create the <I>Session</I>. The <I>Client</I> may associate a new <I>SecureChannel</I> with the <I>Session</I> by calling the <I>ActivateSession</I> method. </P
><P 

>The <I>SecureChannel</I> is always managed by the <I>Communication Stack</I> which means it shall provide APIs which the <I>Server</I> can use to find out information about the <I>SecureChannel</I> used for any given request. The <I>Communication Stack</I> shall, at a minimum, provide the <I>SecurityPolicy</I> and <I>SecurityMode</I> used by the <I>SecureChannel</I>. It shall also provide a <I>SecureChannelId</I> which uniquely identifies the <I>SecureChannel</I> or the <I>Client Certificate</I> used to establish the <I>SecureChannel</I>. The <I>Server</I> uses one of these to identify the <I>SecureChannel</I> used to send a request. Clause <A href="#LinkTarget_27383" href="#">
7.31</A>
 describes how to create the a<I>uthenticationToken </I>for different types of <I>Communication Stack</I>. </P
><P 

>Depending upon on the <I>SecurityPolicy</I> and the <I>SecurityMode</I> of the <I>SecureChannel,</I> the exchange of <I>ApplicationInstanceCertificates</I> and <I>Nonces</I> may be optional and the signatures may be empty. See <A href="#LinkTarget_7688" href="#">
Part 7</A>
 for the definition of <I>SecurityPolicies</I> and the handling of these parameters. </P
><P 

>The <I>Server</I> returns its <I>EndpointDescriptions</I> in the response. <I>Clients</I> use this information to determine whether the list of <I>EndpointDescriptions</I> returned from the <I>Discovery</I> <I>Endpoint</I> matches the <I>Endpoints</I> that the <I>Server</I> has. If there is a difference then the <I>Client</I> shall close the <I>Session</I> and report an error. The <I>Server</I> returns all <I>EndpointDescriptions</I> for the <I>serverUri</I> specified by the <I>Client</I> in the request. The <I>Client</I> only verifies <I>EndpointDescriptions</I> with a <I>transportProfileUri</I> that matches the <I>profileUri</I> specified in the original <I>GetEndpoints</I> request. A <I>Client</I> may skip this check if the <I>EndpointDescriptions</I> were provided by a trusted source such as the <I>Administrator</I>. </P
><P 

>The <I>Session</I> created with this <I>Service</I> shall not be used until the <I>Client</I> calls the <I>ActivateSession</I> <I>Service</I> and provides its <I>SoftwareCertificates</I> and proves possession of its <I>Application Instance</I> <I>Certificate</I> and any user identity token that it provided. </P
><P 

>A <I>Server</I> application should limit the number of <I>Sessions</I>. To protect against misbehaving <I>Clients</I> and denial of service attacks, the <I>Server</I> shall close the oldest <I>Session</I> that is not activated before reaching the maximum number of supported <I>Sessions</I>. </P
><P 

>The <I>SoftwareCertificates</I> parameter in the <I>Server</I> response is deprecated to reduce the message size for OPC UA Applications with limited resources. The <I>SoftwareCertificates</I> are provided in the <I>Server</I><I>&rsquo;s</I> <I>AddressSpace</I> as defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. A <I>SoftwareCertificate</I> identifies the capabilities of the <I>Server</I> and also contains the list of OPC UA <I>Profiles</I> supported by the <I>Server</I>. OPC UA <I>Profiles</I> are defined in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. </P
><P 

>Additional <I>Certificates</I> issued by other organisations may be included to identify additional <I>Server</I> capabilities. Examples of these <I>Profiles</I> include support for specific information models and support for access to specific types of devices. </P
><P 

>When a <I>Session</I> is created, the <I>Server</I> adds an entry for the <I>Client</I> in its <I>SessionDiagnosticsArray</I> <I>Variable</I>. See <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for a description of this <I>Variable</I>. </P
><P 

><I>Sessions</I> are created to be independent of the underlying communications connection. Therefore, if a communications connection fails, the <I>Session</I> is not immediately affected. The exact mechanism to recover from an underlying communication connection error depends on the SecureChannel mapping as described in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><P 

><I>Sessions</I> are terminated by the <I>Server</I> automatically if the <I>Client</I> fails to issue a <I>Service</I> request on the <I>Session</I> within the timeout period negotiated by the <I>Server</I> in the <I>CreateSession</I> <I>Service</I> </P
><P 

>response. This protects the <I>Server</I> against <I>Client</I> failures and against situations where a failed underlying connection cannot be re-established. <I>Clients</I> shall be prepared to submit requests in a timely manner to prevent the <I>Session</I> from closing automatically. <I>Clients</I> may explicitly terminate <I>Sessions</I> using the <I>CloseSession</I> <I>Service</I>. </P
><P 

>When a <I>Session</I> is terminated, all outstanding requests on the <I>Session</I> are aborted and <I>Bad_SessionClosed</I> <I>StatusCodes</I> are returned to the <I>Client</I>. In addition, the <I>Server</I> deletes the entry for the <I>Client</I> from its <I>SessionDiagnosticsArray</I> <I>Variable</I> and notifies any other <I>Clients</I> who were subscribed to this entry. </P
><P 

>If a <I>Client</I> invokes the <I>CloseSession</I> <I>Service</I> then all <I>Subscriptions</I> associated with the <I>Session</I> are also deleted if the <I>deleteSubscriptions</I> flag is set to TRUE. If a <I>Server</I> terminates a <I>Session</I> for any other reason, <I>Subscriptions</I> associated with the <I>Session</I>, are not deleted. Each <I>Subscription</I> has its own lifetime to protect against data loss in the case of a <I>Session</I> termination. In these cases, the <I>Subscription</I> can be reassigned to another <I>Client</I> before its lifetime expires. </P
><P 

>Some <I>Servers</I>, such as aggregating <I>Servers</I>, also act as <I>Clients</I> to other <I>Servers</I>. These <I>Servers</I> typically support more than one system user, acting as their agent to the <I>Servers</I> that they represent. Security for these <I>Servers</I> is supported at two levels. </P
><P 

>First, each OPC UA <I>Service</I> request contains a string parameter that is used to carry an audit record id. A <I>Client</I>, or any <I>Server</I> operating as a <I>Client</I>, such as an aggregating <I>Server</I>, can create a local audit log entry for a request that it submits. This parameter allows the <I>Client</I> to pass the identifier for this entry with the request. If the <I>Server</I> also maintains an audit log, then it can include this id in the audit log entry that it writes. When the log is examined and the entry is found, the examiner will be able to relate it directly to the audit log entry created by the <I>Client</I>. This capability allows for traceability across audit logs within a system. See <A href="#LinkTarget_7680" href="#">
Part 2</A>
 for additional information on auditing. A <I>Server</I> that maintains an audit log shall provide the information in the audit log entries via event <I>Messages </I>defined in this standard. The <I>Server</I> may choose to only provide the <I>Audit</I> information via event <I>Messages</I>. The <I>Audit</I> <I>EventType</I> is defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. </P
><P 

>Second, these aggregating <I>Servers</I> may open independent <I>Sessions</I> to the underlying <I>Servers</I> for each <I>Client</I> that accesses data from them. <A href="#LinkTarget_9825" href="#">
Figure 14</A>
 illustrates this concept. </P
><P 

> <DIV class="Sect" 
 Alt=""
>   Aggregating OPC UA Server The aggregating server establishes a separate session to its underlying servers for each of its users.    OPC UA Server  OPC UA Server OPC UA Client OPC UA Client OPC UA Client Sessions  Clients typically support a single system user </DIV
></P
><P 

><B>Figure 14 &ndash; Multiplexing Users on a Session </P
><H4 
 ID="LinkTarget_9828"
>5.6.2.2 Parameters </H4
><P 

><A href="#LinkTarget_9834" href="#">
</B>Table 14</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 14 &ndash; CreateSession Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Name </P
></TH
><TH 
 valign="top"
><P 

>Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters. The <I>authenticationToken</I> is always omitted. </P
><P 

>The type <I>RequestHeader</I> is defined in <A href="#LinkTarget_27119" href="#">
7.28</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> clientDescription </P
></TD
><TD  
 valign="top"
><P 

>Application Description </P
></TD
><TD  
 valign="top"
><P 

>Information that describes the <I>Client</I> application. </P
><P 

>The type <I>ApplicationDescription</I> is defined in <A href="#LinkTarget_20938" href="#">
7.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>This value is only specified if the <I>EndpointDescription</I> has a <I>gatewayServerUri</I>.  </P
><P 

>This value is the <I>applicationUri</I> from the <I>EndpointDescription</I> which is the <I>applicationUri</I> for the underlying <I>Server</I>. The type <I>EndpointDescription</I> is defined in <A href="#LinkTarget_23978" href="#">
7.10</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> endpointUrl </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The network address that the <I>Client</I> used to access the <I>Session</I> <I>Endpoint</I>. </P
><P 

>The <I>HostName</I> portion of the URL should be one of the <I>HostNames</I> for the application that are specified in the <I>Server&rsquo;s</I> <I>ApplicationInstanceCertificate</I> (see <A href="#LinkTarget_21043" href="#">
7.2</A>
). The <I>Server</I> shall raise an <I>AuditUrlMismatchEventType </I>event if the URL does not match the Server&rsquo;s <I>Ho</I><I>stNames</I>. <I>AuditUrlMismatchEventType </I>event type is defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. </P
><P 

>The Server uses this information for diagnostics and to determine the set of <I>EndpointDescriptions</I> to return in the response.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> sessionName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>Human readable string that identifies the <I>Session</I>. The <I>Server</I> makes this name and the <I>sessionId</I> visible in its <I>AddressSpace</I> for diagnostic purposes. The <I>Client</I> should provide a name that is unique for the instance of the <I>Client</I>. </P
><P 

>If this parameter is not specified the <I>Server</I> shall assign a value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> clientNonce </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A random number that should never be used in any other request. This number shall have a minimum length of 32 bytes. Profiles may increase the required length. The <I>Server</I> shall use this value to prove possession of its <I>A</I><I>pplication </I><I>I</I><I>nstance</I> <I>Certificate</I> in the response. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> clientCertificate </P
></TD
><TD  
 valign="top"
><P 

>ApplicationInstance </P
><P 

>Certificate </P
></TD
><TD  
 valign="top"
><P 

>The <I>A</I><I>pplication </I><I>I</I><I>nstance</I> <I>Certificate</I> issued to the <I>Client</I>. </P
><P 

>The <I>ApplicationInstanceCertificate</I> type is defined in <A href="#LinkTarget_21043" href="#">
7.2</A>
. </P
><P 

>If the <I>securityPolicyUri</I> is None, the <I>Server</I> shall ignore the <I>A</I><I>pplication</I><I>I</I><I>nstance</I><I>C</I><I>ertificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Requested </P
><P 

> SessionTimeout </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>Requested maximum number of milliseconds that a <I>Session</I> should remain open without activity. If the <I>Client</I> fails to issue a <I>Service</I> request within this interval, then the <I>Server</I> shall automatically terminate the <I>Client</I> <I>Session</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> maxResponse </P
><P 

> MessageSize </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The maximum size, in bytes, for the body of any response message. </P
><P 

>The <I>Server</I> should return a <I>Bad_ResponseTooLarge</I> service fault if a response message exceeds this limit. </P
><P 

>The value zero indicates that this parameter is not used. </P
><P 

>More information on the use of this parameter is provided in <A href="#LinkTarget_8145" href="#">
5.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> type). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> sessionId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>A unique <I>NodeId</I> assigned by the <I>Server</I> to the <I>Session</I>. This identifier is used to access the diagnostics information for the <I>Session</I> in the <I>Server</I> <I>AddressSpace</I>. It is also used in the audit logs and any events that report information related to the <I>Session</I>. The <I>Session</I> diagnostic information is described in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. Audit logs and their related events are described in <A href="#LinkTarget_20078" href="#">
6.2</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> authentication </P
><P 

> Token </P
></TD
><TD  
 valign="top"
><P 

>Session </P
><P 

>AuthenticationToken </P
></TD
><TD  
 valign="top"
><P 

>A unique identifier assigned by the <I>Server</I> to the <I>Session</I>. This identifier shall be passed in the <I>RequestHeader</I> of each request and is used with the <I>SecureChannelId</I> to determine whether a <I>Client</I> has access to the <I>Session</I>. This identifier shall not be reused in a way that the <I>Client</I> or the <I>Server</I> has a chance of confusing them with a previous or existing <I>Session</I>. </P
><P 

>The <I>SessionAuthenticationToken</I> type is described in <A href="#LinkTarget_27383" href="#">
7.31</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> revisedSession Timeout  </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>Actual maximum number of milliseconds that a <I>Session</I> shall remain open without activity. The <I>Server</I> should attempt to honour the <I>Client</I> request for this parameter, but may negotiate this value up or down to meet its own constraints.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverNonce </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A random number that should never be used in any other request. </P
><P 

>This number shall have a minimum length of 32 bytes. </P
><P 

>The <I>Client</I> shall use this value to prove possession of its <I>A</I><I>pplication </I><I>I</I><I>nstance</I> <I>Certificate</I> in the <I>ActivateSession</I> request.  </P
><P 

>This value may also be used to prove possession of the <I>userIdentityToken</I> it specified in the <I>ActivateSession</I> request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverCertificate </P
></TD
><TD  
 valign="top"
><P 

>ApplicationInstance </P
><P 

>Certificate </P
></TD
><TD  
 valign="top"
><P 

>The <I>A</I><I>pplication </I><I>I</I><I>nstance</I> <I>Certificate</I> issued to the <I>Server</I>. </P
><P 

>A <I>Server</I> shall prove possession by using the private key to sign the <I>Nonce</I> provided by the <I>Client</I> in the request. The <I>Client</I> shall verify that this <I>Certificate</I> is the same as the one it used to create the <I>SecureChannel</I>. </P
><P 

>The <I>ApplicationInstanceCertificate</I> type is defined in <A href="#LinkTarget_21043" href="#">
7.2</A>
. </P
><P 

>If the <I>securityPolicyUri</I> is NONE and none of the <I>UserTokenPolicies</I> requires encryption, the <I>Client</I> shall ignore the <I>ApplicationInstanceCertificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverEndpoints [] </P
></TD
><TD  
 valign="top"
><P 

>Endpoint Description </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Endpoints</I> that the server supports. </P
><P 

>The <I>Server</I> shall return a set of <I>EndpointDescriptions</I> available for the <I>serverUri</I> specified in the request. The <I>EndpointDescription</I> type is defined in <A href="#LinkTarget_23978" href="#">
7.10</A>
. The <I>Client</I> shall verify this list with the list from a <I>Discovery</I> <I>Endpoint</I> if it used a <I>Discovery </I></P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Name </P
></TH
><TH 
 valign="top"
><P 

>Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

></B><I>Endpoint</I> to fetch the <I>EndpointDescriptions</I>. </P
><P 

>It is recommended that <I>Servers</I> only include the <I>e</I><I>ndpointUrl</I>, <I>securityMode,</I> <I>securityPolicyUri</I>, <I>userIdentityTokens</I>, <I>transportProfileUri</I> and <I>securityLevel</I> with all other parameters set to null. Only the recommended parameters shall be verified by the client. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverSoftware </P
><P 

> Certificates [] </P
></TD
><TD  
 valign="top"
><P 

>SignedSoftware Certificate </P
></TD
><TD  
 valign="top"
><P 

>This parameter is deprecated and the array shall be empty. </P
><P 

>The <I>SoftwareCertificates</I> are provided in the <I>Server</I> <I>AddressSpace</I> as defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverSignature </P
></TD
><TD  
 valign="top"
><P 

>SignatureData </P
></TD
><TD  
 valign="top"
><P 

>This is a signature generated with the private key associated with the <I>serverCertificate</I>. This parameter is calculated by appending the <I>clientNonce</I> to the <I>clientCertificate</I> and signing the resulting sequence of bytes. </P
><P 

>The <I>SignatureAlgorithm</I> shall be the <I>A</I><I>symmetricSignature</I><I>A</I><I>lgorithm</I> specified in the <I>SecurityPolicy</I> for the <I>Endpoint</I>. </P
><P 

>The <I>SignatureData</I> type is defined in <A href="#LinkTarget_27415" href="#">
7.32</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> maxRequest </P
><P 

> MessageSize </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The maximum size, in bytes, for the body of any request message. </P
><P 

>The <I>Client</I> <I>Communication Stack</I> should return a <I>Bad_RequestTooLarge</I> error to the application if a request message exceeds this limit.  </P
><P 

>The value zero indicates that this parameter is not used. </P
><P 

><A href="#LinkTarget_8145" href="#">
5.3</A>
 provides more information on the use of this parameter. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_10150"
><B>5.6.2.3 Service results </H4
><P 

><A href="#LinkTarget_10160" href="#">
</B>Table 15</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 15 &ndash; CreateSession Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SecureChannelIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NonceInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
><P 

>A server shall check the minimum length of the client nonce and return this status if the length is below 32 bytes. A check for duplicated nonces is optional and requires access to the nonce used to create the secure channel. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SecurityChecksFailed </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateTimeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerTimeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateHostNameInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateUriInvalid  </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateUseNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerUseNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateUntrusted </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateRevocationUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerRevocationUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateRevoked </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerRevoked </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManySessions </P
></TD
><TD  
 valign="top"
><P 

>The server has reached its maximum number of sessions. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServerUriInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_10341"
><FONT size="+1"><B> ActivateSession </H3
><H4 
 ID="LinkTarget_10342"
>5.6.3.1 Description </H4
><P 

></B>This <I>Service</I> is used by the <I>Client</I> to specify the identity of the user associated with the <I>Session</I>. This <I>Service</I> request shall be issued by the <I>Client</I> before it issues any <I>Service</I> request other than <I>CloseSession</I> after <I>CreateSession</I>. Failure to do so shall cause the <I>Server</I> to close the <I>Session</I>. </P
><P 

>Whenever the <I>Client</I> calls this <I>Service</I> the <I>Client</I> shall prove that it is the same application that called the <I>CreateSession</I> <I>Service</I>. The <I>Client</I> does this by creating a signature with the private key associated with the <I>clientCertificate</I> specified in the <I>CreateSession</I> request. This signature is created by appending the last <I>serverNonce</I> provided by the <I>Server</I> to the <I>serverCertificate</I> and calculating the signature of the resulting sequence of bytes. </P
><P 

>Once used, a <I>serverNonce</I> cannot be used again. For that reason, the <I>Server</I> returns a new <I>serverNonce</I> each time the <I>ActivateSession</I> <I>Service</I> is called. </P
><P 

>When the <I>ActivateSession</I> <I>Service </I>is called for the first time then the Server shall reject the request if the <I>SecureChannel</I> is not same as the one associated with the <I>CreateSession</I> request. </P
><P 

>Subsequent calls to<I> ActivateSession </I>may be associated with different <I>SecureChannels. </I>If this is the case then<I> </I>the <I>Server</I> shall verify that the <I>Certificate</I> the <I>Client</I> used to create the new <I>SecureChannel</I> is the same as the <I>Certificate</I> used to create the original <I>SecureChannel</I>. In addition, the Server shall verify that the <I>Client</I> supplied a <I>UserIdentityToken</I> that is identical to the token currently associated with the <I>Session</I>. Once the Server accepts the new <I>SecureChannel</I> it shall reject requests sent via the old <I>SecureChannel</I>.<I> </I></P
><P 

>The <I>ActivateSession Service </I>is used to associate a user identity with a <I>Session</I>. When a <I>Client</I> provides a user identity then it shall provide proof that it is authorized to use that user identity. The exact mechanism used to provide this proof depends on the type of the <I>UserIdentityToken</I>. If the token<I> </I>is a<I> UserNameIdentityToken</I> then the proof is the <I>password</I> that is included in the token. If the token is an X509IdentityToken then the proof is a signature generated with private key associated with the <I>Certificate</I>. The data to sign is created by appending the last <I>serverNonce</I> to the <I>serverCertificate</I> specified in the <I>CreateSession</I> response. If a token includes a secret then it should be encrypted using the public key from the <I>serverCertificate.</I> </P
><P 

><I>Clients</I> can change the identity of a user associated with a <I>Session</I> by calling the <I>ActivateSession</I> <I>Service</I>. The <I>Server</I> validates the signatures provided with the request and then validates the new user identity. If no errors occur the <I>Server</I> replaces the user identity for the <I>Session</I>. Changing the user identity for a <I>Session</I> may cause discontinuities in active <I>Subscriptions</I> because the <I>Server</I> may have to tear down connections to an underlying system and re-establish them using the new credentials. </P
><P 

>When a <I>Client</I> supplies a list of locale ids in the request, each locale id is required to contain the language component. It may optionally contain the &lt;country/region&gt; component. When the <I>Server</I> returns a <I>LocalizedText</I> in the context of the <I>Session</I>, it also may return both the language and the country/region or just the language as its default locale id. </P
><P 

>When a <I>Server</I> returns a string to the <I>Client</I>, it first determines if there are available translations for it. If there are, then the <I>Server</I> returns the string whose locale id exactly matches the locale id with the highest priority in the <I>Client</I>-supplied list. </P
><P 

>If there are no exact matches, then the <I>Server</I> ignores the &lt;country/region&gt; component of the locale id, and returns the string whose &lt;language&gt; component matches the &lt;language&gt; component of the locale id with the highest priority in the <I>Client</I> supplied list. </P
><P 

>If there still are no matches, then the <I>Server</I> returns the string that it has along with the locale id. </P
><P 

>A <I>Gateway Server</I> is expected to impersonate the user provided by the <I>Client</I> when it connects to the underlying <I>Server</I>. This means it shall re-calculate the signatures on the <I>UserIdentityToken</I> using the nonce provided by the underlying <I>Server</I>. The <I>Gateway Server</I> will have to use its own user credentials if the <I>UserIdentityToken</I> provided by the <I>Client</I> does not support impersonation. </P
><H4 
 ID="LinkTarget_10356"
><B>5.6.3.2 Parameters </H4
><P 

><A href="#LinkTarget_10362" href="#">
</B>Table 16</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 16 &ndash; ActivateSession Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters. The type <I>RequestHeader</I> is defined in <A href="#LinkTarget_27119" href="#">
7.28</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> clientSignature </P
></TD
><TD  
 valign="top"
><P 

>SignatureData </P
></TD
><TD  
 valign="top"
><P 

>This is a signature generated with the private key associated with the <I>clientCertificate</I>.  </P
><P 

>The <I>SignatureAlgorithm</I> shall be the <I>A</I><I>symmetricSignature</I><I>A</I><I>lgorithm</I> specified in the <I>SecurityPolicy</I> for the <I>Endpoint</I>. </P
><P 

>The <I>SignatureData</I> type is defined in <A href="#LinkTarget_27415" href="#">
7.32</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> clientSoftwareCertificates [] </P
></TD
><TD  
 valign="top"
><P 

>SignedSoftware </P
><P 

>Certificate </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. </P
><P 

>The <I>SignedSoftwareCertificate</I> type is defined in <A href="#LinkTarget_27471" href="#">
7.33</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> localeIds [] </P
></TD
><TD  
 valign="top"
><P 

>LocaleId </P
></TD
><TD  
 valign="top"
><P 

>List of locale ids in priority order for localized strings. The first <I>L</I><I>o</I><I>caleId</I> in the list has the highest priority. If the <I>Server</I> returns a localized string to the <I>Client</I>, the <I>Server</I> shall return the translation with the highest priority that it can. If it does not have a translation for any of the locales identified in this list, then it shall return the string value that it has and include the locale id with the string. See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for more detail on locale ids. If the <I>Client</I> fails to specify at least one locale id, the <I>Server</I> shall use any that it has.  </P
><P 

>This parameter only needs to be specified during the first call to <I>ActivateSession</I> during a single application <I>Session</I>. If it is not specified the <I>Server</I> shall keep using the current <I>localeIds</I> for the <I>Session</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userIdentityToken </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>UserIdentityToken </P
></TD
><TD  
 valign="top"
><P 

>The credentials of the user associated with the <I>Client</I> application. The <I>Server</I> uses these credentials to determine whether the <I>Client</I> should be allowed to activate a <I>Session</I> and what resources the <I>Client</I> has access to during this <I>Session</I>. </P
><P 

>The <I>UserIdentityToken</I> is an extensible parameter type defined in <A href="#LinkTarget_28580" href="#">
7.36</A>
. </P
><P 

>The EndpointDescription specifies what <I>UserIdentityTokens</I> the Server shall accept. </P
><P 

>Null or empty user token shall always be interpreted as anonymous. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userTokenSignature </P
></TD
><TD  
 valign="top"
><P 

>SignatureData </P
></TD
><TD  
 valign="top"
><P 

>If the <I>Client</I> specified a user identity token that supports digital signatures, then it shall create a signature and pass it as this parameter. Otherwise the parameter is omitted. </P
><P 

>The <I>SignatureAlgorithm</I> depends on the identity token type. </P
><P 

>The <I>SignatureData</I> type is defined in <A href="#LinkTarget_27415" href="#">
7.32</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverNonce </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A random number that should never be used in any other request. </P
><P 

>This number shall have a minimum length of 32 bytes. </P
><P 

>The <I>Client</I> shall use this value to prove possession of its <I>A</I><I>pplicat</I><I>ion</I> <I>I</I><I>nstance</I> <I>Certificate</I> in the next call to <I>ActivateSession</I> request.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of validation results for the <I>SoftwareCertificates</I> (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information associated with <I>SoftwareCertificate</I> validation errors (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_10537"
><FONT size="+1"><B>5.6.3.3 Service results  </H4
><P 

><A href="#LinkTarget_10547" href="#">
</B>Table 17</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 17 &ndash; ActivateSession Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_IdentityTokenInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IdentityTokenRejected </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ApplicationSignatureInvalid </P
></TD
><TD  
 valign="top"
><P 

>The signature provided by the client application is missing or invalid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserSignatureInvalid </P
></TD
><TD  
 valign="top"
><P 

>The user token signature is missing or invalid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoValidCertificates </P
></TD
><TD  
 valign="top"
><P 

>The <I>Client</I> did not provide at least one <I>S</I><I>oftware </I><I>C</I><I>ertificate</I> that is valid and meets the profile requirements for the <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IdentityChangeNotSupported </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> does not support changing the user identity assigned to the session. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_10613"
><FONT size="+1"><B> CloseSession </H3
><H4 
 ID="LinkTarget_10615"
>5.6.4.1 Description </H4
><P 

></B>This <I>Service</I> is used to terminate a <I>Session</I>. The <I>Server</I> takes the following actions when it receives a <I>CloseSession</I> request: </P
><DL 

><DD 

>a) It stops accepting requests for the <I>Session</I>. All subsequent requests received for the <I>Session</I> are discarded. </DD
><DD 

>b) It returns negative responses with the <I>StatusCode</I> Bad_SessionClosed to all requests that are currently outstanding to provide for the timely return of the <I>CloseSession</I> response. <I>Clients</I> are urged to wait for all outstanding requests to complete before submitting the <I>CloseSession</I> request. </DD
><DD 

>c) It removes the entry for the <I>Client</I> in its <I>SessionDiagnosticsArray</I> <I>Variable</I>. </DD
></DL
><P 

>When the <I>CloseSession</I> <I>Service </I>is called before the <I>Session</I> is successfully activated, the <I>Server</I> shall reject the request if the <I>SecureChannel</I> is not the same as the one associated with the <I>CreateSession</I> request. </P
><H4 
 ID="LinkTarget_10625"
><B>5.6.4.2 Parameters </H4
><P 

><A href="#LinkTarget_10631" href="#">
</B>Table 18</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 18 &ndash; CloseSession Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> deleteSubscriptions </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>If the value is TRUE, the Server deletes all Subscriptions associated with the Session. If the value is FALSE, the Server keeps the Subscriptions associated with the Session until they timeout based on their own lifetime. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_10700"
><FONT size="+1"><B>5.6.4.3 Service results </H4
><P 

><A href="#LinkTarget_10710" href="#">
</B>Table 19</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 19 &ndash; CloseSession Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SessionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_10730"
><FONT size="+1"><B> Cancel </H3
><H4 
 ID="LinkTarget_10731"
>5.6.5.1 Description </H4
><P 

></B>This <I>Service</I> is used to cancel outstanding Service requests. Successfully cancelled service requests shall respond with Bad_RequestCancelledByClient. </P
><H4 
 ID="LinkTarget_10733"
><B>5.6.5.2 Parameters </H4
><P 

><A href="#LinkTarget_10739" href="#">
</B>Table 20</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 20 &ndash; Cancel Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHandle </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>requestHandle</I> assigned to one or more requests that should be cancelled. All outstanding requests with the matching <I>requestHandle</I> shall be cancelled. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> cancelCount </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>Number of cancelled requests. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_10816"
><FONT size="+1"><B>5.6.5.3 Service results </H4
><P 

></B>Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><H2 
 ID="LinkTarget_10824"
><B>5.7 NodeManagement Service Set </H2
><H3 
 ID="LinkTarget_10825"
> Overview </H3
><P 

></B>This <I>Service</I> <I>Set</I> defines <I>Services</I> to add and delete <I>AddressSpace</I> <I>Nodes</I> and <I>References</I> between them. All added <I>Nodes</I> continue to exist in the <I>AddressSpace</I> even if the <I>Client</I> that created them disconnects from the <I>Server</I>. </P
><H3 
 ID="LinkTarget_10827"
><B> AddNodes </H3
><H4 
 ID="LinkTarget_10828"
>5.7.2.1 Description </H4
><P 

></B>This <I>Service</I> is used to add one or more <I>Nodes</I> into the <I>AddressSpace</I> hierarchy. Using this <I>Service</I>, each <I>Node</I> is added as the <I>TargetNode</I> of a <I>HierarchicalReference</I> to ensure that the <I>AddressSpace</I> is fully connected and that the <I>Node</I> is added as a child within the <I>AddressSpace</I> hierarchy (see <A href="#LinkTarget_7682" href="#">
Part 3</A>
). </P
><H4 
 ID="LinkTarget_10835"
><B>5.7.2.2 Parameters </H4
><P 

><A href="#LinkTarget_10841" href="#">
</B>Table 21</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 21 &ndash; AddNodes Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodesToAdd [] </P
></TD
><TD  
 valign="top"
><P 

>AddNodesItem </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Nodes</I> to add. All <I>Nodes</I> are added as a <I>Reference</I> to an existing <I>Node</I> using a hierarchical <I>ReferenceType</I>. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  parentNodeId </P
></TD
><TD  
 valign="top"
><P 

>Expanded NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>ExpandedNodeId</I> of the parent <I>Node</I> for the <I>Reference</I>. The <I>ExpandedNodeId</I> type is defined in <A href="#LinkTarget_24114" href="#">
7.11</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  referenceTypeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the hierarchical <I>ReferenceType</I> to use for the <I>Reference</I> from the parent <I>Node</I> to the new <I>Node</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  requestedNewNodeId </P
></TD
><TD  
 valign="top"
><P 

>Expanded NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>Client</I> requested expanded <I>NodeId</I> of the <I>Node</I> to add. The <I>serverIndex</I> in the expanded NodeId shall be 0. </P
><P 

>If the <I>Server</I> cannot use this <I>NodeId</I>, it rejects this <I>Node</I> and returns the appropriate error code. </P
><P 

>If the <I>Client</I> does not want to request a <I>NodeId</I>, then it sets the value of this parameter to the null expanded <I>NodeId</I>. </P
><P 

>If the <I>Node</I> to add is a <I>ReferenceType</I> <I>Node</I>, its <I>NodeId</I> should be a numeric id. See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for a description of <I>ReferenceType</I> <I>NodeIds</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  browseName </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>The browse name of the <I>Node</I> to add. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  nodeClass  </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

><I>NodeClass</I> of the <I>Node</I> to add. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  nodeAttributes </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>NodeAttributes </P
></TD
><TD  
 valign="top"
><P 

>The <I>Attributes</I> that are specific to the <I>NodeClass</I>. The <I>NodeAttributes</I> parameter type is an extensible parameter type specified in <A href="#LinkTarget_25023" href="#">
7.19</A>
. </P
><P 

>A <I>Client</I> is allowed to omit values for some or all <I>Attributes</I>. If an <I>Attribute</I> value is omitted, the <I>Server</I> shall use the default values from the <I>TypeDefinitionNode</I>. If a <I>TypeDefinitionNode</I> was not provided the <I>Server</I> shall choose a suitable default value. </P
><P 

>The <I>Server</I> may still add an optional Attribute to the <I>Node</I> with an appropriate default value even if the <I>Client</I> does not specify a value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  typeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Expanded NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>TypeDefinitionNode</I> for the <I>Node</I> to add. This parameter shall be null for all <I>NodeClasses</I> other than <I>Object</I> and <I>Variable</I> in which case it shall be provided. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>AddNodesResult </P
></TD
><TD  
 valign="top"
><P 

>List of results for the <I>Nodes</I> to add. The size and order of the list matches the size and order of the <I>nodesToAdd</I> request parameter. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

><I>StatusCode</I> for the <I>Node</I> to add (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  addedNodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>Server</I> assigned <I>NodeId</I> of the added <I>Node</I>. Null <I>NodeId</I> if the operation failed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>Nodes</I> to add (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>nodesToAdd </I>request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_11031"
><FONT size="+1"><B>5.7.2.3 Service results </H4
><P 

><A href="#LinkTarget_11041" href="#">
</B>Table 22</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 22 &ndash; AddNodes Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_11072"
><FONT size="+1"><B>5.7.2.4 StatusCodes </H4
><P 

><A href="#LinkTarget_11082" href="#">
</B>Table 23</A>
 defines values for the operation level <I>statusCode</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 23 &ndash; AddNodes Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ParentNodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The parent node id does not to refer to a valid node. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ReferenceTypeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ReferenceNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>The reference could not be created because it violates constraints imposed by the data model. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdRejected </P
></TD
><TD  
 valign="top"
><P 

>The requested node id was rejected either because it was invalid or because the server does not allow node ids to be specified by the client. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdExists </P
></TD
><TD  
 valign="top"
><P 

>The requested node id is already used by another node. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeClassInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_BrowseNameInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_BrowseNameDuplicated </P
></TD
><TD  
 valign="top"
><P 

>The browse name is not unique among nodes that share the same relationship with the parent. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeAttributesInvalid </P
></TD
><TD  
 valign="top"
><P 

>The node <I>Attributes</I> are not valid for the node class. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TypeDefinitionInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_11183"
><FONT size="+1"><B> AddReferences </H3
><H4 
 ID="LinkTarget_11184"
>5.7.3.1 Description </H4
><P 

></B>This <I>Service</I> is used to add one or more <I>References</I> to one or more <I>Nodes</I>. The <I>NodeClass</I> is an input parameter that is used to validate that the <I>Reference</I> to be added matches the <I>NodeClass</I> of the <I>TargetNode</I>. This parameter is not validated if the <I>Reference</I> refers to a <I>TargetNode</I> in a remote <I>Server</I>. </P
><P 

>In certain cases, adding new <I>References</I> to the <I>AddressSpace</I> shall require that the <I>Server</I> add new <I>Server</I> ids to the <I>Server</I>&rsquo;s <I>ServerArray</I> <I>Variable</I>. For this reason, remote <I>Servers</I> are identified by their URI and not by their <I>ServerArray</I> index. This allows the <I>Server</I> to add the remote <I>Server</I> URIs to its <I>ServerArray</I>. </P
><H4 
 ID="LinkTarget_11187"
><B>5.7.3.2 Parameters </H4
><P 

><A href="#LinkTarget_11193" href="#">
</B>Table 24</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 24 &ndash; AddReferences Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>Request Header </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> referencesToAdd [] </P
></TD
><TD  
 valign="top"
><P 

>AddReferences Item </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Reference</I> instances to add to the <I>SourceNode</I>. The <I>targetNodeClass</I> of each <I>Reference</I> in the list shall match the <I>NodeClass</I> of the <I>TargetNode</I>. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  sourceNodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>Node</I> to which the <I>Reference</I> is to be added. The source <I>Node</I> shall always exist in the <I>Server</I> to add the <I>Reference</I>. The isForward parameter can be set to FALSE if the target <I>Node</I> is on the local <I>Server</I> and the source <I>Node</I> on the remote <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  referenceTypeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>ReferenceType</I> that defines the <I>Reference</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  isForward </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>If the value is TRUE, the Server creates a forward Reference. If the value is FALSE, the Server creates an inverse Reference. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  targetServerUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>URI of the remote <I>Server</I>. If this parameter is not null, it overrides the <I>serverIndex</I> in the <I>targetNodeId</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  targetNodeId </P
></TD
><TD  
 valign="top"
><P 

>Expanded NodeId </P
></TD
><TD  
 valign="top"
><P 

>Expanded <I>NodeId</I> of the <I>TargetNode</I>. The <I>ExpandedNodeId</I> type is defined in <A href="#LinkTarget_24114" href="#">
7.11</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  targetNodeClass  </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

><I>NodeClass</I> of the <I>TargetNode</I>. The <I>Client</I> shall specify this since the <I>TargetNode</I> might not be accessible directly by the <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> for the <I>References</I> to add (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). The size and order of the list matches the size and order of the <I>referencesToAdd</I> request parameter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>Diagnostic Info </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>References</I> to add (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>referencesToAdd</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_11342"
><FONT size="+1"><B>5.7.3.3 Service results </H4
><P 

><A href="#LinkTarget_11352" href="#">
</B>Table 25</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 25 &ndash; AddReferences Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_11384"
><FONT size="+1"><B>5.7.3.4 StatusCodes </H4
><P 

><A href="#LinkTarget_11394" href="#">
</B>Table 26</A>
 defines values for the <I>results</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 26 &ndash; AddReferences Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SourceNodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ReferenceTypeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServerUriInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TargetNodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeClassInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ReferenceNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>The reference could not be created because it violates constraints imposed by the data model on this server. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ReferenceLocalOnly </P
></TD
><TD  
 valign="top"
><P 

>The reference type is not valid for a reference to a remote <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DuplicateReferenceNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>The reference type between the nodes is already defined. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_InvalidSelfReference </P
></TD
><TD  
 valign="top"
><P 

>The server does not allow this type of self reference on this node. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_11493"
><FONT size="+1"><B> DeleteNodes </H3
><H4 
 ID="LinkTarget_11495"
>5.7.4.1 Description </H4
><P 

></B>This <I>Service</I> is used to delete one or more <I>Nodes</I> from the <I>AddressSpace</I>. </P
><P 

>When any of the <I>Nodes</I> deleted by an invocation of this <I>Service</I> is the <I>TargetNode</I> of a <I>Reference</I>, then those <I>References</I> are left unresolved based on the <I>deleteTargetReferences</I> parameter. </P
><P 

>When any of the <I>Nodes</I> deleted by an invocation of this <I>Service</I> is being monitored, then a <I>Notification</I> containing the status code Bad_NodeIdUnknown is sent to the monitoring <I>Client</I> indicating that the <I>Node</I> has been deleted. </P
><H4 
 ID="LinkTarget_11499"
><B>5.7.4.2 Parameters </H4
><P 

><A href="#LinkTarget_11505" href="#">
</B>Table 27</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 27 &ndash; DeleteNodes Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>Request Header </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodesToDelete [] </P
></TD
><TD  
 valign="top"
><P 

>DeleteNodes Item </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Nodes</I> to delete. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  nodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>Node</I> to delete. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  deleteTargetReferences </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A <I>Boolean</I> parameter with the following values: </P
><P 

> TRUE delete <I>References</I> in <I>TargetNodes</I> that <I>Reference</I> the <I>Node</I> to delete. </P
><P 

> FALSE delete only the <I>References</I> for which the <I>Node</I> to delete is the source. </P
><P 

>The <I>Server</I> cannot guarantee that it is able to delete all <I>References</I> from <I>TargetNodes</I> if this parameter is TRUE. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> for the <I>Nodes</I> to delete (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). The size and order of the list matches the size and order of the list of the <I>nodesToDelete</I> request parameter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>Diagnostic Info </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>Nodes</I> to delete (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>nodesToDelete</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_11619"
><FONT size="+1"><B>5.7.4.3 Service results </H4
><P 

><A href="#LinkTarget_11629" href="#">
</B>Table 28</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 28 &ndash; DeleteNodes Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_11660"
><FONT size="+1"><B>5.7.4.4 StatusCodes </H4
><P 

><A href="#LinkTarget_11670" href="#">
</B>Table 29</A>
 defines values for the <I>results</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
.<B> </P
><P 

>Table 29 &ndash; DeleteNodes Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoDeleteRights </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Uncertain_ReferenceNotDeleted </P
></TD
><TD  
 valign="top"
><P 

>The server was not able to delete all target references. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_11730"
><FONT size="+1"><B> DeleteReferences </H3
><H4 
 ID="LinkTarget_11731"
>5.7.5.1 Description </H4
><P 

></B>This <I>Service</I> is used to delete one or more <I>References</I> of a <I>Node</I>. </P
><P 

>When any of the <I>References</I> deleted by an invocation of this <I>Service</I> are contained in a <I>View</I>, then the <I>ViewVersion</I> <I>Property</I> is updated if this <I>Property</I> is supported. </P
><P 

><A href="#LinkTarget_11739" href="#">
Table 30</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 30 &ndash; DeleteReferences Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> referencesToDelete [] </P
></TD
><TD  
 valign="top"
><P 

>DeleteReferences Item </P
></TD
><TD  
 valign="top"
><P 

>List of <I>References</I> to delete. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  sourceNodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>Node</I> that contains the <I>Reference</I> to delete. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  referenceTypeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>ReferenceType</I> that defines the <I>Reference</I> to delete. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  isForward </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>If the value is TRUE, the Server deletes a forward Reference. If the value is FALSE, the Server deletes an inverse Reference.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  targetNodeId </P
></TD
><TD  
 valign="top"
><P 

>ExpandedNodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>TargetNode</I> of the <I>Reference</I>. </P
><P 

>If the <I>Server</I> index indicates that the <I>TargetNode</I> is a remote <I>Node</I>, then the <I>nodeId</I> shall contain the absolute namespace URI. If the <I>TargetNode</I> is a local <I>Node</I> the <I>nodeId</I> shall contain the namespace index. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  deleteBidirectional </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A <I>Boolean</I> parameter with the following values: </P
><P 

> TRUE delete the specified <I>Reference</I> and the opposite <I>Reference</I> from the <I>TargetNode</I>. If the <I>TargetNode</I> is located in a remote <I>Server</I>, the <I>Server</I> is permitted to delete the specified <I>Reference</I> only.  </P
><P 

> FALSE delete only the specified <I>Reference</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> for the <I>References</I> to delete (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). The size and order of the list matches the size and order of the <I>referencesToDelete</I> request parameter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>References</I> to delete (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>referencesToDelete</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_11878"
><FONT size="+1"><B>5.7.5.2 Service results </H4
><P 

><A href="#LinkTarget_11888" href="#">
</B>Table 31</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 31 &ndash; DeleteReferences Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_11919"
><FONT size="+1"><B>5.7.5.3 StatusCodes </H4
><P 

><A href="#LinkTarget_11929" href="#">
</B>Table 32</A>
 defines values for the r<I>esults</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
.<B> </P
><P 

>Table 32 &ndash; DeleteReferences Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SourceNodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ReferenceTypeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServerIndexInvalid </P
></TD
><TD  
 valign="top"
><P 

>The server index is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TargetNodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoDeleteRights </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_12000"
><FONT size="+1"><B>5.8 View Service Set </H2
><H3 
 ID="LinkTarget_12001"
> Overview </H3
><P 

></B><I>Clients</I> use the browse <I>Services</I> of the <I>View</I> <I>Service</I> <I>Set</I> to navigate through the <I>AddressSpace</I> or through a <I>View</I> which is a subset of the <I>AddressSpace</I>. </P
><P 

>A <I>View</I> is a subset of the <I>AddressSpace</I> created by the <I>Server</I>. Future versions of this standard may also define services to create <I>Client</I>-defined <I>Views</I>. See <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for a description of the organisation of views in the <I>AddressSpace</I>. </P
><H3 
 ID="LinkTarget_12009"
><B> Browse </H3
><H4 
 ID="LinkTarget_12010"
>5.8.2.1 Description </H4
><P 

></B>This <I>Service</I> is used to discover the <I>References</I> of a specified <I>Node. </I>The browse can be further limited by the use of a <I>View</I>. This Browse <I>Service</I> also supports a primitive filtering capability. </P
><P 

>In some cases it may take longer than the <I>Client</I> timeout hint to process all nodes to browse. In this case the <I>Server</I> may return zero results with a continuation point for the affected nodes before the timeout expires. </P
><H4 
 ID="LinkTarget_12013"
><B>5.8.2.2 Parameters </H4
><P 

><A href="#LinkTarget_12019" href="#">
</B>Table 33</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 33 &ndash; Browse Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> View </P
></TD
><TD  
 valign="top"
><P 

>ViewDescription </P
></TD
><TD  
 valign="top"
><P 

>Description of the <I>View</I> to browse (see <A href="#LinkTarget_29095" href="#">
7.38</A>
 for <I>ViewDescription</I> definition). An empty <I>ViewDescription</I> value indicates the entire <I>AddressSpace</I>. Use of the empty <I>ViewDescription</I> value causes all <I>References</I> of the <I>node</I><I>s</I><I>ToBrowse</I> to be returned. Use of any other <I>View</I> causes only the <I>References</I> of the <I>node</I><I>s</I><I>ToBrowse</I> that are defined for that <I>View</I> to be returned. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestedMax </P
><P 

> ReferencesPerNode </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>Indicates the maximum number of references to return for each starting Node specified in the request. The value 0 indicates that the <I>Client</I> is imposing no limitation (see <A href="#LinkTarget_23634" href="#">
7.5</A>
 for <I>Counter</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodesToBrowse [] </P
></TD
><TD  
 valign="top"
><P 

>BrowseDescription </P
></TD
><TD  
 valign="top"
><P 

>A list of nodes to Browse. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  nodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>Node</I> to be browsed. If a <I>v</I><I>iew </I>is provided, it shall include this Node. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  browseDirection </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>BrowseDirection </P
></TD
><TD  
 valign="top"
><P 

>An enumeration that specifies the direction of <I>References</I> to follow. It has the following values: </P
><P 

> FORWARD_0 select only forward <I>References</I>. </P
><P 

> INVERSE_1   select only inverse <I>References</I>. </P
><P 

> BOTH_2    select forward and inverse <I>References</I>. </P
><P 

>The returned <I>References</I> do indicate the direction the <I>Server</I> followed in the <I>isForward</I> parameter of the <I>ReferenceDescription</I>. </P
><P 

>Symmetric <I>References</I> are always considered to be in forward direction therefore the isForward flag is always set to TRUE and symmetric <I>References</I> are not returned if <I>browseDirection</I> is set to <I>INVERSE_1</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  referenceTypeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>Specifies the <I>NodeId</I> of the <I>ReferenceType</I> to follow. Only instances of this <I>ReferenceType</I> or its subtypes are returned. </P
><P 

>If not specified then all <I>References</I> are returned and includeSubtypes is ignored. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  includeSubtypes </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>Indicates whether subtypes of the <I>ReferenceType</I> should be included in the browse. If TRUE, then instances of <I>referenceTypeId</I> and all of its subtypes are returned.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  nodeClassMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>Specifies the <I>NodeClasses</I> of the <I>TargetNodes</I>. Only <I>TargetNodes</I> with the selected <I>NodeClasses</I> are returned. The <I>NodeClasses</I> are assigned the following bits: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><B>Bit </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>VariableType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>ReferenceType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>View </P
></TD
></TR
></TABLE
><P 

>If set to zero, then all <I>NodeClasses</I> are returned. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  resultMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>Specifies the fields in the <I>ReferenceDescription</I> structure that should be returned. The fields are assigned the following bits: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><B>Bit </P
></TD
><TD  
 valign="top"
><P 

>Result </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>ReferenceType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>IsForward </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>DisplayName </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
></TR
></TABLE
><P 

>The <I>ReferenceDescription</I> type is defined in <A href="#LinkTarget_26831" href="#">
7.25</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>BrowseResult </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>BrowseResults</I>. The size and order of the list matches the size and order of the <I>nodesToBrow</I><I>se</I> specified in the request. </P
><P 

>The <I>BrowseResult</I> type is defined in <A href="#LinkTarget_21183" href="#">
7.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>Diagnostic Info </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>results</I> (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>results</I> response parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_12303"
><FONT size="+1"><B>5.8.2.3 Service results </H4
><P 

><A href="#LinkTarget_12314" href="#">
</B>Table 34</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 34 &ndash; Browse Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ViewIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewTimestampInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewParameterMismatchInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewVersionInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_12390"
><FONT size="+1"><B>5.8.2.4 StatusCodes </H4
><P 

><A href="#LinkTarget_12400" href="#">
</B>Table 35</A>
 defines values for the r<I>esults</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
.<B> </P
><P 

>Table 35 &ndash; Browse Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ReferenceTypeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_BrowseDirectionInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeNotInView </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoContinuationPoints </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Uncertain_NotAllNodesAvailable </P
></TD
><TD  
 valign="top"
><P 

>Browse results may be incomplete because of the unavailability of a subsystem. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_12481"
><FONT size="+1"><B> BrowseNext </H3
><H4 
 ID="LinkTarget_12482"
>5.8.3.1 Description </H4
><P 

></B>This <I>Service</I> is used to request the next set of <I>Browse</I> or <I>BrowseNext</I> response information that is too large to be sent in a single response. &ldquo;Too large&rdquo; in this context means that the <I>Server</I> is not able to return a larger response or that the number of results to return exceeds the maximum number of results to return that was specified by the <I>Client</I> in the original <I>Browse</I> request. The <I>BrowseNext</I> shall be submitted on the same <I>Session</I> that was used to submit the <I>Browse</I> or <I>BrowseNext</I> that is being continued. </P
><H4 
 ID="LinkTarget_12484"
><B>5.8.3.2 Parameters </H4
><P 

><A href="#LinkTarget_12490" href="#">
</B>Table 36</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 36 &ndash; BrowseNext Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>Request Header </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> releaseContinuationPoints </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A <I>Boolean</I> parameter with the following values: </P
><P 

> TRUE passed <I>continuationPoints</I> shall be reset to free resources in the <I>Serve</I><I>r</I>. The continuation points are released and the results and diagnosticInfos arrays are empty. </P
><P 

> FALSE passed <I>continuationPoints</I> shall be used to get the next set of browse information. </P
><P 

>A <I>Client</I> shall always use the continuation point returned by a <I>Browse</I> or <I>BrowseNext</I> response to free the resources for the continuation point in the <I>Server</I>. If the <I>Client</I> does not want to get the next set of browse information, <I>BrowseNext</I> shall be called with this parameter set to TRUE. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> continuationPoints [] </P
></TD
><TD  
 valign="top"
><P 

>Continuation Point </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>Server</I>-defined opaque values that represent continuation points. The value for a continuation point was returned to the <I>Client</I> in a previous <I>Browse</I> or <I>BrowseNext</I> response. These values are used to identify the previously processed <I>Browse</I> or <I>BrowseNext</I> request that is being continued and the point in the result set from which the browse response is to continue. </P
><P 

>Clients may mix continuation points from different Browse or BrowseNext responses. </P
><P 

>The <I>ContinuationPoint</I> type is described in <A href="#LinkTarget_23640" href="#">
7.6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>BrowseResult </P
></TD
><TD  
 valign="top"
><P 

>A list of references that met the criteria specified in the original <I>Browse</I> request. </P
><P 

>The size and order of this list matches the size and order of the <I>continuationPoints</I> request parameter. </P
><P 

>The <I>BrowseResult</I> type is defined in <A href="#LinkTarget_21183" href="#">
7.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>Diagnostic Info </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>results</I> (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>results</I> response parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_12606"
><FONT size="+1"><B>5.8.3.3 Service results </H4
><P 

><A href="#LinkTarget_12616" href="#">
</B>Table 37</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 37 &ndash; BrowseNext Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_12647"
><FONT size="+1"><B>5.8.3.4 StatusCodes </H4
><P 

><A href="#LinkTarget_12657" href="#">
</B>Table 38</A>
 defines values for the r<I>esults</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
.<B> </P
><P 

>Table 38 &ndash; BrowseNext Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ReferenceTypeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_BrowseDirectionInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeNotInView </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ContinuationPointInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_12732"
><FONT size="+1"><B> TranslateBrowsePathsToNodeIds </H3
><H4 
 ID="LinkTarget_12733"
>5.8.4.1 Description </H4
><P 

></B>This <I>Service</I> is used to request that the <I>Server</I> translates one or more browse paths to <I>NodeIds</I>. Each browse path is constructed of a starting <I>Node</I> and a <I>RelativePath</I>. The specified starting </P
><P 

><I>Node</I> identifies the <I>Node</I> from which the <I>RelativePath</I> is based. The <I>RelativePath</I> contains a sequence of <I>ReferenceTypes</I> and <I>BrowseNames</I>. </P
><P 

>One purpose of this <I>Service</I> is to allow programming against type definitions. Since <I>BrowseNames</I> shall be unique in the context of type definitions, a <I>Client</I> may create a browse path that is valid for a type definition and use this path on instances of the type. For example, an <I>ObjectType</I> &ldquo;Boiler&rdquo; may have a &ldquo;HeatSensor&rdquo; <I>Variable</I> as <I>InstanceDeclaration</I>. A graphical element programmed against the &ldquo;Boiler&rdquo; may need to display the <I>Value</I> of the &ldquo;HeatSensor&rdquo;. If the graphical element would be called on &ldquo;Boiler1&rdquo;, an instance of &ldquo;Boiler&rdquo;, it would need to call this <I>Service</I> specifying the <I>NodeId</I> of &ldquo;Boiler1&rdquo; as starting <I>Node</I> and the <I>BrowseName</I> of the &ldquo;HeatSensor&rdquo; as browse path. The <I>Service</I> would return the <I>NodeId</I> of the &ldquo;HeatSensor&rdquo; of &ldquo;Boiler1&rdquo; and the graphical element could subscribe to its <I>Value</I> <I>Attribute</I>. </P
><P 

>If a <I>Node</I> has multiple targets with the same <I>BrowseName</I>, the <I>Server</I> shall return a list of <I>NodeIds</I>. However, since one of the main purposes of this <I>Service</I> is to support programming against type definitions, the <I>NodeId</I> of the <I>Node</I> based on the type definition of the starting <I>Node</I> is returned as the first <I>NodeId</I> in the list. </P
><H4 
 ID="LinkTarget_12739"
><B>5.8.4.2 Parameters </H4
><P 

><A href="#LinkTarget_12745" href="#">
</B>Table 39</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 39 &ndash; TranslateBrowsePathsToNodeIds Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> browsePaths [] </P
></TD
><TD  
 valign="top"
><P 

>BrowsePath </P
></TD
><TD  
 valign="top"
><P 

>List of browse paths for which <I>NodeIds</I> are being requested. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  startingNode </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the starting <I>Node</I> for the browse path. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  relativePath </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>The path to follow from the <I>startingNode</I>. </P
><P 

>The last element in the<I> </I><I>relativePath</I> shall always have a <I>targetName</I> specified. This further restricts the definition of the RelativePath type. The <I>Server</I> shall return <I>Bad</I>_<I>BrowseNameInvalid</I> if the <I>targetName</I> is missing. </P
><P 

>The <I>RelativePath</I> structure is defined in <A href="#LinkTarget_26926" href="#">
7.26</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>BrowsePathResult </P
></TD
><TD  
 valign="top"
><P 

>List of results for the list of browse paths. The size and order of the list matches the size and order of the <I>browsePaths</I> request parameter. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

><I>StatusCode</I> for the browse path (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>Statu</I><I>sCode</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  targets [] </P
></TD
><TD  
 valign="top"
><P 

>BrowsePathTarget </P
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>List of targets for the <I>relativePath</I> from the <I>startingNode</I>. This structure is defined in-line with the following indented items. </P
><P 

>A <I>Server</I> may encounter a <I>Reference</I> to a <I>Node</I> in another <I>Server</I> which it cannot follow while it is processing the <I>RelativePath</I>. If this happens the <I>Server</I> returns the <I>NodeId</I> of the external <I>Node</I> and sets the <I>remainingPathIndex</I> parameter to indicate which <I>RelativePath</I> elements still need to be processed. To complete the operation the <I>Client</I> shall connect to the other <I>Server</I> and call this service again using the target as the <I>startingNode</I> and the unprocessed elements as the <I>relativePath</I>.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>   targetId </P
></TD
><TD  
 valign="top"
><P 

>ExpandedNodeId </P
></TD
><TD  
 valign="top"
><P 

>The identifier for a target of the <I>RelativePath</I>.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>   remainingPathIndex </P
></TD
><TD  
 valign="top"
><P 

>Index </P
></TD
><TD  
 valign="top"
><P 

>The index of the first unprocessed element in the <I>RelativePath</I>. </P
><P 

>This value shall be equal to the maximum value of <I>Index</I> data type if all elements were processed (see <A href="#LinkTarget_24266" href="#">
7.13</A>
 for <I>Index</I> definition).<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the list of browse paths (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>browsePaths</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_12904"
><FONT size="+1"><B>5.8.4.3 Service results </H4
><P 

><A href="#LinkTarget_12914" href="#">
</B>Table 40</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27514" href="#">
7.34</A>
. </P
><P 

><B>Table 40 &ndash; TranslateBrowsePathsToNodeIds Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_12946"
><FONT size="+1"><B>5.8.4.4 StatusCodes </H4
><P 

><A href="#LinkTarget_12956" href="#">
</B>Table 41</A>
 defines values for the operation level <I>statusCode</I> parameters that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
.<B> </P
><P 

>Table 41 &ndash; TranslateBrowsePathsToNodeIds Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
><P 

>This code indicates that the relativePath contained an empty list. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_BrowseNameInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>This code indicates that a TargetName was missing in a RelativePath. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Uncertain_ReferenceOutOfServer </P
></TD
><TD  
 valign="top"
><P 

>The path element has targets which are in another server. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyMatches </P
></TD
><TD  
 valign="top"
><P 

>The requested operation has too many matches to return. </P
><P 

>Users should use queries for large result sets. <I>Servers</I> should allow at least 10 matches before returning this error code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_QueryTooComplex </P
></TD
><TD  
 valign="top"
><P 

>The requested operation requires too many resources in the server. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoMatch </P
></TD
><TD  
 valign="top"
><P 

>The requested relativePath cannot be resolved to a target to return. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_13036"
><FONT size="+1"><B> RegisterNodes </H3
><H4 
 ID="LinkTarget_13037"
>5.8.5.1 Description </H4
><P 

></B>A <I>Server</I> often has no direct access to the information that it manages. Variables or services might be in underlying systems where additional effort is required to establish a connection to these systems. The <I>RegisterNodes</I> <I>Service</I> can be used by <I>Clients</I> to register the <I>Nodes</I> that they know they will access repeatedly (e.g. Write, Call). It allows <I>Servers</I> to set up anything needed so that the access operations will be more efficient. Clients can expect performance improvements when using registered <I>NodeIds</I>, but the optimization measures are vendor-specific. For <I>Variable</I> <I>Nodes</I> <I>Servers</I> shall concentrate their optimization efforts on the <I>Value</I> <I>Attribute</I>. </P
><P 

>Registered<I> NodeIds</I> are only guaranteed to be valid within the current <I>Session</I>. <I>Clients</I> shall unregister unneeded Ids immediately to free up resources. </P
><P 

><I>RegisterNodes</I> does not validate the <I>NodeIds</I> from the request. <I>Servers</I> will simply copy unknown <I>NodeIds</I> in the response. Structural <I>NodeId</I> errors (size violations, invalid id types) will cause the complete <I>Service</I> to fail. </P
><P 

>For the purpose of <I>Auditing</I>, <I>Servers</I> shall not use the registered <I>NodeIds</I> but only the canonical <I>NodeId</I>s which is the value of the<I> NodeId Attribute</I>. </P
><H4 
 ID="LinkTarget_13042"
><B>5.8.5.2 Parameters </H4
><P 

><A href="#LinkTarget_13048" href="#">
</B>Table 42</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 42 &ndash; RegisterNodes Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>Request Header </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodesToRegister [] </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>List of <I>NodeIds</I> to register that the client has retrieved through browsing, querying or in some other manner. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> registeredNodeIds [] </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>NodeIds</I> which the <I>Client</I> shall use for subsequent access operations. The size and order of this list matches the size and order of the <I>nodesToRegister</I> request parameter. </P
><P 

>The <I>Server</I> may return the <I>NodeId</I> from the request or a new (an alias) <I>NodeId</I>. It is recommended that the Server return a numeric <I>NodeIds</I> for aliasing. </P
><P 

>In case no optimization is supported for a <I>Node</I>, the <I>Server</I> shall return the <I>NodeId</I> from the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_13128"
><FONT size="+1"><B>5.8.5.3 Service results </H4
><P 

><A href="#LinkTarget_13138" href="#">
</B>Table 43</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 43 &ndash; RegisterNodes Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

><I>Servers</I> shall completely reject the <I>RegisterNodes</I> request if any of the <I>NodeIds</I> in the <I>nodesToRegister</I> parameter are structurally invalid. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_13181"
><FONT size="+1"><B> UnregisterNodes </H3
><H4 
 ID="LinkTarget_13182"
>5.8.6.1 Description </H4
><P 

></B>This <I>Service</I> is used to unregister <I>NodeIds</I> that have been obtained via the <I>RegisterNodes</I> service. </P
><P 

><I>UnregisterNodes</I> does not validate the <I>NodeIds</I> from the request. <I>Servers</I> shall simply unregister <I>NodeIds</I> that are known as registered <I>NodeIds</I>. Any <I>NodeIds</I> that are in the list, but are not registered <I>NodeIds</I> are simply ignored. </P
><H4 
 ID="LinkTarget_13185"
><B>5.8.6.2 Parameters </H4
><P 

><A href="#LinkTarget_13795" href="#">
</B>Table 49</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 44 &ndash; UnregisterNodes Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>Request Header </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodesToUnregister [] </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>NodeIds</I> that have been obtained via the <I>RegisterNodes</I> service. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_13260"
><FONT size="+1"><B>5.8.6.3 Service results </H4
><P 

><A href="#LinkTarget_13863" href="#">
</B>Table 50</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 45 &ndash; UnregisterNodes Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_13302"
><FONT size="+1"><B>5.9 Query Service Set </H2
><H3 
 ID="LinkTarget_13303"
> Overview </H3
><P 

></B>This <I>Service Set</I> is used to issue a <I>Query</I> to a <I>Server</I>. OPC UA <I>Query</I> is generic in that it provides an underlying storage mechanism independent <I>Query</I> capability that can be used to access a wide variety of OPC UA data stores and information management systems. OPC UA <I>Query</I> permits a <I>Client</I> to access data maintained by a <I>Server</I> without any knowledge of the logical schema used for internal storage of the data. Knowledge of the <I>AddressSpace</I> is sufficient. </P
><P 

>An <I>OPC UA Application</I> is expected to use the OPC UA <I>Query</I> <I>Services</I> as part of an initialization process or an occasional information synchronization step. For example, OPC UA <I>Query</I> would be used for bulk data access of a persistent store to initialise an analysis application with the current state of a system configuration. A <I>Query</I> may also be used to initialise or populate data for a report. </P
><P 

>A <I>Query</I> defines what instances of one or more <I>TypeDefinitionNodes</I> in the <I>AddressSpace</I> should supply a set of <I>Attributes</I>. Results returned by a <I>Server</I> are in the form of an array of <I>QueryDataSets</I>. The selected <I>Attribute</I> values in each <I>QueryDataSet</I> come from the definition of the selected <I>TypeDefinitionNodes or related TypeDefinitionNodes</I> and appear in results in the same order as the <I>Attributes</I> that were passed into the <I>Query</I>. <I>Query</I> also supports <I>Node</I> filtering on the basis of <I>Attribute</I> values, as well as relationships between<I> TypeDefinitionNodes</I>. </P
><P 

>See Annex B for example queries. </P
><H3 
 ID="LinkTarget_13308"
><B> Querying Views </H3
><P 

></B>A <I>View</I> is a subset of the <I>AddressSpace</I> available in the <I>Server</I>. See <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for a description of the organisation of <I>Views</I> in the <I>AddressSpace</I>. </P
><P 

>For any existing <I>View</I>, a <I>Query</I> may be used to return a subset of data from the <I>View</I>. When an application issues a <I>Query</I> against a <I>View</I>, only data defined by the <I>View</I> is returned. Data not included in the <I>View</I> but included in the original <I>AddressSpace</I> is not returned. </P
><P 

>The <I>Query</I> <I>Services</I> supports access to current and historical data. The <I>Service</I> supports a <I>Client</I> querying a past version of the <I>AddressSpace. </I>Clients may specify a <I>ViewVersion</I> or a <I>Timestamp</I> in a <I>Query</I> to access past versions of the <I>AddressSpace</I>. OPC UA Query is complementary to Historical Access in that the former is used to <I>Query</I> an <I>AddressSpace</I> that existed at a time and the latter is used to <I>Query</I> for the value of <I>Attributes</I> over time. In this way, a <I>Query</I> can be used to retrieve a portion of a past <I>AddressSpace</I> so that <I>Attribute</I> value history may be accessed using Historical Access even if the <I>Node</I> is no longer in the current <I>AddressSpace</I>. </P
><P 

><I>Servers</I> that support <I>Query</I> are expected to be able to access the <I>AddressSpace</I> that is associated with the local <I>Server</I> and any <I>Views </I>that are available on the local <I>Server</I>. If a <I>View</I> or the <I>AddressSpace</I> also references a remote <I>Server</I>, query may be able to access the <I>AddressSpace</I> of the remote <I>Server</I>, but it is not required. If a <I>Server</I> does access a remote <I>Server</I> the access shall be accomplished using the user identity of the <I>Client</I> as described in <A href="#LinkTarget_9168" href="#">
5.5.1</A>
. </P
><H3 
 ID="LinkTarget_13323"
><B> QueryFirst </H3
><H4 
 ID="LinkTarget_13324"
>5.9.3.1 Description </H4
><P 

></B>This <I>Service</I> is used to issue a <I>Query</I> request to the <I>Server</I>. The complexity of the <I>Query</I> can range from very simple to highly sophisticated. The <I>Query</I> can simply request data from instances of a <I>TypeDefinitionNode</I> or <I>TypeDefinitionNode</I> subject to restrictions specified by the filter. On the other hand, the <I>Query</I> can request data from instances of related <I>Node</I> types by specifying <I>a RelativePath</I> from an originating <I>TypeDefinitionNode.</I> In the filter, a separate set of paths can be constructed for limiting the instances that supply data. A filtering path can include multiple <I>RelatedTo</I> operators to define a multi-hop path between source instances and target instances. </P
><P 

>For example, one could filter on students that attend a particular school, but return information about students and their families. In this case, the student school relationship is traversed for filtering, but the student family relationship is traversed to select data. For a complete description of <I>ContentFilter</I> see <A href="#LinkTarget_21247" href="#">
7.4</A>
, also see Clause <A href="#LinkTarget_29301" href="#">
B.1</A>
 for simple examples and Clause <A href="#LinkTarget_29667" href="#">
B.2</A>
 for more complex examples of content filter and queries. </P
><P 

>The <I>Client</I> provides an array of <I>NodeTypeDescription</I> which specify the <I>NodeId</I> of a <I>TypeDefinitionNode</I> and selects what <I>Attributes</I> are to be returned in the response. A client can also provide a set of <I>RelativePaths</I> through the type system starting from an originating <I>TypeDefinitionNode</I>. Using these paths, the client selects a set of <I>Attributes</I> from <I>Nodes</I> that are related to instances of the originating <I>TypeDefinitionNode</I>. Additionally, the <I>Client</I> can request the <I>Server</I> return instances of subtypes of<I> TypeDefinitionNodes</I>. If a selected <I>Attribute</I> does not exist in a <I>TypeDefinitionNode</I> but does exist in a subtype, it is assumed to have a null value in the <I>TypeDefinitionNode</I> in question. Therefore, this does not constitute an error condition and a null value is returned for the <I>Attribute</I>. </P
><P 

>The <I>Client</I> can use the filter parameter to limit the result set by restricting <I>Attributes</I> and <I>Properties</I> to certain values. Another way the <I>Client</I> can use a filter to limit the result set is by specifying how instances should be related, using <I>RelatedTo</I> operators. In this case, if an instance at the top of the <I>RelatedTo</I> path cannot be followed to the bottom of the path via specified hops, no <I>QueryDataSets</I> are returned for the starting instance or any of the intermediate instances. </P
><P 

>When querying for related instances in the <I>RelativePath</I>, the <I>Client</I> can optionally ask for <I>References</I>. A <I>Reference</I> is requested via a <I>RelativePath</I> that only includes a <I>ReferenceType</I>. If all <I>References</I> are desired than the root <I>ReferenceType</I> is listed. These <I>References</I> are returned as part of the <I>QueryDataSets</I>. </P
><P 

>Query Services allow a special handling of the targetName field in the RelativePath. In several Query use cases a type NodeId is necessary in the path instead of a QualifiedName. Therefore the Client is allowed to specify a NodeId in the QualifiedName. This is done by setting the namespaceIndex of the targetName to zero and the name part of the targetName to the XML representation of the NodeId. The XML representation is defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. When matching instances are returned as the target node, the target node shall be an instance of the specified type or subtype of the specified type. </P
><P 

><A href="#LinkTarget_13359" href="#">
Table 46</A>
 defines the request parameters and <A href="#LinkTarget_13536" href="#">
Table 47</A>
 the response parameters for the <I>QueryFirst</I> <I>Service</I>. </P
><P 

><B>Table 46 &ndash; QueryFirst Request Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Request </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> View </P
></TD
><TD  
 valign="top"
><P 

>ViewDescription </P
></TD
><TD  
 valign="top"
><P 

>Specifies a <I>View</I> and temporal context to a <I>Server </I>(see <A href="#LinkTarget_29095" href="#">
7.38</A>
 for <I>ViewDescription</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodeTypes [] </P
></TD
><TD  
 valign="top"
><P 

>NodeTypeDescription </P
></TD
><TD  
 valign="top"
><P 

>This is the <I>Node</I> type description. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  typeDefinitionNode </P
></TD
><TD  
 valign="top"
><P 

>ExpandedNodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the originating <I>TypeDefinitionNode</I> of the instances for which data is to be returned. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  includeSubtypes </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A flag that indicates whether the <I>Server</I> should include instances of subtypes of the TypeDefinitionNode in the list of instances of the <I>Node</I> type. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  dataToReturn [] </P
></TD
><TD  
 valign="top"
><P 

>QueryDataDescription </P
></TD
><TD  
 valign="top"
><P 

>Specifies an <I>Attribute</I> or <I>Reference</I> from the originating typeDefinitionNode along a given relativePath for which to return data. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>   relativePath </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Browse path relative to the originating Node that identifies the Node which contains the data that is being requested, where the originating <I>Node</I> is an instance <I>Node</I> of the type defined by the type definition <I>Node</I>. The instance <I>Nodes</I> are further limited by the filter provided as part of this call. For a definition of relativePath see <A href="#LinkTarget_26926" href="#">
7.26</A>
. </P
><P 

>This relative path could end on a <I>Reference</I>, in which case the <I>ReferenceDescription</I> of the <I>Reference</I> would be returned as its value. </P
><P 

>The targetName field of the relativePath may contain a type NodeId. This is done by setting the <I>namespaceIndex</I> of the <I>targetName</I> to zero and the <I>name</I> part of the <I>targetName </I>to the XML representation of the <I>NodeId</I>. The XML representation is defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
.  </P
><P 

>When matching instances are returned as the target node, the target node shall be an instance of the specified type or subtype of the specified type. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>   attributeId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>Id of the <I>Attribute</I>. This shall be a valid <I>Attribute</I> Id. The <I>IntegerId </I>is defined in <A href="#LinkTarget_24268" href="#">
7.14</A>
. The IntegerId for Attributes are defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. If the <I>RelativePath</I> ended in a <I>Reference</I> then this parameter is 0 and ignored by the server. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>   indexRange </P
></TD
><TD  
 valign="top"
><P 

>NumericRange </P
></TD
><TD  
 valign="top"
><P 

>This parameter is used to identify a single element of a structure or an array, or a single range of indexes for arrays. If a range of elements are specified, the values are returned as a composite. The first element is identified by index 0 (zero). The <I>Nu</I><I>mericRange</I> type is defined in <A href="#LinkTarget_26644" href="#">
7.22</A>
. </P
><P 

>This parameter is null if the specified <I>Attribute</I> is not an array or a structure. However, if the specified <I>Attribute</I> is an array or a structure, and this parameter is null, then all elements are to be included in the range. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Filter </P
></TD
><TD  
 valign="top"
><P 

>ContentFilter </P
></TD
><TD  
 valign="top"
><P 

>Resulting <I>Nodes</I> shall be limited to the <I>Nodes</I> matching the criteria defined by the filter. ContentFilter is discussed in <A href="#LinkTarget_21247" href="#">
7.4</A>
. If an empty filter is provided then the entire <I>AddressSpace</I> shall be examined and all <I>Nodes</I> that contain a matching requested <I>Attribute</I> or <I>Reference</I> are returned. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> maxDataSetsToReturn </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The number of <I>QueryDataSets</I> that the <I>Client </I>wants the <I>Server</I> to return in the response and on each subsequent continuation call response. The Server is allowed to further limit the response, but shall not exceed this limit. </P
><P 

>A value of 0 indicates that the <I>Client</I> is imposing no limitation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> maxReferencesToReturn </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The number of <I>References</I> that the <I>Client</I> wants the <I>Server</I> to return in the response for each <I>QueryDataSet</I> and on each subsequent continuation call response. The Server is allowed to further limit the response, but shall not exceed this limit. </P
><P 

>A value of 0 indicates that the <I>Client</I> is imposing no limitation. </P
><P 

>For example a result where 4 <I>Nodes</I> are being returned, but each has 100 <I>References</I>, if this limit were set to 50 then only the first 50 <I>References</I> for each <I>Node</I> would be returned on the initial call and a continuation point would be set indicating additional data. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><B>Table 47 &ndash; QueryFirst Response Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Response </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> queryDataSets [] </P
></TD
><TD  
 valign="top"
><P 

>QueryDataSet </P
></TD
><TD  
 valign="top"
><P 

>The array of <I>QueryDataSets</I>. This array is empty if no <I>Nodes</I> or <I>References</I> met the <I>nodeTypes</I> criteria. In this case the continuationPoint parameter shall be empty. </P
><P 

>The <I>QueryDataSet</I> type is defined in <A href="#LinkTarget_26679" href="#">
7.23</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> continuationPoint </P
></TD
><TD  
 valign="top"
><P 

>ContinuationPoint </P
></TD
><TD  
 valign="top"
><P 

>Server-defined opaque value that identifies the continuation point. </P
><P 

>The continuation point is used only when the <I>Query</I> results are too large to be returned in a single response. &ldquo;Too large&rdquo; in this context means that the <I>Server</I> is not able to return a larger response or that the number of <I>QueryDataSets</I> to return exceeds the maximum number of <I>QueryDataSets</I> to return that was specified by the <I>Client</I> in the request. </P
><P 

>The continuation point is used in the <I>QueryNext</I> <I>Service</I>. When not used, the value of this parameter is null. If a continuation point is returned, the <I>Client</I> shall call <I>QueryNext </I>to get the next set of <I>QueryDataSets</I> or to free the resources for the continuation point in the <I>Server</I>. </P
><P 

>A continuation point shall remain active until the <I>Client</I> passes the continuation point to <I>QueryNext</I> or the session is closed. If the maximum continuation points have been reached the oldest continuation point shall be reset. </P
><P 

>The <I>ContinuationPoint</I> type is described in <A href="#LinkTarget_23640" href="#">
7.6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> parsingResults[] </P
></TD
><TD  
 valign="top"
><P 

>ParsingResult </P
></TD
><TD  
 valign="top"
><P 

>List of parsing results for <I>QueryFirst</I>. The size and order of the list matches the size and order of the <I>NodeTypes </I>request parameter. This structure is defined in-line with the following indented items. </P
><P 

>This list is populated with any status codes that are related to the processing of the node types that are part of the query. The array can be empty if no errors where encountered. If any node type encountered an error all node types shall have an associated status code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>Parsing result for the requested <I>NodeTypeDescription</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  dataStatusCodes [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of results for <I>dataToReturn</I>. The size and order of the list matches the size and order of the <I>dataToReturn </I>request parameter. The array can be empty if no errors where encountered. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  dataDiagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information <I>dataToReturn </I>(see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>dataToReturn </I>request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the query request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the requested <I>NodeTypeDescription</I>. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the query request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> filterResult </P
></TD
><TD  
 valign="top"
><P 

>ContentFilter </P
><P 

>Result </P
></TD
><TD  
 valign="top"
><P 

>A structure that contains any errors associated with the filter. </P
><P 

>This structure shall be empty if no errors occurred. </P
><P 

>The <I>ContentFilterResult</I> type is defined in <A href="#LinkTarget_21323" href="#">
7.4.2</A>
. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_13662"
><B>5.9.3.2 Service results </H4
><P 

></B>If the <I>Query</I> is invalid or cannot be processed, then <I>QueryDataSets</I> are not returned and only a <I>Service</I> result, filterResult, parsingResults and optional <I>DiagnosticInfo</I> is returned. <A href="#LinkTarget_13674" href="#">
Table 48</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 48 &ndash; QueryFirst Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ContentFilterInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewTimestampInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewParameterMismatchInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewVersionInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_InvalidFilter </P
></TD
><TD  
 valign="top"
><P 

>The provided filter is invalid, see the filterResult for specific errors </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodelistError </P
></TD
><TD  
 valign="top"
><P 

>The NodeTypes provided contain an error, see the parsingResults for specific errors </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_InvalidView </P
></TD
><TD  
 valign="top"
><P 

>The provided ViewDescription is not a valid ViewDescription. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Good_ResultsMayBeIncomplete </P
></TD
><TD  
 valign="top"
><P 

>The server should have followed a reference to a node in a remote server but did not. The result set may be incomplete. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_13785"
><FONT size="+1"><B>5.9.3.3 StatusCodes </H4
><P 

><A href="#LinkTarget_13795" href="#">
</B>Table 49</A>
 defines values for the parsingResults <I>statusCode</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 49 &ndash; QueryFirst Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NotTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>The provided NodeId was not a type definition NodeId. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_AttributeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_13854"
><FONT size="+1"><B> QueryNext </H3
><H4 
 ID="LinkTarget_13855"
>5.9.4.1 Descriptions </H4
><P 

></B>This <I>Service</I> is used to request the next set of <I>QueryFirst</I> or <I>QueryNext</I> response information that is too large to be sent in a single response. &ldquo;Too large&rdquo; in this context means that the <I>Server</I> is not able to return a larger response or that the number of <I>QueryDataSets</I> to return exceeds the maximum number of <I>QueryDataSets</I> to return that was specified by the <I>Client</I> in the original request. The <I>QueryNext</I> shall be submitted on the same session that was used to submit the <I>QueryFirst</I> or <I>QueryNext</I> that is being continued. </P
><H4 
 ID="LinkTarget_13857"
><B>5.9.4.2 Parameters </H4
><P 

><A href="#LinkTarget_13863" href="#">
</B>Table 50</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 50 &ndash; QueryNext Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>Request Header </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> releaseContinuationPoint </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A <I>Boolean</I> parameter with the following values: </P
><P 

> TRUE passed <I>continuationPoint</I> shall be reset to free resources for the continuation point in the <I>Server</I>. </P
><P 

> FALSE passed <I>continuationPoint</I> shall be used to get the next set of <I>QueryDataSets</I>. </P
><P 

>A <I>Client</I> shall always use the continuation point returned by a <I>QueryFirst</I> or <I>QueryNext</I> response to free the resources for the continuation point in the <I>Server</I>. If the <I>Client</I> does not want to get the next set of <I>Query</I> information, <I>QueryNext</I> shall be called with this parameter set to TRUE. </P
><P 

>If the parameter is set to TRUE all array parameters in the response shall contain empty arrays. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> continuationPoint </P
></TD
><TD  
 valign="top"
><P 

>ContinuationPoint </P
></TD
><TD  
 valign="top"
><P 

>Server defined opaque value that represents the continuation point. The value of the continuation point was returned to the <I>Client</I> in a previous <I>QueryFirst</I> or <I>QueryNext</I> response. This value is used to identify the previously processed <I>QueryFirst</I> or <I>QueryNext</I> request that is being continued, and the point in the result set from which the browse response is to continue.  </P
><P 

>The <I>ContinuationPoint</I> type is described in <A href="#LinkTarget_23640" href="#">
7.6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> queryDataSets [] </P
></TD
><TD  
 valign="top"
><P 

>QueryDataSet </P
></TD
><TD  
 valign="top"
><P 

>The array of <I>QueryDataSets</I>. </P
><P 

>The <I>QueryDataSet</I> type is defined in <A href="#LinkTarget_26679" href="#">
7.23</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> revisedContinuationPoint </P
></TD
><TD  
 valign="top"
><P 

>ContinuationPoint </P
></TD
><TD  
 valign="top"
><P 

>Server-defined opaque value that represents the continuation point. It is used only if the information to be returned is too large to be contained in a single response. When not used or when <I>releaseContinuationPoint</I> is set, the value of this parameter is null. </P
><P 

>The <I>ContinuationPoint</I> type is described in <A href="#LinkTarget_23640" href="#">
7.6</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_13980"
><FONT size="+1"><B>5.9.4.3 Service results </H4
><P 

><A href="#LinkTarget_13990" href="#">
</B>Table 51</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 51 &ndash; QueryNext Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ContinuationPointInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_14010"
><FONT size="+1"><B>5.10 Attribute Service Set </H2
><H3 
 ID="LinkTarget_14011"
> Overview </H3
><P 

></B>This <I>Service</I> <I>Set</I> provides <I>Services</I> to access <I>Attributes</I> that are part of <I>Nodes</I>. </P
><H3 
 ID="LinkTarget_14013"
><B> Read </H3
><H4 
 ID="LinkTarget_14014"
>5.10.2.1 Description </H4
><P 

></B>This <I>Service</I> is used to read one or more <I>Attributes</I> of one or more <I>Nodes</I>. For constructed <I>Attribute</I> values whose elements are indexed, such as an array, this <I>Service</I> allows <I>Clients</I> to read the entire set of indexed values as a composite, to read individual elements or to read ranges of elements of the composite. </P
><P 

>The maxAge parameter is used to direct the <I>Server</I> to access the value from the underlying data source, such as a device, if its copy of the data is older than that which the maxAge specifies. If the <I>Server</I> cannot meet the requested maximum age, it returns its &ldquo;best effort&rdquo; value rather than rejecting the request. </P
><H4 
 ID="LinkTarget_14017"
><B>5.10.2.2 Parameters </H4
><P 

><A href="#LinkTarget_14023" href="#">
</B>Table 52</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 52 &ndash; Read Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> maxAge </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>Maximum age of the value to be read in milliseconds. The age of the value is based on the difference between the <I>ServerTimestamp</I> and the time when the <I>Server</I> starts processing the request. For example if the <I>Client</I> specifies a <I>maxAge</I> of 500 milliseconds and it takes 100 milliseconds until the <I>Server</I> starts processing the request, the age of the returned value could be 600 milliseconds prior to the time it was requested. </P
><P 

>If the <I>Server</I> has one or more values of an <I>Attribute</I> that are within the maximum age, it can return any one of the values or it can read a new value from the data source. The number of values of an <I>Attribute</I> that a <I>Server</I> has depends on the number of <I>MonitoredItems</I> that are defined for the <I>Attribute</I>. In any case, the <I>Client</I> can make no assumption about which copy of the data will be returned.  </P
><P 

>If the <I>Server</I> does not have a value that is within the maximum age, it shall attempt to read a new value from the data source.  </P
><P 

>If the <I>Server</I> cannot meet the requested <I>maxAge</I>, it returns its &ldquo;best effort&rdquo; value rather than rejecting the request. This may occur when the time it takes the <I>Server</I> to process and return the new data value after it has been accessed is greater than the specified maximum age. </P
><P 

>If <I>maxAge</I> is set to 0, the <I>Server</I> shall attempt to read a new value from the data source. </P
><P 

>If <I>maxAge</I> is set to the max Int32 value or greater, the <I>Server</I> shall attempt to get a cached value. </P
><P 

>Negative values are invalid for <I>maxAge</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> timestampsTo </P
><P 

> Return </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>TimestampsTo Return </P
></TD
><TD  
 valign="top"
><P 

>An enumeration that specifies the <I>Timestamps</I> to be returned for each requested <I>Variable</I> <I>Value</I> <I>Attribute</I>. The <I>TimestampsToReturn</I> enumeration is defined in <A href="#LinkTarget_28538" href="#">
7.35</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodesToRead []  </P
></TD
><TD  
 valign="top"
><P 

>ReadValueId </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Nodes</I> and their <I>Attributes</I> to read. For each entry in this list, a <I>StatusCode</I> is returned, and if it indicates success, the <I>Attribute</I> <I>Value</I> is also returned. The ReadValueId parameter type is defined in <A href="#LinkTarget_26731" href="#">
7.24</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>DataValue </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Attribute</I> values (see <A href="#LinkTarget_23653" href="#">
7.7</A>
 for <I>DataValue</I> definition). The size and order of this list matches the size and order of the <I>nodesToRead</I> request parameter. There is one entry in this list for each <I>Node</I> contained in the <I>node</I><I>sToRead</I> parameter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of this list matches the size and order of the <I>nodesToRead</I> request parameter. There is one entry in this list for each <I>Node</I> contained in the <I>nodesToRead</I> parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request.  </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_14153"
><FONT size="+1"><B>5.10.2.3 Service results  </H4
><P 

><A href="#LinkTarget_14163" href="#">
</B>Table 53</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 53 &ndash; Read Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MaxAgeInvalid </P
></TD
><TD  
 valign="top"
><P 

>The max age parameter is invalid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TimestampsToReturnInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_14211"
><FONT size="+1"><B>5.10.2.4 StatusCodes </H4
><P 

><A href="#LinkTarget_14221" href="#">
</B>Table 54</A>
 defines values for the operation level <I>statusCode</I> contained in the <I>DataValue</I> structure of each <I>values</I> element. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 54 &ndash; Read Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_AttributeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeNoData </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DataEncodingInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DataEncodingUnsupported </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NotReadable </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SecurityModeInsufficient </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_14341"
><FONT size="+1"><B> HistoryRead </H3
><H4 
 ID="LinkTarget_14342"
>5.10.3.1 Description </H4
><P 

></B>This <I>Service</I> is used to read historical values or <I>Events</I> of one or more <I>Nodes</I>. For constructed <I>Attribute</I> values whose elements are indexed, such as an array, this <I>Service</I> allows <I>Clients</I> to read the entire set of indexed values as a composite, to read individual elements or to read ranges of elements of the composite. <I>Servers</I> may make historical values available to <I>Clients</I> using this <I>Service</I>, although the historical values themselves are not visible in the <I>AddressSpace</I>. </P
><P 

>The <I>AccessLevel</I> <I>Attribute</I> defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
 indicates a <I>Node</I>&rsquo;s support for historical values. Several request parameters indicate how the <I>Server</I> is to access values from the underlying history data source. The <I>EventNotifier</I> <I>Attribute</I> defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
 indicates a <I>Node</I>&rsquo;s support for historical <I>Events</I>. </P
><P 

>The <I>continuationPoint</I> parameter in the <I>HistoryRead</I> is used to mark a point from which to continue the read if not all values could be returned in one response. The value is opaque for the <I>Client</I> and is only used to maintain the state information for the <I>Server</I> to continue from. A <I>Server</I> may use the timestamp of the last returned data item if the timestamp is unique. This can reduce the need in the <I>Server</I> to store state information for the continuation point. </P
><P 

>In some cases it may take longer than the <I>Client</I> timeout hint to read the data for all nodes to read. Then the <I>Server</I> may return zero results with a continuation point for the affected nodes before the timeout expires. That allows the <I>Server</I> to resume the data acquisition on the next <I>Client</I> read call. </P
><P 

>For additional details on reading historical data and historical <I>Events</I> see <A href="#LinkTarget_7692" href="#">
Part 11</A>
. </P
><H4 
 ID="LinkTarget_14362"
><B>5.10.3.2 Parameters </H4
><P 

><A href="#LinkTarget_14368" href="#">
</B>Table 55</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 55 &ndash; HistoryRead Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Name </P
></TH
><TH 
 valign="top"
><P 

>Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> historyReadDetails </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>HistoryReadDetails </P
></TD
><TD  
 valign="top"
><P 

>The details define the types of history reads that can be performed. The <I>HistoryReadDetails</I> parameter type is an extensible parameter type formally defined in <A href="#LinkTarget_7692" href="#">
Part 11</A>
. The <I>Exten</I><I>sibleParameter</I> type is defined in <A href="#LinkTarget_24217" href="#">
7.12</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> timestampsToReturn </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>TimestampsTo Return </P
></TD
><TD  
 valign="top"
><P 

>An enumeration that specifies the timestamps to be returned for each requested <I>Variable</I> <I>Value</I> <I>Attribute</I>. The <I>TimestampsToReturn</I> enumeration is defined in <A href="#LinkTarget_28538" href="#">
7.35</A>
. </P
><P 

>Specifying a <I>TimestampsToReturn</I> of NEITHER is not valid. A <I>Server</I> shall return a <I>Bad_InvalidTimestampArgument</I> <I>StatusCode</I> in this case.  </P
><P 

><A href="#LinkTarget_7692" href="#">
Part 11</A>
 defines exceptions where this parameter shall be ignored. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> releaseContinuation </P
><P 

> Points </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A <I>Boolean</I> parameter with the following values: </P
><P 

> TRUE passed <I>continuationPoints</I> shall be reset to free resources in the <I>Server</I>.  </P
><P 

> FALSE passed <I>continuationPoints</I> shall be used to get the next set of historical information.  </P
><P 

>A <I>Client</I> shall always use the continuation point returned by a <I>HistoryRead</I> response to free the resources for the continuation point in the <I>Server</I>. If the <I>Cli</I><I>ent</I> does not want to get the next set of historical information, <I>HistoryRead</I> shall be called with this parameter set to TRUE. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodesToRead []  </P
></TD
><TD  
 valign="top"
><P 

>HistoryReadValueId </P
></TD
><TD  
 valign="top"
><P 

>This parameter contains the list of items upon which the historical retrieval is to be performed. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  nodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>If the <I>HistoryReadDetails</I> is<I> </I>RAW, PROCESSED, MODIFIED or ATTIME: </P
><P 

>The <I>nodeId</I> of the <I>Nodes</I> whose historical values are to be read. The value returned shall always include a timestamp.  </P
><P 

>If the <I>HistoryReadDetails</I> is<I> </I>EVENTS: </P
><P 

>The <I>NodeId</I> of the <I>Node</I> whose <I>Event</I> history is to be read. </P
><P 

>If the <I>Node</I> does not support the requested access for historical values or historical <I>Events</I> the appropriate error response for the given <I>Node</I> shall be generated. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  indexRange </P
></TD
><TD  
 valign="top"
><P 

>NumericRange </P
></TD
><TD  
 valign="top"
><P 

>This parameter is used to identify a single element of an array, or a single range of indexes for arrays. If a range of elements is specified, the values are returned as a composite. The first element is identified by index 0 (zero). The <I>NumericRange</I> type is defined in <A href="#LinkTarget_26644" href="#">
7.22</A>
. </P
><P 

>This parameter is null if the value is not an array. However, if the value is an array, and this parameter is null, then all elements are to be included in the range. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  dataEncoding </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>A <I>QualifiedName</I> that specifies the data encoding to be returned for the <I>Value</I> to be read (see <A href="#LinkTarget_26731" href="#">
7.24</A>
 for definition how to specify the data encoding). </P
><P 

>The parameter is ignored when reading history of <I>Events</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  continuationPoint </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>For each <I>Node</I><I>s</I><I>ToRead</I> item this parameter specifies a continuation point returned from a previous <I>HistoryRead</I> call, allowing the <I>Client</I> to continue that read from the last value received. </P
><P 

>The <I>HistoryRead</I> is used to select an ordered sequence of historical values or events. A continuation point marks a point in that ordered sequence, such that the <I>Server</I> returns the subset of the sequence that follows that point. </P
><P 

>A null value indicates that this parameter is not used. </P
><P 

>See <A href="#LinkTarget_23640" href="#">
7.6</A>
 for a general description of continuation points<I>.</I> </P
><P 

>This continuation point is described in more detail in <A href="#LinkTarget_7692" href="#">
Part 11</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> type). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>HistoryReadResult </P
></TD
><TD  
 valign="top"
><P 

>List of read results. The size and order of the list matches the size and order of the <I>nodesToRead</I> request parameter. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

><I>StatusCode</I> for the <I>Node</I><I>s</I><I>ToRead</I> item (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition).  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  continuationPoint </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>This parameter is used only if the number of values to be returned is too large to be returned in a single response or if the timeout provided as hint by the <I>Client</I> is close to expiring and not all nodes have been processed. </P
><P 

>When this parameter is not used, its value is null. </P
><P 

><I>Servers</I> shall support at least one continuation point per <I>Session</I>. <I>Servers</I> specify a max history continuation points per <I>Session</I> in the <I>Server</I> capabilities <I>Object</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. A continuation point shall remain active until the <I>Client</I> passes the continuation point to <I>HistoryRead</I> or the <I>Session</I> is closed. If the max continuation points have been reached the oldest continuation point shall be reset. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  historyData </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>HistoryData </P
></TD
><TD  
 valign="top"
><P 

>The history data returned for the <I>Node</I>. </P
><P 

>The <I>HistoryData</I> parameter type is an extensible parameter type formally defined in <A href="#LinkTarget_7692" href="#">
Part 11</A>
. It specifies the types of history data that can be returned. The <I>ExtensibleParameter</I> base type is defined in <A href="#LinkTarget_24217" href="#">
7.12</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>Diagnostic Info </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information. The size and order of the list matches the size </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Name </P
></TH
><TH 
 valign="top"
><P 

>Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

></B>and order of the <I>nodesToRead</I> request parameter. There is one entry in this list for each <I>Node</I> contained in the <I>nodesToRead</I> parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request.  </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_14622"
><FONT size="+1"><B>5.10.3.3 Service results  </H4
><P 

><A href="#LinkTarget_14632" href="#">
</B>Table 56</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 56 &ndash; HistoryRead Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TimestampsToReturnInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_HistoryOperationInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_HistoryOperationUnsupported </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>The requested history operation is not supported by the server. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_14697"
><FONT size="+1"><B>5.10.3.4 StatusCodes </H4
><P 

><A href="#LinkTarget_14711" href="#">
</B>Table 57</A>
 defines values for the operation level <I>statusCode</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. History access specific <I>StatusCodes</I> are defined in <A href="#LinkTarget_7692" href="#">
Part 11</A>
. </P
><P 

><B>Table 57 &ndash; HistoryRead Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DataEncodingInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DataEncodingUnsupported </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ContinuationPointInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_InvalidTimestampArgument </P
></TD
><TD  
 valign="top"
><P 

>The defined timestamp to return was invalid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_HistoryOperationUnsupported </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>The requested history operation is not supported for the requested node. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoContinuationPoints </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>See <A href="#LinkTarget_23640" href="#">
7.6</A>
 for the rules to apply this status code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_14821"
><FONT size="+1"><B> Write </H3
><H4 
 ID="LinkTarget_14822"
>5.10.4.1 Description </H4
><P 

></B>This <I>Service</I> is used to write values to one or more <I>Attributes</I> of one or more <I>Nodes</I>. For constructed <I>Attribute</I> values whose elements are indexed, such as an array, this <I>Service</I> allows <I>Clients</I> to write the entire set of indexed values as a composite, to write individual elements or to write ranges of elements of the composite. </P
><P 

>The values are written to the data source, such as a device, and the <I>Service</I> does not return until it writes the values or determines that the value cannot be written. In certain cases, the <I>Server</I> will successfully write to an intermediate system or <I>Server</I>, and will not know if the data source was updated properly. In these cases, the <I>Server</I> should report a success code that indicates that the write was not verified. In the cases where the <I>Server</I> is able to verify that it has successfully written to the data source, it reports an unconditional success. </P
><P 

>The order the operations are processed in the <I>Server</I> is not defined and depends on the different data sources and the internal <I>Server</I> logic. If an <I>Attribute</I> and <I>Node</I> combination is contained in more than one operation, the order of the processing is undefined. If a <I>Client</I> requires sequential processing the <I>Client</I> needs separate <I>Service</I> calls. </P
><P 

>It is possible that the <I>Server</I> may successfully write some <I>Attributes</I>, but not others. Rollback is the responsibility of the <I>Client</I>. </P
><P 

>If a <I>Server</I> allows writing of <I>Attributes</I> with the <I>DataType</I> LocalizedText, the Client can add or overwrite the text for a locale by writing the text with the associated <I>LocaleId</I>. Writing a null <I>String</I> for the text for a locale shall delete the <I>String</I> for that locale. Writing a null <I>String</I> for the <I>locale</I> and a non-null <I>String</I> for the <I>text</I> is setting the <I>text</I> for an invariant locale. Writing a null <I>String</I> for the <I>text</I> and a null <I>String</I> for the <I>locale</I> shall delete the entries for all locales. If a <I>Client</I> attempts to write a <I>locale</I> that is either syntactically invalid or not supported, the <I>Server</I> returns Bad_LocaleNotSupported. </P
><H4 
 ID="LinkTarget_14829"
><B>5.10.4.2 Parameters </H4
><P 

><A href="#LinkTarget_14835" href="#">
</B>Table 58</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 58 &ndash; Write Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodesToWrite [] </P
></TD
><TD  
 valign="top"
><P 

>WriteValue </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Nodes</I> and their <I>Attributes</I> to write. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  nodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>Node</I> that contains the <I>Attributes</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  attributeId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>Id of the <I>Attribute</I>. This shall be a valid <I>Attribute</I> id. The <I>IntegerId </I>is defined in <A href="#LinkTarget_24268" href="#">
7.14</A>
. The IntegerIds for the Attributes are defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  indexRange </P
></TD
><TD  
 valign="top"
><P 

>NumericRange </P
></TD
><TD  
 valign="top"
><P 

>This parameter is used to identify a single element of an array, or a single range of indexes for arrays. The first element is identified by index 0 (zero). The <I>NumericRange</I> type is defined in <A href="#LinkTarget_26644" href="#">
7.22</A>
. </P
><P 

>This parameter is not used if the specified <I>Attribute</I> is not an array. However, if the specified <I>Attribute</I> is an array and this parameter is not used, then all elements are to be included in the range. The parameter is null if not used. </P
><P 

>A <I>Server</I> shall return a Bad_WriteNotSupported error if an <I>indexRange</I> is provided and writing of <I>indexRange</I> is not possible for the <I>Node</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  value </P
></TD
><TD  
 valign="top"
><P 

>DataValue </P
></TD
><TD  
 valign="top"
><P 

>The <I>Node</I>&rsquo;s <I>Attribute</I> value (see <A href="#LinkTarget_23653" href="#">
7.7</A>
 for <I>DataValue</I> definition).  </P
><P 

>If the <I>indexRan</I><I>ge</I><I> </I>parameter is specified then the <I>Value</I> shall be an array even if only one element is being written.  </P
><P 

>If the <I>SourceTimestamp</I> or the <I>ServerTimestamp</I> is specified, the <I>Server</I> shall use these values. The <I>Server</I> returns a Bad_WriteNotSupported error if it does not support writing of timestamps. </P
><P 

>A <I>Server</I> shall return a Bad_TypeMismatch error if the data type of the written value is not the same type or subtype of the <I>Attribute&rsquo;s</I> <I>DataType</I>. Based on the <I>DataType</I> hierarchy, subtypes of the <I>Attribute</I> <I>DataType</I> shall be accepted by the <I>Server</I>. For the <I>Value Attribute</I> the <I>DataType</I> is defined through the <I>DataType </I><I>Attribute</I>. A <I>ByteString</I> is structurally the same as a one dimensional array of Byte. A <I>Server</I> shall accept a <I>By</I><I>teString</I> if an array of <I>Byte</I> is expected. </P
><P 

>The <I>Server</I> returns a Bad_DataEncodingUnsupported error if it does not support the provided data encoding. </P
><P 

><I>Simple DataTypes</I> (see <A href="#LinkTarget_7682" href="#">
Part 3</A>
) use the same representation on the wire as their supertypes and therefore writing a value of a simple <I>DataType</I> cannot be distinguished from writing a value of its supertype. The <I>S</I><I>erver</I> shall assume that by receiving the correct wire representation for a simple<I> </I><I>DataType</I> the correct type was chosen. <I>Servers</I> are allowed to impose additional data validations on the value independent of the encoding (e.g. having an image in GIF format in a <I>ByteString</I>). In this case the <I>S</I><I>erver</I> shall return a Bad_TypeMismatch error if the validation fails. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of results for the <I>Nodes</I> to write (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). The size and order of the list matches the size and order of the <I>nodesToWrite</I> request parameter. There is one entry in this list for each <I>Node</I> contained in the <I>nod</I><I>esToWrite</I> parameter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>Nodes</I> to write (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>nodesToWrite</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request.  </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_14994"
><FONT size="+1"><B>5.10.4.3 Service results  </H4
><P 

><A href="#LinkTarget_15004" href="#">
</B>Table 59</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 59 &ndash; Write Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_15036"
><FONT size="+1"><B>5.10.4.4 StatusCodes </H4
><P 

><A href="#LinkTarget_15046" href="#">
</B>Table 60</A>
 defines values for the <I>results</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 60 &ndash; Write Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Good_CompletesAsynchronously </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
><P 

>The value was successfully written to an intermediate system but the <I>Server</I> does not know if the data source was updated properly. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_AttributeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeNoData </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_WriteNotSupported </P
></TD
><TD  
 valign="top"
><P 

>The requested write operation is not supported. </P
><P 

>If a <I>Client</I> attempts to write any value, quality, timestamp combination and the <I>Server</I> does not support the requested combination (which could be a single quantity such as just timestamp), than the <I>Server</I> shall not perform any write on this <I>Node</I> and shall return this <I>StatusCode</I> for this <I>Node</I>. It is also used if writing an IndexRange is not supported for a <I>N</I><I>ode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NotWritable </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
><P 

>The current user does not have permission to write the attribute. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_OutOfRange </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>If a <I>Client</I> attempts to write a value outside the valid range like a value not contained in the enumeration data type of the <I>Node</I>, the <I>Server </I>shall return this <I>StatusCode</I> for this <I>Node</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TypeMismatch </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DataEncodingUnsupported </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoCommunication </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_LocaleNotSupported </P
></TD
><TD  
 valign="top"
><P 

>The locale in the requested write operation is not supported. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_15203"
><FONT size="+1"><B> HistoryUpdate </H3
><H4 
 ID="LinkTarget_15204"
>5.10.5.1 Description </H4
><P 

></B>This <I>Service</I> is used to update historical values or <I>Events</I> of one or more <I>Nodes</I>. Several request parameters indicate how the <I>Server</I> is to update the historical value or <I>Event</I>. Valid actions are Insert, Replace or Delete. </P
><H4 
 ID="LinkTarget_15206"
><B>5.10.5.2 Parameters </H4
><P 

><A href="#LinkTarget_15212" href="#">
</B>Table 61</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 61 &ndash; HistoryUpdate Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> historyUpdateDetails [] </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>HistoryUpdate </P
><P 

>Details </P
></TD
><TD  
 valign="top"
><P 

>The details defined for this update. The <I>HistoryUpdateDetails</I> parameter type is an extensible parameter type formally defined in <A href="#LinkTarget_7692" href="#">
Part 11</A>
. It specifies the types of history updates that can be performed. The <I>ExtensibleParameter</I> type is defined in <A href="#LinkTarget_24217" href="#">
7.12</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>HistoryUpdate Result </P
></TD
><TD  
 valign="top"
><P 

>List of update results for the history update details. The size and order of the list matches the size and order of the details element of the <I>historyUpdateDetails</I> parameter specified in the request. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

><I>StatusCode</I> for the update of the <I>Node</I> (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  operationResults [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> for the operations to be performed on a <I>Node</I>. The size and order of the list matches the size and order of any list defined by the details element being reported by this result entry. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the operations to be performed on a <I>Node</I> (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of any list defined by the details element being reported by this <I>updateResults</I> entry. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the history update details. The size and order of the list matches the size and order of the details element of the <I>historyUpdateDetails</I> parameter specified in the request. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_15335"
><FONT size="+1"><B>5.10.5.3 Service results </H4
><P 

><A href="#LinkTarget_15345" href="#">
</B>Table 62</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 62 &ndash; HistoryUpdate Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_15376"
><FONT size="+1"><B>5.10.5.4 StatusCodes </H4
><P 

><A href="#LinkTarget_15390" href="#">
</B>Table 63</A>
 defines values for the <I>statusCode </I>and<I> operationResults</I> parameters that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. History access specific <I>StatusCodes</I> are defined in <A href="#LinkTarget_7692" href="#">
Part 11</A>
. </P
><P 

><B>Table 63 &ndash; HistoryUpdate Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NotWritable </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_HistoryOperationInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_HistoryOperationUnsupported </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
><P 

>The current user does not have permission to update the history. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_15445"
><FONT size="+1"><B>5.11 Method Service Set </H2
><H3 
 ID="LinkTarget_15446"
> Overview </H3
><P 

></B><I>Methods</I> represent the function calls of <I>Objects</I>. They are defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. <I>Methods</I> are invoked and return only after completion (successful or unsuccessful). Execution times for methods may vary, depending on the function that they perform. </P
><P 

>The <I>Method</I> <I>Service</I> <I>Set</I> defines the means to invoke methods. A <I>method</I> shall be a<I> component</I> of an <I>Object</I>. Discovery is provided through the <I>Browse</I> and <I>Query</I> <I>Services</I>. <I>Clients</I> discover the <I>methods</I> supported by a <I>Server</I> by browsing for the owning <I>Objects References</I> that identify their supported <I>methods</I>. </P
><P 

>Because <I>Methods</I> may control some aspect of plant operations, method invocation may depend on environmental or other conditions. This may be especially true when attempting to re-invoke a method immediately after it has completed execution. Conditions that are required to invoke the method might not yet have returned to the state that permits the method to start again. </P
><H3 
 ID="LinkTarget_15456"
><B> Call </H3
><H4 
 ID="LinkTarget_15457"
>5.11.2.1 Description </H4
><P 

></B>This <I>Service</I> is used to call (invoke) a list of <I>Methods</I>. Each <I>method</I> call is invoked within the context of an existing <I>Session</I>. If the <I>Session</I> is terminated, the results of the <I>method&rsquo;s</I> execution cannot be returned to the <I>Client</I> and are discarded. This is independent of the task actually performed at the <I>Server</I>. </P
><P 

>The order the operations are processed in the <I>Server</I> is not defined and depends on the different tasks and the internal <I>Server</I> logic. If a <I>Method</I> is contained in more than one operation, the order of the processing is undefined. If a <I>Client</I> requires sequential processing the <I>Client</I> needs separate <I>Service</I> calls. </P
><P 

>This <I>Service</I> provides for passing input and output arguments to/from a method. These arguments are defined by <I>Properties</I> of the method. </P
><H4 
 ID="LinkTarget_15461"
><B>5.11.2.2 Parameters </H4
><P 

><A href="#LinkTarget_15467" href="#">
</B>Table 64</A>
 defines the parameters for the <I>Service</I>.  </P
><P 

><B>Table 64 &ndash; Call Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> methodsToCall [] </P
></TD
><TD  
 valign="top"
><P 

>CallMethodRequest </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Methods</I> to call. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  objectId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeId</I> shall be that of the <I>Object</I> or <I>ObjectType</I> on which the <I>Method</I> is invoked. </P
><P 

>In case of an <I>ObjectType</I> the <I>ObjectType</I> or a supertype of the <I>ObjectType</I> shall be the source of a HasComponent Reference (or subtype of <I>HasComponent</I> <I>Reference</I>) to the <I>Method</I> specified in <I>methodId</I>. </P
><P 

>In case of an <I>Object</I> the <I>Object</I> or the <I>ObjectType</I> of the <I>Object</I> or a supertype of that <I>ObjectType</I> shall be the source of a <I>HasComponent</I> <I>Reference</I> (or subtype of <I>HasComponent</I> <I>Reference</I>) to the <I>Method</I> specified in methodId. </P
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for a description of <I>Objects</I> and their <I>Methods</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  methodId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>Method</I> to invoke. </P
><P 

>If the <I>objectId</I> is the <I>NodeId</I> of an <I>Object</I>, it is allowed to use the <I>NodeId</I> of a <I>Method</I> that is the target of a <I>HasComponent</I> <I>Reference</I> from the <I>ObjectType</I> of the <I>Object</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  inputArguments [] </P
></TD
><TD  
 valign="top"
><P 

>BaseDataType </P
></TD
><TD  
 valign="top"
><P 

>List of input argument values. An empty list indicates that there are no input arguments. The size and order of this list matches the size and order of the input arguments defined by the input <I>InputArguments Property</I> of the <I>Method</I>. </P
><P 

>The name, a description and the data type of each argument are defined by the <I>Argument</I> structure in each element of the method&rsquo;s <I>InputArguments Property</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>CallMethodResult </P
></TD
><TD  
 valign="top"
><P 

>Result for the <I>Method</I> calls. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

><I>StatusCode</I> of the <I>Method</I> executed in the server. This <I>StatusCode</I> is set to the Bad_InvalidArgument <I>StatusCode</I> if at least one input argument broke a constraint (e.g. wrong data type, value out of range). </P
><P 

>This <I>StatusCode</I> is set to a bad <I>StatusCode</I> if the <I>Me</I><I>thod</I> execution failed in the server, e.g. based on an exception. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  inputArgumentResults [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> corresponding to the <I>inputArgument</I><I>s</I>. </P
><P 

>This list is empty unless the operation level result is Bad_InvalidArgument. </P
><P 

>If this list is populated, it has the same length as the <I>inputArgument</I> list. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  inputArgumentDiagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information corresponding to the <I>inputArgument</I><I>s</I>. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  outputArguments [] </P
></TD
><TD  
 valign="top"
><P 

>BaseDataType </P
></TD
><TD  
 valign="top"
><P 

>List of output argument values. An empty list indicates that there are no output arguments. The size and order of this list matches the size and order of the output arguments defined by the <I>OutputArguments Property</I> of the <I>Method</I>. </P
><P 

>The name, a description and the data type of each argument are defined by the <I>Argument</I> structure in each element of the methods <I>OutputArguments Property</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>s</I><I>tatusCode</I> of the <I>r</I><I>esult</I><I>s</I>. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_15623"
><FONT size="+1"><B>5.11.2.3 Service results </H4
><P 

><A href="#LinkTarget_15633" href="#">
</B>Table 65</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 65 &ndash; Call Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_15665"
><FONT size="+1"><B>5.11.2.4 StatusCodes </H4
><P 

><A href="#LinkTarget_15677" href="#">
</B>Table 66</A>
 defines values for the <I>statusCode </I>and<I> inputArgumentResults</I> parameters that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

>Server vendors or OPC UA companion specifications may reuse existing <I>StatusCodes</I> for application specific error information. This is valid as long as the canonical description of the StatusCode does not have a different meaning than the application specific description. To eliminate any vagueness, the <I>Server</I> should include the application specific description in the <I>DiagnosticInfo</I>. </P
><P 

>Good <I>StatusCodes</I> with sub-status shall not be used as <I>statusCode</I> since many programming language bindings would cause such codes to throw an exception. </P
><P 

><B>Table 66 &ndash; Call Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>Used to indicate that the specified object is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>Used to indicate that the specified object is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ArgumentsMissing </P
></TD
><TD  
 valign="top"
><P 

>The client did not specify all of the input arguments for the method. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyArguments </P
></TD
><TD  
 valign="top"
><P 

>The client specified more input arguments than defined for the method. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_InvalidArgument </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
><P 

>Used to indicate in the operation level results that one or more of the input arguments are invalid. The inputArgumentResults contain the specific status code for each invalid argument. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SecurityModeInsufficient </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MethodInvalid </P
></TD
><TD  
 valign="top"
><P 

>The method id does not refer to a method for the specified object. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_OutOfRange </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>Used to indicate that an input argument is outside the acceptable range. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TypeMismatch </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>Used to indicate that an input argument does not have the correct data type. </P
><P 

>A ByteString is structurally the same as a one dimensional array of Byte. A server shall accept a ByteString if an array of Byte is expected. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoCommunication </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_15798"
><B>5.12 MonitoredItem Service Set </H2
><H3 
 ID="LinkTarget_15799"
> MonitoredItem model </H3
><H4 
 ID="LinkTarget_15800"
>5.12.1.1 Overview </H4
><P 

></B><I>Clients</I> define <I>MonitoredItems</I> to subscribe to data and <I>Events</I>. Each <I>MonitoredItem</I> identifies the item to be monitored and the <I>Subscription</I> to use to send <I>Notifications</I>. The item to be monitored may be any <I>Node</I> <I>Attribute</I>. </P
><P 

><I>Notifications</I> are data structures that describe the occurrence of data changes and <I>Events</I>. They are packaged into <I>NotificationMessages</I> for transfer to the <I>Client</I>. The <I>Subscription</I> periodically sends <I>NotificationMessages</I> at a user-specified publishing<I> </I>interval, and the cycle during which these messages are sent is called a publishing<I> </I>cycle. </P
><P 

>Four primary parameters are defined for <I>MonitoredItems</I> that tell the <I>Server</I> how the item is to be sampled, evaluated and reported. These parameters are the sampling interval, the monitoring mode, the filter and the queue parameter. <A href="#LinkTarget_15810" href="#">
Figure 15</A>
 illustrates these concepts. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Reporting may be enabled or disabled for the subscription.   Monitored Item Monitored Item Monitored Item Attribute Variable Node The sampling interval defines the cyclic rate used by the server to sample the real item.      Subscription The monitoring mode defines whether sampling and reporting of notifications is enabled or disabled  Filters are used to select samples or events to report   f   f   f  A monitored item may monitor an attribute, a value, or a node providing events Queue attributes describe the queueing of notifications to a subscription  1..N 0..N 0..N cc 0..N 1 0..N Reporting for the monitored item   Sampling for the monitored item   </DIV
></P
><P 

><B>Figure 15 &ndash; MonitoredItem Model </P
><P 

></B><I>Attributes</I>, other than the <I>Value</I> <I>Attribute</I>, are only monitored for a change in value. The filter is not used for these <I>Attributes</I>. Any change in value for these <I>Attributes</I> causes a <I>Notification</I> to be generated. </P
><P 

>The <I>Value</I> <I>Attribute</I> is used when monitoring <I>Variables</I>. <I>Variable</I> values are monitored for a change in value or a change in their status. The filters defined in this standard (see <A href="#LinkTarget_24448" href="#">
7.17.2</A>
) and in <A href="#LinkTarget_7690" href="#">
Part 8</A>
 are used to determine if the value change is large enough to cause a <I>Notification</I> to be generated for the <I>Variable</I>. </P
><P 

><I>Objects</I> and views can be used to monitor <I>Events</I>. <I>Events</I> are only available from <I>Nodes</I> where the <I>SubscribeToEvents</I> bit of the<I> EventNotifier Attribute</I> is set. The filter defined in this standard (see <A href="#LinkTarget_24538" href="#">
7.17.3</A>
) is used to determine if an <I>Event</I> received from the <I>Node</I> is sent to the <I>Client</I>. The filter also allows selecting fields of the <I>EventType</I> that will be contained in the <I>Event</I> such as <I>EventId</I>, <I>EventType</I>, <I>SourceNode</I>, <I>Time</I> and <I>Description</I>. </P
><P 

><A href="#LinkTarget_7682" href="#">
Part 3</A>
 describes the <I>Event</I> model and the base <I>EventTypes</I>. </P
><P 

>The <I>Properties</I> of the base <I>EventTypes</I> and the representation of the base <I>EventTypes</I> in the <I>AddressSpace</I> are specified in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. </P
><H4 
 ID="LinkTarget_15842"
><B>5.12.1.2 Sampling interval </H4
><P 

></B>Each <I>MonitoredItem</I> created by the <I>Client</I> is assigned a sampling interval that is either inherited from the publishing interval of the <I>Subscription</I> or that is defined specifically to override that rate. A negative number indicates that the default sampling interval defined by the publishing interval of the <I>Subscription</I> is requested. The sampling interval indicates the fastest rate at which the <I>Server</I> should sample its underlying source for data changes. </P
><P 

>A <I>Client</I> shall define a sampling interval of 0 if it subscribes for <I>Events</I>. </P
><P 

>The assigned sampling interval defines a &ldquo;best effort&rdquo; cyclic rate that the <I>Server</I> uses to sample the item from its source. &ldquo;Best effort&rdquo; in this context means that the <I>Server</I> does its best to sample at this rate. Sampling at rates faster than this rate is acceptable, but not necessary to meet the needs of the <I>Client</I>. How the <I>Server</I> deals with the sampling rate and how often it actually polls its data source internally is a <I>Server</I> implementation detail. However, the time between values returned to the <I>Client</I> shall be greater or equal to the sampling interval. </P
><P 

>The <I>Client</I> may also specify 0 for the sampling interval, which indicates that the <I>Server</I> should use the fastest practical rate. It is expected that <I>Servers</I> will support only a limited set of sampling intervals to optimize their operation. If the exact interval requested by the <I>Client</I> is not supported by the <I>Server</I>, then the <I>Server</I> assigns to the <I>MonitoredItem</I> the most appropriate interval as determined by the <I>Server</I>. It returns this assigned interval to the <I>Client</I>. The <I>Server</I> Capabilities <I>Object</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
 identifies the sampling intervals supported by the <I>Server</I>. </P
><P 

>The <I>Server</I> may support data that is collected based on a sampling model or generated based on an exception-based model. The fastest supported sampling interval may be equal to 0, which indicates that the data item is exception-based rather than being sampled at some period. An </P
><P 

>exception-based model means that the underlying system does not require sampling and reports data changes. </P
><P 

>The <I>Client</I> may use the revised sampling interval values as a hint for setting the publishing interval as well as the keep-alive count of a <I>Subscription</I>. If, for example, the smallest revised sampling interval of the <I>MonitoredItems</I> is 5 seconds, then the time before a keep-alive is sent should be longer than 5 seconds. </P
><P 

>Note that, in many cases, the OPC UA <I>Server</I> provides access to a decoupled system and therefore has no knowledge of the data update logic. In this case, even though the OPC UA <I>Server</I> samples at the negotiated rate, the data might be updated by the underlying system at a much slower rate. In this case, changes can only be detected at this slower rate. </P
><P 

>If the behaviour by which the underlying system updates the item is known, it will be available via the <I>MinimumSamplingInterval Attribute</I> defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. If the <I>Server</I> specifies a value for the <I>MinimumSamplingInterval</I> <I>Attribute</I> it shall always return a <I>revisedSamplingInterval</I> that is equal or higher than the <I>MinimumSamplingInterval</I> if the <I>Client</I> subscribes to the <I>Value</I> <I>Attribute</I>. </P
><P 

><I>Clients</I> should also be aware that the sampling by the OPC UA <I>Server</I> and the update cycle of the underlying system are usually not synchronized. This can cause additional delays in change detection, as illustrated in <A href="#LinkTarget_15872" href="#">
Figure 16</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Time axis (s) 0  10  20  30  40  Actual change occurs at &ldquo;12&rdquo; Update Cycle of underlying system (every 15 s) Sampling (every 10 s) Change detected via sampling at &rdquo;28&rdquo;. </DIV
></P
><P 

><B>Figure 16 &ndash; Typical delay in change detection </P
><H4 
 ID="LinkTarget_15873"
>5.12.1.3 Monitoring mode </H4
><P 

></B>The monitoring mode parameter is used to enable and disable the sampling of a <I>MonitoredItem</I>, and also to provide for independently enabling and disabling the reporting of <I>Notifications</I>. This capability allows a <I>MonitoredItem</I> to be configured to sample, sample and report, or neither. Disabling sampling does not change the values of any of the other <I>MonitoredItem</I> parameter, such as its sampling interval. </P
><P 

>When a <I>MonitoredItem</I> is enabled (i.e. when the <I>MonitoringMode</I> is changed from <I>DISABLED</I> to <I>SAMPLING</I> or <I>REPORTING</I>) or it is created in the enabled state, the <I>Server</I> shall report the first sample as soon as possible and the time of this sample becomes the starting point for the next sampling interval. </P
><H4 
 ID="LinkTarget_15876"
><B>5.12.1.4 Filter </H4
><P 

></B>Each time a <I>MonitoredItem</I> is sampled, the <I>Server</I> evaluates the sample using the filter defined for the <I>MonitoredItem</I>. The filter parameter defines the criteria that the <I>Server</I> uses to determine if a <I>Notification</I> should be generated for the sample. The type of filter is dependent on the type of the item that is being monitored. For example, the <I>DataChangeFilter </I>and the <I>AggregateFilter</I> are used </P
><P 

>when monitoring <I>Variable Values</I> and the <I>EventFilter</I> is used when monitoring <I>Events</I>. Sampling and evaluation, including the use of filters, are described in this standard. Additional filters may be defined in other parts of this series of standards.  </P
><H4 
 ID="LinkTarget_15880"
><B>5.12.1.5 Queue parameters </H4
><P 

></B>If the sample passes the filter criteria, a <I>Notification</I> is generated and queued for transfer by the <I>Subscription</I>. The size of the queue is defined when the <I>MonitoredItem</I> is created. When the queue is full and a new <I>Notification</I> is received, the <I>Server</I> either discards the oldest <I>Notification</I> and queues the new one, or it replaces the last value added to the queue with the new one. The <I>MonitoredItem</I> is configured for one of these discard policies when the <I>MonitoredItem</I> is created. If a Notification is discarded for a <I>DataValue</I> and the size of the queue is larger than one, then the <I>Overflow</I> bit (flag) in the <I>InfoBits</I> portion of the <I>DataValue</I> <I>statusCode</I> is set. If <I>discardOldest</I> is TRUE, the oldest value gets deleted from the queue and the next value in the queue gets the flag set. If <I>discardOldest</I> is FALSE, the last value added to the queue gets replaced with the new value. The new value gets the flag set to indicate the lost values in the next <I>NotificationMessage</I>. <A href="#LinkTarget_15890" href="#">
Figure 17</A>
 illustrates the queue overflow handling. </P
><P 

> <DIV class="Sect" 
 Alt=""
> 1  2  3  4  5  Value  Node1 Sampling Sampling Sampling Sampling Sampling Monitored Item 1 NodeToMonitor = Node1 DiscardOldest = TRUE QueueSize = 4 Time axis 1    2 1   3 2 1  4 3 2 1 5 4 3 2 Monitored Item 2 NodeToMonitor = Node1 DiscardOldest = FALSE QueueSize = 4 1    2 1   3 2 1  4 3 2 1 5 3 2 1 6  Sampling 6 5 4 3 6 3 2 1 Overflow  bit set Change of queue content </DIV
></P
><P 

><B>Figure 17 &ndash; Queue overflow handling </P
><P 

></B>If the queue size is one, the queue becomes a buffer that always contains the newest <I>Notification</I>. In this case, if the sampling interval of the <I>MonitoredItem</I> is faster than the publishing interval of the <I>Subscription</I>, the <I>MonitoredItem</I> will be over sampling and the <I>Client</I> will always receive the most up-to-date value. The discard policy is ignored if the queue size is one. </P
><P 

>On the other hand, the <I>Client</I> may want to subscribe to a continuous stream of <I>Notifications</I> without any gaps, but does not want them reported at the sampling interval. In this case, the <I>MonitoredItem</I> would be created with a queue size large enough to hold all <I>Notifications</I> generated between two consecutive publishing cycles. Then, at each publishing cycle, the <I>Subscription</I> would send all <I>Notifications</I> queued for the <I>MonitoredItem</I> to the <I>Client</I>. The <I>Server</I> shall return <I>Notifications</I> for any particular item in the same order they are in the queue. </P
><P 

>The <I>Server</I> may be sampling at a faster rate than the sampling interval to support other <I>Clients</I>; the <I>Client</I> should only expect values at the negotiated sampling interval. The <I>Server</I> may deliver fewer values than dictated by the sampling interval, based on the filter and implementation constraints. If a <I>DataChangeFilter</I> is configured for a <I>MonitoredItem</I>, it is always applied to the newest value in the queue compared to the current sample. </P
><P 

>If, for example, the <I>AbsoluteDeadband</I> in the <I>DataChangeFilter</I> is &ldquo;10&rdquo;, the queue could consist of values in the following order: </P
><DL 

><DD 

>&#61623; 100 </DD
></DL
><DL 

><DD 

>&#61623; 111 </DD
><DD 

>&#61623; 100 </DD
><DD 

>&#61623; 89 </DD
><DD 

>&#61623; 100 </DD
></DL
><P 

>Queuing of data may result in unexpected behaviour when using a <I>Deadband</I> filter and the number of encountered changes is larger than the number of values that can be maintained. The new first value in the queue may not exceed the <I>Deadband</I> limit of the previous value sent to the <I>Client</I>. </P
><P 

>The queue size is the maximum value supported by the <I>Server</I> when monitoring <I>Events</I>. In this case, the <I>Server</I> is responsible for the <I>Event</I> buffer. If <I>Events</I> are lost, an <I>Event</I> of the type <I>EventQueueOverflowEventType</I> is placed in the queue. This Event is generated when the first Event has to be discarded on a MonitoredItem subscribing for Events. It is put into the Queue of the MonitoredItem in addition to the size of the Queue defined for this MonitoredItem without discarding any other Event. If <I>discardOldest</I> is set to TRUE it is put at the beginning of the queue and is never discarded, otherwise at the end. An aggregating <I>Server</I> shall not pass on such an <I>Event</I>. It shall be handled like other connection error scenarios. </P
><H4 
 ID="LinkTarget_15910"
><B>5.12.1.6 Triggering model </H4
><P 

></B>The <I>MonitoredItems</I> <I>Service</I> allows the addition of items that are reported only when some other item (the triggering item) triggers. This is done by creating links between the triggered items and the items to report. The monitoring mode of the items to report is set to sampling-only so that it will sample and queue <I>Notifications</I> without reporting them. <A href="#LinkTarget_15919" href="#">
Figure 18</A>
 illustrates this concept. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Monitored Item Items to Report are monitored items whose notifications are sent when the triggering item triggers. Their lifetime is independent of the lifetime of the triggered items that reference them.  Monitored Item Monitored Item Monitored Item Triggering item defines a set of triggered items Triggering links link the triggering item with items to report.  These links are defined for the triggering item and are deleted when the triggering item is deleted. </DIV
></P
><P 

><B>Figure 18 &ndash; Triggering Model </P
><P 

></B>The triggering mechanism is a useful feature that allows <I>Clients</I> to reduce the data volume on the wire by configuring some items to sample frequently but only report when some other <I>Event</I> happens. </P
><P 

>The following triggering behaviours are specified. </P
><DL 

><DD 

>a) If the monitoring mode of the triggering item is <I>SAMPLING, then </I>it is not reported when the triggering item triggers the items to report. </DD
><DD 

>b) If the monitoring mode of the triggering item is <I>REPORTING, then it</I> is reported when the triggering item triggers the items to report. </DD
><DD 

>c) If the monitoring mode of the triggering item is <I>DISABLED</I>, then the triggering item does not trigger the items to report. </DD
><DD 

>d) If the monitoring mode of the item to report is <I>SAMPLING, then it</I> is reported when the triggering item triggers the items to report. </DD
><DD 

>e) If the monitoring mode of the item to report is <I>REPORTING</I>, this effectively causes the triggering item to be ignored. All notifications of the items to report are sent after the publishing interval expires. </DD
><DD 

>f) If the monitoring mode of the item to report is<I> DISABLED</I>, then there will be no sampling of the item to report and therefore no notifications to report. </DD
><DD 

>g) The first trigger shall occur when the first notification is queued for the triggering item after the creation of the link. </DD
></DL
><P 

><I>Clients</I> create and delete triggering links between a triggering item and a set of items to report. If the <I>MonitoredItem</I> that represents an item to report is deleted before its associated triggering link is deleted, the triggering link is also deleted, but the triggering item is otherwise unaffected. </P
><P 

>Deletion of a <I>MonitoredItem</I> should not be confused with the removal of the <I>Attribute</I> that it monitors. If the <I>Node</I> that contains the <I>Attribute</I> being monitored is deleted, the <I>MonitoredItem</I> generates a <I>Notification</I> with a <I>StatusCode</I> <I>Bad_NodeIdUnknown</I> that indicates the deletion, but the <I>MonitoredItem</I> is not deleted. </P
><H3 
 ID="LinkTarget_15942"
><B> CreateMonitoredItems </H3
><H4 
 ID="LinkTarget_15943"
>5.12.2.1 Description </H4
><P 

></B>This <I>Service</I> is used to create and add one or more <I>MonitoredItems</I> to a <I>Subscription</I>. A <I>MonitoredItem</I> is deleted automatically by the <I>Server</I> when the <I>Subscription</I> is deleted. Deleting a <I>MonitoredItem</I> causes its entire set of triggered item links to be deleted, but has no effect on the <I>MonitoredItems</I> referenced by the triggered items. </P
><P 

>Calling the <I>CreateMonitoredItems</I> <I>Service</I> repetitively to add a small number of <I>MonitoredItems</I> each time may adversely affect the performance of the <I>Server</I>. Instead, <I>Clients</I> should add a complete set of <I>MonitoredItems</I> to a <I>Subscription</I> whenever possible. </P
><P 

>When a <I>MonitoredItem</I> is added, the <I>Server</I> performs initialization processing for it. The initialization processing is defined by the <I>Notification</I> type of the item being monitored. <I>Notification</I> types are specified in this standard and in the Access Type Specification parts of this series of standards, such as <A href="#LinkTarget_7690" href="#">
Part 8</A>
. See <A href="#LinkTarget_7678" href="#">
Part 1</A>
 for a description of the Access Type Parts. </P
><P 

>When a user adds a monitored item that the user is denied read access to, the add operation for the item shall succeed and the bad status <I>Bad_NotReadable</I> or <I>Bad_UserAccessDenied</I> shall be returned in the Publish response. This is the same behaviour for the case where the access rights are changed after the call to <I>CreateMonitoredItems</I>. If the access rights change to read rights, the <I>Server</I> shall start sending data for the <I>MonitoredItem</I>. The same procedure shall be applied for an <I>IndexRange</I> that does not deliver data for the current value but could deliver data in the future. </P
><P 

>Monitored <I>Nodes</I> can be removed from the <I>AddressSpace</I> after the creation of a <I>MonitoredItem</I>. This does not affect the validity of the <I>MonitoredItem</I> but a <I>Bad_NodeIdUnknown</I> shall be returned in the Publish response. </P
><P 

>The return diagnostic info setting in the request header of the <I>CreateMonitoredItems</I> or the last <I>ModifyMonitoredItems</I> <I>Service</I> is applied to the <I>Monitored</I> <I>Items</I> and is used as the diagnostic information settings when sending Notifications in the <I>Publish</I> response. </P
><P 

>Illegal request values for parameters that can be revised do not generate errors. Instead the server will choose default values and indicate them in the corresponding revised parameter. </P
><P 

>It is strongly recommended by OPC UA that a <I>Client</I> reuses a <I>Subscription</I> after a short network interruption by activating the existing <I>Session</I> on a new <I>SecureChannel</I> as described in <A href="#LinkTarget_20808" href="#">
6.5</A>
. If a <I>Client</I> called <I>CreateMonitoredItems</I> during the network interruption and the call succeeded in the <I>Server</I> but did not return to the <I>Client</I>, then the <I>Client</I> does not know if the call succeeded. The <I>Client</I> may receive data changes for these monitored items but is not able to remove them since it does not know the <I>Server</I> handle for each monitored item. There is also no way for the <I>Client</I> to detect if the create succeeded. To delete and recreate the <I>Subscription</I> is also not an option since there may be several monitored items operating normally that should not be interrupted. To resolve this situation, the <I>Server</I> <I>Object</I> provides a <I>Method</I> <I>GetMonitoredItems</I> that returns the list of server and client handles for the monitored items in a <I>Subscription</I>. This <I>Method</I> is defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. The <I>Server</I> shall verify that the <I>Method</I> is called within the <I>Session</I> context of the <I>Session</I> that owns the <I>Subscription</I>. </P
><H4 
 ID="LinkTarget_15986"
><B>5.12.2.2 Parameters </H4
><P 

><A href="#LinkTarget_15992" href="#">
</B>Table 67</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 67 &ndash; CreateMonitoredItems Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I>-assigned identifier for the <I>Subscription</I> that will report <I>Notifications</I> for this <I>MonitoredItem</I> (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition).  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> timestampsToReturn </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>Timestamps ToReturn </P
></TD
><TD  
 valign="top"
><P 

>An enumeration that specifies the timestamp <I>Attributes</I> to be transmitted for each <I>MonitoredItem</I>. The <I>TimestampsToReturn</I> enumeration is defined in <A href="#LinkTarget_28538" href="#">
7.35</A>
. </P
><P 

>When monitoring <I>Events</I>, this applies only to <I>Event </I>fields that are of type <I>DataValue</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> itemsToCreate [] </P
></TD
><TD  
 valign="top"
><P 

>MonitoredItem CreateRequest </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>MonitoredItems</I> to be created and assigned to the specified <I>Subscription</I>. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  itemToMonitor </P
></TD
><TD  
 valign="top"
><P 

>ReadValueId </P
></TD
><TD  
 valign="top"
><P 

>Identifies an item in the <I>AddressSpace</I> to monitor. To monitor for <I>Events</I>, the <I>attributeId</I> element of the <I>ReadValueId</I> structure is the id of the <I>EventNotifier</I> <I>Attribute</I>. The <I>ReadValueId</I> type is defined in <A href="#LinkTarget_26731" href="#">
7.24</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  monitoringMode </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>MonitoringMode </P
></TD
><TD  
 valign="top"
><P 

>The monitoring mode to be set for the <I>MonitoredItem</I>. The <I>MonitoringMode</I> enumeration is defined in <A href="#LinkTarget_24988" href="#">
7.18</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  requestedParameters </P
></TD
><TD  
 valign="top"
><P 

>Monitoring Parameters </P
></TD
><TD  
 valign="top"
><P 

>The requested monitoring parameters. <I>Servers</I> negotiate the values of these parameters based on the <I>Subscription</I> and the capabilities of the <I>Server</I>. The <I>MonitoringParameters</I> type is defined in <A href="#LinkTarget_24311" href="#">
7.16</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>MonitoredItem CreateResult </P
></TD
><TD  
 valign="top"
><P 

>List of results for the <I>MonitoredItems</I> to create. The size and order of the list matches the size and order of the <I>itemsToCreate</I> request parameter. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

><I>StatusCode</I> for the <I>MonitoredItem</I> to create (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  monitoredItemId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

><I>Server</I>-assigned id for the <I>MonitoredItem</I> (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition). This id is unique within the <I>Subscription</I>, but might not be unique within the <I>Server</I> or <I>Session</I>. This parameter is present only if the <I>statusCode</I> indicates that the <I>MonitoredItem</I> was successfully created. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  revisedSampling  Interval </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The actual sampling interval that the <I>Server</I> will use. </P
><P 

>This value is based on a number of factors, including capabilities of the underlying system. The Server shall always return a <I>revisedSamplingInterval</I> that is equal or higher than the requested<I> </I><I>s</I><I>amplingInterval</I>. If the requested<I> </I><I>samplingInterval</I> is higher than the maximum sampling interval supported by the <I>Server</I>, the maximum sampling interval is returned. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  revisedQueueSize </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The actual queue size that the <I>Server</I> will use. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  filterResult </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>MonitoringFilterResult </P
></TD
><TD  
 valign="top"
><P 

>Contains any revised parameter values or error results associated with the <I>MonitoringFilter </I>specified in <I>request</I><I>edParameters</I>. This parameter may be omitted if no errors occurred. The <I>MonitoringFil</I><I>terResult</I> parameter type is an extensible parameter type specified in <A href="#LinkTarget_24407" href="#">
7.17</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>MonitoredItem</I><I>s</I> to create (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>itemsToCreate</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_16208"
><FONT size="+1"><B>5.12.2.3 Service results </H4
><P 

><A href="#LinkTarget_16218" href="#">
</B>Table 68</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 68 &ndash; CreateMonitoredItems Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TimestampsToReturnInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_16271"
><FONT size="+1"><B>5.12.2.4 StatusCodes </H4
><P 

><A href="#LinkTarget_16281" href="#">
</B>Table 69</A>
 defines values for the operation level <I>statusCode</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 69 &ndash; CreateMonitoredItems Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_MonitoringModeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_AttributeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeNoData </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>If the <I>ArrayDimensions</I> have a fixed length that can not change and no data exists within the range of indexes specified, Bad_IndexRangeNoData is returned in <I>CreateMonitoredItems</I>. Otherwise if the length of the array is dynamic, the <I>Server</I> shall return this status in a <I>Publish</I> response for the <I>MonitoredItem</I> if no data exists within the range. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DataEncodingInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DataEncodingUnsupported </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoredItemFilterInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoredItemFilterUnsupported </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_FilterNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyMonitoredItems </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> has reached its maximum number of monitored items. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_16420"
><FONT size="+1"><B> ModifyMonitoredItems </H3
><H4 
 ID="LinkTarget_16421"
>5.12.3.1 Description </H4
><P 

></B>This <I>Service</I> is used to modify <I>MonitoredItems</I> of a <I>Subscription</I>. Changes to the <I>MonitoredItem</I> settings shall be applied immediately by the <I>Server</I>. They take effect as soon as practical but not later than twice the new <I>revisedSamplingInterval</I>. </P
><P 

>The return diagnostic info setting in the request header of the <I>CreateMonitoredItems</I> or the last <I>ModifyMonitoredItems</I> <I>Service</I> is applied to the <I>Monitored</I> <I>Items</I> and is used as the diagnostic information settings when sending Notifications in the <I>Publish</I> response. </P
><P 

>Illegal request values for parameters that can be revised do not generate errors. Instead the server will choose default values and indicate them in the corresponding revised parameter. </P
><H4 
 ID="LinkTarget_16425"
><B>5.12.3.2 Parameters </H4
><P 

><A href="#LinkTarget_16431" href="#">
</B>Table 70</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 70 &ndash; ModifyMonitoredItems Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I>-assigned identifier for the <I>Subscription</I> used to qualify the <I>monitoredItemId</I> (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition).  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> timestampsToReturn </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>Timestamps ToReturn </P
></TD
><TD  
 valign="top"
><P 

>An enumeration that specifies the timestamp <I>Attributes</I> to be transmitted for each <I>MonitoredItem</I> to be modified. The <I>TimestampsToReturn</I> enumeration is defined in <A href="#LinkTarget_28538" href="#">
7.35</A>
. When monitoring <I>Events</I>, this applies only to <I>Event </I>fields that are of type <I>DataValue</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> itemsToModify [] </P
></TD
><TD  
 valign="top"
><P 

>MonitoredItemModifyRequest </P
></TD
><TD  
 valign="top"
><P 

>The list of <I>MonitoredItems</I> to modify. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  monitoredItemId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

><I>Server</I>-assigned id for the <I>MonitoredItem</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  requestedParameters </P
></TD
><TD  
 valign="top"
><P 

>Monitoring Parameters </P
></TD
><TD  
 valign="top"
><P 

>The requested values for the monitoring parameters. The <I>MonitoringParameters</I> type is defined in <A href="#LinkTarget_24311" href="#">
7.16</A>
. </P
><P 

>If the number of notifications in the queue exceeds the new queue size, the notifications exceeding the size shall be discarded following the configured discard policy. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>MonitoredItemModifyResult </P
></TD
><TD  
 valign="top"
><P 

>List of results for the <I>MonitoredItems</I> to modify. The size and order of the list matches the size and order of the <I>itemsToModify</I> request parameter. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

><I>StatusCode</I> for the <I>MonitoredItem</I> to be modified (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  revisedSampling </P
><P 

>  Interval </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The actual sampling interval that the <I>Server</I> will use. The <I>Server</I> returns the value it will actually use for the sampling interval. This value is based on a number of factors, including capabilities of the underlying system. </P
><P 

>The Server shall always return a <I>revisedSamplingInterval</I> that is equal or higher than the requested<I> </I><I>samplingInterval</I>. If the requested<I> </I><I>s</I><I>amplingInterval</I> is higher than the maximum sampling interval supported by the <I>Server</I>, the maximum sampling interval is returned. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  revisedQueueSize </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The actual queue size that the <I>Server</I> will use. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  filterResult </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>MonitoringFilterResult </P
></TD
><TD  
 valign="top"
><P 

>Contains any revised parameter values or error results associated with the <I>MonitoringFilter </I>specified in the request. This parameter may be omitted if no errors occurred. The <I>MonitoringFilterResult</I> parameter type is an extensible parameter type specified in <A href="#LinkTarget_24407" href="#">
7.17</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>MonitoredItems</I> to modify (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>itemsToModify</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_16616"
><FONT size="+1"><B>5.12.3.3 Service results </H4
><P 

><A href="#LinkTarget_16626" href="#">
</B>Table 71</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 71 &ndash; ModifyMonitoredItems Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TimestampsToReturnInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_16679"
><FONT size="+1"><B>5.12.3.4 StatusCodes </H4
><P 

><A href="#LinkTarget_16689" href="#">
</B>Table 72</A>
 defines values for the operation level <I>statusCode</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 72 &ndash; ModifyMonitoredItems Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_MonitoredItemIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoredItemFilterInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoredItemFilterUnsupported </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_FilterNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_16743"
><FONT size="+1"><B> SetMonitoringMode </H3
><H4 
 ID="LinkTarget_16744"
>5.12.4.1 Description </H4
><P 

></B>This <I>Service</I> is used to set the monitoring mode for one or more <I>MonitoredItems</I> of a <I>Subscription</I>. Setting the mode to DISABLED causes all queued <I>Notifications</I> to be deleted. </P
><H4 
 ID="LinkTarget_16746"
><B>5.12.4.2 Parameters </H4
><P 

><A href="#LinkTarget_16752" href="#">
</B>Table 73</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 73 &ndash; SetMonitoringMode Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I>-assigned identifier for the <I>Subscription</I> used to qualify the <I>monitoredItemIds</I> (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> monitoringMode </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>MonitoringMode </P
></TD
><TD  
 valign="top"
><P 

>The monitoring mode to be set for the <I>MonitoredItems</I>. The <I>MonitoringMode</I> enumeration is defined in <A href="#LinkTarget_24988" href="#">
7.18</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> monitoredItemIds [] </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Server</I>-assigned ids for the <I>MonitoredItems</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> for the <I>MonitoredItems</I> to enable/disable (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). The size and order of the list matches the size and order of the <I>monitoredItemIds</I> request parameter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>MonitoredItems</I> to enable/disable (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>monitoredItemIds</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_16874"
><FONT size="+1"><B>5.12.4.3 Service results </H4
><P 

><A href="#LinkTarget_16884" href="#">
</B>Table 74</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 74 &ndash; SetMonitoringMode Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoringModeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_16938"
><FONT size="+1"><B>5.12.4.4 StatusCodes </H4
><P 

><A href="#LinkTarget_16948" href="#">
</B>Table 75</A>
 defines values for the operation level <I>statusCode</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 75 &ndash; SetMonitoringMode Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Value </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_MonitoredItemIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_16968"
><FONT size="+1"><B> SetTriggering </H3
><H4 
 ID="LinkTarget_16970"
>5.12.5.1 Description </H4
><P 

></B>This <I>Service</I> is used to create and delete triggering links for a triggering item. The triggering item and the items to report shall belong to the same <I>Subscription</I>. </P
><P 

>Each triggering link links a triggering item to an item to report. Each link is represented by the <I>MonitoredItem</I> id for the item to report. An error code is returned if this id is invalid. </P
><P 

>See <A href="#LinkTarget_15910" href="#">
5.12.1.6</A>
 for a description of the triggering model. </P
><H4 
 ID="LinkTarget_16979"
><B>5.12.5.2 Parameters </H4
><P 

><A href="#LinkTarget_16985" href="#">
</B>Table 76</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 76 &ndash; SetTriggering Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>Request Header </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I>-assigned identifier for the <I>Subscription</I> that contains the triggering item and the items to report (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> triggeringItemId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

><I>Server</I>-assigned id for the <I>MonitoredItem</I> used as the triggering item. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> linksToAdd [] </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The list of <I>Server</I>-assigned ids of the items to report that are to be added as triggering links. The list of <I>linksToRemove</I> is processed before the <I>linksToAdd</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> linksToRemove [] </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The list of <I>Server</I>-assigned ids of the items to report for the triggering links to be deleted. The list of <I>linksToRemove</I> is processed before the <I>linksToAdd</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> addResults [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> for the items to add (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). The size and order of the list matches the size and order of the <I>linksToAdd</I> parameter specified in the request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> addDiagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>Diagnostic Info </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the links to add (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>linksT</I><I>oAdd</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> removeResults [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> for the items to delete. The size and order of the list matches the size and order of the <I>linksTo</I><I>Remove</I> parameter specified in the request.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> removeDiagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>Diagnostic Info </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the links to delete. The size and order of the list matches the size and order of the <I>linksTo</I><I>Remove</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_17125"
><FONT size="+1"><B>5.12.5.3 Service results </H4
><P 

><A href="#LinkTarget_17135" href="#">
</B>Table 77</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27514" href="#">
7.34</A>
. </P
><P 

><B>Table 77 &ndash; SetTriggering Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoredItemIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_17188"
><FONT size="+1"><B>5.12.5.4 StatusCodes </H4
><P 

><A href="#LinkTarget_17198" href="#">
</B>Table 78</A>
 defines values for the results parameters that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 78 &ndash; SetTriggering Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_MonitoredItemIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_17219"
><FONT size="+1"><B> DeleteMonitoredItems </H3
><H4 
 ID="LinkTarget_17220"
>5.12.6.1 Description </H4
><P 

></B>This <I>Service</I> is used to remove one or more <I>MonitoredItems</I> of a <I>Subscription</I>. When a <I>MonitoredItem</I> is deleted, its triggered item links are also deleted. </P
><P 

>Successful removal of a <I>MonitoredItem</I>, however, might not remove <I>Notifications</I> for the <I>MonitoredItem</I> that are in the process of being sent by the <I>Subscription</I>. Therefore, <I>Clients</I> may receive <I>Notifications</I> for the <I>MonitoredItem</I> after they have received a positive response that the <I>MonitoredItem</I> has been deleted. </P
><H4 
 ID="LinkTarget_17223"
><B>5.12.6.2 Parameters </H4
><P 

><A href="#LinkTarget_17229" href="#">
</B>Table 79</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 79 &ndash; DeleteMonitoredItems Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I>-assigned identifier for the <I>Subscription</I> that contains the <I>MonitoredItems</I> to be deleted (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition).  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> monitoredItemIds [] </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Server</I>-assigned ids for the <I>MonitoredItems</I> to be deleted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> for the <I>MonitoredItems</I> to delete (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). The size and order of the list matches the size and order of the <I>monitoredItemIds</I> request parameter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>MonitoredItems</I> to delete (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>monitoredItemIds</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_17337"
><FONT size="+1"><B>5.12.6.3 Service results </H4
><P 

><A href="#LinkTarget_17347" href="#">
</B>Table 80</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 80 &ndash; DeleteMonitoredItems Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_17389"
><FONT size="+1"><B>5.12.6.4 StatusCodes </H4
><P 

><A href="#LinkTarget_17399" href="#">
</B>Table 81</A>
 defines values for the <I>results</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 81 &ndash; DeleteMonitoredItems Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_MonitoredItemIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_17419"
><FONT size="+1"><B>5.13 Subscription Service Set </H2
><H3 
 ID="LinkTarget_17421"
> Subscription model </H3
><H4 
 ID="LinkTarget_17422"
>5.13.1.1 Description </H4
><P 

></B><I>Subscriptions</I> are used to report <I>Notifications</I> to the <I>Client</I>. Their general behaviour is summarized below. Their precise behaviour is described in <A href="#LinkTarget_17487" href="#">
5.13.1.2</A>
. </P
><DL 

><DD 

>a) <I>Subscriptions</I> have a set of <I>MonitoredItems</I> assigned to them by the <I>Client</I>. <I>MonitoredItems</I> generate <I>Notifications</I> that are to be reported to the <I>Client</I> by the <I>Subscription</I> (see <A href="#LinkTarget_15799" href="#">
5.12.1</A>
 for a description of <I>MonitoredItems</I>). </DD
><DD 

>b) <I>Subscriptions</I> have a publishing interval. The publishing interval of a <I>Subscription</I> defines the cyclic rate at which the <I>Subscription</I> executes. Each time it executes, it attempts to send a <I>NotificationMessage</I> to the <I>Client</I>. <I>NotificationMessages</I> contain <I>Notifications</I> that have not yet been reported to <I>Client</I>. </DD
><DD 

>c) <I>NotificationMessages</I> are sent to the <I>Client</I> in response to <I>Publish</I> requests. <I>Publish</I> requests are normally queued to the <I>Session </I>as they are received, and one is de-queued and processed by a subscription related to this <I>Session</I> for each publishing cycle, if there are <I>Notifications</I> to report. When there are not, the <I>Publish</I> request is not de-queued from the <I>Session</I>, and the <I>Server</I> waits until the next cycle and checks again for <I>Notifications</I>. </DD
><DD 

>d) At the beginning of a cycle, if there are <I>Notifications</I> to send but there are no <I>Publish</I> requests queued, the <I>Server</I> enters a wait state for a <I>Publish</I> request to be received. When one is received, it is processed immediately without waiting for the next publishing cycle. </DD
><DD 

>e) <I>NotificationMessages</I> are uniquely identified by sequence numbers that enable <I>Clients</I> to detect missed <I>Messages</I>. The publishing interval also defines the default sampling interval for its <I>MonitoredItems</I>. </DD
><DD 

>f) <I>Subscriptions</I> have a keep-alive counter that counts the number of consecutive publishing cycles in which there have been no <I>Notifications</I> to report to the <I>Client</I>. When the maximum keep-alive count is reached, a <I>Publish</I> request is de-queued and used to return a keep-alive <I>Message</I>. This keep-alive <I>Message</I> informs the <I>Client</I> that the <I>Subscription</I> is still active. Each keep-alive <I>Message</I> is a response to a <I>Publish</I> request in which the <I>notificationMessage</I> parameter does not contain any <I>Notifications</I> and that contains the sequence number of the next <I>NotificationMessage</I> that is to be sent. In the clauses that follow, the term <I>NotificationMessage</I> refers to a response to a <I>Publish</I> request in which the <I>notificationMessage</I> parameter actually contains one or more <I>Notifications</I>, as opposed to a <I>keep-alive Message</I> in which this parameter contains no <I>Notifications</I>. The maximum keep-alive count is set by the <I>Client</I> during <I>Subscription</I> creation and may be subsequently modified using the <I>ModifySubscription</I> <I>Service</I>. Similar to <I>Notification</I> processing described in (c) above, if there are no <I>Publish</I> requests queued, the <I>Server</I> waits for the next one to be received and sends the keep-alive immediately without waiting for the next publishing cycle. </DD
><DD 

>g) Publishing by a <I>Subscription</I> may be enabled or disabled by the <I>Client</I> when created, or subsequently using the <I>SetPublishingMode</I> <I>Service</I>. Disabling causes the <I>Subscription</I> to cease sending <I>NotificationMessages</I> to the <I>Client</I>. However, the <I>Subscription</I> continues to execute cyclically and continues to send keep-alive <I>Messages</I> to the <I>Client</I>. </DD
><DD 

>h) <I>Subscriptions</I> have a lifetime counter that counts the number of consecutive publishing cycles in which there have been no <I>Publish</I> requests available to send a <I>Publish</I> response for the <I>Subscription</I>. Any <I>Service</I> call that uses the <I>SubscriptionId</I> or the processing of a <I>Publish</I> response resets the lifetime counter of this <I>Subscription</I>. When this counter reaches the value calculated for the lifetime of a <I>Subscription</I> based on the MaxKeepAliveCount parameter in the <I>CreateSubscription</I> <I>Service</I> (<A href="#LinkTarget_18341" href="#">
5.13.2</A>
), the <I>Subscription</I> is closed. Closing the <I>Subscription</I> causes its <I>MonitoredItems</I> to be deleted. In addition the <I>Server</I> shall issue a <I>StatusChangeNotification</I> <I>notificationMessage</I> with the status code Bad_Timeout. The <I>StatusChangeNotification notificationMessage</I> type is defined in <A href="#LinkTarget_26539" href="#">
7.20.4</A>
. </DD
><DD 

>i) <I>Sessions</I> maintain a retransmission queue of sent <I>NotificationMessages</I>. <I>NotificationMessages</I> are retained in this queue until they are acknowledged. The <I>Session</I> shall maintain a retransmission queue size of at least two times the number of <I>Publish</I> requests per <I>Session</I> the <I>Server</I> supports. The minimum size of the retransmission queue may be changed by a <I>Profile</I> in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. The minimum number of <I>Publish</I> requests per <I>Session</I> the <I>Server</I> shall support is defined in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. <I>Clients</I> are required to acknowledge <I>NotificationMessages</I> as they </DD
></DL
><DL 

><DD 

>are received. In the case of a retransmission queue overflow, the oldest sent <I>NotificationMessage</I> gets deleted. If a <I>Subscription</I> is transferred to another <I>Session</I>, the queued <I>NotificationMessages</I> for this <I>Subscription</I> are moved from the old to the new <I>Session</I>. </DD
></DL
><P 

>The sequence number is an unsigned 32-bit integer that is incremented by one for each <I>NotificationMessage</I> sent. The value 0 is never used for the sequence number. The first <I>NotificationMessage</I> sent on a <I>Subscription</I> has a sequence number of 1. If the sequence number rolls over, it rolls over to 1. </P
><P 

>When a <I>Subscription</I> is created, the first <I>Message</I> is sent at the end of the first publishing cycle to inform the <I>Client</I> that the <I>Subscription</I> is operational. A <I>NotificationMessage</I> is sent if there are <I>Notifications</I> ready to be reported. If there are none, a keep-alive <I>Message</I> is sent instead that contains a sequence number of 1, indicating that the first <I>NotificationMessage</I> has not yet been sent. This is the only time a keep-alive <I>Message</I> is sent without waiting for the maximum keep-alive count to be reached, as specified in (f) above. </P
><P 

>The value of the sequence number is never reset during the lifetime of a <I>Subscription</I>. Therefore, the same sequence number shall not be reused on a <I>Subscription</I> until over four billion <I>NotificationMessages</I> have been sent. At a continuous rate of one thousand <I>NotificationMessages</I> per second on a given <I>Subscription</I>, it would take roughly fifty days for the same sequence number to be reused. This allows <I>Clients</I> to safely treat sequence numbers as unique. </P
><P 

>Sequence numbers are also used by <I>Clients</I> to acknowledge the receipt of <I>NotificationMessages</I>. <I>Publish</I> requests allow the <I>Client</I> to acknowledge all <I>Notifications</I> up to a specific sequence number and to acknowledge the sequence number of the last <I>NotificationMessage</I> received. One or more gaps may exist in between. Acknowledgements allow the <I>Server</I> to delete <I>NotificationMessages</I> from its retransmission queue. </P
><P 

><I>Clients</I> may ask for retransmission of selected <I>NotificationMessages</I> using the Republish <I>Service</I>. This <I>Service</I> returns the requested <I>Message</I>. </P
><P 

><I>Subscriptions</I> are designed to work independent of the actual communication connection between OPC UA <I>Client</I> and <I>Server</I> and independent of a <I>Session</I>. Short communication interruptions can be handled without losing data or events. To make sure that longer communication interruptions or planned disconnects can be handled without losing data or events, an OPC UA Server may support durable <I>Subscriptions</I>. If this feature is supported, the <I>Server</I> accepts high <I>Subscription</I> <I>LifetimeCounts</I> and large <I>MonitoredItem</I> <I>QueueSize</I> parameter settings. Clause <A href="#LinkTarget_20852" href="#">
6.6</A>
 describes how durable <I>Subscriptions</I> can be created and used. </P
><H4 
 ID="LinkTarget_17487"
><B>5.13.1.2 State table </H4
><P 

></B>The state table formally describes the operation of the <I>Subscription</I>. The following model of operations is described by this state table. This description applies when publishing is enabled or disabled for the <I>Subscription</I>. </P
><P 

>After creation of the <I>Subscription</I>, the <I>Server</I> starts the publishing timer and restarts it whenever it expires. If the timer expires the number of times defined for the <I>Subscription</I> lifetime without having received a <I>Subscription</I> <I>Service</I> request from the <I>Client</I>, the <I>Subscription</I> assumes that the <I>Client</I> is no longer present, and terminates. </P
><P 

><I>Clients</I> send <I>Publish</I> requests to <I>Servers</I> to receive <I>Notifications</I>. <I>Publish</I> requests are not directed to any one <I>Subscription</I> and, therefore, may be used by any <I>Subscription</I>. Each contains acknowledgements for one or more <I>Subscriptions</I>. These acknowledgements are processed when the <I>Publish</I> request is received. The <I>Server</I> then queues the request in a queue shared by all <I>Subscriptions</I>, except in the following cases. </P
><DL 

><DD 

>a) The previous <I>Publish</I> response indicated that there were still more <I>Notifications</I> ready to be transferred and there were no more <I>Publish</I> requests queued to transfer them. </DD
><DD 

>b) The publishing timer of a <I>Subscription</I> expired and there were either <I>Notifications</I> to be sent or a keep-alive <I>Message</I> to be sent. </DD
></DL
><P 

>In these cases, the newly received <I>Publish</I> request is processed immediately by the first <I>Subscription</I> to encounter either case (a) or case (b). </P
><P 

>Each time the publishing timer expires, it is immediately reset. If there are <I>Notifications</I> or a keep-alive <I>Message</I> to be sent, it de-queues and processes a <I>Publish</I> request. When a <I>Subscription</I> processes a <I>Publish</I> request, it accesses the queues of its <I>MonitoredItems</I> and de-queues its <I>Notifications</I>, if any. It returns these <I>Notifications</I> in the response, setting the <I>moreNotifications</I> flag if it was not able to return all available <I>Notifications</I> in the response. </P
><P 

>If there were <I>Notifications</I> or a keep-alive <I>Message</I> to be sent but there were no <I>Publish</I> requests queued, the <I>Subscription</I> assumes that the <I>Publish</I> request is late and waits for the next <I>Publish</I> request to be received, as described in case (b). </P
><P 

>If the <I>Subscription</I> is disabled when the publishing timer expires or if there are no <I>Notifications</I> available, it enters the keep-alive state and sets the keep-alive counter to its maximum value as defined for the <I>Subscription</I>. </P
><P 

>While in the keep-alive state, it checks for <I>Notifications</I> each time the publishing timer expires. If one or more <I>Notifications</I> have been generated, a <I>Publish</I> request is de-queued and a <I>NotificationMessage</I> is returned in the response. However, if the publishing timer expires without a <I>Notification</I> becoming available, a <I>Publish</I> request is de-queued and a keep-alive <I>Message</I> is returned in the response. The <I>Subscription</I> then returns to the normal state of waiting for the publishing timer to expire again. If, in either of these cases, there are no <I>Publish</I> requests queued, the <I>Subscription</I> waits for the next <I>Publish</I> request to be received, as described in case (b). </P
><P 

>The <I>Subscription</I> states are defined in <A href="#LinkTarget_17508" href="#">
Table 82</A>
. </P
><P 

><B>Table 82 &ndash; Subscription States </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">State </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>CLOSED </P
></TD
><TD  
 valign="top"
><P 

>The <I>Subscription</I> has not yet been created or has terminated. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CREATING </P
></TD
><TD  
 valign="top"
><P 

>The <I>Subscription</I> is being created. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NORMAL </P
></TD
><TD  
 valign="top"
><P 

>The <I>Subscription</I> is cyclically checking for <I>Notifications</I> from its <I>MonitoredItems</I>. The keep-alive counter is not used in this state. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LATE </P
></TD
><TD  
 valign="top"
><P 

>The publishing timer has expired and there are <I>Notifications</I> available or a keep-alive <I>Message</I> is ready to be sent, but there are no <I>Publish</I> requests queued. When in this state, the next <I>Publish</I> request is processed when it is received. The keep-alive counter is not used in this state. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>The <I>Subscription</I> is cyclically checking for <I>Notifications</I> from its <I>MonitoredItems</I> or for the keep-alive counter to count down to 0 from its maximum. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The state table is described in <A href="#LinkTarget_17578" href="#">
Table 83</A>
. The following rules and conventions apply. </P
><DL 

><DD 

>a) <I>Events</I> represent the receipt of <I>Service</I> requests and the occurrence internal <I>Events</I>, such as timer expirations. </DD
><DD 

>b) <I>Service</I> requests <I>Events</I> may be accompanied by conditions that test <I>Service</I> parameter values. Parameter names begin with a lower case letter. </DD
><DD 

>c) Internal <I>Events</I> may be accompanied by conditions that test state <I>Variable</I> values. State <I>Variables</I> are defined in <A href="#LinkTarget_18092" href="#">
5.13.1.3</A>
. They begin with an upper case letter. </DD
><DD 

>d) <I>Service</I> request and internal <I>Events</I> may be accompanied by conditions represented by functions whose return value is tested. Functions are identified by &ldquo;()&rdquo; after their name. They are described in <A href="#LinkTarget_18169" href="#">
5.13.1.4</A>
. </DD
><DD 

>e) When an <I>Event</I> is received, the first transition for the current state is located and the transitions are searched sequentially for the first transition that meets the <I>Event</I> or conditions criteria. If none are found, the <I>Event</I> is ignored. </DD
><DD 

>f) Actions are described by functions and state <I>Variable</I> manipulations. </DD
><DD 

>g) The LifetimeTimerExpires <I>Event</I> is triggered when its corresponding counter reaches zero. </DD
></DL
><P 

><B>Table 83 &ndash; Subscription State Table </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1"># </P
></TH
><TH 
 valign="top"
><P 

>Current State </P
></TH
><TH 
 valign="top"
><P 

>Event/Conditions </P
></TH
><TH 
 valign="top"
><P 

>Action </P
></TH
><TH 
 valign="top"
><P 

>Next State </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>1 </P
></TD
><TD  
 valign="top"
><P 

>CLOSED </P
></TD
><TD  
 valign="top"
><P 

>Receive CreateSubscription Request  </P
></TD
><TD  
 valign="top"
><P 

>CreateSubscription() </P
></TD
><TD  
 valign="top"
><P 

>CREATING </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>CREATING </P
></TD
><TD  
 valign="top"
><P 

>CreateSubscription fails </P
></TD
><TD  
 valign="top"
><P 

>ReturnNegativeResponse() </P
></TD
><TD  
 valign="top"
><P 

>CLOSED </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>CREATING </P
></TD
><TD  
 valign="top"
><P 

>CreateSubscription succeeds </P
></TD
><TD  
 valign="top"
><P 

>InitializeSubscription() </P
><P 

>MessageSent = FALSE </P
><P 

>ReturnResponse()  </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
><TD  
 valign="top"
><P 

>Receive <I>Publish</I> Request  </P
><P 

>&amp;&amp;  </P
><P 

>( </P
><P 

>  PublishingEnabled == FALSE </P
><P 

> ||  </P
><P 

>  (PublishingEnabled == TRUE </P
><P 

>  &amp;&amp; MoreNotifications == FALSE) </P
><P 

>) </P
></TD
><TD  
 valign="top"
><P 

>DeleteAckedNotificationMsgs() </P
><P 

>EnqueuePublishingReq() </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
><TD  
 valign="top"
><P 

>Receive <I>Publish</I> Request  </P
><P 

>&amp;&amp; PublishingEnabled == TRUE  </P
><P 

>&amp;&amp; MoreNotifications == TRUE </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter()  </P
><P 

>DeleteAckedNotificationMsgs() </P
><P 

>ReturnNotifications() </P
><P 

>MessageSent = TRUE </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
><TD  
 valign="top"
><P 

>PublishingTimer Expires </P
><P 

>&amp;&amp; PublishingReqQueued == TRUE </P
><P 

>&amp;&amp; PublishingEnabled == TRUE  </P
><P 

>&amp;&amp; NotificationsAvailable == TRUE </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter() </P
><P 

>StartPublishingTimer() </P
><P 

>DequeuePublishReq() </P
><P 

>ReturnNotifications() </P
><P 

>MessageSent == TRUE </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
><TD  
 valign="top"
><P 

>PublishingTimer Expires </P
><P 

>&amp;&amp; PublishingReqQueued == TRUE </P
><P 

>&amp;&amp; MessageSent == FALSE </P
><P 

>&amp;&amp;  </P
><P 

>( </P
><P 

>  PublishingEnabled == FALSE </P
><P 

> ||  </P
><P 

>  (PublishingEnabled == TRUE </P
><P 

>  &amp;&amp; NotificationsAvailable == FALSE) </P
><P 

>) </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter() </P
><P 

>StartPublishingTimer() </P
><P 

>DequeuePublishReq() </P
><P 

>ReturnKeepAlive() </P
><P 

>MessageSent == TRUE </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>8 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
><TD  
 valign="top"
><P 

>PublishingTimer Expires  </P
><P 

>&amp;&amp; PublishingReqQueued == FALSE </P
><P 

>&amp;&amp; </P
><P 

>( </P
><P 

>  MessageSent == FALSE </P
><P 

> ||  </P
><P 

>  (PublishingEnabled == TRUE  </P
><P 

>  &amp;&amp; NotificationsAvailable == TRUE) </P
><P 

>) </P
></TD
><TD  
 valign="top"
><P 

>StartPublishingTimer() </P
></TD
><TD  
 valign="top"
><P 

>LATE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
><TD  
 valign="top"
><P 

>PublishingTimer Expires </P
><P 

>&amp;&amp; MessageSent == TRUE </P
><P 

>&amp;&amp; </P
><P 

>( </P
><P 

>  PublishingEnabled == FALSE  </P
><P 

> || </P
><P 

>  (PublishingEnabled == TRUE  </P
><P 

>  &amp;&amp; NotificationsAvailable == FALSE) </P
><P 

>) </P
></TD
><TD  
 valign="top"
><P 

>StartPublishingTimer() </P
><P 

>ResetKeepAliveCounter() </P
></TD
><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

>LATE </P
></TD
><TD  
 valign="top"
><P 

>Receive <I>Publish</I> Request  </P
><P 

>&amp;&amp; PublishingEnabled == TRUE </P
><P 

>&amp;&amp; (NotificationsAvailable == TRUE </P
><P 

>|| MoreNotifications == TRUE) </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter()  </P
><P 

>DeleteAckedNotificationMsgs() </P
><P 

>ReturnNotifications() </P
><P 

>MessageSent = TRUE </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>11 </P
></TD
><TD  
 valign="top"
><P 

>LATE </P
></TD
><TD  
 valign="top"
><P 

>Receive <I>Publish</I> Request  </P
><P 

>&amp;&amp; </P
><P 

>( </P
><P 

>  PublishingEnabled == FALSE </P
><P 

> || </P
><P 

>  (PublishingEnabled == TRUE </P
><P 

>  &amp;&amp; NotificationsAvailable == FALSE </P
><P 

>  &amp;&amp; MoreNotifications == FALSE) </P
><P 

>) </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter()  </P
><P 

>DeleteAckedNotificationMsgs() </P
><P 

>ReturnKeepAlive() </P
><P 

>MessageSent = TRUE </P
></TD
><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12 </P
></TD
><TD  
 valign="top"
><P 

>LATE </P
></TD
><TD  
 valign="top"
><P 

>PublishingTimer Expires </P
></TD
><TD  
 valign="top"
><P 

>StartPublishingTimer() </P
></TD
><TD  
 valign="top"
><P 

>LATE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>13 </P
></TD
><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>Receive <I>Publish</I> Request </P
></TD
><TD  
 valign="top"
><P 

>DeleteAckedNotificationMsgs() </P
><P 

>EnqueuePublishingReq() </P
></TD
><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>14 </P
></TD
><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>PublishingTimer Expires </P
><P 

>&amp;&amp; PublishingEnabled == TRUE </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter() </P
><P 

>StartPublishingTimer() </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B># </P
></TH
><TH 
 valign="top"
><P 

>Current State </P
></TH
><TH 
 valign="top"
><P 

>Event/Conditions </P
></TH
><TH 
 valign="top"
><P 

>Action </P
></TH
><TH 
 valign="top"
><P 

>Next State </P
></TH
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

></B>&amp;&amp; NotificationsAvailable == TRUE </P
><P 

>&amp;&amp; PublishingReqQueued == TRUE </P
></TD
><TD  
 valign="top"
><P 

>DequeuePublishReq() </P
><P 

>ReturnNotifications() </P
><P 

>MessageSent == TRUE </P
></TD
><TD  
 valign="top"
></TD></TR
><TR  

><TD  
 valign="top"
><P 

>15 </P
></TD
><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>PublishingTimer Expires </P
><P 

>&amp;&amp; PublishingReqQueued == TRUE </P
><P 

>&amp;&amp; KeepAliveCounter == 1 </P
><P 

>&amp;&amp; </P
><P 

>( </P
><P 

>  PublishingEnabled == FALSE </P
><P 

> || </P
><P 

>  (PublishingEnabled == TRUE </P
><P 

>  &amp;&amp; NotificationsAvailable == FALSE </P
><P 

>) </P
></TD
><TD  
 valign="top"
><P 

>StartPublishingTimer() </P
><P 

>DequeuePublishReq() </P
><P 

>ReturnKeepAlive() </P
><P 

>ResetKeepAliveCounter() </P
></TD
><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>16 </P
></TD
><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>PublishingTimer Expires </P
><P 

>&amp;&amp; KeepAliveCounter &gt; 1 </P
><P 

>&amp;&amp;  </P
><P 

>( </P
><P 

>  PublishingEnabled == FALSE </P
><P 

> || </P
><P 

>  (PublishingEnabled == TRUE </P
><P 

>  &amp;&amp; NotificationsAvailable == FALSE) </P
><P 

>) </P
></TD
><TD  
 valign="top"
><P 

>StartPublishingTimer() </P
><P 

>KeepAliveCounter-- </P
></TD
><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>17 </P
></TD
><TD  
 valign="top"
><P 

>KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>PublishingTimer Expires </P
><P 

>&amp;&amp; PublishingReqQueued == FALSE </P
><P 

>&amp;&amp;  </P
><P 

>( </P
><P 

>  KeepAliveCounter == 1 </P
><P 

> || </P
><P 

>  (KeepAliveCounter &gt; 1 </P
><P 

>  &amp;&amp; PublishingEnabled == TRUE </P
><P 

>  &amp;&amp; NotificationsAvailable == TRUE) </P
><P 

>) </P
></TD
><TD  
 valign="top"
><P 

>StartPublishingTimer() </P
></TD
><TD  
 valign="top"
><P 

>LATE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>18 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
><P 

>|| LATE </P
><P 

>|| KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>Receive ModifySubscription Request </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter() </P
><P 

>UpdateSubscriptionParams() </P
><P 

>ReturnResponse() </P
></TD
><TD  
 valign="top"
><P 

>SAME </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>19 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
><P 

>|| LATE </P
><P 

>|| KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>Receive SetPublishingMode Request </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter() </P
><P 

>SetPublishingEnabled() </P
><P 

>MoreNotifications = FALSE </P
><P 

>ReturnResponse() </P
></TD
><TD  
 valign="top"
><P 

>SAME </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>20 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
><P 

>|| LATE </P
><P 

>|| KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>Receive Republish Request </P
><P 

>&amp;&amp; RequestedMessageFound == TRUE </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter() </P
><P 

>ReturnResponse() </P
></TD
><TD  
 valign="top"
><P 

>SAME </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>21 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
><P 

>|| LATE </P
><P 

>|| KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>Receive Republish Request </P
><P 

>&amp;&amp; RequestedMessageFound == FALSE </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter() </P
><P 

>ReturnNegativeResponse() </P
></TD
><TD  
 valign="top"
><P 

>SAME </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>22 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
><P 

>|| LATE </P
><P 

>|| KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>Receive TransferSubscriptions Request </P
><P 

>&amp;&amp; SessionChanged() == FALSE </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter() </P
><P 

>ReturnNegativeResponse () </P
></TD
><TD  
 valign="top"
><P 

>SAME </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>23 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
><P 

>|| LATE </P
><P 

>|| KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>Receive TransferSubscriptions Request </P
><P 

>&amp;&amp; SessionChanged() == TRUE </P
><P 

>&amp;&amp; ClientValidated() ==TRUE </P
></TD
><TD  
 valign="top"
><P 

>SetSession() </P
><P 

>ResetLifetimeCounter()  </P
><P 

>ReturnResponse() </P
><P 

>IssueStatusChangeNotification() </P
></TD
><TD  
 valign="top"
><P 

>SAME </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>24 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
><P 

>|| LATE </P
><P 

>|| KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>Receive TransferSubscriptions Request </P
><P 

>&amp;&amp; SessionChanged() == TRUE </P
><P 

>&amp;&amp; ClientValidated() == FALSE </P
></TD
><TD  
 valign="top"
><P 

>ReturnNegativeResponse() </P
></TD
><TD  
 valign="top"
><P 

>SAME </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>25 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
><P 

>|| LATE </P
><P 

>|| KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>Receive DeleteSubscriptions Request </P
><P 

>&amp;&amp; SubscriptionAssignedToClient ==TRUE </P
></TD
><TD  
 valign="top"
><P 

>DeleteMonitoredItems() </P
><P 

>DeleteClientPublReqQueue() </P
></TD
><TD  
 valign="top"
><P 

>CLOSED </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>26 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
><P 

>|| LATE </P
><P 

>|| KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>Receive DeleteSubscriptions Request </P
><P 

>&amp;&amp; SubscriptionAssignedToClient ==FALSE </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter()  </P
><P 

>ReturnNegativeResponse() </P
></TD
><TD  
 valign="top"
><P 

>SAME </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>27 </P
></TD
><TD  
 valign="top"
><P 

>NORMAL </P
><P 

>|| LATE </P
><P 

>|| KEEPALIVE </P
></TD
><TD  
 valign="top"
><P 

>LifetimeCounter == 1 </P
><P 

>The LifetimeCounter is decremented if PublishingTimer expires and PublishingReqQueued == FALSE </P
><P 

>The LifetimeCounter is reset if PublishingReqQueued == TRUE. </P
></TD
><TD  
 valign="top"
><P 

>DeleteMonitoredItems() </P
><P 

>IssueStatusChangeNotification() </P
></TD
><TD  
 valign="top"
><P 

>CLOSED </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_18092"
><FONT size="+1"><B>5.13.1.3 State Variables and parameters </H4
><P 

></B>The state <I>Variables</I> are defined alphabetically in <A href="#LinkTarget_18100" href="#">
Table 84</A>
. </P
><P 

><B>Table 84 &ndash; State variables and parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">State Variable </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>MoreNotifications </P
></TD
><TD  
 valign="top"
><P 

>A boolean value that is set to TRUE only by the CreateNotificationMsg() when there were too many <I>Notifications</I> for a single <I>NotificationMessage</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LatePublishRequest </P
></TD
><TD  
 valign="top"
><P 

>A boolean value that is set to TRUE to reflect that, the last time the publishing timer expired, there were no <I>Publish</I> requests queued. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LifetimeCounter </P
></TD
><TD  
 valign="top"
><P 

>A value that contains the number of consecutive publishing timer expirations without <I>Client</I> activity before the <I>Subscription</I> is terminated. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MessageSent </P
></TD
><TD  
 valign="top"
><P 

>A boolean value that is set to TRUE to mean that either a NotificationMessage or a keep-alive <I>Message</I> has been sent on the <I>Subscription</I>. It is a flag that is used to ensure that either a <I>NotificationMessage</I> or a keep-alive <I>Message</I> is sent out the first time the publishing timer expires. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NotificationsAvailable </P
></TD
><TD  
 valign="top"
><P 

>A boolean value that is set to TRUE only when there is at least one <I>MonitoredItem</I> that is in the reporting mode and that has a <I>Notification</I> queued or there is at least one item to report whose triggering item has triggered and that has a <I>Notification</I> queued. The transition of this state <I>Variable</I> from FALSE to TRUE creates the &ldquo;New <I>Notification</I> Queued&rdquo; <I>Event</I> in the state table. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>PublishingEnabled </P
></TD
><TD  
 valign="top"
><P 

>The parameter that requests publishing to be enabled or disabled. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>PublishingReqQueued </P
></TD
><TD  
 valign="top"
><P 

>A boolean value that is set to TRUE only when there is a <I>Publish</I> request <I>Message</I> queued to the <I>Subscription</I>.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>RequestedMessageFound </P
></TD
><TD  
 valign="top"
><P 

>A boolean value that is set to TRUE only when the <I>Message</I> requested to be retransmitted was found in the retransmission queue. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SeqNum </P
></TD
><TD  
 valign="top"
><P 

>The value that records the value of the sequence number used in <I>NotificationMessages.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SubscriptionAssignedToClient </P
></TD
><TD  
 valign="top"
><P 

>A boolean value that is set to TRUE only when the <I>Subscription</I> requested to be deleted is assigned to the <I>Client</I> that issued the request. A <I>Subscription</I> is assigned to the <I>Client</I> that created it. That assignment can only be changed through successful completion of the TransferSubscriptions <I>Service</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_18169"
><FONT size="+1"><B>5.13.1.4 Functions </H4
><P 

></B>The action functions are defined alphabetically in <A href="#LinkTarget_18176" href="#">
Table 85</A>
. </P
><P 

><B>Table 85 &ndash; Functions </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Function </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ClientValidated() </P
></TD
><TD  
 valign="top"
><P 

>A boolean function that returns TRUE only when the <I>Client</I> that is submitting a TransferSubscriptions request is operating on behalf of the same user and supports the same <I>Profiles</I> as the <I>Client</I> of the previous <I>Session</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CreateNotificationMsg() </P
></TD
><TD  
 valign="top"
><P 

>Increment the SeqNum and create a <I>NotificationMessage</I> from the <I>MonitoredItems</I> assigned to the <I>Subscription</I>. </P
><P 

>Save the newly-created <I>NotificationMessage</I> in the retransmission queue. </P
><P 

>If all available <I>Notifications</I> can be sent in the <I>Publish</I> response, the MoreNotifications state <I>Variable</I> is set to FALSE. Otherwise, it is set to TRUE. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>CreateSubscription() </P
></TD
><TD  
 valign="top"
><P 

>Attempt to create the <I>Subscription</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DeleteAckedNotificationMsgs()  </P
></TD
><TD  
 valign="top"
><P 

>Delete the <I>NotificationMessages</I> from the retransmission queue that were acknowledged by the request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DeleteClientPublReqQueue() </P
></TD
><TD  
 valign="top"
><P 

>Clear the <I>Publish</I> request queue for the <I>Client</I> that is sending the DeleteSubscriptions request, if there are no more <I>Subscriptions</I> assigned to that <I>Client</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DeleteMonitoredItems() </P
></TD
><TD  
 valign="top"
><P 

>Delete all <I>MonitoredItems</I> assigned to the <I>Subscription.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DequeuePublishReq() </P
></TD
><TD  
 valign="top"
><P 

>De-queue a publishing request in first-in first-out order. </P
><P 

>Validate if the publish request is still valid by checking the timeoutHint in the RequestHeader.  </P
><P 

>If the request timed out, send a <I>Bad_Timeout</I> service result for the request and de-queue another publish request. </P
><P 

>ResetLifetimeCounter() </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EnqueuePublishingReq() </P
></TD
><TD  
 valign="top"
><P 

>Enqueue the publishing request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>InitializeSubscription() </P
></TD
><TD  
 valign="top"
><P 

>ResetLifetimeCounter() </P
><P 

>MoreNotifications = FALSE </P
><P 

>PublishRateChange = FALSE </P
><P 

>PublishingEnabled = value of publishingEnabled parameter in the CreateSubscription request </P
><P 

>PublishingReqQueued = FALSE </P
><P 

>SeqNum = 0 </P
><P 

>SetSession() </P
><P 

>StartPublishingTimer() </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IssueStatusChangeNotification() </P
></TD
><TD  
 valign="top"
><P 

>Issue a <I>StatusChangeNotification</I> <I>notificationMessage</I> with a status code for the status change of the Subscription. The <I>St</I><I>atusChangeNotification notificationMessage</I> type is defined in <A href="#LinkTarget_26539" href="#">
7.20.4</A>
. Bad_Timeout status code is used if the lifetime expires and Good_SubscriptionTransferred is used if the Subscriptions was transferred to another Session. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ResetKeepAliveCounter() </P
></TD
><TD  
 valign="top"
><P 

>Reset the keep-alive counter to the maximum keep-alive count of the <I>Subscription</I>. The maximum keep-alive count is set by the <I>Client</I> when the <I>Subscription</I> is created and may be modified using the ModifySubscription <I>Service</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ResetLifetimeCounter() </P
></TD
><TD  
 valign="top"
><P 

>Reset the LifetimeCounter <I>Variable</I> to the value specified for the lifetime of a <I>Subscription</I> in the CreateSubscription <I>Service</I> (<A href="#LinkTarget_18341" href="#">
5.13.2</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReturnKeepAlive()  </P
></TD
><TD  
 valign="top"
><P 

>CreateKeepAliveMsg() </P
><P 

>ReturnResponse() </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReturnNegativeResponse () </P
></TD
><TD  
 valign="top"
><P 

>Return a <I>Service</I> response indicating the appropriate <I>Service</I> level error. No parameters are returned other than the responseHeader that contains the <I>Service</I> level <I>StatusCode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReturnNotifications() </P
></TD
><TD  
 valign="top"
><P 

>CreateNotificationMsg() </P
><P 

>ReturnResponse() </P
><P 

>If (MoreNotifications == TRUE) &amp;&amp; (PublishingReqQueued == TRUE) </P
><P 

>{ </P
><P 

> DequeuePublishReq() </P
><P 

> Loop through this function again </P
><P 

>} </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReturnResponse()  </P
></TD
><TD  
 valign="top"
><P 

>Return the appropriate response, setting the appropriate parameter values and <I>StatusCodes</I> defined for the <I>Service</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SessionChanged() </P
></TD
><TD  
 valign="top"
><P 

>A boolean function that returns TRUE only when the <I>Session</I> used to send a TransferSubscriptions request is different from the <I>Client</I> <I>Session</I> currently associated with the <I>Subscription</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SetPublishingEnabled () </P
></TD
><TD  
 valign="top"
><P 

>Set the PublishingEnabled state <I>Variable</I> to the value of the publishingEnabled parameter received in the request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SetSession </P
></TD
><TD  
 valign="top"
><P 

>Set the <I>Session</I> information for the <I>Subscription</I> to match the <I>Session</I> on which the TransferSubscriptions request was issued. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>StartPublishingTimer() </P
></TD
><TD  
 valign="top"
><P 

>Start or restart the publishing timer and decrement the LifetimeCounter <I>Variable</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UpdateSubscriptionParams() </P
></TD
><TD  
 valign="top"
><P 

>Negotiate and update the <I>Subscription</I> parameters. If the new keep-alive interval is less than the current value of the keep-alive counter, perform ResetKeepAliveCounter() and ResetLifetimeCounter(). </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_18341"
><FONT size="+1"><B> CreateSubscription </H3
><H4 
 ID="LinkTarget_18342"
>5.13.2.1 Description </H4
><P 

></B>This <I>Service</I> is used to create a <I>Subscription</I>. <I>Subscriptions</I> monitor a set of <I>MonitoredItems</I> for <I>Notifications</I> and return them to the <I>Client</I> in response to <I>Publish</I> requests. </P
><P 

>Illegal request values for parameters that can be revised do not generate errors. Instead the server will choose default values and indicate them in the corresponding revised parameter. </P
><H4 
 ID="LinkTarget_18346"
><B>5.13.2.2 Parameters </H4
><P 

><A href="#LinkTarget_18352" href="#">
</B>Table 86</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 86 &ndash; CreateSubscription Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>Request Header </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestedPublishing </P
><P 

> Interval </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>This interval defines the cyclic rate that the <I>Subscription</I> is being requested to return <I>Notifications</I> to the <I>C</I><I>lient</I>. This interval is expressed in milliseconds. This interval is represented by the publishing timer in the <I>Subscription</I> state table (see <A href="#LinkTarget_17487" href="#">
5.13.1.2</A>
). </P
><P 

>The negotiated value for this parameter returned in the response is used as the default sampling interval for <I>MonitoredItems</I> assigned to this <I>Subscription</I>. </P
><P 

>If the requested value is 0 or negative, the server shall revise with the fastest supported publishing interval. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestedLifetimeCount </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>Requested lifetime count (see <A href="#LinkTarget_23634" href="#">
7.5</A>
 for <I>Counter</I> definition). The lifetime count shall be a minimum of three times the keep keep-alive count. </P
><P 

>When the publishing timer has expired this number of times without a <I>Publish</I> request being available to send a <I>NotificationMessage</I>, then the <I>Subscription</I> shall be deleted by the <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestedMaxKeepAlive </P
><P 

> Count </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>Requested maximum keep-alive count (see <A href="#LinkTarget_23634" href="#">
7.5</A>
 for <I>Counter</I> definition). When the publishing timer has expired this number of times without requiring any <I>NotificationMessage</I> to be sent, the <I>Subscription</I> sends a keep-alive <I>Message</I> to the <I>Client</I>. </P
><P 

>The negotiated value for this parameter is returned in the response. </P
><P 

>If the requested value is 0, the server shall revise with the smallest supported keep-alive count. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> maxNotificationsPerPublish </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The maximum number of notifications that the <I>Client</I> wishes to receive in a single <I>Publish</I> response. A value of zero indicates that there is no limit. </P
><P 

>The number of notifications per <I>Publish</I> is the sum of monitoredItems in the DataChangeNotification and events in the EventNotificationList. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> publishingEnabled </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A <I>Boolean</I> parameter with the following values: </P
><P 

> TRUE publishing is enabled for the <I>Subscription</I>. </P
><P 

> FALSE publishing is disabled for the <I>Subscription</I>. </P
><P 

>The value of this parameter does not affect the value of the monitoring mode <I>Attribute</I> of <I>MonitoredItems</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> priority </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>Indicates the relative priority of the <I>Subscription</I>. When more than one <I>Subscription</I> needs to send <I>Notifications</I>, the <I>Server</I> should de-queue a Publish request to the <I>Subscription</I> with the highest <I>priority</I> number. For <I>Subscriptions</I> with equal <I>priority</I> the <I>Server</I> should de-queue Publish requests in a round-robin fashion. </P
><P 

>A Client that does not require special priority settings should set this value to zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>Response Header </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I>-assigned identifier for the <I>Subscription</I> (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition). This identifier shall be unique for the entire <I>Server</I>, not just for the <I>Session</I>, in order to allow the <I>Subscription</I> to be transferred to another <I>Session</I> using the TransferSubscriptions service. </P
><P 

>After Server start-up the generation of <I>subscriptionIds</I> should start from a random <I>IntegerId</I> or continue from the point before the restart. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> revisedPublishingInterval </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The actual publishing interval that the <I>Server</I> will use, expressed in milliseconds. The <I>Server</I> should attempt to honour the <I>Client</I> request for this parameter, but may negotiate this value up or down to meet its own constraints. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> revisedLifetimeCount </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The lifetime of the <I>Subscription</I> shall be a minimum of three times the keep-alive interval negotiated by the <I>Server.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> revisedMaxKeepAliveCount </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The actual maximum keep-alive count (see <A href="#LinkTarget_23634" href="#">
7.5</A>
 for <I>Counter</I> definition). The <I>Server</I> should attempt to honour the <I>Client</I> request for this parameter, but may negotiate this value up or down to meet its own constraints. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_18532"
><FONT size="+1"><B>5.13.2.3 Service results </H4
><P 

><A href="#LinkTarget_18542" href="#">
</B>Table 87</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 87 &ndash; CreateSubscription Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_TooManySubscriptions </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> has reached its maximum number of subscriptions. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_18558"
><FONT size="+1"><B> ModifySubscription </H3
><H4 
 ID="LinkTarget_18559"
>5.13.3.1 Description </H4
><P 

></B>This <I>Service</I> is used to modify a <I>Subscription</I>. </P
><P 

>Illegal request values for parameters that can be revised do not generate errors. Instead the server will choose default values and indicate them in the corresponding revised parameter. </P
><P 

>Changes to the <I>Subscription</I> settings shall be applied immediately by the <I>Server</I>. They take effect as soon as practical but not later than twice the new <I>revisedPublishingInterval</I>. </P
><H4 
 ID="LinkTarget_18563"
><B>5.13.3.2 Parameters </H4
><P 

><A href="#LinkTarget_18569" href="#">
</B>Table 88</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 88 &ndash; ModifySubscription Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I>-assigned identifier for the <I>Subscription</I> (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestedPublishingInterval </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>This interval defines the cyclic rate that the <I>Subscription</I> is being requested to return <I>Notifications</I> to the <I>Client</I>. This interval is expressed in milliseconds. This interval is represented by the publishing timer in the <I>Subscription</I> state table (see <A href="#LinkTarget_17487" href="#">
5.13.1.2</A>
). </P
><P 

>The negotiated value for this parameter returned in the response is used as the default sampling interval for <I>MonitoredItems</I> assigned to this <I>Subscription</I>. </P
><P 

>If the requested value is 0 or negative, the server shall revise with the fastest supported publishing interval. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestedLifetimeCount </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>Requested lifetime count (see <A href="#LinkTarget_23634" href="#">
7.5</A>
 for <I>Counter</I> definition). The lifetime count shall be a minimum of three times the keep keep-alive count. </P
><P 

>When the publishing timer has expired this number of times without a <I>Publish</I> request being available to send a <I>NotificationMessage</I>, then the <I>Subscription</I> shall be deleted by the <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestedMaxKeepAliveCount </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>Requested maximum keep-alive count (see <A href="#LinkTarget_23634" href="#">
7.5</A>
 for <I>Counter</I> definition). When the publishing timer has expired this number of times without requiring any <I>NotificationMessage</I> to be sent, the <I>Subscription</I> sends a keep-alive <I>Message</I> to the <I>Client</I>. </P
><P 

>The negotiated value for this parameter is returned in the response. </P
><P 

>If the requested value is 0, the server shall revise with the smallest supported keep-alive count. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> maxNotificationsPerPublish </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The maximum number of notifications that the <I>Client</I> wishes to receive in a single <I>Publish</I> response. A value of zero indicates that there is no limit. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> priority </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>Indicates the relative priority of the <I>Subscriptio</I><I>n</I>. When more than one <I>Subscription</I> needs to send <I>Notifications</I>, the <I>Server</I> should de-queue a Publish request to the <I>Subscription</I> with the highest <I>priority</I> number. For <I>Subscriptions</I> with equal <I>priority</I> the <I>Server</I> should de-queue Publish requests in a round-robin fashion. </P
><P 

>A <I>Client</I> that does not require special priority settings should set this value to zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> revisedPublishingInterval </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The actual publishing interval that the <I>Server</I> will use, expressed in milliseconds. The <I>Server</I> should attempt to honour the <I>Client</I> request for this parameter, but may negotiate this value up or down to meet its own constraints. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> revisedLifetimeCount </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The lifetime of the <I>Subscription</I> shall be a minimum of three times the keep-alive interval negotiated by the <I>Server.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> revisedMaxKeepAliveCount </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The actual maximum keep-alive count (see <A href="#LinkTarget_23634" href="#">
7.5</A>
 for <I>Counter</I> definition). The <I>Server</I> should attempt to honour the <I>Client</I> request for this parameter, but may negotiate this value up or down to meet its own constraints. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_18734"
><FONT size="+1"><B>5.13.3.3 Service results </H4
><P 

><A href="#LinkTarget_18744" href="#">
</B>Table 89</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 89 &ndash; ModifySubscription Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_18764"
><FONT size="+1"><B> SetPublishingMode </H3
><H4 
 ID="LinkTarget_18765"
>5.13.4.1 Description </H4
><P 

></B>This <I>Service</I> is used to enable sending of <I>Notifications</I> on one or more <I>Subscriptions</I>. </P
><H4 
 ID="LinkTarget_18767"
><B>5.13.4.2 Parameters </H4
><P 

><A href="#LinkTarget_18773" href="#">
</B>Table 90</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 90 &ndash; SetPublishingMode Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> publishingEnabled </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A <I>Boolean</I> parameter with the following values: </P
><P 

> TRUE publishing of <I>N</I><I>otificationMessages</I> is enabled for the <I>Subscription</I>. </P
><P 

> FALSE publishing of <I>NotificationMessages</I> is disabled for the <I>Subscription</I>. </P
><P 

>The value of this parameter does not affect the value of the monitoring mode <I>Attribute</I> of <I>MonitoredItems</I>. Setting this value to FALSE does not discontinue the sending of keep-alive <I>Messages</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionIds [] </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>List of <I>Server</I>-assigned identifiers for the <I>Subscriptions</I> to enable or disable (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> for the <I>Subscriptions</I> to enable/disable (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). The size and order of the list matches the size and order of the <I>subscriptionIds</I> request parameter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>Subscriptions</I> to enable/disable (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>subscriptionId</I><I>s</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_18885"
><FONT size="+1"><B>5.13.4.3 Service results </H4
><P 

><A href="#LinkTarget_18895" href="#">
</B>Table 91</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 91 &ndash; SetPublishingMode Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_18926"
><FONT size="+1"><B>5.13.4.4 StatusCodes </H4
><P 

><A href="#LinkTarget_18938" href="#">
</B>Table 92</A>
 defines values for the <I>results</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 92 &ndash; SetPublishingMode Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_18959"
><FONT size="+1"><B> Publish </H3
><H4 
 ID="LinkTarget_18960"
>5.13.5.1 Description </H4
><P 

></B>This <I>Service</I> is used for two purposes. First, it is used to acknowledge the receipt of <I>NotificationMessages</I> for one or more <I>Subscriptions</I>. Second, it is used to request the <I>Server</I> to return a <I>NotificationMessage</I> or a keep-alive <I>Message</I>. Since <I>Publish</I> requests are not directed to a specific <I>Subscription</I>, they may be used by any <I>Subscription</I>. <A href="#LinkTarget_17487" href="#">
5.13.1.2</A>
 describes the use of the <I>Publish</I> <I>Service</I>. </P
><P 

><I>Client</I> strategies for issuing <I>Publish</I> requests may vary depending on the networking delays between the <I>Client</I> and the <I>Server</I>. In many cases, the <I>Client</I> may wish to issue a <I>Publish</I> request immediately after creating a <I>Subscription</I>, and thereafter, immediately after receiving a <I>Publish</I> response. </P
><P 

>In other cases, especially in high latency networks, the <I>Client</I> may wish to pipeline <I>Publish</I> requests to ensure cyclic reporting from the <I>Server</I>. Pipelining involves sending more than one <I>Publish</I> request for each <I>Subscription</I> before receiving a response. For example, if the network introduces a delay between the <I>Client</I> and the <I>Server</I> of 5 seconds and the publishing interval for a <I>Subscription</I> is one second, then the <I>Client</I> will have to issue <I>Publish</I> requests every second instead of waiting for a response to be received before sending the next request. </P
><P 

>A server should limit the number of active <I>Publish</I> requests to avoid an infinite number since it is expected that the <I>Publish</I> requests are queued in the <I>Server</I>. But a Server shall accept more queued <I>Publish</I> requests than created Subscriptions. It is expected that a <I>Server</I> supports several <I>Publish</I> requests per <I>Subscription</I>. When a <I>Server</I> receives a new <I>Publish</I> request that exceeds its limit it shall de-queue the oldest <I>Publish</I> request and return a response with the result set to <I>Bad</I>_<I>TooManyPublishRequests</I>. If a <I>Client</I> receives this <I>Service</I> result for a <I>Publish</I> request it shall not issue another <I>Publish</I> request before one of its outstanding <I>Publish</I> requests is returned from the Server. </P
><P 

><I>Clients</I> can limit the size of <I>Publish</I> responses with the <I>maxNotificationsPerPublish</I> parameter passed to the <I>CreateSubscription</I> <I>Service</I>. However, this could still result in a message that is too large for the <I>Client</I> or <I>Server</I> to process. In this situation, the <I>Client</I> will find that either the <I>SecureChannel</I> goes into a fault state and needs to be re-established or the <I>Publish</I> response returns an error and calling the <I>Republish</I> <I>Service</I> also returns an error. If either situation occurs then the <I>Client</I> will have to adjust its message processing limits or the parameters for the <I>Subscription and/or MonitoredItems</I>. </P
><P 

>The return diagnostic info setting in the request header of the <I>CreateMonitoredItems</I> or the last <I>ModifyMonitoredItems</I> <I>Service</I> is applied to the <I>Monitored</I> <I>Items</I> and is used as the diagnostic information settings when sending Notifications in the <I>Publish</I> response. </P
><H4 
 ID="LinkTarget_18972"
><B>5.13.5.2 Parameters </H4
><P 

><A href="#LinkTarget_18978" href="#">
</B>Table 93</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 93 &ndash; Publish Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscription </P
><P 

> Acknowledgements [] </P
></TD
><TD  
 valign="top"
><P 

>Subscription Acknowledgement </P
></TD
><TD  
 valign="top"
><P 

>The list of acknowledgements for one or more <I>Subscriptions</I>. This list may contain multiple acknowledgements for the same <I>Subscription</I> (multiple entries with the same <I>subscriptionId</I>). This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  subscriptionId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> assigned identifier for a <I>Subscription</I> (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  sequenceNumber </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The sequence number being acknowledged (see <A href="#LinkTarget_23634" href="#">
7.5</A>
 for <I>Counter</I> definition). The <I>Server</I> may delete the <I>Message</I> with this sequence number from its retransmission queue. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I>-assigned identifier for the <I>Subscription</I> for which <I>Notifications</I> are being returned (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition). The value 0 is used to indicate that there were no <I>Subscriptions</I> defined for which a response could be sent. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> availableSequence </P
><P 

> Numbers [] </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>A list of sequence number ranges that identify unacknowledged <I>NotificationMessages</I> that are available for retransmission from the <I>Subscription</I>&rsquo;s retransmission queue. This list is prepared after processing the acknowledgements in the request (see <A href="#LinkTarget_23634" href="#">
7.5</A>
 for <I>Counter</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> moreNotifications </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A <I>Boolean</I> parameter with the following values: </P
><P 

> TRUE the number of <I>Notifications</I> that were ready to be sent could not be sent in a single response. </P
><P 

> FALSE all <I>Notifications</I> that were ready are included in the response.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> notificationMessage </P
></TD
><TD  
 valign="top"
><P 

>Notification Message </P
></TD
><TD  
 valign="top"
><P 

>The <I>NotificationMessage</I> that contains the list of <I>Notifications</I>. The <I>NotificationMessage</I> parameter type is specified in <A href="#LinkTarget_26581" href="#">
7.21</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of results for the acknowledgements (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). The size and order of the list matches the size and order of the <I>subscriptionAcknowledgements</I> request parameter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the acknowledgements (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>subscriptionAckn</I><I>owledgements</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_19151"
><FONT size="+1"><B>5.13.5.3 Service results </H4
><P 

><A href="#LinkTarget_19161" href="#">
</B>Table 94</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 94 &ndash; Publish Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_TooManyPublishRequests </P
></TD
><TD  
 valign="top"
><P 

>The server has reached the maximum number of queued publish requests. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoSubscription </P
></TD
><TD  
 valign="top"
><P 

>There is no subscription available for this session. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_19182"
><FONT size="+1"><B>5.13.5.4 StatusCodes </H4
><P 

><A href="#LinkTarget_19192" href="#">
</B>Table 95</A>
 defines values for the <I>results</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
.<B> </P
><P 

>Table 95 &ndash; Publish Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SequenceNumberUnknown </P
></TD
><TD  
 valign="top"
><P 

>The sequence number is unknown to the server. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_19218"
><FONT size="+1"><B> Republish </H3
><H4 
 ID="LinkTarget_19219"
>5.13.6.1 Description </H4
><P 

></B>This <I>Service</I> requests the <I>Subscription</I> to republish a <I>NotificationMessage</I> from its retransmission queue. If the <I>Server</I> does not have the requested <I>Message</I> in its retransmission queue, it returns an error response. </P
><P 

>See <A href="#LinkTarget_17487" href="#">
5.13.1.2</A>
 for the detail description of the behaviour of this <I>Service</I>. </P
><P 

>See <A href="#LinkTarget_20808" href="#">
6.5</A>
 for a description of the issues and strategies regarding reconnect handling and <I>Republish</I>. </P
><H4 
 ID="LinkTarget_19234"
><B>5.13.6.2 Parameters </H4
><P 

><A href="#LinkTarget_19240" href="#">
</B>Table 96</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 96 &ndash; Republish Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> assigned identifier for the <I>Subscription</I> to be republished (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition).  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> retransmitSequence </P
><P 

> Number </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The sequence number of a specific <I>NotificationMessage</I> to be republished (see <A href="#LinkTarget_23634" href="#">
7.5</A>
 for <I>Counter</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> notificationMessage </P
></TD
><TD  
 valign="top"
><P 

>Notification Message </P
></TD
><TD  
 valign="top"
><P 

>The requested <I>NotificationMessage</I>. The <I>NotificationMessage</I> parameter type is specified in <A href="#LinkTarget_26581" href="#">
7.21</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_19341"
><FONT size="+1"><B>5.13.6.3 Service results  </H4
><P 

><A href="#LinkTarget_19351" href="#">
</B>Table 97</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 97 &ndash; Republish Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MessageNotAvailable </P
></TD
><TD  
 valign="top"
><P 

>The requested message is no longer available. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_19377"
><FONT size="+1"><B> TransferSubscriptions </H3
><H4 
 ID="LinkTarget_19378"
>5.13.7.1 Description </H4
><P 

></B>This <I>Service</I> is used to transfer a <I>Subscription</I> and its <I>MonitoredItems</I> from one <I>Session</I> to another. For example, a <I>Client</I> may need to reopen a <I>Session</I> and then transfer its <I>Subscriptions</I> to that <I>Session</I>. It may also be used by one <I>Client</I> to take over a <I>Subscription</I> from another <I>Client</I> by transferring the <I>Subscription</I> to its <I>Session</I>.  </P
><P 

>The <I>authenticationToken</I> contained in the request header identifies the <I>Session</I> to which the <I>Subscription</I> and <I>MonitoredItems</I> shall be transferred. The <I>Server</I> shall validate that the <I>Client</I> of that <I>Session</I> is operating on behalf of the same user and that the potentially new <I>Client</I> supports the <I>Profiles</I> that are necessary for the <I>Subscription</I>. If the <I>Server</I> transfers the <I>Subscription</I>, it returns the sequence numbers of the <I>NotificationMessages</I> that are available for retransmission. The <I>Client</I> should acknowledge all <I>Messages</I> in this list for which it will not request retransmission. </P
><P 

>If the <I>Server</I> transfers the <I>Subscription</I> to the new <I>Session</I>, the <I>Server</I> shall issue a <I>StatusChangeNotification</I> <I>notificationMessage</I> with the status code Good_SubscriptionTransferred to the old <I>Session</I>. The <I>StatusChangeNotification notificationMessage</I> type is defined in <A href="#LinkTarget_26539" href="#">
7.20.4</A>
. </P
><H4 
 ID="LinkTarget_19387"
><B>5.13.7.2 Parameters </H4
><P 

><A href="#LinkTarget_19393" href="#">
</B>Table 98</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 98 &ndash; TransferSubscriptions Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionIds [] </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>List of identifiers for the <I>Subscriptions</I> to be transferred to the new <I>Client</I> (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition). These identifiers are transferred from the primary <I>Client</I> to a backup <I>Client</I> via external mechanisms. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> sendInitialValues </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A <I>Boolean</I> parameter with the following values: </P
><P 

> TRUE the first Publish response(s) after the TransferSubscriptions call shall contain the current values of all Monitored Items in the Subscription where the Monitoring Mode is set to Reporting. </P
><P 

> FALSE the first Publish response after the TransferSubscriptions call shall contain only the value changes since the last Publish response was sent. </P
><P 

>This parameter only applies to MonitoredItems used for monitoring Attribute changes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>TransferResult </P
></TD
><TD  
 valign="top"
><P 

>List of results for the <I>Subscriptions</I> to transfer. The size and order of the list matches the size and order of the <I>subscriptionIds</I> request parameter. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

><I>StatusCode</I> for each <I>Subscription</I> to be transferred (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  availableSequence </P
><P 

>  Numbers [] </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>A list of sequence number ranges that identify <I>NotificationMessages</I> that are in the <I>Subscription</I>&rsquo;s retransmission queue. This parameter is null if the transfer of the <I>Subscription</I> failed. The <I>Counter</I> type is defined in <A href="#LinkTarget_23634" href="#">
7.5</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>Subscriptions</I> to transfer (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>subscriptionIds</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_19528"
><FONT size="+1"><B>5.13.7.3 Service results </H4
><P 

><A href="#LinkTarget_19538" href="#">
</B>Table 99</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 99 &ndash; TransferSubscriptions Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_InsufficientClientProfile </P
></TD
><TD  
 valign="top"
><P 

>The <I>Client</I> of the current <I>Session</I> does not support one or more <I>Profiles</I> that are necessary for the <I>Subscription</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_19575"
><FONT size="+1"><B>5.13.7.4 StatusCodes </H4
><P 

><A href="#LinkTarget_19585" href="#">
</B>Table 100</A>
 defines values for the operation level <I>statusCode</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 100 &ndash; TransferSubscriptions Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
><P 

>The <I>Client</I> of the current <I>Session</I> is not operating on behalf of the same user as the <I>Session</I> that owns the <I>Subscription</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_19617"
><FONT size="+1"><B> DeleteSubscriptions </H3
><H4 
 ID="LinkTarget_19618"
>5.13.8.1 Description </H4
><P 

></B>This <I>Service</I> is invoked to delete one or more <I>Subscriptions</I> that belong to the <I>Client's</I> <I>Session</I>.  </P
><P 

>Successful completion of this <I>Service</I> causes all <I>MonitoredItems</I> that use the <I>Subscription</I> to be deleted. If this is the last <I>Subscription</I> for the <I>Session</I>, then all <I>Publish</I> requests still queued for that <I>Session</I> are de-queued and shall be returned with Bad_NoSubscription. </P
><P 

><I>Subscriptions</I> that were transferred to another <I>Session</I> must be deleted by the <I>Client</I> that owns the <I>Session</I>. </P
><H4 
 ID="LinkTarget_19623"
><B>5.13.8.2 Parameters </H4
><P 

><A href="#LinkTarget_19629" href="#">
</B>Table 101</A>
 defines the parameters for the <I>Service</I>. </P
><P 

><B>Table 101 &ndash; DeleteSubscriptions Service Parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Request </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHeader </P
></TD
><TD  
 valign="top"
><P 

>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>Common request parameters (see <A href="#LinkTarget_27119" href="#">
7.28</A>
 for <I>RequestHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subscriptionIds [] </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I>-assigned identifier for the <I>Subscription</I> (see <A href="#LinkTarget_24268" href="#">
7.14</A>
 for <I>IntegerId</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Response </P
></TD
><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> results [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of <I>StatusCodes</I> for the <I>Subscriptions</I> to delete (see <A href="#LinkTarget_27514" href="#">
7.34</A>
 for <I>StatusCode</I> definition). The size and order of the list matches the size and order of the <I>subscriptionIds</I> request parameter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information for the <I>Subscriptions</I> to delete (see <A href="#LinkTarget_23786" href="#">
7.8</A>
 for <I>DiagnosticInfo </I>definition). The size and order of the list matches the size and order of the <I>subscriptionIds</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the request. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_19729"
><FONT size="+1"><B>5.13.8.3 Service results </H4
><P 

><A href="#LinkTarget_19739" href="#">
</B>Table 102</A>
 defines the <I>Service</I> results specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_27854" href="#">
Table 172</A>
. </P
><P 

><B>Table 102 &ndash; DeleteSubscriptions Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_19770"
><FONT size="+1"><B>5.13.8.4 StatusCodes </H4
><P 

><A href="#LinkTarget_19780" href="#">
</B>Table 103</A>
 defines values for the <I>results</I> parameter that are specific to this <I>Service</I>. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 103 &ndash; DeleteSubscriptions Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_27854" href="#">
Table 172</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><H1 
 ID="LinkTarget_19800"
><FONT size="+1"><B>6 Service behaviours </H1
><H2 
 ID="LinkTarget_19801"
><FONT size="+1">6.1 Security </H2
><H3 
 ID="LinkTarget_19802"
> Overview </H3
><P 

></B>The OPC UA <I>Services</I> define a number of mechanisms to meet the security requirements outlined in <A href="#LinkTarget_7680" href="#">
Part 2</A>
. This clause describes a number of important security-related procedures that <I>OPC UA</I> <I>Applications</I> shall follow. </P
><H3 
 ID="LinkTarget_19809"
><B> Obtaining and Installing an Application Instance Certificate </H3
><P 

></B>All <I>OPC UA Applications</I> require an <I>Application Instance Certificate</I> which shall contain the following information: </P
><DL 

><DD 

>&#61623; The network name or address of the computer where the application runs; </DD
><DD 

>&#61623; The name of the organisation that administers or owns the application; </DD
><DD 

>&#61623; The name of the application; </DD
><DD 

>&#61623; The URI of the application instance; </DD
></DL
><DL 

><DD 

>&#61623; The name of the <I>Certificate</I> <I>Authority</I> that issued the <I>Certificate</I>; </DD
><DD 

>&#61623; The issue and expiry date for the <I>Certificate</I>; </DD
><DD 

>&#61623; The public key issued to the application by the <I>Certificate Authority</I> (CA); </DD
><DD 

>&#61623; A digital signature created by the <I>Certificate Authority</I> (CA). </DD
></DL
><P 

>In addition, each <I>Application</I> <I>Instance</I> <I>Certificate</I> has a private key which should be stored in a location that can only be accessed by the application. If this private key is compromised, the administrator shall assign a new <I>Application Instance Certificate</I> and private key to the application. </P
><P 

>This <I>Certificate</I> may be generated automatically when the application is installed. In this situation the private key assigned to the <I>Certificate</I> shall be used to create the <I>Certificate</I> signature. <I>Certificates</I> created in this way are called self-signed <I>Certificates</I>. </P
><P 

>If the administrator responsible for the application decides that a self-signed <I>Certificate</I> does not meet the security requirements of the organisation, then the administrator should install a <I>Certificate</I> issued by a <I>Certification Authority</I>. The steps involved in requesting an <I>Application Instance Certificate</I> from a <I>Certificate Authority</I> are shown in <A href="#LinkTarget_19842" href="#">
Figure 19</A>
. </P
><P 

> </P
><P 

> <DIV class="Sect" 
 Alt=""
>ApplicationAdministratorCertificate Authority1. Installs application 3. Requests certificate.2. Creates a self-signed certificate. &bull;Machine network name or address.&bull;Organization name.&bull;Machine network name or address.&bull;Application name.&bull;Organization name.&bull;Proof of identity as administrator.4. Issues certificate.&bull;Public key.&bull;CA digital signature.&bull;Private key (must be protected).5. Installs certificate.&bull;Application certificate with public key.&bull;Private key (must be protected).Process completes here if a self-signed certificate meets the security requirements</DIV
></P
><P 

><B>Figure 19 &ndash; Obtaining and Installing an Application Instance Certificate </P
><P 

></B>The figure above illustrates the interactions between the application, the <I>Administrator</I> and the <I>Certificate Authority</I>. The <I>Application</I> is as <I>OPC UA Application</I> installed on a single machine. The <I>Administrator</I> is the person responsible for managing the machine and the <I>OPC UA Application</I>. The <I>Certificate Authority</I> is an entity that can issue digital <I>Certificates</I> that meet the requirements of the organisation deploying the <I>OPC UA Application</I>. </P
><P 

>If the <I>Administrator</I> decides that a self-signed <I>Certificate</I> meets the security requirements for the organisation, then the <I>Administrator</I> may skip Steps 3 through 5. Application vendors shall ensure that a <I>Certificate</I> is available after the installation process. Every <I>OPC UA Application</I> shall allow the <I>Administrators</I> to replace <I>Application Instance Certificates</I> with <I>Certificates</I> that meet their requirements. </P
><P 

>When the <I>Administrator</I> requests a new <I>Certificate</I> from a <I>Certificate Authority</I>, the <I>Certificate Authority</I> may require that the <I>Administrator </I>provide proof of authorization to request <I>Certificates</I> </P
><P 

>for the organisation that will own the <I>Certificate</I>. The exact mechanism used to provide this proof depends on the <I>Certificate Authority</I>. </P
><P 

>Vendors may choose to automate the process of acquiring <I>Certificates</I> from an authority. If this is the case, the <I>Administrator</I> would still go through the steps illustrated in <A href="#LinkTarget_19842" href="#">
Figure 19</A>
, however, the installation program for the application would do them automatically and only prompt the <I>Administrator</I> to provide information about the application instance being installed. </P
><H3 
 ID="LinkTarget_19854"
><B> Determining if a Certificate is Trusted </H3
><P 

></B><I>Applications</I> shall never communicate with another application that they do not trust. An <I>Application</I> decides if another application is trusted by checking whether the <I>Application Instance</I> <I>Certificate</I> for the other application is trusted. Applications shall rely on lists of <I>Certificates</I> provided by the <I>Administrator</I> to determine trust. There are two separate lists: a list of trusted <I>Applications</I> and a list of trusted <I>Certificate</I> <I>Authorities</I> (CAs). If an application is not directly trusted (i.e. its <I>Certificate</I> is not in the list of trusted applications) then the application shall build a chain of <I>Certificates</I> back to a trusted CA. </P
><P 

>When building a chain each <I>Certificate</I> in the chain shall be validated. If any validation error occurs then the trust check fails. Some validation errors are non-critical which means they can be suppressed by a user of an <I>Application</I> with the appropriate privileges. Suppressed validation errors are always reported via auditing (i.e. an appropriate Audit event is raised). </P
><P 

>Building a trust chain requires access to all <I>Certificates</I> in the chain. These <I>Certificates</I> may be stored locally or they may be provided with the application <I>Certificate</I>. Processing fails with Bad_SecurityChecksFailed if a CA <I>Certificate</I> cannot be found. </P
><P 

><A href="#LinkTarget_19868" href="#">
Table 104</A>
 specifies the steps used to validate a <I>Certificate</I> in the order that they shall be followed. These steps are repeated for each <I>Certificate</I> in the chain. Each validation step has a unique error status and audit event type that shall be reported if the check fails. The audit event is in addition to any audit event that was generated for the particular <I>Service</I> that was invoked. The <I>Service</I> audit event in its message text shall include the audit <I>EventID</I> of the <I>AuditCertifcateEventType</I> (for more details, see <A href="#LinkTarget_20078" href="#">
6.2</A>
). Processing halts if an error occurs, unless it is non-critical and it has been suppressed. </P
><P 

><I>ApplicationInstanceCertificates</I> shall not be used in a <I>Client</I> or <I>Server</I> until they have been evaluated and marked as trusted. This can happen automatically by a PKI trust chain or in an offline manner where the <I>Certificate</I> is marked as trusted by an administrator after evaluation.  </P
><P 

><B>Table 104 &ndash; Certificate Validation Steps </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Step </P
></TD
><TD  
 valign="top"
><P 

>Error/AuditEvent </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Certificate Structure </P
></TD
><TD  
 valign="top"
><P 

>Bad_SecurityChecksFailed </P
><P 

>AuditCertificateInvalidEventType </P
></TD
><TD  
 valign="top"
><P 

>The <I>C</I><I>ertificate</I> structure is verified. </P
><P 

>This error may not be suppressed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Signature </P
></TD
><TD  
 valign="top"
><P 

>Bad_SecurityChecksFailed  </P
><P 

>AuditCertificateInvalidEventType </P
></TD
><TD  
 valign="top"
><P 

>A <I>Certificate</I> with an invalid signature shall always be rejected. </P
><P 

>A <I>Certificate</I> signature is invalid if the <I>Issuer</I> <I>Certificate</I> is unknown. A self-signed <I>Certificate</I> is its own issuer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Trust List Check </P
></TD
><TD  
 valign="top"
><P 

>Bad_CertificateUntrusted </P
><P 

>AuditCertificateUntrustedEventType </P
></TD
><TD  
 valign="top"
><P 

>If the <I>Application</I><I> </I><I>Instance</I><I> </I><I>Certificate</I><I> </I>is not trusted and none of the CA <I>Certificates</I> in the chain is trusted, the result of the <I>Certificate</I> validation shall be Bad_CertificateUntrusted. </P
><P 

>If this check fails on the <I>Server</I> side, the error Bad_SecurityChecksFailed shall be reported back to the <I>Client</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Validity Period </P
></TD
><TD  
 valign="top"
><P 

>Bad_CertificateTimeInvalid </P
><P 

>Bad_CertificateIssuerTimeInvalid </P
><P 

>AuditCertificateExpiredEventType </P
></TD
><TD  
 valign="top"
><P 

>The current time shall be after the start of the validity period and before the end. </P
><P 

>This error may be suppressed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Host Name </P
></TD
><TD  
 valign="top"
><P 

>Bad_CertificateHostNameInvalid </P
><P 

>AuditCertificateDataMismatchEventType </P
></TD
><TD  
 valign="top"
><P 

>The HostName in the URL used to connect to the Server shall be the same as one of the HostNames specified in the <I>Certificate</I>. </P
><P 

>This check is skipped for CA <I>Certificates</I><I>.</I><I> </I></P
><P 

>This check is skipped for <I>Server</I> side validation. </P
><P 

>This error may be suppressed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>URI </P
></TD
><TD  
 valign="top"
><P 

>Bad_CertificateUriInvalid  </P
><P 

>AuditCertificateDataMismatchEventType </P
></TD
><TD  
 valign="top"
><P 

><I>Application and Software Certificates</I> contain an application or product URI that shall match the URI specified in the <I>ApplicationDescription</I> provided with the <I>Certificate</I>. </P
><P 

>This check is skipped for CA <I>Certificates</I>. </P
><P 

>This error may not be suppressed. </P
><P 

>The <I>gatewayServerUri</I> is used to validate an <I>Application Certificate</I> when connecting to a <I>Gateway </I><I>Server </I>(see <A href="#LinkTarget_20938" href="#">
7.1</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Certificate Usage </P
></TD
><TD  
 valign="top"
><P 

>Bad_CertificateUseNotAllowed </P
><P 

>Bad_CertificateIssuerUseNotAllowed </P
><P 

>AuditCertificateMismatchEventType </P
></TD
><TD  
 valign="top"
><P 

>Each <I>Certificate</I> has a set of uses for the <I>Certificate</I> (see <A href="#LinkTarget_7686" href="#">
Part 6</A>
). These uses shall match use requested for the <I>Certificate</I> (i.e. Application, Software or CA). </P
><P 

>This error may be suppressed unless the <I>Certificate</I> indicates that the usage is mandatory. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Find Revocation List </P
></TD
><TD  
 valign="top"
><P 

>Bad_CertificateRevocationUnknown Bad_CertificateIssuerRevocationUnknown </P
><P 

>AuditCertificateRevokedEventType </P
></TD
><TD  
 valign="top"
><P 

>Each CA <I>Certificate</I> may have a revocation list. This check fails if this list is not available (i.e. a network interruption prevents the application from accessing the list). No error is reported if the <I>Administrator</I> disables revocation checks for a CA <I>Certificate</I>. </P
><P 

>This error may be suppressed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Revocation Check </P
></TD
><TD  
 valign="top"
><P 

>Bad_CertificateRevoked </P
><P 

>Bad_CertificateIssuerRevoked </P
><P 

>AuditCertificateRevokedEventType </P
></TD
><TD  
 valign="top"
><P 

>The <I>Certificate</I> has been revoked and may not be used. </P
><P 

>This error may not be suppressed. </P
><P 

>If this check fails on the <I>Server</I> side, the error Bad_SecurityChecksFailed shall be reported back to the <I>Client</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><I>Certificates</I> are usually placed in a central location called a <I>CertificateStore</I>. <A href="#LinkTarget_19999" href="#">
Figure 20</A>
 illustrates the interactions between the <I>Application</I>, the <I>Administrator</I> and the <I>CertificateStore</I>. The <I>CertificateStore</I> could be on the local machine or in some central server. The exact mechanisms used to access the <I>CertificateStore</I> depend on the application and PKI environment set up by the <I>Administrator</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>&bull;Check Instance Certificate.&bull;Check Issuer Certificate.4. Find Certificate Revocation List(s)AdministratorApplicationCertificate Store1. Configures application &bull;Certificate validation policies.&bull;Location of CA certificates.&bull;Location of Certificate Revocation List.&bull;Location of Certificate Trust List.&bull;Validates Issuer Certificate.&bull;Validates Certificates in Trust Chain.&bull;Validates Instance Certificate.6. Accept Instance Certificate.3. Find Issuer CertificateRemote Application2. Provides Instance Certificate&bull;Find Instance Certificate or&bull;Find Issuer Certificateor&bull;Find any Certificate in Trust Chain.5. Find Certificate Trust List</DIV
></P
><P 

><B>Figure 20 &ndash; Determining if a Application Instance Certificate is Trusted </P
><H3 
 ID="LinkTarget_20000"
> Creating a SecureChannel </H3
><P 

></B>All <I>OPC UA Applications</I> shall establish a <I>SecureChannel</I> before creating a <I>Session</I>. This <I>SecureChannel</I> requires that both applications have access to <I>Certificates</I> that can be used to encrypt and sign <I>Messages</I> exchange. The <I>Application Instance Certificates</I> installed by following the process described in <A href="#LinkTarget_19809" href="#">
6.1.2</A>
 may be used for this purpose. </P
><P 

>The steps involved in establishing a <I>SecureChannel</I> are shown in <A href="#LinkTarget_20017" href="#">
Figure 21</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ClientServerCertificate Authority1. GetEndpoints Request &bull;CA Signature&bull;Issue and expiry date&bull;CA revocation list.2. GetEndpoints Response&bull;Server certificate&bull;Message security mode&bull;Security policy&bull;User identity token policies4. OpenSecureChannel Request &bull;Client certificate&bull;Client nonce&bull;Signed with client&rsquo;s private key&bull;Encrypted with server&rsquo;s public key3. Validate Server Certificate&bull;CA Signature&bull;Issue and expiry date&bull;CA revocation list.5. Validate Client Certificate6. OpenSecureChannel Response&bull;Server nonce&bull;Security token&bull;Token lifetime&bull;Signed with server&rsquo;s private key&bull;Encrypted with client&rsquo;s public key7. Renew Security Token&bull;Not required if client is preconfigured with knowledge of server policies.</DIV
></P
><P 

><B>Figure 21 &ndash; Establishing a SecureChannel </P
><P 

><A href="#LinkTarget_20017" href="#">
</B>Figure 21</A>
 above assumes <I>Client</I> and <I>Server</I> have online access to a <I>CertificateA</I>uthority (CA). If online access is not available and if the administrator has installed the CA public key on the local machine, then the <I>Client</I> and <I>Server</I> shall still validate the application <I>Certificates</I> using that key. The figure shows only one CA, however, there is no requirement that the <I>Client</I> and <I>Server</I> <I>Certificates</I> be issued by the same authority. A self-signed <I>Application Instance Certificate</I> does not need to be verified with a CA. Any <I>Certificate</I> shall be rejected if it is not in a trust list provided by the administrator. </P
><P 

>Both the <I>Client</I> and <I>Server</I> shall have a list of <I>Certificates</I> that they have been configured to trust (sometimes called the <I>Certificate</I> Trust List or CTL). These trusted <I>Certificates</I> may be <I>Certificates</I> for <I>Certificate Authorities</I> or they may be <I>OPC UA Application</I> <I>Instance Certificates</I>. <I>OPC UA Applications</I> shall be configured to reject connections with applications that do not have a trusted <I>Certificate</I>. </P
><P 

><I>Certificates</I> can be compromised, which means they should no longer be trusted. Administrators can revoke a <I>Certificate</I> by removing it from the trust list for all applications or the CA can add the <I>Certificate</I> to the <I>Certificate</I> Revocation List (CRL) for the <I>Issuer</I> <I>Certificate</I>. Administrators may save a local copy of the CRL for each <I>Issuer</I> <I>Certificate</I> when online access is not available. </P
><P 

>A <I>Client</I> does not need to call <I>GetEndpoints</I> each time it connects to the <I>Server</I>. This information should change rarely and the <I>Client</I> can cache it locally. If the <I>Server</I> rejects the <I>OpenSecureChannel</I> request the <I>Client</I> should call <I>GetEndpoints</I> and make sure the <I>Server</I> configuration has not changed. </P
><P 

>There are two security risks which a <I>Client</I> shall be aware of when using the <I>GetEndpoints</I> <I>Service</I>. The first could come from a rogue <I>Discovery</I> <I>Server</I> that tries to direct the <I>Client</I> to a rogue <I>Server</I>. For this reason the <I>Client</I> shall verify that the <I>ServerCertificate</I> in the <I>EndpointDescription</I> is a trusted <I>Certificate</I> before it calls <I>CreateSession</I>. </P
><P 

>The second security risk comes from a third party that alters the contents of the <I>EndpointDescriptions</I> as they are transferred over the network back to the <I>Client</I>. The Client </P
><P 

>protects itself against this by comparing the list of <I>EndpointDescriptions </I>returned from the<I> GetEndpoints Service</I> with list returned in the <I>CreateSession </I>response<I>.</I> </P
><P 

>The exact mechanisms for using the security token to sign and encrypt <I>Messages</I> exchanged over the <I>SecureChannel</I> are described in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. The process for renewing tokens is also described in detail in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><P 

>In many cases, the <I>Certificates</I> used to establish the <I>SecureChannel</I> will be <I>the Application Instance Certificates</I>. However, some <I>Communication Stacks </I>might not support <I>Certificates</I> that are specific to a single application. Instead, they expect all communication to be secured with a <I>Certificate</I> specific to a user or the entire machine. For this reason, <I>OPC UA Applications</I> will need to exchange their <I>Application Instance Certificates</I> when creating a <I>Session</I>. </P
><H3 
 ID="LinkTarget_20041"
><B> Creating a Session </H3
><P 

></B>Once an OPC UA <I>Client</I> has established a <I>SecureChannel</I> with a <I>Server</I> it can create an OPC UA <I>Session</I>. </P
><P 

>The steps involved in establishing a <I>Session</I> are shown in <A href="#LinkTarget_20052" href="#">
Figure 22</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ClientServerCertificate Authority1. CreateSession Request 7. ActivateSession Response&bull;Client instance certificate &bull;Client nonce2. Validate Client Certificate6. Validate User Identity TokenAuthentication Service3. CreateSession Response &bull;Server instance certificate&bull;Server certificate signature&bull;Server software certificates&bull;Server nonce4. Validate Server Certificate5. ActivateSession Request &bull;Client software certificates&bull;Client certificate signature&bull;User identity token&bull;User identity token signature&bull;Server nonce</DIV
></P
><P 

><B>Figure 22 &ndash; Establishing a Session </P
><P 

><A href="#LinkTarget_20052" href="#">
</B>Figure 22</A>
 above illustrates the interactions between a <I>Client</I>, a <I>Server</I>, a <I>Certificate Authority</I> (CA) and an authentication service. The CA is responsible for issuing the <I>Application Instance</I> <I>Certificates</I>. If the <I>Client</I> or <I>Server</I> does not have online access to the CA, then they shall validate the <I>Application Instance</I> <I>Certificates</I> using the CA public key that the administrator shall install on the local machine. </P
><P 

>The authentication service is a central database that can verify that user token provided by the <I>Client</I>. This authentication service may also tell the <I>Server</I> which access rights the user has. The authentication service depends on the user identity token. It could be a <I>Certificate</I> <I>Authority</I>, a Kerberos ticket granting service, a WS-Trust <I>Server</I> or a proprietary database of some sort. </P
><P 

>The <I>Client</I> and <I>Server</I> shall prove possession of their <I>Application Instance</I> <I>Certificates</I> by signing the <I>Certificates</I> with a nonce appended. The exact mechanism used to create the proof of possession signatures is described in <A href="#LinkTarget_9759" href="#">
5.6.2</A>
. Similarly, the <I>Client</I> shall prove possession of some types of user identity tokens by creating signatures with the secret associated with the token. </P
><H3 
 ID="LinkTarget_20065"
><B> Impersonating a User </H3
><P 

></B>Once an OPC UA <I>Client</I> has established a <I>Session</I> with a <I>Server</I> it can change the user identity associated with the <I>Session</I> by calling the <I>ActivateSession</I> service. </P
><P 

>The steps involved in impersonating a user are shown in <A href="#LinkTarget_20077" href="#">
Figure 23</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ClientServer1. ActivateSession Request &bull;Client certificate signature&bull;User identity token&bull;User identity token signature2. Validate User Identity TokenAuthenticationService3. ActivateSession Response &bull;Server nonce</DIV
></P
><P 

><B>Figure 23 &ndash; Impersonating a User </P
><H2 
 ID="LinkTarget_20078"
>6.2 Software Certificates </H2
><P 

><FONT size="+1"></B>Note: Details on SoftwareCertificates need to be defined in a future version.<FONT size="+1"> </P
><H2 
 ID="LinkTarget_20080"
><B>6.3 Auditing </H2
><H3 
 ID="LinkTarget_20081"
> Overview </H3
><P 

></B>Auditing is a requirement in many systems. It provides a means of tracking activities that occur as part of normal operation of the system. It also provides a means of tracking abnormal behaviour. It is also a requirement from a security standpoint. For more information on the security aspects of auditing, see <A href="#LinkTarget_7680" href="#">
Part 2</A>
. This subclause describes what is expected of an OPC UA <I>Server</I> and <I>Client</I> with respect to auditing and it details the audit requirements for each service set. Auditing can be accomplished using one or both of the following methods: </P
><DL 

><DD 

>a) The <I>OPC UA Application</I> that generates the audit event can log the audit entry in a log file or other storage location; </DD
><DD 

>b) The OPC UA <I>Server</I> that generates the audit event can publish the audit event using the OPC UA event mechanism. This allows an external OPC UA <I>Client</I> to subscribe to and log the audit entries to a log file or other storage location. </DD
></DL
><H3 
 ID="LinkTarget_20093"
><B> General audit logs </H3
><P 

></B>Each OPC UA <I>Service</I> request contains a string parameter that is used to carry an audit record id. A <I>Client</I> or any <I>Server</I> operating as a <I>Client</I>, such as an aggregating <I>Server</I>, can create a local audit log entry for a request that it submits. This parameter allows this <I>Client</I> to pass the identifier for this entry with the request. If this <I>Server</I> also maintains an audit log, it should include this id in its audit log entry that it writes. When this log is examined and that entry is found, the examiner will be able to relate it directly to the audit log entry created by the <I>Client</I>. This capability allows for traceability across audit logs within a system. </P
><H3 
 ID="LinkTarget_20095"
><B> General audit Events </H3
><P 

></B>A <I>Server</I> that maintains an audit log shall provide the audit log entries via <I>Event</I> <I>Messages</I>. The <I>AuditEventType </I>and its sub-types are defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. An audit <I>Event</I> <I>Message</I> also includes the audit record Id. The details of the <I>AuditEventType</I> and its subtypes are defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. A <I>Server</I> that is an aggregating <I>Server</I> that supports auditing shall also subscribe for audit events for all of the <I>Servers</I> that it is aggregating (assuming they provide auditing). The combined stream should be available from the aggregating <I>Server</I>. </P
><H3 
 ID="LinkTarget_20106"
><B> Auditing for Discovery Service Set </H3
><P 

></B>This <I>Service</I> <I>Set</I> can be separated into two groups: Services that are called by OPC UA <I>Clients</I> and <I>Services</I> that are invoked by OPC UA <I>Servers</I>. The <I>FindServers</I> and <I>GetEndpoints Services</I> that are called by OPC UA <I>Clients</I> may generate audit entries for failed <I>Service</I> invocations. The <I>RegisterServer</I> Service that is invoked by OPC UA <I>Servers</I> shall generate audit entries for all new registrations and for failed <I>Service</I> invocations. These audit entries shall include the <I>Server</I> URI, <I>Server</I> names, <I>Discovery</I> URIs and isOnline status. Audit entries should not be generated for <I>RegisterServer</I> invocation that does not cause changes to the registered <I>Servers</I>. </P
><H3 
 ID="LinkTarget_20109"
><B> Auditing for SecureChannel Service Set </H3
><P 

></B>All <I>Services</I> in this <I>Service Set</I> for <I>Servers</I> that support auditing may generate audit entries and shall generate audit <I>Events</I> for failed service invocations and for successful invocation of the <I>OpenSecureChannel</I> and <I>CloseSecureChannel</I> Services. The <I>Client</I> generated audit entries should be setup prior to the actual call, allowing the correct audit record Id to be provided. The <I>OpenSecureChannel</I> Service shall generate an audit <I>Event</I> of type <I>AuditOpenSecureChannelEventType</I> or a subtype of it for the <I>requestType</I> ISSUE_0. Audit <I>Events</I> for the <I>requestType</I> RENEW_1 are only created if the renew fails. The <I>CloseSecureChannel</I> service shall generate an audit <I>Event</I> of type <I>AuditChannelEventType </I>or a subtype of it.<I> </I>Both of these <I>Event</I> types are subtypes of the<I> AuditChannelEventType</I>. See <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for the detailed assignment of the <I>SourceNode</I>, the <I>SourceName</I> and additional parameters. For the failure cases the <I>Message</I> for <I>Events</I> of this type should include a description of why the service failed. This description should be more detailed than what was returned to the client. From a security point of view a client only needs to know that it failed, but from an <I>Auditing</I> point of view the exact details of the failure need to be known. In the case of <I>Certificate</I> validation errors the description should include the audit<I> EventId</I> of the specific <I>AuditCertificateEventType</I> that was generated to report the <I>Certificate</I> error. The <I>AuditCertifcateEvent</I> shall also contain the detailed <I>Certificate</I> validation error. The additional parameters should include the details of the request. It is understood that these events may be generated by the underlying <I>Communication Stacks</I> in many cases, but they shall be made available to the <I>Server</I> and the <I>Server</I> shall report them. </P
><H3 
 ID="LinkTarget_20116"
><B> Auditing for Session Service Set </H3
><P 

></B>All <I>Services</I> in this <I>Service Set</I> for <I>Servers</I> that support auditing may generate audit entries and shall generate audit <I>Events</I> for both successful and failed <I>Service</I> invocations. These <I>Services</I> shall generate an audit <I>Event</I> of type <I>AuditSessionEventType </I>or a subtype of it. In particular, they shall generate the base <I>EventType</I> or the appropriate subtype, depending on the service that was invoked. The <I>CreateSession</I> service shall generate <I>AuditCreateSessionEventType </I>events or sub-types of it. The<I> ActivateSession </I>service shall generate <I>AuditActivateSessionEventType </I>events or subtypes of it. When the <I>ActivateSession</I> <I>Service</I> is called to change the user identity then the server shall generate <I>AuditActivateSessionEventType</I> events or subtypes of it. The CloseSession service shall generate <I>AuditSessionEventType</I> events or subtypes of it. It shall always be generated if a <I>Session</I> is terminated like <I>SessionTimeout</I> expiration or <I>Server</I> shutdown. The <I>SourceName</I> for <I>Events</I> of this type shall be &ldquo;Session/Timeout&rdquo; for a <I>Session</I> timeout, &ldquo;Session/CloseSession&rdquo; for a <I>CloseSession</I> <I>Service</I> call and &ldquo;Session/Terminated&rdquo; for all other cases. See <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for the detailed assignment of the <I>SourceNode</I>, the <I>SourceName</I> and additional parameters. For the failure case the <I>Message</I> for <I>Events</I> of this type should include a description of why the <I>Service</I> failed. The additional parameters should include the details of the request. </P
><P 

>This <I>Service Set</I> shall also generate additional audit events in the cases when <I>Certificate</I> validation errors occur. These audit events are generated in addition to the <I>AuditSessionEventTypes</I>. See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the definition of <I>AuditCertificateEventType</I> and its subtypes. </P
><P 

>For <I>Clients</I>, that support auditing, accessing the services in the <I>Session</I> <I>Service</I> <I>Set</I> shall generate audit entries for both successful and failed invocations of the <I>Service</I>. These audit entries should be setup prior to the actual <I>Service</I> invocation, allowing the invocation to contain the correct audit record id. </P
><H3 
 ID="LinkTarget_20130"
><B> Auditing for NodeManagement Service Set </H3
><P 

></B>All Services in this <I>Service Set</I> for <I>Servers</I> that support auditing may generate audit entries and shall generate audit <I>Events</I> for both successful and failed <I>Service</I> invocations. These <I>Services</I> shall generate an audit <I>Event</I> of type <I>AuditNodeManagementEventType</I> or subtypes of it. See </P
><P 

><A href="#LinkTarget_7684" href="#">
Part 5</A>
 for the detailed assignment of the <I>SourceNode</I>, the <I>SourceName</I> and additional parameters. For the failure case, the <I>Message</I> for <I>Events</I> of this type should include a description of why the service failed. The additional parameters should include the details of the request. </P
><P 

>For <I>Clients</I> that support auditing, accessing the <I>Services</I> in the <I>NodeManagement</I> <I>Service Set</I> shall generate audit entries for both successful and failed invocations of the <I>Service</I>. All audit entries should be setup prior to the actual <I>Service</I> invocation, allowing the invocation to contain the correct audit record id. </P
><H3 
 ID="LinkTarget_20139"
><B> Auditing for Attribute Service Set </H3
><P 

></B>The <I>Write</I> or <I>HistoryUpdate</I> Services in this <I>Service Set</I> for <I>Servers</I> that support auditing may generate audit entries and shall generate audit <I>Events</I> for both successful and failed <I>Service</I> invocations. These <I>Services</I> shall generate an audit <I>Event</I> of type <I>AuditUpdateEventType</I> or subtypes of it. In particular, the <I>Write</I> <I>Service</I> shall generate an audit event of type <I>AuditWriteUpdateEventType</I> or a subtype of it. The <I>HistoryUpdate</I> <I>Service</I> shall generate an audit <I>Event</I> of type <I>AuditHistoryUpdateEvent</I> or a subtype of it. Three subtypes of <I>AuditHistoryUpdateEvent</I> are defined as <I>AuditHistoryEventUpdateEventType</I>, <I>AuditHistoryValueUpdateEventType</I> and <I>AuditHistoryDeleteEventType</I>. The subtype depends on the type of operation being performed, historical event update, historical data value update or a historical delete. See <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for the detailed assignment of the <I>SourceNode</I>, the <I>SourceName</I> and additional parameters. For the failure case the <I>Message</I> for <I>Events</I> of this type should include a description of why the <I>Service</I> failed. The additional parameters should include the details of the request. </P
><P 

>The <I>Read</I> and <I>HistoryRead</I> <I>Services</I> may generate audit entries and audit <I>Events</I> for failed <I>Service</I> invocations. These <I>Services</I> should generate an audit <I>Event</I> of type <I>AuditEventType</I> or a subtype of it. See <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for the detailed assignment of the <I>SourceNode</I>, <I>SourceName</I> and additional parameters. The <I>Message</I> for <I>Events</I> of this type should include a description of why the <I>Service</I> failed. </P
><P 

>For <I>Clients</I> that support auditing, accessing the <I>Write</I> or <I>HistoryUpdate</I> services in the <I>Attribute</I> <I>Service</I> <I>Set</I> shall generate audit entries for both successful and failed invocations of the <I>Service</I>. Invocations of the other <I>Services</I> in this <I>Service</I> <I>Set</I> may generate audit entries. All audit entries should be setup prior to the actual <I>Service</I> invocation, allowing the invocation to contain the correct audit record id. </P
><H3 
 ID="LinkTarget_20153"
><B> Auditing for Method Service Set </H3
><P 

></B>All <I>Services</I> in this <I>Service Set</I> for <I>Servers</I> that support auditing may generate audit entries and shall generate audit <I>Events</I> for both successful and failed service invocations if the invocation modifies the <I>AddressSpace</I>, writes a value or modifies the state of the system (alarm acknowledge, batch sequencing or other system changes). These method calls shall generate an audit <I>Event</I> of type <I>AuditUpdateMethodEventType</I> or subtypes of it. Methods that do not modify the <I>AddressSpace</I>, write values or modify the state of the system may generate events. See <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for the detailed assignment of the <I>SourceNode</I>, <I>SourceName</I> and additional parameters. </P
><P 

>For <I>Clients</I> that support auditing, accessing the <I>Method Service Set</I> shall generate audit entries for both successful and failed invocations of the <I>Service</I>, if the invocation modifies the <I>AddressSpace</I>, writes a value or modifies the state of the system (alarm acknowledge, batch sequencing or other system changes). Invocations of the other <I>Methods</I> may generate audit entries. All audit entries should be setup prior to the actual <I>Service </I>invocation, allowing the invocation to contain the correct audit record id. </P
><H3 
 ID="LinkTarget_20161"
><B> Auditing for View, Query, MonitoredItem and Subscription Service Set </H3
><P 

></B>All of the <I>Services</I> in these four <I>Service Sets</I> only provide the <I>Client</I> with information, with the exception of the <I>TransferSubscriptions</I> <I>Service</I> in the <I>Subscription</I> <I>Service Set</I>. In general, these services will not generate audit entries or audit Event <I>Messages</I>. The <I>TransferSubscriptions</I> <I>Service</I> shall generate an audit <I>Event</I> of type <I>AuditSessionEventType</I> or subtypes of it for both successful and failed <I>Service</I> invocations. See <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for the detailed assignment of the <I>SourceNode</I>, the <I>SourceName</I> and additional parameters. For the failure case, the <I>Message</I> for Events of this type should include a description of why the service failed. </P
><P 

>For <I>Clients</I> that support auditing, accessing the <I>TransferSubscriptions</I> <I>Service</I> in the <I>Subscription</I> <I>Service Set</I> shall generate audit entries for both successful and failed invocations of the <I>Service</I>. Invocations of the other <I>Services</I> in this <I>Service Set</I> do not require audit entries. All audit entries should be setup prior to the actual <I>Service</I> invocation, allowing the invocation to contain the correct audit record id. </P
><H2 
 ID="LinkTarget_20170"
><B>6.4 Redundancy </H2
><H3 
 ID="LinkTarget_20171"
> Redundancy overview </H3
><P 

></B>OPC UA enables <I>Servers, Clients</I> and networks to be redundant. OPC UA provides the data structures and <I>Services</I> by which <I>Redundancy</I> may be achieved in a standardized manner.  </P
><P 

><I>Server</I> <I>Redundancy</I> allows <I>Clients </I>to have multiple sources from which to obtain the same data. <I>Server</I> <I>Redundancy</I> can be achieved in multiple manners, some of which require <I>Client </I>interaction, others that require no interaction from a <I>Client</I>. Redundant <I>Servers</I> could exist in systems without redundant networks or <I>Clients</I>. Redundant <I>Servers</I> could also coexist in systems with network and <I>Client</I> <I>Redundancy</I>. <I>Server Redundancy</I> is formally defined in <A href="#LinkTarget_20191" href="#">
6.4.2</A>
. </P
><P 

><I>Client Redundancy</I> allows identically configured <I>Clients </I>to behave as if they were single <I>Clients</I>, but not all <I>Clients </I>are obtaining data at a given time. Ideally there should be no loss of information when a <I>Client Failover</I> occurs. Redundant <I>Clients</I> could exist in systems without redundant networks or <I>Servers</I>. Redundant <I>Clients</I> could also coexist in systems with network and <I>Server</I> <I>Redundancy</I>. <I>Client Redundancy</I> is formally defined in <A href="#LinkTarget_20725" href="#">
6.4.3</A>
. </P
><P 

>Network <I>Redundancy</I> allows a <I>Client </I>and <I>Server</I> to have multiple communication paths to obtain the same data. Redundant networks could exist in systems without redundant <I>Servers</I> or <I>Clients</I>. Redundant networks could also coexist in systems with <I>Client </I>and <I>Server</I> <I>Redundancy</I>. Network<I> Redundancy</I> is formally defined in <A href="#LinkTarget_20729" href="#">
6.4.4</A>
. </P
><H3 
 ID="LinkTarget_20191"
><B> Server Redundancy </H3
><H4 
 ID="LinkTarget_20192"
>6.4.2.1 General </H4
><P 

></B>There are two general modes of Server <I>Redundancy</I>, transparent and non-transparent.  </P
><P 

>In transparent <I>Redundancy</I> the <I>Failover</I> of <I>Server</I> responsibilities from one <I>Server</I> to another is transparent to the <I>Client</I>. The <I>Client</I> is unaware that a <I>Failover</I> has occurred and the <I>Client</I> has no control over the <I>Failover</I> behaviour. Furthermore, the <I>Client</I> does not need to perform any actions to continue to send or receive data. </P
><P 

>In non-transparent <I>Redundancy</I> the <I>Failover</I> from one <I>Server</I> to another and actions to continue to send or receive data are performed by the <I>Client</I>. The <I>Client</I> must be aware of the <I>Redundant</I> <I>Server Set</I> and must perform the required actions to benefit from the <I>Server Redundancy</I>. </P
><P 

>The <I>ServerRedundancy Object</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
 indicates the mode supported by the <I>Server</I>. The <I>ServerRedundancyType ObjectType</I> and its subtypes <I>TransparentRedundancyType </I>and<I> NonTransparentRedundancyType </I>defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
 specify information for the supported <I>Redundancy</I> mode. </P
><H4 
 ID="LinkTarget_20206"
><B>6.4.2.2  Redundant Server Set Requirements </H4
><P 

></B>OPC UA <I>Servers</I> that are part of a <I>Redundant Server Set</I> have certain <I>AddressSpace</I> requirements. These requirements allow a <I>Client </I>to consistently access information from <I>Servers</I> in a <I>Redundant Server Set</I> and to make intelligent choices related to the health and availability of <I>Servers</I> in the <I>Redundant Server Set</I>. </P
><P 

><I>Servers</I> in the <I>Redundant Server Set</I> shall have an identical <I>AddressSpace</I> including: </P
><DL 

><DD 

>&#61623; identical <I>NodeIds</I>  </DD
><DD 

>&#61623; identical browse paths and structure of the <I>AddressSpace</I> </DD
><DD 

>&#61623; identical logic for setting the <I>ServiceLevel</I> </DD
></DL
><P 

>The only <I>Nodes</I> that can differ between <I>Servers</I> in a <I>Redundant Server Set</I> are the <I>Nodes</I> that are in the local <I>Server</I> namespace like the <I>Server </I>diagnostic <I>Nodes</I>. A <I>Client </I>that fails over shall not be required to translate browse paths or otherwise resolve <I>NodeIds</I>. <I>Servers</I> are allowed to add and delete <I>Nodes</I> as long as all <I>Servers</I> in the <I>Redundant Server Set</I> will be updated with the same <I>Node</I> changes. </P
><P 

> </P
><P 

>All <I>Servers</I> in a <I>Redundant Server Set</I> shall be synchronized with respect to time. This may mean installing a NTP service or a PTP service. </P
><P 

>There are other important considerations for a redundant system regarding synchronization:  </P
><DL 

><DD 

>&bull; EventIds: Each UA <I>Server</I> in a <I>Transparent and HotPlusMirrored</I> <I>Redundant Server Set</I> shall synchronize EventIds to prevent a <I>Client</I> from mistakenly processing the same event multiple times simply because the <I>EventIds</I> are different. This is very important for Alarms &amp; Conditions. For Cold, Warm, and Hot <I>Redundant Server Sets</I> <I>Clients</I> must be able to handle <I>EventIds</I> that are not synchronized. Following any <I>Failover</I> the <I>Client</I> must call <I>ConditionRefresh </I>defined in Part 9. </DD
><DD 

>&bull; Timestamp (Source/Server): If a <I>Server</I> is exposing data from a downstream device (PLC, DCS etc.) then the <I>SourceTimestamp</I> and <I>ServerTimestamp</I> reported by all redundant <I>Servers</I> should match as closely as possible. <I>Clients</I> should favour the use of the <I>SourceTimestamp</I>. </DD
><DD 

>&bull; ContinuationPoints: Behaviour of continuation points does not change, in that Clients must be prepared for lost continuation points. <I>Servers</I> in <I>Transparent and HotPlusMirrored</I> <I>Redundancy</I> sets shall synchronize continuation points and they may do so in other modes. </DD
></DL
><H4 
 ID="LinkTarget_20228"
><B>6.4.2.3 Transparent Redundancy </H4
><H5 
 ID="LinkTarget_20229"
>6.4.2.3.1.1 Client Behaviour </H5
><P 

></B>To a <I>Client </I>the transparent <I>Redundant Server Set </I>appears as if it is just a single <I>Server </I>and the <I>Client </I>has no <I>Failover</I> actions to perform. All <I>Servers</I> in the <I>Redundant Server Set</I> have an identical <I>ServerUri</I> and an identical <I>EndpointUrl</I>. </P
><P 

><A href="#LinkTarget_20237" href="#">
Figure 24</A>
 shows a typical transparent <I>Redundancy</I> setup. </P
><P 

> <DIV class="Sect" 
 Alt=""
>             Transparent Redundant Set Server 1 Client and process info Server 2 Client and process info  Client Shared       Server URI and Endpoint URL  </DIV
></P
><P 

><B>Figure 24 &ndash; Transparent Redundancy setup example </P
><P 

></B>For transparent <I>Redundancy</I>, OPC UA provides data structures to allow <I>Clients</I> to identify which <I>Servers</I> are in the <I>Redundant Server Set</I>, the <I>ServiceLevel</I> of each <I>Server, </I>and which <I>Server </I>is currently responsible for the <I>Client</I> <I>Session</I>. This information is specified in </P
><P 

><I>TransparentRedundancyType ObjectType</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. Since the <I>ServerUri</I> is identical for all <I>Servers</I> in the <I>Redundant Server Set</I>, the Servers are identified with a <I>ServerId</I> contained in the information provided in the <I>TransparentRedundancyType Object</I>. </P
><P 

>In transparent <I>Redundancy</I>, a <I>Client</I> is not able to control which physical <I>Server</I> it actually connects to. <I>Failover</I> is controlled by the <I>Redundant Server Set</I> and a <I>Client</I> is also not able to actively <I>Failover</I> to another <I>Server</I> in the <I>Redundant Server Set</I>. </P
><H5 
 ID="LinkTarget_20249"
><B>6.4.2.3.1.2 Server Requirements </H5
><P 

></B>All OPC UA interactions within a given <I>Session</I> shall be supported by one <I>Server</I> and the <I>Client</I> is able to identify which <I>Server</I> that is, allowing a complete audit trail for the data. It is the responsibility of the <I>Servers</I> to ensure that information is synchronised between the <I>Servers</I>. A functional <I>Server</I> will take over the <I>Session</I> and <I>Subscriptions</I> from the <I>Failed</I> <I>Server</I>. <I>Failover</I> may require a reconnection of the <I>Client&rsquo;s</I> <I>Secure Channel</I> but the <I>EndpointUrl</I> of the <I>Server</I> and the <I>ServerUri</I> shall not change. The <I>Client</I> shall be able to continue communication with the <I>Sessions</I> and <I>Subscriptions</I> created on the previously used <I>Server</I>. </P
><P 

><A href="#LinkTarget_20237" href="#">
Figure 24</A>
 provides an abstract view of a transparent <I>Redundant</I> <I>Server Set</I>. The two or more Servers in the <I>Redundant Server Set</I> share a virtual network address and therefore all <I>Servers</I> have the identical <I>EnpointUrl</I>. How this virtual network address is created and managed is vendor specific. There may be special hardware that mediates the network address displayed to the rest of the network. There may be custom hardware, where all components are redundant and <I>Failover</I> at a hardware level automatically. There may even be software based systems where all the transparency is governed completely by software. </P
><H4 
 ID="LinkTarget_20256"
><B>6.4.2.4 Non-transparent Redundancy </H4
><H6 
 ID="LinkTarget_20257"
>6.4.2.4.1 Overview </H6
><P 

></B>For non-transparent <I>Redundancy</I>, OPC UA provides the data structures to allow the <I>Client </I>to identify what <I>Servers</I> are available in the <I>Redundant Server Set</I> and also <I>Server</I> information which tells the <I>Client</I> what modes of <I>Failover</I> the <I>Server</I> supports. This information allows the <I>Client</I> to determine what actions it may need to take in order to accomplish <I>Failover</I>. This information is specified in <I>NonTransparentRedundancyType ObjectType</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. </P
><P 

><A href="#LinkTarget_20270" href="#">
Figure 25</A>
 shows a typical non-transparent <I>Redundancy</I> setup. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Server 1 Client and process info Server 2 Client and process info  Client        Redundant Set Server URI 1 Endpoint URL 1  Server URI 2 Endpoint URL 2  </DIV
></P
><P 

><B>Figure 25 &ndash; Non-Transparent Redundancy setup </P
><P 

></B>For non-transparent <I>Redundancy</I>, the <I>Servers</I> will have unique IP addresses. The <I>Server</I> also has additional <I>Failover</I> modes of <I>Cold</I>, <I>Warm</I>, <I>Hot</I> and <I>HotPlusMirrored</I>. The client must be aware of the <I>Redundant Server Set</I> and shall be required to perform some actions depending on the <I>Failover</I> mode. These actions are described in <A href="#LinkTarget_20453" href="#">
Table 107</A>
 and additional examples and explanations are provided in <A href="#LinkTarget_20652" href="#">
6.4.2.4.5.2</A>
.for <I>Cold</I>, <A href="#LinkTarget_20665" href="#">
6.4.2.4.5.3</A>
 for <I>Warm</I>, <A href="#LinkTarget_20678" href="#">
6.4.2.4.5.4</A>
 for <I>Hot</I> and <A href="#LinkTarget_20701" href="#">
6.4.2.4.5.5</A>
 for <I>HotPlusMirrored</I>. </P
><P 

>A <I>Client </I>needs to be able to expect that the SourceTimestamp associated with a value is approximately the same from all <I>Servers</I> in the <I>Redundant Server Set</I> for the same value. </P
><H6 
 ID="LinkTarget_20297"
><B>6.4.2.4.2 ServiceLevel </H6
><P 

></B>The <I>ServiceLevel</I> provides information to a <I>Client</I> regarding the health of a <I>Server</I> and its ability to provide data. See <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for a formal definition for <I>ServiceLevel</I>. The <I>ServiceLevel</I> is a byte with a range of 0 to 255, where the values fall into the sub-ranges defined in <A href="#LinkTarget_20315" href="#">
Table 105</A>
. </P
><P 

>The algorithm used by a <I>Server</I> to determine its <I>ServiceLevel</I> within each sub-range is <I>Server</I> specific. However, all <I>Servers</I> in a <I>Redundant Server Set</I> shall use the same algorithm to determine the <I>ServiceLevel. </I>All<I> Servers, </I>regardless of <I>Redundant Server Set</I> membership, shall adhere to the sub-ranges defined in <A href="#LinkTarget_20315" href="#">
Table 105</A>
.  </P
><P 

><B>Table 105 - ServiceLevel Ranges </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Sub-range </P
></TD
><TD  
 valign="top"
><P 

>Name </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0-0 </P
></TD
><TD  
 valign="top"
><P 

>Maintenance </P
></TD
><TD  
 valign="top"
><P 

>The <I>Failed</I> <I>Server</I> is in maintenance sub-range. Therefore, new <I>Clients </I>shall not connect and currently connected <I>Clients</I> shall disconnect. The <I>Server</I> should expose a target time at which the <I>Clients </I>are able to reconnect. See <I>EstimatedReconnectTime</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
 for additional information. </P
><P 

>A <I>Server</I> that has been set to <I>Maintenance</I> is typically undergoing some maintenance or updates. The main goal for the <I>Maintenance</I> <I>ServiceLevel</I> is to ensure that <I>Client</I><I>s</I><I> </I>do not generate load on the <I>Server</I> and allow time for the <I>Server</I> to complete any actions that are required. This load includes even simple connections attempts or monitoring of the <I>ServiceLevel</I>. The <I>EstimatedReconnectTime</I> indicates when the <I>Client </I>should check to see if the <I>Server</I> is available. If updates or patches are taking longer than expected the <I>Client </I>may discover that the <I>EstimatedReconnectTime</I> has been extended further into the future. If the <I>Server</I> does not provide the <I>EstimatedReconnectTime</I><I>,</I> or if the time has lapsed, the <I>Client</I> should use a much longer interval between reconnects to an <I>Server</I> in the <I>Maintenance</I> sub-range than its normal reconnect interval. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1-1 </P
></TD
><TD  
 valign="top"
><P 

>NoData </P
></TD
><TD  
 valign="top"
><P 

>The <I>Failed</I> <I>Server</I> is not operational. Therefore, a <I>Client </I>is not able to exchange any information with it. The <I>Server</I> most likely has no data other than <I>ServiceLevel</I><I>, </I><I>ServerStatus</I> and diagnostic information available. </P
><P 

>A <I>Failed</I> <I>Server</I><I> </I>in this sub-range has no data available. <I>Client</I><I>s</I><I> </I>may connect to it to obtain <I>Ser</I><I>viceLevel</I>, <I>ServerStatus</I> and other diagnostic information. If the underlying system has failed, typically the <I>ServerStatus</I> would indicate COMMUNICATION_FAULT_6. The <I>Client </I>may monitor this <I>Server</I> for a <I>ServerStatus</I> and <I>ServiceLevel</I> change, which would indicate that normal communication could be resumed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2-199 </P
></TD
><TD  
 valign="top"
><P 

>Degraded </P
></TD
><TD  
 valign="top"
><P 

><I>The </I><I>Server</I> is partially operational, but is experiencing problems such that portions of the <I>AddressSpace</I> are out of service or unavailable. To understand <I>Client</I> options, see Degraded <I>Servers</I> discussion in this section. An example usage of this <I>ServiceLevel</I> sub-range would be if 3 of 10 devices connected to a <I>Server</I> are unavailable. </P
><P 

><I>Servers</I> that report a <I>ServiceLevel</I> in the <I>Degraded</I> sub-range are partially able to service <I>Client</I> requests. The degradation could be caused by loss of connection to underlying systems. Alternatively, it could be that the <I>Server</I> is overloaded to the point that it is unable to reliably deliver data to <I>Clients </I>in a timely manner. </P
><P 

>If <I>Clients</I> are experiencing difficulties obtaining required data, they shall switch to another <I>Server</I> if any <I>Servers</I> in the <I>Healthy</I> range are available. If no <I>Servers</I> are available in the <I>Healthy</I> range, then <I>Clients </I>may switch to a <I>Server</I> with a higher <I>ServiceLevel</I> or one that provides the required data. Some <I>Clients </I>may also be configured for higher priority data and may check all <I>Degraded</I> <I>Servers</I>, to see if any of the <I>Servers</I> are able to report as good quality the high priority data, but this functionality would be <I>Client </I>specific. In some cases a <I>Client</I> may connect to multiple <I>Degraded</I> <I>Server</I><I>s</I> to maximize the available information. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>200-255 </P
></TD
><TD  
 valign="top"
><P 

>Healthy </P
></TD
><TD  
 valign="top"
><P 

>The Server is fully operational. Therefore, a <I>Client </I>can obtain all information from this <I>Server</I>. The sub-range allows a <I>Server</I> to provide information that can be used by Clients to load balance. An example usage of this <I>ServiceLevel</I> sub-range would be to reflect the <I>Server&rsquo;s</I> CPU load where data is delivered as expected. </P
><P 

><I>Servers</I> in the <I>Healthy</I> <I>ServiceLevel</I><I> </I>sub-range are able to deliver information in a timely manner. This <I>ServiceLevel</I> may change for internal <I>Server</I> reason or it may be used for load balancing described in <A href="#LinkTarget_20374" href="#">
6.4.2.4.3</A>
. </P
><P 

>Client shall connect to the <I>Server</I> with the highest <I>Serv</I><I>ice</I><I>Level</I>. Once connected, the <I>ServiceLevel</I> may change, but a <I>Client</I> shall not <I>Failover</I> to a different <I>Server</I> as long as the <I>ServiceLevel</I> of the <I>Server</I> is accessible and in the <I>Healthy</I> sub-range. </P
></TD
></TR
></TABLE
><P 

> </P
><H6 
 ID="LinkTarget_20374"
><FONT size="+1"><B>6.4.2.4.3 Load Balancing </H6
><P 

></B>In systems where multiple Hot <I>Servers</I> (see <A href="#LinkTarget_20678" href="#">
6.4.2.4.5.4</A>
) are available, the <I>Servers</I> in the <I>Redundant Server Set</I> can share the load generated by <I>Clients</I> by setting the <I>ServiceLevel</I> in the <I>Healthy</I> sub-range based on the current load. <I>Clients </I>are expected to connect to the <I>Server </I>with the highest <I>ServiceLevel</I>. <I>Clients </I>shall not <I>Failover</I> to a different <I>Server </I>in the <I>Redundant Server Set</I> of <I>Servers</I> as long as the <I>Server </I>is in the <I>Healthy</I> sub-range. This is the normal behaviour for </P
><P 

>all <I>Clients</I>, when communicating with redundant <I>Servers</I>. <I>Servers</I> can adjust their <I>ServiceLevel</I> based on the number of <I>Clients</I> that are connected, CPU loading, memory utilization, or any other <I>Server </I>specific criteria. </P
><P 

>For example in a system with 3 <I>Servers</I>, all <I>Servers</I> are initially at <I>ServiceLevel</I> 255, but when a <I>Client </I>connects, the <I>Server </I>with the <I>Client </I>connection sets its level to 254. The next <I>Client </I>would connect to a different <I>Server </I>since both of the other <I>Servers</I> are still at 255.  </P
><P 

>It is up to the <I>Server </I>vendor to define the logic for spreading the load and the number of expected <I>Clients</I>, CPU load or other criteria on each <I>Server </I>before the <I>ServiceLevel</I> is decremented. It is envisioned that some <I>Servers</I> would be able to accomplish this without any communication between the <I>Servers</I>. </P
><H6 
 ID="LinkTarget_20385"
><B>6.4.2.4.4 Server Failover Modes </H6
><P 

></B>The <I>Failover</I> mode of a <I>Server</I> is provided in the <I>ServerRedundancy</I> <I>Object</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. The different Failover modes for non-transparent Redundancy are described in <A href="#LinkTarget_20396" href="#">
Table 106</A>
. </P
><P 

><B>Table 106 &ndash; Server Failover Modes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Cold </P
></TD
><TD  
 valign="top"
><P 

><I>Cold</I> <I>Failover</I> mode is where only one <I>Server</I> can be active at a time. This may mean that redundant <I>Servers</I> are unavailable (not powered up) or are available but not running (PC is running, but application is not started) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Warm </P
></TD
><TD  
 valign="top"
><P 

><I>Warm</I> <I>Failover</I> mode is where the backup <I>Server(s)</I> can be active, but cannot connect to actual data points (typically, a system where the underlying devices are limited to a single connection). Underlying devices, such as PLCs, may have limited resources that permit a single <I>Server </I>connection. Therefore, only a single <I>Server </I>will be able to consume data. The <I>ServiceLevel</I> <I>Variable</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
 indicates the ability of the <I>Server</I> to provide its data to the <I>Client</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Hot </P
></TD
><TD  
 valign="top"
><P 

><I>Hot</I> <I>Failover</I> mode is where all <I>Servers</I> are powered-on, and are up and running. In scenarios where <I>Servers</I> acquire data from a downstream device, such as a PLC, then one or more <I>Servers</I> are actively connected to the downstream device(s) in parallel. These <I>Servers</I> have minimal knowledge of the other <I>Servers</I> in their group and are independently functioning. When a <I>Server</I> fails or encounters a serious problem then its <I>ServiceLevel</I> drops. On recovery, the <I>Server</I> returns to the <I>Redundant </I><I>Server </I><I>Set</I> with an appropriate <I>ServiceLevel</I> to indicate that it is available.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HotPlusMirrored </P
></TD
><TD  
 valign="top"
><P 

><I>HotPlusMirrored</I> <I>Failover</I> mode is where <I>Failover</I><I>s</I> are for <I>Servers</I> that are mirroring their internal states to all <I>Servers</I> in the <I>Redundant </I><I>Server </I><I>Set</I> and more than one <I>Server</I> can be active and fully operational. Mirroring state minimally includes <I>Sessions</I>, <I>Subscriptions</I>, registered <I>Nodes</I>, <I>ContinuationPoints</I>, sequence numbers, and sent <I>Notifications</I>. The <I>ServiceLevel</I> <I>Variable</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
 should be used by the <I>Client</I> to find the <I>Servers</I> with the highest <I>ServiceLevel</I> to achieve load balancing.<I> </I></P
></TD
></TR
></TABLE
><P 

> </P
><H6 
 ID="LinkTarget_20440"
><FONT size="+1"><B>6.4.2.4.5 Client Failover Behaviour </H6
><H5 
 ID="LinkTarget_20441"
>6.4.2.4.5.1 General </H5
><P 

></B>Each <I>Server </I>maintains a list of <I>ServerUris</I> for all redundant <I>Servers</I> in the <I>Redundant Server Set</I>. The list is provided together with the <I>Failover</I> mode in the <I>ServerRedundancy</I> <I>Object</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. To enable <I>Clients </I>to connect to all <I>Servers</I> in the list, each <I>Server</I> in the list shall provide the <I>ApplicationDescription</I> for all <I>Servers</I> in the <I>Redundant Server Set</I> through the <I>FindServers</I> <I>Service</I>. This information is needed by the <I>Client</I> to translate the <I>ServerUri</I> into information needed to connect to the other <I>Servers</I> in the <I>Redundant Server Set</I>. Therefore a <I>Client</I> needs to connect to only one of the redundant <I>Servers</I> to find the other <I>Servers</I> based on the provided information. A <I>Client</I> should persist information about other <I>Servers</I> in the <I>Redundant Server Set</I>. </P
><P 

><A href="#LinkTarget_20453" href="#">
Table 107</A>
 defines a list of <I>Client</I> actions for initial connections and <I>Failovers</I>. </P
><P 

><B>Table 107 &ndash; Redundancy Failover actions </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Failover mode and <I>Client</I> options </P
></TD
><TD  
 valign="top"
><P 

>Cold </P
></TD
><TD  
 valign="top"
><P 

>Warm </P
></TD
><TD  
 valign="top"
><P 

>Hot (a) </P
></TD
><TD  
 valign="top"
><P 

>Hot (b) </P
></TD
><TD  
 valign="top"
><P 

>HotPlusMirrored </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>On initial connection in addition to actions on Active Server: </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Connect to more than one OPC UA <I>Server</I>. </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>Optional for status check </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Create <I>Subscriptions</I> and add monitored items. </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Activate sampling on the <I>Subscriptions.</I> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Activate publishing. </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>At Failover: </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> OpenSecureChannel to backup OPC UA <I>Server</I> </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> CreateSession on backup OPC UA <I>Server</I> </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> ActivateSession on backup OPC UA <I>Server</I> </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Create <I>Subscriptions</I> and add monitored items. </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Activate sampling on the <I>Subscriptions</I>. </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Activate publishing. </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1"><I>Clients</I> communicating with a non-transparent <I>Redundant Server Set</I> of <I>Servers</I> require some additional logic to be able to handle <I>Server </I>failures and to <I>Failover</I> to another <I>Server </I>in the <I>Redundant Server Set</I>. <A href="#LinkTarget_20649" href="#">
Figure 26</A>
 provides an overview of the steps a client typically performs when it is first connecting to a <I>Redundant Server Set</I>. The figure does not cover all possible error scenarios. </P
><P 

> <DIV class="Sect" 
 Alt=""
>StartupOpenSecureChannelCreateSessionActivateSessionRead redundant servers list Read Server ServiceLevelSave Server as active server and save level Initial ServerClient Start-up StepsIs ServiceLevel &gt; Saved levelNoOpenSecureChannelCreateSessionActivateSessionOn Next ServerRead Server ServiceLevelYesKeep server as active server &ndash; updated levelMore Servers in ListNoYesStart Process on selected Server</DIV
></P
><P 

><B>Figure 26 &ndash; Client Start-up Steps </P
><P 

></B>The initial <I>Server </I>may be obtained via standard discovery or from a persisted list of <I>Servers</I> in the <I>Redundant Server Set</I>. But in any case the <I>Client </I>needs to check which <I>Server </I>in the <I>Server </I>set it should connect to. Individual actions will depend on the <I>Server Failover</I> mode the <I>Server </I>provides and the <I>Failover</I> mode the <I>Client </I>will make use. </P
><P 

><I>Clients </I>once connected to a redundant <I>Server </I>have to be aware of the modes of <I>Failover</I> supported by a <I>Server</I> since this support affects the available options related to <I>Client </I>behaviour. A <I>Client </I>may always treat a <I>Server </I>using a lesser <I>Failover</I> mode, i.e. for a <I>Server </I>that provides <I>Hot</I> <I>Redundancy</I>, a <I>Client </I>might connect and choose to treat it as if the <I>Server </I>was running in <I>Warm</I> <I>Redundancy</I> or <I>Cold</I> <I>Redundancy</I>. This choice is up to the client. In the case of <I>Failover</I> mode <I>HotPlusMirrored</I>, the <I>Client</I> shall not use Failover mode <I>Hot</I> or <I>Warm</I> as it would generate unnecessary load on the <I>Servers</I>. </P
><H5 
 ID="LinkTarget_20652"
><B>6.4.2.4.5.2 Cold </H5
><P 

></B>A <I>Cold</I> <I>Failover</I> mode is where the <I>Client</I> can only connect to one <I>Server</I> at a time. When the <I>Client</I> loses connectivity with the <I>Active</I> <I>Server</I> it will attempt a connection to the redundant <I>Server</I>(s) which may or may not be available. In this situation the <I>Client</I> may need to wait for the redundant <I>Server</I> to become available and then create <I>Subscriptions</I> and <I>MonitoredItems</I> and activate publishing. The <I>Client </I>shall cache any information that is required related to the list of available <I>Servers</I> in the <I>Redundant Server Set</I>. <A href="#LinkTarget_20663" href="#">
Figure 27</A>
 illustrate the action a <I>Client </I>would take if it is talking to a <I>Server </I>using <I>Cold</I> <I>Failover</I> mode. </P
><P 

> <DIV class="Sect" 
 Alt=""
>StartupOpenSecureChannelCreateSessionActivateSessionCreateSubscriptionCreateMonitoredItemsActivateSamplingActivate PublishingMonitorConnectionSourceServerAlternateServerOpenSecureChannelCreateSessionActivateSessionCreateSubscriptionCreateMonitoredItemsStatusOKActivateSamplingActivate PublishingErrorSwitchServersCold</DIV
></P
><P 

><B>Figure 27 &ndash; Cold Failover </P
><P 

>Note</B>: There may be a loss of data from the time the connection to the <I>Active</I> <I>Server</I> is interrupted until the time the <I>Client</I> gets <I>Publish Responses</I> from the backup <I>Server</I>. </P
><H5 
 ID="LinkTarget_20665"
><B>6.4.2.4.5.3 Warm </H5
><P 

></B>A <I>Warm</I> <I>Failover</I> mode is where the <I>Client</I> should connect to one or more <I>Servers</I> in the <I>Redundant Server Set</I> primarily to monitor the <I>ServiceLevel</I>. A <I>Client</I> can connect and create <I>Subscriptions</I> and <I>MonitoredItems</I> on more than one <I>Server,</I> but sampling and publishing can only be active on one <I>Server</I>. However, the active <I>Server</I> will return actual data, whereas the other <I>Servers</I> in the <I>Redundant Server Set</I> will return an appropriate error for the <I>MonitoredItems</I> in the <I>Publish</I> response such as Bad_NoCommunication. The one <I>Active</I> <I>Server</I> can be found by reading the <I>ServiceLevel</I> <I>Variable</I> from all <I>Servers</I>. The <I>Server</I> with the highest <I>ServiceLevel</I> is the <I>Active Server</I>. For <I>Failover</I> the <I>Client</I> activates sampling and publishing on the <I>Server</I> with the highest <I>ServiceLevel</I>. <A href="#LinkTarget_20676" href="#">
Figure 28</A>
 illustrates the steps a <I>Client </I>would perform when communicating with a <I>Server </I>using <I>Warm</I> <I>Failover</I> mode. </P
><P 

> <DIV class="Sect" 
 Alt=""
>StartupOpenSecureChannelCreateSessionActivateSessionCreateSubscriptionCreateMonitoredItemsActivateSamplingActivate PublishingMonitorConnectionSourceServerAlternateServerOpenSecureChannelCreateSessionActivateSessionCreateSubscriptionCreateMonitoredItemsStatusOKActivateSamplingActivate PublishingErrorSwitchServersWarm</DIV
></P
><P 

><B>Figure 28 &ndash; Warm Failover </P
><P 

>Note</B>: There may be a temporary loss of data from the time the connection to the <I>Active</I> <I>Server</I> is interrupted until the time the <I>Client</I> gets <I>Publish Responses</I> from the backup <I>Server</I>. </P
><H5 
 ID="LinkTarget_20678"
><B>6.4.2.4.5.4 Hot </H5
><P 

></B>A <I>Hot</I> <I>Failover</I> mode is where the <I>Client</I> should connect to two or more <I>Servers</I> in the <I>Redundant Server Set</I> and to subscribe to the <I>ServiceLevel</I> variable defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
 to find the highest <I>ServiceLevel</I> to achieve load balancing; this means that <I>Clients</I> should issue <I>Service</I> requests such as <I>Browse</I>, <I>Read</I>, <I>Write</I> to the <I>Server</I> with the highest ServiceLevel. <I>Subscription</I> related activities will need to be invoked for each connected <I>Server</I>. <I>Clients</I> have the following choices for implementing subscription behaviour in a <I>Hot</I> <I>Failover</I> mode:  </P
><DL 

><DD 

>a. <I>Client</I> connects to multiple <I>Servers</I> and establishes subscription(s) in each where only one is <I>Reporting</I>; the others are <I>Sampling</I> only. The Client should setup the queue size for the <I>MonitoredItems</I> such that it can buffer all changes during the <I>Failover</I> time. The <I>Failover</I> time is the time between the connection interruption and the time the <I>Client</I> gets <I>Publish Responses</I> from the backup <I>Server</I>. On a fail-over the <I>Client</I> must enable <I>Reporting</I> on the <I>Server</I> with the next highest availability. </DD
><DD 

>b. <I>Client</I> connects to multiple <I>Servers </I>and establishes subscription(s) in each where all subscriptions are <I>Reporting</I>. The <I>Client</I> is responsible for handling/processing multiple subscription streams concurrently. </DD
></DL
><P 

><A href="#LinkTarget_20699" href="#">
Figure 29</A>
 illustrate the functionality a <I>Client </I>would perform when communicating with a <I>Server </I>using <I>Hot</I> <I>Failover</I> mode (the figure include both (a) and (b) options) </P
><P 

> <DIV class="Sect" 
 Alt=""
>StartupOpenSecureChannelCreateSessionActivateSessionCreateSubscriptionCreateMonitoredItemsActivateSamplingActivate PublishingMonitorConnectionSourceServerAlternateServerOpenSecureChannelCreateSessionActivateSessionCreateSubscriptionCreateMonitoredItemsStatusOKActivateSamplingActivate PublishingErrorSwitchServersHot (a)StartupOpenSecureChannelCreateSessionActivateSessionCreateSubscriptionCreateMonitoredItemsActivateSamplingActivate PublishingMonitorConnectionSourceServerAlternateServerOpenSecureChannelCreateSessionActivateSessionCreateSubscriptionCreateMonitoredItemsStatusOKActivateSamplingActivate PublishingErrorSwitch source being processedHot (b)</DIV
></P
><P 

><B>Figure 29 &ndash; Hot Failover </P
><P 

></B><I>Clients</I> are not expected to automatically switch over to a <I>Server</I> that has recovered from a failure, but the <I>Client</I> should establish a connection to it. </P
><H5 
 ID="LinkTarget_20701"
><B>6.4.2.4.5.5 HotPlusMirrored </H5
><P 

></B>A <I>HotPlusMirrored</I> <I>Failover</I> mode is where a <I>Client</I> only connects to one <I>Server </I>in the <I>Redundant Server Set</I> because the <I>Server</I> will share this session/state information with the other <I>Servers</I>. In order to validate the capability to connect to other redundant <I>Servers</I> it is allowed to create <I>Sessions</I> with other <I>Servers</I> and maintain the open connections by periodically reading the <I>ServiceLevel</I>. A <I>Client</I> shall not create <I>Subscriptions</I> on the backup <I>Servers</I> for status monitoring (to prevent excessive load on the <I>Servers</I>). This mode allows <I>Clients</I> to fail over without creating a new context for communication. On a fail-over the <I>Client</I> will simply create a new <I>SecureChannel</I> on an alternate <I>Server</I> and then call <I>ActivateSession</I>; all <I>Client</I> activities (browsing, subscriptions, history reads, etc.) will then resume. <A href="#LinkTarget_20712" href="#">
Figure 30</A>
 illustrate the behaviour a <I>Client </I>would perform when communicating to a <I>Server </I>in <I>HotPlusMirrored</I> <I>Failover</I> mode. </P
><P 

> <DIV class="Sect" 
 Alt=""
>StartupOpenSecureChannelCreateSessionActivateSessionCreateSubscriptionCreateMonitoredItemsActivateSamplingActivate PublishingMonitorConnectionSourceServerAlternateServerOpenSecureChannelActivateSessionStatusOKErrorSwitchServersHot PlusMirroredSubscriptions resume</DIV
></P
><P 

><B>Figure 30 &ndash; HotPlusMirrored Failover </P
><P 

></B>This <I>Failover</I> mode is similar to the transparent <I>Redundancy</I>. The advantage is that the <I>Client</I> has full control over selecting the <I>Server</I>. The disadvantage is that the <I>Client</I> needs to be able to handle <I>Failovers</I>. </P
><H4 
 ID="LinkTarget_20714"
><B>6.4.2.5 Hiding Failover with a Server Proxy (Informative) </H4
><P 

></B>A vendor can use the non-transparent <I>Redundancy</I> features to create a <I>Server</I> proxy running on the <I>Client</I> machine to provide transparent <I>Redundancy</I> to the client. This reduces the amount of functionality that needs to be designed into the <I>Client</I> and to enable simpler <I>Clients</I> to take advantage of non-transparent <I>Redundancy</I>. The <I>Server</I> proxy simply duplicates <I>Subscriptions</I> and modifications to <I>Subscriptions</I>, by passing the calls on to both <I>Servers</I>, but only enabling publishing and sampling on one <I>Server</I>. When the proxy detects a failure, it enables publishing and/or sampling on the backup <I>Server</I>, just as the <I>Client</I> would if it were a <I>Redundancy</I> aware <I>Client</I>. </P
><P 

><A href="#LinkTarget_20722" href="#">
Figure 31</A>
 shows the <I>Server</I> proxy used to provide transparent <I>Redundancy</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Server 1    Server 2   Server  proxy         Redundant Set Client </DIV
></P
><P 

><B>Figure 31 &ndash; Server proxy for Redundancy </P
><H3 
 ID="LinkTarget_20725"
> Client Redundancy </H3
><P 

></B><I>Client</I> <I>Redundancy</I> is supported in OPC UA by the <I>TransferSubscriptions</I> <I>Service</I> and by exposing <I>Client</I> information in the <I>Server</I> diagnostic information. Since <I>Subscription</I> lifetime is not tied to the <I>Session</I> in which it was created, backup <I>Clients</I> can monitor the active <I>Client&rsquo;s</I> <I>Session</I> with the <I>Server</I>, just as they would monitor any other data variable. If the active <I>Client</I> ceases to be active, the <I>Server</I> shall send a data update to any <I>Client</I> which has that variable monitored. Upon receiving such notification, a backup <I>Client</I> would then instruct the <I>Server</I> to transfer the <I>Subscriptions</I> to its own session. If the <I>Subscription</I> is crafted carefully, with sufficient resources to buffer data during the change-over, there need be no data loss from a <I>Client</I> <I>Failover</I>. </P
><P 

>OPC UA does not provide a standardized mechanism for conveying the <I>SessionId</I> and <I>SubscriptionIds</I> from the active <I>Client</I> to the backup <I>Clients</I>, but as long as the backup <I>Clients</I> know the <I>Client</I> name of the active <I>Client</I>, this information is readily available using the <I>SessionDiagnostics</I> and <I>SubscriptionDiagnostics</I> portions of the <I>ServerDiagnostics</I> data. This information is available for authorized users and for the user active on the <I>Session</I>. <I>TransferSubscription</I> requires the same user on all redundant <I>Clients</I> to succeed. </P
><H3 
 ID="LinkTarget_20729"
><B> Network Redundancy </H3
><H4 
 ID="LinkTarget_20730"
>6.4.4.1 Overview </H4
><P 

></B>Redundant networks can be used with OPC UA in either transparent or non-transparent <I>Redundancy</I>. </P
><P 

>Network <I>Redundancy</I> can be combined with <I>Server</I> and <I>Client</I> <I>Redundancy</I>. </P
><H4 
 ID="LinkTarget_20733"
><B>6.4.4.2 Transparent (Informative) </H4
><P 

></B>In the transparent network use-case a single <I>Server</I> <I>Endpoint</I> can be reached through different network paths. This case is completely handled by the network infrastructure. The selected network path and <I>Failover</I> are transparent to the <I>Client</I> and the <I>Server</I>. </P
><P 

><B> <DIV class="Sect" 
 Alt=""
>ServerLAN 1ClientLAN 2</DIV
></P
><P 

>Figure 32 &ndash; Transparent Network Redundancy  </P
><P 

></B>Examples: </P
><DL 

><DD 

>&#61623; A physical appliance/device such as a router or gateway which automatically changes the network routing to maintain communications. </DD
><DD 

>&#61623; A virtual adapter which automatically changes the network adapter to maintain communications. </DD
></DL
><H4 
 ID="LinkTarget_20746"
><B>6.4.4.3 Non-Transparent </H4
><P 

></B>In the non-transparent network use-case the <I>Server</I> provides different <I>Endpoints</I> for the different network paths. This requires both the <I>Server</I> and the <I>Client</I> to support multiple network connections. In this case the <I>Client</I> is responsible for selecting the <I>Endpoint</I> and for <I>Failover</I>. For <I>Failover</I> the normal reconnect scenario described in <A href="#LinkTarget_20808" href="#">
6.5</A>
 can be used. Only the <I>SecureChannel</I> is created with another <I>Endpoint</I>. <I>Sessions</I> and <I>Subscriptions</I> can be reused. </P
><P 

><B> <DIV class="Sect" 
 Alt=""
>LAN 1ClientLAN 2Server</DIV
></P
><P 

>Figure 33 &ndash; Non-Transparent Network Redundancy </P
><P 

></B>The information about the different network paths is specified in <I>NonTransparentRedundancyType</I> <I>ObjectType</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. </P
><H3 
 ID="LinkTarget_20783"
><B> Manually Forcing Failover </H3
><P 

></B>In redundant systems, it is common to require that a particular <I>Server </I>in the <I>Redundant Server Set</I> be taken out of the <I>Redundant Server Set</I> for a period of time. Some items that could cause this may include: </P
><DL 

><DD 

>&#61623; Certificate update </DD
><DD 

>&#61623; Security reconfiguration </DD
><DD 

>&#61623; Rebooting or restarting of the machine for </DD
><DL 

><DD 

>o software updates and patches </DD
><DD 

>o installation of new software </DD
></DL
><DD 

>&#61623; Reconfiguration of the AddressSpace </DD
></DL
><P 

>The removal from the <I>Redundant Server Set</I> can be done through a complete shutdown or by setting the <I>ServiceLevel</I> of the <I>Server</I> to <I>Maintenance</I> sub-range. This can be done through a </P
><P 

><I>Server</I> specific configuration tool or through the <I>Method RequestServerStateChange</I> on the <I>ServerRedundancyType</I>. The Method is formally defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. </P
><P 

>This <I>Method</I> requires that the <I>Client</I> provide credentials with administrative rights on the <I>Server</I>. </P
><H2 
 ID="LinkTarget_20808"
><B>6.5 Re-establishing connections </H2
><P 

></B>After a <I>Client</I> establishes a connection to a <I>Server</I> and creates a <I>Subscription</I>, the <I>Client</I> monitors the connection status. <A href="#LinkTarget_20819" href="#">
Figure 34</A>
 shows the steps to connect a <I>Client</I> to a <I>Server</I> and the general logic for reconnect handling. Not all possible error scenarios are covered. </P
><P 

>The preferred mechanism for a <I>Client</I> to monitor the connection status is through the keep-alive of the <I>Subscription</I>. A <I>Client</I> should subscribe for the <I>State</I> <I>Variable</I> in the <I>ServerStatus</I> to detect shutdown or other failure states. If no <I>Subscription</I> is created or the <I>Server</I> does not support <I>Subscriptions</I>, the connection can be monitored by periodically reading the <I>State</I> <I>Variable</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ConnectionStatusCreateSesucreChannelCreateSessionActivateSessionStartupMonitor ConnectionOKErrorCreateSesucreChannelActivateSessionGoodRepublishServiceResultGoodGoodBad_SubscriptionIdInvalidStart Publish processingBad_MessageNotAvailableCreateSessionActivateSessionTransfer SubscriptionBadServiceResultGoodCreate SubscriptionBadBadServiceResultServiceResult</DIV
></P
><P 

><B>Figure 34 &ndash; Reconnect Sequence </P
><P 

></B>When a <I>Client</I> loses the connection to the <I>Server</I>, the goal is to reconnect without losing information. To do this the <I>Client</I> shall re-establish the connection by creating a new <I>SecureChannel</I> and activating the <I>Session</I> with the <I>Service</I> <I>ActivateSession</I>. This assigns the new <I>SecureChannel</I> to the existing <I>Session</I> and allows the <I>Client</I> to reuse the <I>Session</I> and <I>Subscriptions</I> in the <I>Server</I>. To re-establish the <I>SecureChannel</I> and activate the <I>Session</I>, the <I>Client</I> shall use the same security policy, application instance certificate and the same user credential used to create the original <I>SecureChannel</I>. This will result in the Client receiving data and event <I>Notifications</I> without losing information provided the queues in the MonitoredItems do not overflow. </P
><P 

>The <I>Client</I> shall only create a new <I>Session</I> if <I>ActivateSession</I> fails. <I>TransferSubscriptions</I> is used to transfer the <I>Subscription</I> to the new <I>Session</I>. If <I>TransferSubscriptions</I> fails, the <I>Client</I> needs to create a new <I>Subscription</I>. </P
><P 

>When the connection is lost, <I>Publish</I> responses may have been sent but not received by the <I>Client</I>. </P
><P 

>After re-establishing the connection the <I>Client</I> shall call <I>Republish</I> in a loop, starting with the next expected sequence number and incrementing the sequence number until the <I>Server</I> returns the status Bad_MessageNotAvailable. After receiving this status, the <I>Client</I> shall start sending <I>Publish</I> requests with the normal <I>Publish</I> handling. This sequence ensures that the lost <I>NotificationMessages</I> queued in the <I>Server</I> are not overwritten by new <I>Publish</I> responses. </P
><P 

>If the <I>Client</I> detects missing sequence numbers in the <I>Publish</I> and is not able to get the lost<I> NotificationMessages</I> through <I>Republish</I>, the <I>Client</I> should use the <I>Method</I> <I>ResendData</I> or should read the values of all data <I>MonitoredItems</I> to make sure the <I>Client</I> has the latest values for all <I>MonitoredItems</I>. </P
><P 

>The <I>Server</I> <I>Object</I> provides a <I>Method</I> <I>ResendData</I> that initiates resending of all data monitored items in a <I>Subscription</I>. This <I>Method</I> is defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. If this Method is called, subsequent Publish responses shall contain the current values of all data <I>MonitoredItems</I> in the <I>Subscripion</I> where the <I>MonitoringMode</I> is set to <I>Reporting</I>. The <I>Server</I> shall verify that the <I>Method</I> is called within the <I>Session</I> context of the <I>Session</I> that owns the <I>Subscription</I><I>.</I> </P
><P 

>Independent of the detailed recovery strategy, the <I>Client</I> should make sure that it does not overwrite newer data in the <I>Client</I> with older values provided through <I>Republish</I>. </P
><P 

>If the <I>Republish</I> returns Bad_SubscriptionIdInvalid, then the <I>Client</I> needs to create a new <I>Subscription</I>. </P
><H2 
 ID="LinkTarget_20852"
><B>6.6 Durable Subscriptions </H2
><P 

></B><I>MonitoredItems</I> are used to monitor <I>Variable Values</I> for data changes and event notifier <I>Objects</I> for new <I>Events</I>. Subscriptions are used to combine data changes and events of the assigned <I>MonitoredItems</I> to an optimized stream of network messages. A reliable delivery is ensured as long as the lifetime of the <I>Subscription</I> and the queues in the <I>MonitoredItems</I> are long enough for a network interruption between OPC UA <I>Client</I> and <I>Server</I>. All queues that ensure reliable delivery are normally kept in memory and a <I>Server</I> restart would delete them. </P
><P 

>There are use cases where OPC UA <I>Clients</I> have no permanent network connection to the OPC UA <I>Server</I> or where reliable delivery of data changes and events is necessary even if the OPC UA <I>Server</I> is restarted or the network connection is interrupted for a longer time. </P
><P 

>To ensure this reliable delivery, the OPC UA <I>Server</I> must store collected data and events in non-volatile memory until the OPC UA <I>Client</I> has confirmed reception. It is possible that there will be data lost if the <I>Server</I> is not shut down gracefully or in case of power failure. But the OPC UA <I>Server</I> should store the queues frequently even if the <I>Server</I> is not shut down. </P
><P 

>The <I>Method</I> <I>SetSubcriptionDurable</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
 is used to set a <I>Subscription</I> into this durable mode and to allow much longer lifetimes and queue sizes than for normal <I>Subscriptions</I>. The <I>Method</I> shall be called before the <I>MonitoredItems</I> are created in the durable <I>Subscription</I>. The <I>Server</I> shall verify that the <I>Method</I> is called within the <I>Session</I> context of the <I>Session</I> that owns the <I>Subscription</I>. </P
><P 

>An OPC UA <I>Server</I> providing durable <I>Subscriptions</I> shall </P
><DL 

><DD 

>&#61623; Support the <I>SetSubcriptionDurable</I> <I>Method</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
 </DD
><DD 

>&#61623; Support <I>Service</I> <I>TransferSubscription</I> </DD
><DD 

>&#61623; Support long <I>Subscription</I> lifetimes </DD
><DD 

>&#61623; Support large <I>MonitoredItem</I> queues </DD
></DL
><DL 

><DD 

>&#61623; Store <I>Subscriptions</I> settings and sent notification messages with sequence numbers   </DD
><DD 

>&#61623; Store <I>MonitoredItem</I> settings and queues </DD
></DL
><P 

>An OPC UA <I>Client</I> using durable <I>Subscriptions</I> shall </P
><DL 

><DD 

>&#61623; Use the <I>SetSubcriptionDurable</I> <I>Method</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
 to create a durable <I>Subscription</I> </DD
><DD 

>&#61623; Close <I>Sessions</I> for planned communication interruptions </DD
><DD 

>&#61623; Use the <I>Service</I> <I>TransferSubscription</I> to assign the durable <I>Subscription</I> to a new <I>Session</I> for data transfer </DD
><DD 

>&#61623; Store <I>SubscriptionId</I>, <I>MonitoredItem</I> client and server handles and the last confirmed sequence number </DD
></DL
><H1 
 ID="LinkTarget_20937"
><FONT size="+1"><B>7 Common parameter type definitions </H1
><H2 
 ID="LinkTarget_20938"
><FONT size="+1">7.1 ApplicationDescription </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_20945" href="#">
Table 108</A>
. </P
><P 

><B>Table 108 &ndash; ApplicationDescription </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ApplicationDescription </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Specifies an application<I> </I>that is available<I>.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> applicationUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The globally unique identifier for the application instance. This URI is used as <I>ServerUri</I> in <I>Services</I> if the application is a <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> productUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The globally unique identifier for the product. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> applicationName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>A localized descriptive name for the application. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> applicationType </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>ApplicationType </P
></TD
><TD  
 valign="top"
><P 

>The type of application. </P
><P 

>This value is an enumeration with one of the following values: </P
><P 

> SERVER_0    The application is a <I>Server</I>. </P
><P 

> CLIENT_1    The application is a <I>Client</I>.  </P
><P 

> CLIENTANDSERVER_2 The application is a <I>Client </I>and a<I> </I><I>Server</I>. </P
><P 

> DISCOVERYSERVER_3 The application is a <I>DiscoveryServer.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> gatewayServerUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A URI that identifies the <I>Gateway Server</I> associated with the <I>discoveryUrls</I>. </P
><P 

>This value is not specified if the <I>Server</I> can be accessed directly. </P
><P 

>This field is not used if the <I>applicationType</I> is CLIENT_1. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> discoveryProfileUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A URI that identifies the discovery profile supported by the URLs provided. </P
><P 

>This field is not used if the <I>applicationType</I> is CLIENT_1. </P
><P 

>If this value is not specified then the Endpoints shall support the Discovery Services defined in <A href="#LinkTarget_8204" href="#">
5.4</A>
. </P
><P 

>Alternate discovery profiles are defined in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> discoveryUrls [] </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A list of URLs for the discovery <I>Endpoints</I> provided by the application. </P
><P 

>If the <I>applicationType</I> is CLIENT_1, this field shall contain an empty list. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_21043"
><FONT size="+1"><B>7.2 ApplicationInstanceCertificate </H2
><P 

></B>An <I>ApplicationInstanceCertificate</I> is a <I>ByteString</I> containing an encoded <I>Certificate.</I> The encoding of an <I>ApplicationInstanceCertificate</I> depends on the security technology mapping and is defined completely in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. <A href="#LinkTarget_21054" href="#">
Table 109</A>
 specifies the information that shall be contained in an <I>ApplicationInstanceCertificate</I>. </P
><P 

><B>Table 109 &ndash; ApplicationInstanceCertificate </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ApplicationInstanceCertificate </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

><I>ApplicationInstanceCertificate</I> with signature created by a <I>Certificate Authority</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> version </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>An identifier for the version of the <I>Certificate</I> encoding. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serialNumber </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>A unique identifier for the <I>Certificate</I> assigned by the Issuer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> signatureAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The algorithm used to sign the <I>Certificate</I>.  </P
><P 

>The syntax of this field depends on the <I>Certificate</I> encoding. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> signature </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>The signature created by the Issuer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> issuer </P
></TD
><TD  
 valign="top"
><P 

>Structure </P
></TD
><TD  
 valign="top"
><P 

>A name that identifies the <I>Issuer</I> <I>Certificate</I> used to create the signature. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> validFrom </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>When the <I>Certificate</I> becomes valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> validTo </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>When the <I>Certificate</I> expires. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> subject </P
></TD
><TD  
 valign="top"
><P 

>Structure </P
></TD
><TD  
 valign="top"
><P 

>A name that identifies the application instance that the <I>Certificate</I> describes. </P
><P 

>This field shall contain the <I>productName </I>and the<I> </I>name of the organization responsible for the application instance. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> applicationUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The <I>applicationUri</I> specified in the <I>ApplicationDescription</I>. </P
><P 

>The <I>ApplicationDescription </I>is described in <A href="#LinkTarget_20938" href="#">
7.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> hostnames [] </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The name of the machine where the application instance runs. </P
><P 

>A machine may have multiple names if is accessible via multiple networks. </P
><P 

>The hostname may be a numeric network address or a descriptive name. </P
><P 

><I>Server</I> <I>Certificates</I> shall have at least one hostname defined. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> publicKey </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>The public key associated with the <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> keyUsage [] </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>Specifies how the <I>Certificate</I> key may be used. </P
><P 

><I>ApplicationInstanceCertificates</I> shall support Digital Signature, Non-Repudiation Key Encryption, Data Encryption and Client/Server Authorization. </P
><P 

>The contents of this field depend on the <I>Certificate</I> encoding. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_21183"
><FONT size="+1"><B>7.3 BrowseResult </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_21190" href="#">
Table 110</A>
. </P
><P 

><B>Table 110 &ndash; BrowseResult </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseResult </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>The results of a Browse operation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>The status for the <I>BrowseDescription.</I><I> </I></P
><P 

>This value is set to <I>Good</I> if there are still references to return for the <I>BrowseDescription</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> continuationPoint </P
></TD
><TD  
 valign="top"
><P 

>ContinuationPoint </P
></TD
><TD  
 valign="top"
><P 

>A<I> </I><I>Server</I> defined opaque value that identifies the continuation point. </P
><P 

>The <I>ContinuationPoint</I> type is defined in <A href="#LinkTarget_23640" href="#">
7.6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> References [] </P
></TD
><TD  
 valign="top"
><P 

>ReferenceDescription </P
></TD
><TD  
 valign="top"
><P 

>The set of references that meet the criteria specified in the <I>BrowseDescription</I>. </P
><P 

>Empty, if no <I>References</I> met the criteria. </P
><P 

>The Reference Description type is defined in <A href="#LinkTarget_26831" href="#">
7.25</A>
. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_21247"
><FONT size="+1"><B>7.4 ContentFilter </H2
><H3 
 ID="LinkTarget_21248"
> ContentFilter structure </H3
><P 

></B>The ContentFilter structure defines a collection of elements that define filtering criteria. Each element in the collection describes an operator and an array of operands to be used by the operator. The operators that can be used in a ContentFilter are described in <A href="#LinkTarget_21533" href="#">
Table 115</A>
. The filter is evaluated by evaluating the first entry in the element array starting with the first operand in the operand array. The operands of an element may contain References to sub-elements resulting in the evaluation continuing to the referenced elements in the element array.The evaluation shall not introduce loops. For example evaluation starting from element &ldquo;A&rdquo; shall never be able to return to element &ldquo;A&rdquo;. However there may be more than one path leading to another element &ldquo;B&rdquo;.If an element cannot be traced back to the starting element it is ignored. Extra operands for any operator shall result in an error. Annex B provides examples using the ContentFilter structure. </P
><P 

><A href="#LinkTarget_21260" href="#">
Table 111</A>
 defines the <I>ContentFilter</I> structure. </P
><P 

><B>Table 111 &ndash; ContentFilter Structure </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ContentFilter </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> elements []  </P
></TD
><TD  
 valign="top"
><P 

>ContentFilterElement </P
></TD
><TD  
 valign="top"
><P 

>List of operators and their operands that compose the filter criteria. The filter is evaluated by starting with the first entry in this array. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  filterOperator </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>FilterOperator </P
></TD
><TD  
 valign="top"
><P 

>Filter operator to be evaluated. </P
><P 

>The <I>FilterOperator</I> enumeration is defined in <A href="#LinkTarget_21533" href="#">
Table 115</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  filterOperands [] </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>FilterOperand </P
></TD
><TD  
 valign="top"
><P 

>Operands used by the selected operator. The number and use depend on the operators defined in <A href="#LinkTarget_21533" href="#">
Table 115</A>
. This array needs at least one entry. </P
><P 

>This extensible parameter type is the <I>FilterOperand</I> parameter type specified in <A href="#LinkTarget_23348" href="#">
7.4.4</A>
. It specifies the list of valid <I>FilterOperand</I> values. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_21323"
><FONT size="+1"><B> ContentFilterResult </H3
><P 

></B>The components of this data type are defined in <A href="#LinkTarget_21330" href="#">
Table 112</A>
. </P
><P 

><B>Table 112 &ndash; ContentFilterResult Structure </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ContentFilterResult </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>A structure that contains any errors associated with the filter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> elementResults [] </P
></TD
><TD  
 valign="top"
><P 

>ContentFilter </P
><P 

>ElementResult </P
></TD
><TD  
 valign="top"
><P 

>A list of results for individual elements in the filter. The size and order of the list matches the size and order of the elements in the <I>ContentFilter</I> parameter. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>The status code for a single element. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  operandStatusCodes [] </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>A list of status codes for the operands in an element. The size and order of the list matches the size and order of the operands in the <I>ContentFilterElement.</I> This list is empty if no operand errors occurred. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  operandDiagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>A list of diagnostic information for the operands in an element. The size and order of the list matches the size and order of the operands in the <I>ContentFilterElement. </I>This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the operands. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> elementDiagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>A list of diagnostic information for individual elements in the filter. The size and order of the list matches the size and order of the elements in the <I>filter</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the elements. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><A href="#LinkTarget_21399" href="#">
<FONT size="+1">Table 113</A>
 defines values for the <I>statusCode</I> parameter that are specific to this structure. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 113 &ndash; ContentFilterResult Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_FilterOperandCountMismatch </P
></TD
><TD  
 valign="top"
><P 

>The number of operands provided for the filter operator was less than expected for the operand provided. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_FilterOperatorInvalid </P
></TD
><TD  
 valign="top"
><P 

>An unrecognized operator was provided in a filter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_FilterOperatorUnsupported </P
></TD
><TD  
 valign="top"
><P 

>A valid operator was provided, but the server does not provide support for this filter operator. </P
></TD
></TR
></TABLE
><P 

><A href="#LinkTarget_21440" href="#">
<FONT size="+1">Table 114</A>
 defines values for the operand<I>StatusCode</I> parameter that are specific to this structure. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 114 &ndash; ContentFilterResult Operand Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_FilterOperandInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_FilterElementInvalid </P
></TD
><TD  
 valign="top"
><P 

>The referenced element is not a valid element in the content filter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_FilterLiteralInvalid </P
></TD
><TD  
 valign="top"
><P 

>The referenced literal is not a valid BaseDataType. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_AttributeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The attribute id is not a valid attribute id in the system. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NotTypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>The provided NodeId was not a type definition NodeId. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_21518"
><FONT size="+1"><B> FilterOperator </H3
><P 

><A href="#LinkTarget_21533" href="#">
</B>Table 115</A>
 defines the basic operators that can be used in a <I>ContentFilter</I>. See <A href="#LinkTarget_21742" href="#">
Table 116</A>
 for a description of advanced operators. See <A href="#LinkTarget_23348" href="#">
7.4.4</A>
 for a definition of operands. </P
><P 

><B>Table 115 &ndash; Basic FilterOperator Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Operator </P
></TH
><TH 
 valign="top"
><P 

>Number of Operands </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Equals_0 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] is equal to operand[1]. </P
><P 

>If the operands are of different types, the system shall perform any implicit conversion to a common type. This operator resolves to FALSE if no implicit conversion is available and the operands are of different types. This operator returns FALSE if the implicit conversion fails. See the discussion on data type precedence in <A href="#LinkTarget_23130" href="#">
Table 119</A>
 for more information how to convert operands of different types. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsNull_1 </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] is a null value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>GreaterThan_2 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] is greater than operand[1]. </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to an ordered value. </P
><P 

> [1]: Any operand that resolves to an ordered value. </P
><P 

>The same conversion rules as defined for <I>Equals</I> apply. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LessThan_3 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] is less than operand[1]. </P
><P 

>The same conversion rules and restrictions as defined for <I>GreaterThan</I> apply. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>GreaterThanOrEqual_4 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] is greater than or equal to operand[1]. </P
><P 

>The same conversion rules and restrictions as defined for <I>GreaterThan</I> apply. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LessThanOrEqual_5 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] is less than or equal to operand[1]. </P
><P 

>The same conversion rules and restrictions as defined for <I>GreaterThan</I> apply. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Like_6 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] matches a pattern defined by operand[1]. See <A href="#LinkTarget_21813" href="#">
Table 117</A>
 for the definition of the pattern syntax. </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to a String. </P
><P 

> [1]: Any operand that resolves to a String. </P
><P 

>This operator resolves to FALSE if no operand can be resolved to a string. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Not_7 </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] is FALSE. </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to a Boolean. </P
><P 

>If the operand cannot be resolved to a Boolean, the result is a NULL. See below for a discussion on the handling of NULL. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Between_8 </P
></TD
><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] is greater or equal to operand[1] and less than or equal to operand[2]. </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to an ordered value. </P
><P 

> [1]: Any operand that resolves to an ordered value. </P
><P 

> [2]: Any operand that resolves to an ordered value. </P
><P 

>If the operands are of different types, the system shall perform any implicit conversion to match all operands to a common type. If no implicit conversion is available and the operands are of different types, the particular result is FALSE. See the discussion on data type precedence in <A href="#LinkTarget_23130" href="#">
Table 119</A>
 for more information how to convert operands of different types. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>InList_9 </P
></TD
><TD  
 valign="top"
><P 

>2..n </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] is equal to one or more of the remaining operands. </P
><P 

>The Equals Operator is evaluated for operand[0] and each remaining operand in the list. If any Equals evaluation is TRUE, InList returns TRUE. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>And_10 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] and operand[1] are TRUE. </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to a Boolean. </P
><P 

> [1]: Any operand that resolves to a Boolean. </P
><P 

>If any operand cannot be resolved to a Boolean it is considered a NULL. See below for a discussion on the handling of NULL. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Or_11 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if operand[0] or operand[1] are TRUE. </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to a Boolean. </P
><P 

> [1]: Any operand that resolves to a Boolean. </P
><P 

>If any operand cannot be resolved to a Boolean it is considered a NULL. See below for a discussion on the handling of NULL. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Cast_12 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Converts operand[0] to a value with a data type with a NodeId identified by operand[1]. </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand. </P
><P 

> [1]: Any operand that resolves to a NodeId or ExpandedNodeId where the <I>Node</I> is of the <I>NodeClass</I> <I>DataType</I>. </P
><P 

>If there is any error in conversion or in any of the parameters then the Cast Operation evaluates to a NULL. See below for a discussion on the handling of NULL. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>BitwiseAnd_16 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>The result is an integer which matches the size of the largest operand and contains a bitwise And operation of the two operands where both have been converted to the same size (largest of the two operands). </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to a integer. </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Operator </P
></TH
><TH 
 valign="top"
><P 

>Number of Operands </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

></B> [1]: Any operand that resolves to a integer. </P
><P 

>If any operand cannot be resolved to a integer it is considered a NULL. See below for a discussion on the handling of NULL. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>BitwiseOr_17 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>The result is an integer which matches the size of the largest operand and contains a bitwise Or operation of the two operands where both have been converted to the same size (largest of the two operands). </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to a Integer. </P
><P 

> [1]: Any operand that resolves to a Integer. </P
><P 

>If any operand cannot be resolved to a Integer it is considered a NULL. See below for a discussion on the handling of NULL. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">Many operands have restrictions on their type. This requires the operand to be evaluated to determine what the type is. In some cases the type is specified in the operand (i.e. a LiteralOperand). In other cases the type requires that the value of an attribute be read. An <I>ElementOperand</I> evaluates to a Boolean value unless the operator is a Cast or a nested <I>RelatedTo</I> operator. </P
><P 

><A href="#LinkTarget_21742" href="#">
Table 116</A>
 defines complex operators that require a target node (i.e. row) to evaluate. These operators shall be re-evaluated for each possible target node in the result set. </P
><P 

><B>Table 116 &ndash; Complex FilterOperator Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Operator </P
></TD
><TD  
 valign="top"
><P 

>Number of Operands </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>InView_13 </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if the target <I>Node</I> is contained in the <I>View</I> defined by operand[0].  </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to a <I>NodeId</I> that identifies a View Node. </P
><P 

>If operand[0] does not resolve to a <I>NodeId</I> that identifies a View Node, this operation shall always be False. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OfType_14 </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if the target <I>Node</I> is of type operand[0] or of a subtype of operand[0]. </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to a <I>NodeId</I> that identifies an ObjectType or VariableType Node. </P
><P 

>If operand[0] does not resolve to a <I>NodeId</I> that identifies an ObjectType or VariableType Node, this operation shall always be False. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>RelatedTo_15 </P
></TD
><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>TRUE if the target <I>Node</I> is of type Operand[0] and is related to a <I>NodeId</I> of the type defined in Operand[1] by the <I>Reference</I> type defined in Operand[2]. </P
><P 

>Operand[0] or Operand[1] can also point to an element <I>Reference</I> where the referred to element is another RelatedTo operator. This allows chaining of relationships (e.g. A is related to B is related to C), where the relationship is defined by the <I>ReferenceType</I> defined in Operand[2]. In this case, the referred to element returns a list of <I>NodeIds</I> instead of TRUE or FALSE. In this case if any errors occur or any of the operands cannot be resolved to an appropriate value, the result of the chained relationship is an empty list of nodes. </P
><P 

>Operand[3] defines the number of hops for which the relationship should be followed. If Operand[3] is 1, then objects shall be directly related. If a hop is greater than 1, then a <I>NodeId</I> of the type described in Operand[1] is checked for at the depth specified by the hop. In this case, the type of the intermediate <I>Node</I> is undefined, and only the <I>Reference</I> type used to reach the end <I>Node</I> is defined. If the requested number of hops cannot be followed, then the result is FALSE, i.e., an empty <I>Node</I> list. If Operand[3] is 0, the relationship is followed to its logical end in a forward direction and each <I>Node</I> is checked to be of the type specified in Operand[1]. If any <I>Node</I> satisfies this criterion, then the result is TRUE, i.e., the <I>NodeId</I> is included in the sub-list. </P
><P 

>Operand [4] defines if Operands [0] and [1] should include support for subtypes of the types defined by these operands. A TRUE indicates support for subtypes </P
><P 

>Operand [5] defines if Operand [2] should include support for subtypes of the reference type. A TRUE indicates support for subtypes. </P
><P 

> </P
><P 

>The following restrictions apply to the operands: </P
><P 

> [0]: Any operand that resolves to a <I>NodeId</I> or <I>ExpandedNodeId</I> that identifies an ObjectType or VariableType Node or a reference to another element which is a RelatedTo operator. </P
><P 

> [1]: Any operand that resolves to a <I>NodeId</I> or <I>ExpandedNodeId</I> that identifies an ObjectType or VariableType Node or a reference to another element which is a RelatedTo operator. </P
><P 

> [2]: Any operand that resolves to a <I>NodeId</I> that identifies a ReferenceType Node. </P
><P 

> [3]: Any operand that resolves to a value implicitly convertible to Uint32. </P
><P 

> [4]: Any operand that resolves to a value implicitly convertible to a boolean; if this operand does not resolve to a Boolean, then a value of FALSE is used. </P
><P 

> [5]: Any operand that resolves to a value implicitly convertible to a boolean; if this operand does not resolve to a Boolean, then a value of FALSE is used. </P
><P 

> </P
><P 

>If none of the operands [0],[1],[2],[3] resolves to an appropriate value then the result of this operation shall always be False (or an Empty set in the case of a nested <I>R</I><I>elatedTo</I> operand). </P
><P 

> </P
><P 

>See examples for RelatedTo in <A href="#LinkTarget_29667" href="#">
B.2</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The RelatedTo operator can be used to identify if a given type, set as operand[1], is a subtype of another type set as operand[0] by setting operand[2] to the <I>HasSubtype</I> <I>ReferenceType</I> and operand[3] to 0. </P
><P 

>The <I>Like</I> operator can be used to perform wildcard comparisons. Several special characters can be included in the second operand of the <I>Like</I> operator. The valid characters are defined in <A href="#LinkTarget_21813" href="#">
Table 117</A>
. The wildcard characters can be combined in a single string (i.e. &lsquo;Th[ia][ts]%&rsquo; would match &lsquo;That is fine&rsquo;, &lsquo;This is fine&rsquo;, &lsquo;That as one&rsquo;, &lsquo;This it is&rsquo;, &lsquo;Then at any&rsquo;, etc.). The <I>Like</I> operator is case sensitive. </P
><P 

><B>Table 117 &ndash; Wildcard characters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Special Character </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>% </P
></TD
><TD  
 valign="top"
><P 

>Match any string of zero or more characters (i.e. &lsquo;main%&rsquo; would match any string that starts with &lsquo;main&rsquo;, &lsquo;%en%&rsquo; would match any string that contains the letters &lsquo;en&rsquo; such as &lsquo;entail&rsquo;, &lsquo;green&rsquo; and &lsquo;content&rsquo;.) If a &lsquo;%&rsquo; sign is intend in a string the list operand can be used (i.e. 5[%] would match &lsquo;5%&rsquo;). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>_ </P
></TD
><TD  
 valign="top"
><P 

>Match any single character (i.e. &lsquo;_ould&rsquo; would match &lsquo;would&rsquo;, &lsquo;could&rsquo;). If the &lsquo;_&rsquo; is intended in a string then the list operand can be used (i.e. 5[_] would match &lsquo;5_&rsquo;). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>\ </P
></TD
><TD  
 valign="top"
><P 

>Escape character allows literal interpretation </P
><P 

> (i.e. \\ is \, \% is %, \_ is _) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>[] </P
></TD
><TD  
 valign="top"
><P 

>Match any single character in a list </P
><P 

>(i.e. &lsquo;abc[13-68] would match &lsquo;abc1&rsquo;,&rsquo;abc3&rsquo;,&rsquo;abc4&rsquo;,&rsquo;abc5&rsquo;,&rsquo;abc6&rsquo;, and &lsquo;abc8&rsquo;. </P
><P 

> &lsquo;xyz[c-f]&rsquo; would match &lsquo;xyzc&rsquo;, &lsquo;xyzd&rsquo;, &lsquo;xyze&rsquo;, &lsquo;xyzf&rsquo;). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>[^] </P
></TD
><TD  
 valign="top"
><P 

>Not Matching any single character in a list. </P
><P 

>The ^ shall be the first character inside on the []. </P
><P 

>(i.e. &lsquo;ABC[^13-5]&rsquo; would NOT match &lsquo;ABC1&rsquo;, &lsquo;ABC3&rsquo;, &lsquo;ABC4&rsquo;, and &lsquo;ABC5&rsquo;. xyz[^dgh] would NOT match &lsquo;xyzd&rsquo;, &lsquo;xyzg&rsquo;, &lsquo;xyzh&rsquo;. ) </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><A href="#LinkTarget_21867" href="#">
Table 118</A>
 defines the conversion rules for the operand values. The types are automatically converted if an implicit conversion exists (I). If an explicit conversion exists (E) then type can be converted with the cast operator. If no conversion exists (X) the then types cannot be converted, however, some servers may support application specific explicit conversions. The types used in the table are defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. A data type that is not in the table does not have any defined conversions. </P
><P 

><B>Table 118 &ndash; Conversion Rules </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Target Type (To) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Source Type (From) </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1"></B>Boolean </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>DateTime </P
></TD
><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>ExpandedNodeId </P
></TD
><TD  
 valign="top"
><P 

>Float </P
></TD
><TD  
 valign="top"
><P 

>Guid </P
></TD
><TD  
 valign="top"
><P 

>Int16 </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>Int64 </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>SByte </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>UInt64 </P
></TD
><TD  
 valign="top"
><P 

>XmlElement </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DateTime </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ExpandedNodeId </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Float </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Guid </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int16 </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int64 </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SByte </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt64 </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>I </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>E </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>XmlElement </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>X </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">Arrays of a source type can be converted to arrays of the target type by converting each element. A conversion error for any element causes the entire conversion to fail. </P
><P 

>Arrays of length 1 can be implicitly converted to a scalar value of the same type. </P
><P 

><I>Guid</I>, <I>NodeId</I> and <I>ExpandedNodeId</I> are converted to and from <I>String</I> using the syntax defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><P 

>Floating point values are rounded by adding 0.5 and truncating when they are converted to integer values. </P
><P 

>Converting a negative value to an unsigned type causes a conversion error. If the conversion fails the result is a null value. </P
><P 

>Converting a value that is outside the range of the target type causes a conversion error. If the conversion fails the result is a null value. </P
><P 

><I>ByteString</I> is converted to <I>String</I> by formatting the bytes as a sequence of hexadecimal digits. </P
><P 

><I>LocalizedText</I> values are converted to <I>Strings</I> by dropping the <I>Locale</I>. <I>Strings</I> are converted to <I>LocalizedText</I> values by setting the Locale to &ldquo;&rdquo;. </P
><P 

><I>QualifiedName</I> values are converted to <I>Strings</I> by dropping the <I>NamespaceIndex</I>. <I>Strings</I> are converted to <I>QualifiedName</I> values by setting the <I>NamespaceIndex</I> to 0. </P
><P 

>A <I>StatusCode</I> can be converted to and from a <I>UInt32</I> and <I>Int32</I> by copying the bits. Only the top 16-bits if the <I>StatusCode</I> are copied when it is converted to and from a <I>UInt16</I> or <I>Int16</I> value. </P
><P 

><I>Boolean</I> values are converted to &lsquo;1&rsquo; when true and &lsquo;0&rsquo; when false. Non zero numeric values are converted to true <I>Boolean</I> values. Numeric values of 0 are converted to false <I>Boolean</I> values. <I>String</I> values containing &ldquo;true&rdquo;, &ldquo;false&rdquo;, &ldquo;1&rdquo; or &ldquo;0&rdquo; can be converted to <I>Boolean</I> values. Other string values cause a conversion error. In this case <I>Strings</I> are case-insensitive. </P
><P 

>It is sometimes possible to use implicit casts when operands with different data types are used in an operation. In this situation the precedence rules defined in <A href="#LinkTarget_23130" href="#">
Table 119</A>
 are used to determine which implicit conversion to use. The first data type in the list (top down) has the most precedence. If a data type is not in this table then it cannot be converted implicitly while evaluating an operation. </P
><P 

>For example, assume that A = 1,1 (<I>Float</I>) and B = 1 (<I>Int32</I>) and that these values are used with an <I>Equals</I> operator. This operation would be evaluated by casting the <I>Int32</I> value to a <I>Float</I> since the <I>Float</I> data type has more precedence. </P
><P 

><B>Table 119 &ndash; Data Precedence Rules </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Rank </P
></TD
><TD  
 valign="top"
><P 

>Data Type </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"></B>1 </P
></TD
><TD  
 valign="top"
><P 

>Double </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Float </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Int64 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>UInt64 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>8 </P
></TD
><TD  
 valign="top"
><P 

>Int16 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

>SByte </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>11 </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12 </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>13 </P
></TD
><TD  
 valign="top"
><P 

>Guid </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>14 </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>15 </P
></TD
><TD  
 valign="top"
><P 

>ExpandedNodeId </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>16 </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>17 </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>18 </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Operands may contain null values (i.e. values which do not exist). When this happens, the element always evaluates to NULL (unless the IsNull_1 operator has been specified).  <A href="#LinkTarget_23253" href="#">
Table 120</A>
 defines how to combine elements that evaluate to NULL with other elements in a logical AND operation. </P
><P 

><B>Table 120 &ndash; Logical AND Truth Table </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"> </P
></TD
><TD  
 valign="top"
><P 

>TRUE </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>NULL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TRUE </P
></TD
><TD  
 valign="top"
><P 

></B>TRUE </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>NULL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>FALSE </P
></TD
><TD  
 valign="top"
><P 

></B>FALSE </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>NULL </P
></TD
><TD  
 valign="top"
><P 

></B>NULL </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>NULL </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"> </P
><P 

><A href="#LinkTarget_23302" href="#">
<FONT size="+1">Table 121</A>
 defines how to combine elements that evaluate to NULL with other elements in a logical OR operation. </P
><P 

><B>Table 121 &ndash; Logical OR Truth Table </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"> </P
></TD
><TD  
 valign="top"
><P 

>TRUE </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>NULL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TRUE </P
></TD
><TD  
 valign="top"
><P 

></B>TRUE </P
></TD
><TD  
 valign="top"
><P 

>TRUE </P
></TD
><TD  
 valign="top"
><P 

>TRUE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>FALSE </P
></TD
><TD  
 valign="top"
><P 

></B>TRUE </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>NULL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>NULL </P
></TD
><TD  
 valign="top"
><P 

></B>TRUE </P
></TD
><TD  
 valign="top"
><P 

>NULL </P
></TD
><TD  
 valign="top"
><P 

>NULL </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The NOT operator always evaluates to NULL if applied to a NULL operand. </P
><P 

>A <I>ContentFilter</I> which evaluates to NULL after all elements are evaluated is evaluated as false. </P
><H3 
 ID="LinkTarget_23348"
><B> FilterOperand parameters </H3
><H4 
 ID="LinkTarget_23349"
>7.4.4.1 Overview </H4
><P 

></B>The <I>ContentFilter</I> structure specified in <A href="#LinkTarget_21247" href="#">
7.4</A>
 defines a collection of elements that makes up filter criteria and contains different types of <I>FilterOperands</I>. The <I>FilterOperand </I>parameter is an extensible parameter. This parameter is defined in <A href="#LinkTarget_23364" href="#">
Table 122</A>
. The <I>ExtensibleParameter</I> type is defined in <A href="#LinkTarget_24217" href="#">
7.12</A>
. </P
><P 

><B>Table 122 &ndash; FilterOperand parameter TypeIds </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Element </P
></TD
><TD  
 valign="top"
><P 

>Specifies an index into the array of elements. This type is used to build a logic tree of sub-elements by linking the operand of one element to a sub-element. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Literal </P
></TD
><TD  
 valign="top"
><P 

>Specifies a literal value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Attribute </P
></TD
><TD  
 valign="top"
><P 

>Specifies any <I>Attribute</I> of an <I>Object </I>or<I> </I><I>Variable</I> <I>Node</I> using a <I>Node</I> in the type system and relative path constructed from <I>ReferenceTypes</I> and <I>BrowseNames</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SimpleAttribute </P
></TD
><TD  
 valign="top"
><P 

>Specifies any <I>Attribute</I> of an <I>Object </I>or<I> </I><I>Variable</I> <I>Node</I> using a <I>TypeDefinition</I> and a relative path constructed from <I>BrowseNames</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_23397"
><FONT size="+1"><B>7.4.4.2 ElementOperand </H4
><P 

></B>The <I>ElementOperand</I> provides the linking to sub-elements within a <I>ContentFilter</I>. The link is in the form of an integer that is used to index into the array of elements contained in the <I>ContentFilter</I>. An index is considered valid if its value is greater than the element index it is part of and it does not <I>Reference</I> a non-existent element. <I>Clients</I> shall construct filters in this way to avoid circular and invalid <I>References</I>. <I>Servers</I> should protect against invalid indexes by verifying the index prior to using it. </P
><P 

><A href="#LinkTarget_23404" href="#">
Table 123</A>
 defines the <I>ElementOperand</I> type. </P
><P 

><B>Table 123 &ndash; ElementOperand </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ElementOperand </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> index </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>Index into the element array. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_23431"
><FONT size="+1"><B>7.4.4.3 LiteralOperand </H4
><P 

><A href="#LinkTarget_23437" href="#">
</B>Table 124</A>
 defines the <I>LiteralOperand</I> type. </P
><P 

><B>Table 124 &ndash; LiteralOperand </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>LiteralOperand </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> value </P
></TD
><TD  
 valign="top"
><P 

>BaseDataType </P
></TD
><TD  
 valign="top"
><P 

>A literal value. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_23464"
><FONT size="+1"><B>7.4.4.4 AttributeOperand </H4
><P 

><A href="#LinkTarget_23470" href="#">
</B>Table 125</A>
 defines the <I>AttributeOperand</I> type. </P
><P 

><B>Table 125 &ndash; AttributeOperand </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AttributeOperand </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Attribute of a <I>Node</I> in the <I>AddressSpace</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of a <I>Node</I> from the type system. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> alias </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>An optional parameter used to identify or refer to an alias. An alias is a symbolic name that can be used to alias this operand and use it in other locations in the filter structure.<I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> browsePath </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Browse path relative to the <I>Node</I> identified by the <I>nodeId</I> parameter. See <A href="#LinkTarget_26926" href="#">
7.26</A>
 for the definition of <I>RelativePath</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> attributeId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>Id of the <I>Attribute</I>. This shall be a valid <I>Attribute</I><I>I</I><I>d</I>. The <I>IntegerId </I>is defined in <A href="#LinkTarget_24268" href="#">
7.14</A>
. The IntegerIds for the Attributes are defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> indexRange </P
></TD
><TD  
 valign="top"
><P 

>NumericRange </P
></TD
><TD  
 valign="top"
><P 

>This parameter is used to identify a single element of an array or a single range of indexes for an array. The first element is identified by index 0 (zero). </P
><P 

>The <I>NumericRange</I> type is defined in <A href="#LinkTarget_26644" href="#">
7.22</A>
. </P
><P 

>This parameter is not used if the specified <I>Attribute</I> is not an array. However, if the specified <I>Attribute</I> is an array and this parameter is not used, then all elements are to be included in the range. The parameter is null if not used. </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_23552"
><FONT size="+1"><B>7.4.4.5 SimpleAttributeOperand </H4
><P 

></B>The <I>SimpleAttributeOperand</I> is a simplified form of the <I>AttributeOperand</I> and all of the rules that apply to the <I>AttributeOperand</I> also apply to the <I>SimpleAttributeOperand</I>. The examples provided in <A href="#LinkTarget_29301" href="#">
B.1</A>
 only use <I>AttributeOperand</I>, however, the <I>AttributeOperand</I> can be replaced by a <I>SimpleAttributeOperand</I> whenever all <I>ReferenceTypes</I> in the <I>RelativePath</I> are subtypes of <I>HierarchicalReferences</I> and the targets are <I>Object</I> or <I>Variable Nodes and an Alias is not required</I>. </P
><P 

><A href="#LinkTarget_23564" href="#">
Table 126</A>
 defines the <I>SimpleAttributeOperand</I> type. </P
><P 

><B>Table 126 &ndash; SimpleAttributeOperand </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SimpleAttributeOperand </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Attribute of a <I>Node</I> in the <I>AddressSpace</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> typeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of a <I>TypeDefinitionNode</I>. </P
><P 

>This parameter restricts the operand to instances of the <I>TypeDefinitionNode</I> or one of its subtypes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> browsePath [] </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>A relative path to a <I>Node</I>. </P
><P 

>This parameter specifies a relative path using a list of <I>BrowseNames</I> instead of the <I>RelativePath</I> structure used in the <I>AttributeOperand</I>. The list of <I>BrowseNames</I> is equivalent to a <I>RelativePath</I> that specifies forward references which are subtypes of the <I>HierarchicalReferences ReferenceType</I>. </P
><P 

>All <I>Nodes</I> followed by the <I>browsePath</I> shall be of the <I>NodeClass</I> <I>Object</I> or <I>Variable</I>. </P
><P 

>If this list is empty the <I>Node</I> is the instance of the <I>TypeDefinition</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> attributeId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>Id of the <I>Attribute</I>. The <I>IntegerId </I>is defined in <A href="#LinkTarget_24268" href="#">
7.14</A>
. </P
><P 

>The <I>Value Attribute</I> shall be supported by all <I>Servers</I>. The support of other <I>Attributes</I> depends on requirements set in Profiles or other parts of this specification. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> indexRange </P
></TD
><TD  
 valign="top"
><P 

>NumericRange </P
></TD
><TD  
 valign="top"
><P 

>This parameter is used to identify a single element of an array, or a single range of indexes for an array. The first element is identified by index 0 (zero). </P
><P 

>This parameter is ignored if the selected Node is not a Variable or the Value of a Variable is not an array. </P
><P 

>The parameter is null if not specified. </P
><P 

>All values in the array are used if this parameter is not specified. </P
><P 

>The <I>NumericRange</I> type is defined in <A href="#LinkTarget_26644" href="#">
7.22</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_23634"
><FONT size="+1"><B>7.5 Counter </H2
><P 

></B>This primitive data type is a UInt32 that represents the value of a counter. The initial value of a counter is specified by its use. Modulus arithmetic is used for all calculations, where the modulus is max value + 1. Therefore, </P
><P 

><I>x</I> + <I>y</I> = (<I>x</I> + <I>y</I>)mod(max value + 1) </P
><P 

>For example: </P
><P 

>max value + 1 = 0 </P
><P 

>max value + 2 = 1 </P
><H2 
 ID="LinkTarget_23640"
><B>7.6 ContinuationPoint </H2
><P 

></B>A <I>ContinuationPoint</I> is used to pause a <I>Browse or</I> <I>QueryFirst</I> operation and allow it to be restarted later by calling <I>BrowseNext</I> or <I>QueryNext.</I> Operations are paused when the number of results found exceeds the limits set by either the <I>Client</I> or the <I>Server</I>. </P
><P 

>The <I>Client</I> specifies the maximum number of results per operation in the request message. A <I>Server</I> shall not return more than this number of results but it may return fewer results. The <I>Server</I> allocates a <I>ContinuationPoint</I> if there are more results to return. </P
><P 

><I>Servers</I> shall support at least one <I>ContinuationPoint</I> per <I>Session</I>. <I>Servers</I> specify a maximum number of <I>ContinuationPoints</I> per <I>Session</I> in the <I>ServerCapabilities</I> <I>Object</I> defined in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. <I>ContinuationPoints</I> remain active until the <I>Client</I> retrieves the remaining results, the <I>Client</I> releases the <I>ContinuationPoint</I> or the <I>Session</I> is closed. A <I>Server</I> shall automatically free <I>ContinuationPoints</I> from prior requests if they are needed to process a new request. The <I>Server</I> returns a <I>Bad</I>_<I>ContinuationPointInvalid</I> error if a <I>Client</I> tries to use a <I>ContinuationPoint</I> that has been released. </P
><P 

>Requests will often specify multiple operations that may or may not require a <I>ContinuationPoint</I>. A <I>Server</I> shall process the operations until it uses the maximum number of continuation points in this response. Once that happens the <I>Server</I> shall return a <I>Bad</I>_<I>NoContinuationPoints </I>error for any remaining operations. </P
><P 

>A <I>Client</I> restarts an operation by passing the <I>ContinuationPoint</I> back to the <I>Server</I>. <I>Server</I> should always be able to reuse the <I>ContinuationPoint</I> provided so <I>Servers</I> shall never return <I>Bad</I>_<I>NoContinuationPoints </I>error when continuing a previously halted operation. </P
><P 

>A <I>ContinuationPoint</I> is a subtype of the <I>ByteString</I> data type. </P
><H2 
 ID="LinkTarget_23653"
><B>7.7 DataValue </H2
><H3 
 ID="LinkTarget_23654"
> General </H3
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_23661" href="#">
Table 127</A>
. </P
><P 

><B>Table 127 &ndash; DataValue </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>DataValue </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>The value and associated information. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> value </P
></TD
><TD  
 valign="top"
><P 

>BaseDataType </P
></TD
><TD  
 valign="top"
><P 

>The data value. If the <I>StatusCode</I> indicates an error then the value is to be ignored and the Server shall set it to null.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> statusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>The <I>StatusCode</I> that defines with the <I>Server</I>&rsquo;s ability to access/provide the value. The <I>StatusCode</I> type is defined in <A href="#LinkTarget_27514" href="#">
7.34</A>
  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> sourceTimestamp </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>The source timestamp for the value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> sourcePicoSeconds </P
></TD
><TD  
 valign="top"
><P 

>UInteger </P
></TD
><TD  
 valign="top"
><P 

>Specifies the number of 10 picoseconds (1,0 e-11 seconds) intervals which shall be added to the sourceTimestamp. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverTimestamp </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> timestamp for the value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverPicoSeconds </P
></TD
><TD  
 valign="top"
><P 

>UInteger </P
></TD
><TD  
 valign="top"
><P 

>Specifies the number of 10 picoseconds (1,0 e-11 seconds) intervals which shall be added to the serverTimestamp. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_23733"
><FONT size="+1"><B> PicoSeconds </H3
><P 

></B>Some applications require high resolution timestamps. The <I>PicoSeconds</I> fields allow applications to specify timestamps with a resolution of 10 picoseconds. The actual size of the <I>PicoSeconds</I> field depends on the resolution of the <I>UtcTime</I> <I>DataType</I>. For example, if the <I>UtcTime</I> <I>DataType</I> has a resolution of 100 nanoseconds then the <I>PicoSeconds</I> field would have to store values up to 10 000 in order to provide the resolution of 10 picoseconds. The resolution of the <I>UtcTime</I> <I>DataType</I> depends on the <I>Mappings</I> defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><H3 
 ID="LinkTarget_23740"
><B> SourceTimestamp </H3
><P 

></B>The <I>sourceTimestamp</I> is used to reflect the timestamp that was applied to a <I>Variable</I> value by the data source. Once a value has been assigned a source timestamp, the source timestamp for that value instance never changes. In this context, &ldquo;value instance&rdquo; refers to the value received, independent of its actual value. </P
><P 

>The <I>sourceTimestamp</I> shall be UTC time and should indicate the time of the last change of the <I>value</I> or <I>statusCode</I>. </P
><P 

>The <I>sourceTimestamp</I> should be generated as close as possible to the source of the value but the timestamp needs to be set always by the same physical clock. In the case of redundant sources, the clocks of the sources should be synchronised. </P
><P 

>If the OPC UA <I>Server</I> receives the <I>Variable</I> value from another OPC UA <I>Server</I>, then the OPC UA <I>Server</I> shall always pass the source timestamp without changes. If the source that applies the timestamp is not available, the source timestamp is set to null. For example, if a value could not be read because of some error during processing like invalid arguments passed in the request then the sourceTimestamp shall be null. </P
><P 

>In the case of a bad or uncertain status <I>sourceTimestamp</I> is used to reflect the time that the source recognized the non-good status or the time the <I>Server</I> last tried to recover from the bad or uncertain status. </P
><P 

>The <I>sourceTimestamp</I> is only returned with a <I>Value</I> <I>Attribute</I>. For all other <I>Attributes</I> the returned <I>sourceTimestamp</I> is set to null. </P
><H3 
 ID="LinkTarget_23748"
><B> ServerTimestamp </H3
><P 

></B>The <I>serverTimestamp</I> is used to reflect the time that the <I>Server</I> received a <I>Variable</I> value or knew it to be accurate. </P
><P 

>In the case of a bad or uncertain status, <I>serverTimestamp</I> is used to reflect the time that the <I>Server</I> received the status or that the <I>Server</I> last tried to recover from the bad or uncertain status. </P
><P 

>In the case where the OPC UA <I>Server</I> subscribes to a value from another OPC UA <I>Server</I>, each <I>Server</I> applies its own <I>serverTimestamp</I>. This is in contrast to the <I>sourceTimestamp</I> in which only the originator of the data is allowed to apply the <I>sourceTimestamp</I>. </P
><P 

>If the <I>Server</I> subscribes to the value from another <I>Server</I> every ten seconds and the value changes, then the <I>serverTimestamp</I> is updated each time a new value is received. If the value does not change, then new values will not be received on the <I>Subscription</I>. However, in the absence of errors, the receiving <I>Server</I> applies a new <I>serverTimestamp</I> every ten seconds because not receiving a value means that the value has not changed. Thus, the <I>serverTimestamp</I> reflects the time at which the <I>Server</I> knew the value to be accurate. </P
><P 

>This concept also applies to OPC UA <I>Servers</I> that receive values from exception-based data sources. For example, suppose that a <I>Server</I> is receiving values from an exception-based device, and that </P
><DL 

><DD 

>a) the device is checking values every 0,5 seconds,  </DD
><DD 

>b) the connection to the device is good, </DD
><DD 

>c) the device sent an update 3 minutes ago with a value of 1,234. </DD
></DL
><P 

>In this case, the <I>Server</I> value would be 1,234 and the <I>serverTimestamp</I> would be updated every 0,5 seconds after the receipt of the value. </P
><H3 
 ID="LinkTarget_23762"
><B> StatusCode assigned to a value </H3
><P 

></B>The <I>StatusCode</I> is used to indicate the conditions under which a <I>Variable</I> value was generated, and thereby can be used as an indicator of the usability of the value. The <I>StatusCode</I> is defined in <A href="#LinkTarget_27514" href="#">
7.34</A>
. </P
><P 

>Overall condition (severity) </P
><DL 

><DD 

>&#61623; A <I>StatusCode</I> with severity Good means that the value is of good quality. </DD
><DD 

>&#61623; A <I>StatusCode</I> with severity Uncertain means that the quality of the value is uncertain for reasons indicated by the <I>SubCode</I>. </DD
><DD 

>&#61623; A <I>StatusCode</I> with severity Bad means that the value is not usable for reasons indicated by the <I>SubCode</I>. </DD
></DL
><P 

>Rules </P
><DL 

><DD 

>&#61623; The <I>StatusCode</I> indicates the usability of the value. Therefore, It is required that <I>Clients</I> minimally check the <I>StatusCode</I> <I>Severity</I> of all results, even if they do not check the other fields, before accessing and using the value. </DD
><DD 

>&#61623; A <I>Server</I>, which does not support status information, shall return a severity code of Good. It is also acceptable for a <I>Server</I> to simply return a severity and a non-specific (0) Substatus. </DD
><DD 

>&#61623; If the <I>Server</I> has no known value - in particular when <I>Severity</I> is BAD, it shall return a NULL value. </DD
></DL
><H2 
 ID="LinkTarget_23786"
><B>7.8 DiagnosticInfo </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_23793" href="#">
Table 128</A>
. </P
><P 

><B>Table 128 &ndash; DiagnosticInfo </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Vendor-specific diagnostic information. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> namespaceUri </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The <I>symbolic</I><I>I</I><I>d</I> is defined within the context of a namespace. This namespace is represented as a string and is conveyed to the <I>Client</I> in the <I>stringTable</I> parameter of the <I>ResponseHeader</I> parameter defined in <A href="#LinkTarget_27245" href="#">
7.29</A>
. The <I>namespaceIndex</I> parameter contains the index into the <I>stringTable</I> for this string. -1 indicates that no string is specified. </P
><P 

>The <I>namespaceUri</I> shall not be the standard OPC UA namespace. There are no <I>symbolicIds</I> provided for standard <I>StatusCodes</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> symbolicId </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The <I>symbolicId</I> shall be used to identify a vendor-specific error or condition; typically the result of some server internal operation. The maximum length of this string is 32 characters. <I>Servers</I> wishing to return a numeric return code should convert the return code into a string and use this string as <I>symbolicId</I> (e.g., &quot;0xC0040007&quot; or &quot;-4&quot;). </P
><P 

>This symbolic identifier string is conveyed to the <I>Client</I> in the <I>stringTable</I> parameter of the <I>ResponseHeader</I> parameter defined in <A href="#LinkTarget_27245" href="#">
7.29</A>
. The <I>symbolicId</I> parameter contains the index into the <I>stringTable</I> for this string. -1 indicates that no string is specified. </P
><P 

>The <I>symbolicId</I> shall not contain <I>StatusCodes</I>. If the <I>localizedText</I> contains a translation for the description of a <I>StatusCode</I>, the <I>symbolicId</I> is -1. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> locale </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>The locale part of the vendor-specific localized text describing the symbolic id. </P
><P 

>This localized text string is conveyed to the <I>Client</I> in the <I>stringTable</I> parameter of the <I>ResponseHeader</I> parameter defined in <A href="#LinkTarget_27245" href="#">
7.29</A>
. The <I>locale</I> parameter contains the index into the <I>stringTable</I> for this string. -1 indicates that no string is specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> localizedText </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>A vendor-specific localized text string describes the symbolic id. The maximum length of this text string is 256 characters.  </P
><P 

>This localized text string is conveyed to the <I>Client</I> in the <I>stringTable</I> parameter of the <I>ResponseHeader</I> parameter defined in <A href="#LinkTarget_27245" href="#">
7.29</A>
. The <I>localizedText</I> parameter contains the index into the <I>stringTable</I> for this string. -1 indicates that no string is specified. </P
><P 

>The localizedText refers to the symbolicId if present or the string that describes the standard StatusCode if the server provides translations. If the index is -1, the server has no translation to return and the client should use the invariant StatusCode description from the specification. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> additionalInfo </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>Vendor-specific diagnostic information. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> innerStatusCode </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>The <I>StatusCode</I> from the inner operation. </P
><P 

>Many applications will make calls into underlying systems during OPC UA request processing. An OPC UA <I>Server</I> has the option of reporting the status from the underlying system in the diagnostic info. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> innerDiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>The diagnostic info associated with the inner <I>StatusCode</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_23895"
><FONT size="+1"><B>7.9 DiscoveryConfiguration parameters </H2
><H3 
 ID="LinkTarget_23897"
> Overview </H3
><P 

></B>The <I>DiscoveryConfiguration</I> structure used in the <I>RegisterServer2 Service</I> allows <I>Servers</I> to provide additional configuration parameters to <I>Discovery Servers</I> for registration. <A href="#LinkTarget_23908" href="#">
Table 129</A>
 defines the current set of discovery configuration options. The <I>ExtensibleParameter</I> type is defined in <A href="#LinkTarget_24217" href="#">
7.12</A>
. </P
><P 

><B>Table 129 &ndash; DiscoveryConfiguration parameterTypeIds </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>MdnsDiscoveryConfiguration </P
></TD
><TD  
 valign="top"
><P 

>Configuration parameters for mDNS discovery. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_23923"
><FONT size="+1"><B> MdnsDiscoveryConfiguration </H3
><P 

><A href="#LinkTarget_23929" href="#">
</B>Table 130</A>
 defines the <I>MdnsDiscoveryConfiguration</I> parameter. </P
><P 

><B>Table 130 &ndash; MdnsDiscoveryConfiguration </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>MdnsDiscoveryConfiguration </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>mDNS discovery configuration. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> mdnsServerName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The name of the <I>Server</I> when it is announced via mDNS. See <A href="#LinkTarget_7694" href="#">
Part 12</A>
 for the details about mDNS. </P
><P 

>This string shall be less than 64 bytes. </P
><P 

>If not specified the first element of the <I>serverNames </I>array<I> </I>is used (truncated to 63 bytes if necessary). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverCapabilities [] </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The set of server capabilities supported by the <I>Server</I>. </P
><P 

>A server capability is a short identifier for a feature </P
><P 

>The set of allowed server capabilities are defined in <A href="#LinkTarget_7694" href="#">
Part 12</A>
. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_23978"
><FONT size="+1"><B>7.10 EndpointDescription </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_23985" href="#">
Table 131</A>
. </P
><P 

><B>Table 131 &ndash; EndpointDescription </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EndpointDescription </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Describes an <I>Endpoint</I> for a <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> endpointUrl </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The URL for the <I>Endpoint</I> described. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> Server </P
></TD
><TD  
 valign="top"
><P 

>ApplicationDescription </P
></TD
><TD  
 valign="top"
><P 

>The description for the <I>Server</I> that the <I>Endpoint</I> belongs to. </P
><P 

>The <I>ApplicationDescription</I> type is defined in <A href="#LinkTarget_20938" href="#">
7.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverCertificate </P
></TD
><TD  
 valign="top"
><P 

>ApplicationInstance </P
><P 

>Certificate </P
></TD
><TD  
 valign="top"
><P 

>The <I>Application I</I><I>nstance</I> <I>Certificate</I> issued to the <I>Server</I>. </P
><P 

>The <I>ApplicationInstanceCertificate</I> type is defined in <A href="#LinkTarget_21043" href="#">
7.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> securityMode </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>MessageSecurityMode </P
></TD
><TD  
 valign="top"
><P 

>The type of security to apply to the messages. </P
><P 

>The type <I>MessageSecurityMode</I> type is defined in <A href="#LinkTarget_24270" href="#">
7.15</A>
. </P
><P 

>A <I>SecureChannel</I> may have to be created even if the <I>securityMode</I> is NONE. The exact behaviour depends on the mapping used and is described in the <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> securityPolicyUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The URI for <I>SecurityPolicy</I> to use when securing messages. </P
><P 

>The set of known URIs and the S<I>ecurityPolicies </I>associated with them are defined in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userIdentityTokens [] </P
></TD
><TD  
 valign="top"
><P 

>UserTokenPolicy </P
></TD
><TD  
 valign="top"
><P 

>The user identity tokens that the <I>Server</I> will accept. </P
><P 

>The <I>Client</I> shall pass one of the <I>UserIdentityTokens</I> in the <I>ActivateSession</I> request. The <I>UserTokenPolicy</I> type is described in <A href="#LinkTarget_29005" href="#">
7.37</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> transportProfileUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The URI of the <I>Transport</I> <I>Profile</I> supported by the <I>Endpoint</I>. </P
><P 

><A href="#LinkTarget_7688" href="#">
Part 7</A>
 defines URIs for the <I>Transport</I> <I>Profiles</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> securityLevel </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>A numeric value that indicates how secure the EndpointDescription is compared to other EndpointDescriptions for the same Server. </P
><P 

>A value of 0 indicates that the <I>EndpointDescription</I> is not recommended and is only supported for backward compatibility. </P
><P 

>A higher value indicates better security. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_24114"
><FONT size="+1"><B>7.11 ExpandedNodeId </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_24121" href="#">
Table 132</A>
. <I>ExpandedNodeId</I> allows the namespace to be specified explicitly as a string or with an index in the <I>Server</I>'s namespace table. </P
><P 

><B>Table 132 &ndash; ExpandedNodeId </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ExpandedNodeId </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeId</I> with the namespace expanded to its string representation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverIndex </P
></TD
><TD  
 valign="top"
><P 

>Index </P
></TD
><TD  
 valign="top"
><P 

>Index that identifies the <I>Server</I> that contains the <I>TargetNode</I>. This <I>Server</I> may be the local <I>Server</I> or a remote <I>Server</I>. </P
><P 

>This index is the index of that <I>Server</I> in the local <I>Server</I>&rsquo;s <I>Server</I> table. The index of the local <I>Server</I> in the <I>Server</I> table is always 0. All remote <I>Servers</I> have indexes greater than 0. The <I>Server</I> table is contained in the <I>Server</I> <I>Object</I> in the <I>AddressSpace</I> (see <A href="#LinkTarget_7682" href="#">
Part 3</A>
 and <A href="#LinkTarget_7684" href="#">
Part 5</A>
).  </P
><P 

>The <I>Client</I> may read the <I>Server</I> table <I>Variable</I> to access the description of the target <I>Server.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> namespaceUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The URI of the namespace. </P
><P 

>If this parameter is specified then the namespace index is ignored. </P
><P 

><A href="#LinkTarget_8204" href="#">
5.4</A>
 and <A href="#LinkTarget_7694" href="#">
Part 12</A>
 describes discovery mechanism that can be used to resolve URIs into URLs. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> namespaceIndex </P
></TD
><TD  
 valign="top"
><P 

>Index </P
></TD
><TD  
 valign="top"
><P 

>The index in the <I>Server</I>'s namespace table. </P
><P 

>This parameter shall be 0 and is ignored in the <I>Server</I> if the namespace URI is specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> identifierType </P
></TD
><TD  
 valign="top"
><P 

>IdType </P
></TD
><TD  
 valign="top"
><P 

>Type of the identifier element of the <I>NodeId</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> identifier </P
></TD
><TD  
 valign="top"
><P 

>* </P
></TD
><TD  
 valign="top"
><P 

>The identifier for a <I>Node</I> in the <I>AddressSpace</I> of an OPC UA <I>Server</I> (see <I>NodeId</I> definition in <A href="#LinkTarget_7682" href="#">
Part 3</A>
). </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_24217"
><FONT size="+1"><B>7.12 ExtensibleParameter </H2
><P 

></B>The extensible parameter types can only be extended by additional parts of series of standards. </P
><P 

>The <I>ExtensibleParameter</I> defines a data structure with two elements. The <I>parameterTypeId</I> specifies the data type encoding of the second element. Therefore the second element is specified as &ldquo;--&ldquo;. The <I>ExtensibleParameter</I> base type is defined in <A href="#LinkTarget_24231" href="#">
Table 133</A>
. </P
><P 

>Concrete extensible parameters that are common to OPC UA are defined in Clause <A href="#LinkTarget_20937" href="#">
7</A>
. Additional parts of series of standards can define additional extensible parameter types. </P
><P 

><B>Table 133 &ndash; ExtensibleParameter Base Type </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ExtensibleParameter </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Specifies the details of an extensible parameter type. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> parameterTypeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>Identifies the data type of the parameter that follows. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> parameterData </P
></TD
><TD  
 valign="top"
><P 

>-- </P
></TD
><TD  
 valign="top"
><P 

>The details for the extensible parameter type. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_24266"
><FONT size="+1"><B>7.13 Index </H2
><P 

></B>This primitive data type is a UInt32 that identifies an element of an array. </P
><H2 
 ID="LinkTarget_24268"
><B>7.14 IntegerId </H2
><P 

></B>This primitive data type is a UInt32 that is used as an identifier, such as a handle. All values, except for 0, are valid. </P
><H2 
 ID="LinkTarget_24270"
><B>7.15 MessageSecurityMode </H2
><P 

></B>The <I>MessageSecurityMode</I> is an enumeration that specifies what security should be applied to messages exchanges during a Session. The possible values are described in <A href="#LinkTarget_24277" href="#">
Table 134</A>
. </P
><P 

><B>Table 134 &ndash; MessageSecurityMode Values </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Value </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>INVALID_0 </P
></TD
><TD  
 valign="top"
><P 

>The MessageSecurityMode is invalid. </P
><P 

>This value is the default value to avoid an accidental choice of no security is applied.. This choice will always be rejected. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NONE_1 </P
></TD
><TD  
 valign="top"
><P 

>No security is applied. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SIGN_2 </P
></TD
><TD  
 valign="top"
><P 

>All messages are signed but not encrypted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SIGNANDENCRYPT_3 </P
></TD
><TD  
 valign="top"
><P 

>All messages are signed and encrypted. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_24311"
><FONT size="+1"><B>7.16 MonitoringParameters </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_24319" href="#">
Table 135</A>
. </P
><P 

><B>Table 135 &ndash; MonitoringParameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>MonitoringParameters </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Parameters<I> </I>that define the monitoring characteristics of a <I>MonitoredItem</I>.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> clientHandle </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

><I>Client</I>-supplied id of the <I>MonitoredItem</I>. This id is used in <I>Notifications</I> generated for the list <I>Node</I>. The <I>IntegerId</I> type is defined in <A href="#LinkTarget_24268" href="#">
7.14</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> samplingInterval </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The interval that defines the fastest rate at which the <I>MonitoredItem</I>(s) should be accessed and evaluated. This interval is defined in milliseconds.  </P
><P 

>The value 0 indicates that the <I>Server</I> should use the fastest practical rate.  </P
><P 

>The value -1 indicates that the default sampling interval defined by the publishing interval of the <I>Subscription</I> is requested. A different sampling interval is used if the publishing interval is not a supported sampling interval. Any negative number is interpreted as -1. The sampling interval is not changed if the publishing interval is changed by a subsequent call to the <I>ModifySubscription</I> <I>Service</I>. </P
><P 

>The <I>Server</I> uses this parameter to assign the <I>MonitoredItems</I> to a sampling interval that it supports. </P
><P 

>The assigned interval is provided in the <I>revisedSamplingInterval</I> parameter. The Server shall always return a <I>revisedSamp</I><I>lingInterval</I> that is equal or higher than the requested<I> </I><I>samplingInterval</I>. If the requested<I> </I><I>samplingInterval</I> is higher than the maximum sampling interval supported by the <I>Server</I>, the maximum sampling interval is returned. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> filter </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>MonitoringFilter </P
></TD
><TD  
 valign="top"
><P 

>A filter used by the <I>Server</I> to determine if the <I>MonitoredItem</I> should generate a <I>Notification</I>. If not used, this parameter is null. The <I>MonitoringFilter</I> parameter type is an extensible parameter type specified in <A href="#LinkTarget_24407" href="#">
7.17</A>
. It specifies the types of filters that can be used.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> queueSize </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The requested size of the <I>MonitoredItem</I> queue.  </P
><P 

>The following values have special meaning for data monitored items:  </P
><P 

>Value Meaning </P
><P 

>0 or 1 the server returns the default queue size which shall be 1 as <I>revisedQueueSize</I> for data monitored items. The queue has a single entry, effectively disabling queuing. </P
><P 

>For values larger than one a first-in-first-out queue is to be used. The <I>Server</I> may limit the size in <I>revisedQueueSize</I>. In the case of a queue overflow, the <I>Overflow</I> bit (flag) in the <I>InfoBits</I> portion of the <I>DataValue</I> <I>statusCode</I> is set in the new value. </P
><P 

> </P
><P 

>The following values have special meaning for event monitored items:  </P
><P 

>Value Meaning </P
><P 

>0 the <I>Server</I> returns the default queue size for <I>Event</I> <I>Notifications</I> as <I>revisedQueueSize</I> for event monitored items. </P
><P 

>1 the <I>Server</I> returns the minimum queue size the Server requires for <I>Event</I> <I>Notifications</I> as <I>revisedQueueSize</I>. </P
><P 

>MaxUInt32 the <I>Serv</I><I>er</I> returns the maximum queue size that the <I>Server</I> can support for <I>Event</I> <I>Notifications</I> as <I>revisedQueueSize</I>. </P
><P 

>If a <I>Client</I> chooses a value between the minimum and maximum settings of the <I>Server</I> the value shall be returned in the <I>revisedQueueSize</I>. If the requested <I>queueSize</I> is outside the minimum or maximum, the <I>Server</I> shall return the corresponding bounding value.  </P
><P 

>In the case of a queue overflow, an <I>Event</I> of the type <I>EventQueueOverflowEventType</I> is generated. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> discardOldest </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>A boolean parameter that specifies the discard policy when the queue is full and a new <I>Notification</I> is to be queued. It has the following values: </P
><P 

> TRUE the oldest (first) <I>Notification</I> in the queue is discarded. The new <I>Notification</I> is added to the end of the queue.  </P
><P 

> FALSE the last <I>Notification</I> added to the queue gets replaced with the new <I>Notification</I>.  </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_24407"
><FONT size="+1"><B>7.17 MonitoringFilter parameters </H2
><H3 
 ID="LinkTarget_24408"
> Overview </H3
><P 

></B>The <I>CreateMonitoredItem</I> <I>Service</I> allows specifying a filter for each <I>MonitoredItem</I>. The <I>MonitoringFilter</I> is an extensible parameter whose structure depends on the type of item being monitored. The <I>parameterTypeIds</I> are defined in <A href="#LinkTarget_24421" href="#">
Table 136</A>
. Other types can be defined by additional parts of this multi-part specification or other specifications based on OPC UA. The <I>ExtensibleParameter</I> type is defined in <A href="#LinkTarget_24217" href="#">
7.12</A>
. </P
><P 

>Each <I>MonitoringFilter</I> may have an associated <I>MonitoringFilterResult </I>structure which returns revised parameters and/or error information to clients in the response. The result structures, when they exist, are described in the section that defines the <I>MonitoringFilter</I>. </P
><P 

><B>Table 136 &ndash; MonitoringFilter parameterTypeIds </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>DataChangeFilter </P
></TD
><TD  
 valign="top"
><P 

>The change in a data value that shall cause a <I>Notification</I> to be generated. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EventFilter </P
></TD
><TD  
 valign="top"
><P 

>If a <I>Notification</I> conforms to the <I>EventFilter</I>, the <I>Notification</I> is sent to the <I>Client</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AggregateFilter </P
></TD
><TD  
 valign="top"
><P 

>The <I>A</I><I>ggregate</I> and its intervals when it will be calculated and a Notification is generated. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_24448"
><FONT size="+1"><B> DataChangeFilter </H3
><P 

></B>The <I>DataChangeFilter</I> defines the conditions under which a <I>DataChange Notification</I> should be reported and, optionally, a range or band for value changes where no <I>DataChange</I> <I>Notification</I> is generated. This range is called <I>Deadband</I>. The <I>DataChangeFilter</I> is defined in <A href="#LinkTarget_24455" href="#">
Table 137</A>
. </P
><P 

><B>Table 137 &ndash; DataChangeFilter  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>DataChangeFilter </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> trigger  </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>DataChangeTrigger </P
></TD
><TD  
 valign="top"
><P 

>Specifies the conditions under which a data change notification should be reported. It has the following values: </P
><P 

> STATUS_0 Report a notification ONLY if the <I>StatusCode</I> associated with the value changes. See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for <I>StatusCodes</I> defined in this standard. <A href="#LinkTarget_7690" href="#">
Part 8</A>
 specifies additional <I>StatusCodes</I> that are valid in particular for device data. </P
><P 

> STATUS_VALUE_1 Report a notification if either the <I>StatusCode</I> or the value change. The <I>Deadband</I> filter can be used in addition for filtering value changes. </P
><P 

>      This is the default setting if no filter is set. </P
><P 

> STATUS_VALUE_TIMESTAMP_2 Report a notification if either StatusCode, value or the <I>SourceTimestamp</I> change. If a <I>Deadband</I> filter is specified, this trigger has the same behaviour as STATUS_VALUE_1. </P
><P 

>If the DataChangeFilter is not applied to the monitored item, STATUS_VALUE_1 is the default reporting behaviour. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> deadbandType </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A value that defines the <I>Deadband</I> type and behaviour. </P
><P 

> Value    deadbandType </P
><P 

> None_0   No <I>Deadband</I> calculation should be applied. </P
><P 

> Absolute_1  AbsoluteDeadband (see below)  </P
><P 

> Percent_2  PercentDeadband (This type is specified in <A href="#LinkTarget_7690" href="#">
Part 8</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> deadbandValue </P
></TD
><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>The <I>Deadband</I> is applied only if  * the <I>trigger</I> includes value changes and  * the <I>deadbandType</I> is set appropriately. </P
><P 

>Deadband is ignored if the status of the data item changes. </P
><P 

><B><I>DeadbandType = AbsoluteDeadband: </I></P
><P 

></B>For this type the <I>deadbandValue</I> contains the absolute change in a data value that shall cause a <I>Notification</I> to be generated. This parameter applies only to <I>Variable</I>s with any <I>N</I><I>umber</I> data type. </P
><P 

>An exception that causes a <I>DataChange</I> <I>Notification</I> based on an AbsoluteDeadband is determined as follows: </P
><P 

><B>Generate a <I>Notification</I></B> <B>if (absolute value of (last cached value - current value) &gt; <I>AbsoluteDeadband</I>) </P
><P 

></B>The last cached value is defined as the last value pushed to the queue. </P
><P 

>If the item is an array of values, the entire array is returned if any array element exceeds the AbsoluteDeadband, or the size or dimension of the array changes. </P
><P 

><B><I>DeadbandType = PercentDeadband: </I></P
><P 

></B>This type is specified in <A href="#LinkTarget_7690" href="#">
Part 8</A>
 </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The <I>DataChangeFilter does </I>not have an associated result structure. </P
><H3 
 ID="LinkTarget_24538"
><B> EventFilter </H3
><P 

></B>The <I>EventFilter</I> provides for the filtering and content selection of <I>Event</I> <I>Subscriptions</I>. </P
><P 

>If an <I>Event</I> <I>Notification</I> conforms to the filter defined by the <I>where</I> parameter of the <I>EventFilter</I>, then the <I>Notification</I> is sent to the <I>Client</I>. </P
><P 

>Each <I>Event</I> <I>Notification</I> shall include the fields defined by the <I>selectClauses</I> parameter of the <I>EventFilter</I>. The defined <I>EventType</I>s are specified in <A href="#LinkTarget_7684" href="#">
Part 5</A>
. </P
><P 

>The <I>selectClause</I> and <I>whereClause</I> parameters are specified with the <I>SimpleAttributeOperand</I> structure (see <A href="#LinkTarget_23552" href="#">
7.4.4.5</A>
). This structure requires the <I>NodeId</I> of an <I>EventType</I> supported by the <I>Server</I> and a path to an <I>InstanceDeclaration</I>. An <I>InstanceDeclaration</I> is a <I>Node</I> which can be found by following forward hierarchical references from the fully inherited <I>EventType</I> where the <I>Node</I> is also the source of a <I>HasModellingRule</I> reference. <I>EventTypes</I>, <I>InstanceDeclarations</I> and <I>Modelling Rules</I> are described completely in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. </P
><P 

>In some cases the same <I>BrowsePath</I> will apply to multiple <I>EventTypes</I>. If the <I>Client</I> specifies the <I>BaseEventType</I> in the SimpleAttributeOperand then the <I>Server</I> shall evaluate the <I>BrowsePath</I> without considering the <I>Type</I>. </P
><P 

>Each <I>InstanceDeclaration</I> in the path shall be <I>Object</I> or <I>Variable</I> <I>Node</I>. The final <I>Node</I> in the path may be an <I>Object Node</I>, however, <I>Object Nodes</I> are only available for <I>Events</I> which are visible in the <I>Server&rsquo;s </I><I>AddressSpace</I>. </P
><P 

>The <I>SimpleAttributeOperand </I>structure allows the Client to specify any <I>Attribute</I>, however, the <I>Server</I> is only required to support the <I>Value Attribute</I> for <I>Variable Nodes</I> and the <I>NodeId Attribute</I> for <I>Object Nodes</I>. That said, profiles defined in <A href="#LinkTarget_7688" href="#">
Part 7</A>
 may make support for additional <I>Attributes</I> mandatory. </P
><P 

>The <I>SimpleAttributeOperand </I>structure is used in the <I>selectClause</I> to select the value to return if an <I>Event</I> meets the criteria specified by the <I>whereClause</I>. A null value is returned in the corresponding event field in the Publish response if the selected <I>field</I> is not part of the <I>Event </I>or an error was returned in the <I>selectClauseResults</I> of the <I>EventFilterResult</I>. If the selected <I>field</I> is supported but not available at the time of the event notification, the event field shall contain a <I>StatusCode</I> that indicates the reason for the unavailability. For example, the <I>Server</I> shall set the event field to <I>Bad_UserAccessDenied</I> if the value is not accessible to the user associated with the <I>Session</I>. If a <I>Value Attribute</I> has an uncertain or bad <I>StatusCode</I> associated with it then the <I>Server</I> shall provide the <I>StatusCode</I> instead of the <I>Value</I> <I>Attribute</I>. The <I>Server</I> shall set the event field to <I>Bad_EncodingLimitsExceeded</I> if a value exceeds the <I>maxResponseMessageSize</I>. The <I>EventId</I>, <I>EventType</I> and <I>ReceiveTime</I> cannot contain a <I>StatusCode</I> or a null value<I>.</I> </P
><P 

>The <I>Server</I> shall validate the <I>selectClauses</I> when a <I>Client</I> creates or updates the <I>EventFilter</I>. Any errors which are true for all possible <I>Events</I> are returned in the <I>selectClauseResults</I> parameter described in <A href="#LinkTarget_24650" href="#">
Table 139</A>
. Some <I>Servers</I>, like aggregating <I>Servers</I>, may not know all possible <I>EventTypes</I> at the time the <I>EventFilter</I> is set. These <I>Servers</I> do not return errors for unknown <I>EventTypes</I> or <I>BrowsePaths</I>. The <I>Server</I> shall not report errors that might occur depending on the state or the <I>Server</I> or type of <I>Event</I>. For example, a <I>selectClause</I> that requests a single element in an array would always produce an error if the <I>DataType</I> of the <I>Attribute</I> is a scalar. However, even if the <I>DataType</I> is an array an error could occur if the requested index does not exist for a particular <I>Event</I>, the <I>Server</I> would not report an error in the <I>selectClauseResults</I> parameter if the latter situation existed. </P
><P 

>The <I>SimpleAttributeOperand </I>is used in the <I>whereClause</I> to select a value which forms part of a logical expression. These logical expressions are then used to determine whether a particular <I>Event</I> should be reported to the <I>Client</I>. The <I>Server</I> shall use a null value if any error occurs when a <I>whereClause</I> is evaluated for a particular <I>Event</I>. If a <I>Value Attribute</I> has an uncertain or bad <I>StatusCode</I> associated with it then the <I>Server</I> shall use a null value instead of the <I>Value</I>. </P
><P 

>Any basic <I>FilterOperator</I> in <A href="#LinkTarget_21533" href="#">
Table 115</A>
 may be used in the <I>whereClause</I>, however, only the OfType <I>FilterOperator</I> from <A href="#LinkTarget_21742" href="#">
Table 116</A>
 is permitted. </P
><P 

>The <I>Server</I> shall validate the <I>whereClauses</I> when a <I>Client</I> creates or updates the <I>EventFilter</I>. Any structural errors in the construction of the filter and any errors which are true for all possible <I>Events</I> are returned in the <I>whereClauseResult</I> parameter described in <A href="#LinkTarget_24650" href="#">
Table 139</A>
. Errors that could occur depending on the state of the <I>Server</I> or the <I>Event</I> are not reported. Some <I>Servers</I>, like </P
><P 

>aggregating <I>Servers</I>, may not know all possible <I>EventTypes</I> at the time the <I>EventFilter</I> is set. These <I>Servers</I> do not return errors for unknown <I>EventTypes</I> or <I>BrowsePaths</I>. </P
><P 

><I>SubscriptionControlEvents</I> are special <I>Events</I> which are used to provide control information to the <I>Client</I>. These <I>Events</I> are only published to the <I>MonitoredItems</I> in the <I>Subscription</I> that produced the <I>SubscriptionControlEvent</I>. These <I>Events</I> bypass the <I>whereClause</I>. </P
><P 

><A href="#LinkTarget_24598" href="#">
Table 138</A>
 defines the EventFilter structure. </P
><P 

><B>Table 138 &ndash; EventFilter structure </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EventFilter </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> selectClauses []  </P
></TD
><TD  
 valign="top"
><P 

>SimpleAttribute </P
><P 

>Operand </P
></TD
><TD  
 valign="top"
><P 

>List of the values to return with each <I>Event</I> in a <I>Notification</I>. At least one valid clause shall be specified. See <A href="#LinkTarget_23552" href="#">
7.4.4.5</A>
 for the definition of <I>SimpleAttributeOperand</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> whereClause </P
></TD
><TD  
 valign="top"
><P 

>ContentFilter </P
></TD
><TD  
 valign="top"
><P 

>Limit the <I>Notifications</I> to those <I>Events</I> that match the criteria defined by this ContentFilter. The ContentFilter structure is described in <A href="#LinkTarget_21247" href="#">
7.4</A>
. </P
><P 

>The <I>AttributeOperand</I> structure may not be used in an <I>EventFilter</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><A href="#LinkTarget_24650" href="#">
<FONT size="+1">Table 139</A>
 defines the EventFilterResult structure. This is the <I>MonitoringFilterResult </I>associated with the <I>EventFilter</I> <I>MonitoringFilter</I>. </P
><P 

><B>Table 139 &ndash; EventFilterResult structure </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EventFilterResult </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> selectClauseResults []  </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>List of status codes for the elements in the select clause. The size and order of the list matches the size and order of the elements in the <I>selectClauses</I> request parameter. The Server returns null for unavailable or rejected <I>Event</I> fields. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> selectClauseDiagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>A list of diagnostic information for individual elements in the select clause. The size and order of the list matches the size and order of the elements in the <I>selectClauses</I> request parameter. This list is empty if diagnostics information was not requested in the request header or if no diagnostic information was encountered in processing of the select clauses. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> whereClauseResult </P
></TD
><TD  
 valign="top"
><P 

>ContentFilter </P
><P 

>Result </P
></TD
><TD  
 valign="top"
><P 

>An results associated with the <I>whereClause</I> request parameter. </P
><P 

>The <I>ContentFilterResult</I> type is defined in <A href="#LinkTarget_21323" href="#">
7.4.2</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><A href="#LinkTarget_24709" href="#">
<FONT size="+1">Table 140</A>
 defines values for the selectClauseResults parameter. Common <I>StatusCodes</I> are defined in <A href="#LinkTarget_28238" href="#">
Table 173</A>
. </P
><P 

><B>Table 140 &ndash; EventFilterResult Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_TypeDefinitionInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>The typeId is not the NodeId for BaseEventType or a subtype of it. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>The browsePath is specified but it will never exist in any Event. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_BrowseNameInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>The browsePath is specified and contains a null element. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_AttributeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>The node specified by the browse path will never allow the given attribute id to be returned. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TypeMismatch </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_28238" href="#">
Table 173</A>
 for the description of this result code. </P
><P 

>The indexRange is valid but the value of the Attribute is never an array. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_24789"
><FONT size="+1"><B> AggregateFilter </H3
><P 

></B>The <I>AggregateFilter</I> defines the <I>Aggregate</I> function that should be used to calculate the values to be returned. See <A href="#LinkTarget_7696" href="#">
Part 13</A>
 for details on possible <I>Aggregate</I> functions. It specifies a startTime of the first <I>Aggregate</I> to be calculated. The samplingInterval of the MonitoringAttributes (see <A href="#LinkTarget_24311" href="#">
7.16</A>
) defines how the server should internally sample the underlying data source. The processingInterval specifies the size of a time-period where the <I>Aggregate</I> is calculated. The queueSize from the MonitoringAttributes specifies the number of processed values that should be kept. </P
><P 

>The intention of the <I>AggregateFilter</I> is not to read historical data, the HistoryRead service should be used for this purpose. However, it is allowed that the startTime is set to a time that is in the past when received from the server. The number of <I>Aggregates</I> to be calculated in the past should not exceed the queueSize defined in the MonitoringAttributes since the values exceeding the queueSize would directly be discharged and never returned to the client. </P
><P 

>The startTime and the processingInterval can be revised by the server, but the startTime should remain in the same boundary (startTime + revisedProcessingInterval * n = revisedStartTime). That behaviour simplifies accessing historical values of the <I>Aggregates</I> using the same boundaries by calling the HistoryRead service. The extensible Parameter AggregateFilterResult is used to return the revised values for the <I>AggregateFilter</I>. </P
><P 

>Some underlying systems may poll data and produce multiple samples with the same value. Other systems may only report changes to the values. The definition for each <I>Aggregate</I> type explains how to handle the two different scenarios. </P
><P 

>The <I>MonitoredItem</I> only reports values for intervals that have completed when the publish timer expires. Unused data is carried over and used to calculate a value returned in the next publish. </P
><P 

>The <I>ServerTimestamp</I> for each interval shall be the time of the end of the processing interval. </P
><P 

>The <I>AggregateFilter</I> is defined in <A href="#LinkTarget_24812" href="#">
Table 141</A>
. </P
><P 

><B>Table 141 &ndash; AggregateFilter structure </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AggregateFilter </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> startTime </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>Beginning of period to calculate the <I>Aggregate</I> the first time. The size of each period used to calculate the <I>Aggregate</I> is defined by the samplingInterval of the MonitoringAttributes (see <A href="#LinkTarget_24311" href="#">
7.16</A>
). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> aggregateType </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The NodeId of the <I>Aggregate</I><I>FunctionType</I> object that indicates the <I>Aggregate</I> to be used when retrieving processed data. See <A href="#LinkTarget_7696" href="#">
Part 13</A>
 for details. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> processingInterval </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The period be used to compute the <I>Aggregate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> aggregateConfiguration </P
></TD
><TD  
 valign="top"
><P 

>Aggregate </P
><P 

>Configuration </P
></TD
><TD  
 valign="top"
><P 

>This parameter allows <I>Clients</I> to override the <I>Aggregate</I> configuration settings supplied by the <I>AggregateConfiguration</I> object on a per monitored item basis. See <A href="#LinkTarget_7696" href="#">
Part 13</A>
 for more information on <I>Aggregate</I> configurations. If the <I>Server</I> does not support the ability to override the <I>Aggregate</I> configuration settings it shall return a <I>StatusCode</I> of Bad_AggregateListMismatch. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  useServerCapabilities </P
><P 

>  Defaults </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>If value = TRUE use Aggregate configuration settings as outlined by the AggregateConfiguration object.  </P
><P 

>If value=FALSE use configuration settings as outlined in the following aggregateConfiguration parameters.  </P
><P 

>Default is TRUE. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  treatUncertainAsBad </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>As described in <A href="#LinkTarget_7696" href="#">
Part 13</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  percentDataBad </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>As described in <A href="#LinkTarget_7696" href="#">
Part 13</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  percentDataGood </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>As described in <A href="#LinkTarget_7696" href="#">
Part 13</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  useSloped  </P
><P 

>  Extrapolation </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>As described in <A href="#LinkTarget_7696" href="#">
Part 13</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The AggregateFilterResult defines the revised <I>AggregateFilter</I> the server can return when an <I>AggregateFilter</I> is defined for a MonitoredItem in the CreateMonitoredItems or ModifyMonitoredItems services. The AggregateFilterResult is defined in <A href="#LinkTarget_24949" href="#">
Table 142</A>
. This is the <I>MonitoringFilterResult </I>associated with the <I>AggregateFilter</I> <I>MonitoringFilter</I>. </P
><P 

><B>Table 142 &ndash; AggregateFilterResult structure </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AggregateFilterResult </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> revisedStartTime </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>The actual StartTime interval that the <I>Server</I> shall use. </P
><P 

>This value is based on a number of factors, including capabilities of the server to access historical data. The revisedStartTime should remain in the same boundary as the startTime (startTime + samplingInterval * n = revisedStartTime). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> revisedProcessingInterval  </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>The actual processingInterval that the <I>Server</I> shall use. </P
><P 

> </P
><P 

>The revisedProcessingInterval shall be at least twice the revisedSamplingInterval for the MonitoredItem. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_24988"
><FONT size="+1"><B>7.18 MonitoringMode </H2
><P 

></B>The <I>MonitoringMode</I> is an enumeration that specifies whether sampling and reporting are enabled or disabled for a <I>MonitoredItem</I>. The value of the publishing enabled parameter for a <I>Subscription</I> does not affect the value of the monitoring mode for a <I>MonitoredItem</I> of the <I>Subscription</I>. The values of this parameter are defined in <A href="#LinkTarget_24995" href="#">
Table 143</A>
. </P
><P 

><B>Table 143 &ndash; MonitoringMode Values  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Value </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>DISABLED_0 </P
></TD
><TD  
 valign="top"
><P 

>The item being monitored is not sampled or evaluated, and <I>Notifications</I> are not generated or queued. <I>Notification</I> reporting is disabled. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SAMPLING_1 </P
></TD
><TD  
 valign="top"
><P 

>The item being monitored is sampled and evaluated, and <I>Notifications</I> are generated and queued. <I>Notification</I> reporting is disabled. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>REPORTING_2 </P
></TD
><TD  
 valign="top"
><P 

>The item being monitored is sampled and evaluated, and <I>Notifications</I> are generated and queued. <I>Notification</I> reporting is enabled. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_25023"
><FONT size="+1"><B>7.19 NodeAttributes parameters </H2
><H3 
 ID="LinkTarget_25024"
> Overview </H3
><P 

></B>The <I>AddNodes</I> <I>Service</I> allows specifying the <I>Attributes</I> for the <I>Nodes</I> to add. The <I>NodeAttributes</I> is an extensible parameter whose structure depends on the type of the <I>Attribute</I> being added. It identifies the <I>NodeClass</I> that defines the structure of the <I>Attributes</I> that follow. The <I>parameterTypeIds</I> are defined in <A href="#LinkTarget_25035" href="#">
Table 144</A>
. The <I>ExtensibleParameter</I> type is defined in <A href="#LinkTarget_24217" href="#">
7.12</A>
. </P
><P 

><B>Table 144 &ndash; NodeAttributes parameterTypeIds </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ObjectAttributes </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>Object</I> <I>NodeClass</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>VariableAttributes </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>Variable</I> <I>NodeClass</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MethodAttributes </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>Method</I> <I>NodeClass</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ObjectTypeAttributes </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>ObjectType</I> <I>NodeClass</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>VariableTypeAttributes </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>VariableType</I> <I>NodeClass</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReferenceTypeAttributes </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>ReferenceType</I> <I>NodeClass</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataTypeAttributes </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>DataType</I> <I>NodeClass</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ViewAttributes </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>View</I> <I>NodeClass</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><A href="#LinkTarget_25098" href="#">
<FONT size="+1">Table 145</A>
 defines the bit mask used in the <I>NodeAttributes</I> parameters to specify which <I>Attributes</I> are set by the <I>Client</I>. </P
><P 

><B>Table 145 &ndash; Bit mask for specified Attributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Field </P
></TD
><TD  
 valign="top"
><P 

>Bit </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AccessLevel </P
></TD
><TD  
 valign="top"
><P 

>0 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the AccessLevel Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ArrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the ArrayDimensions Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Reserved to be consistent with WriteMask defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ContainsNoLoops </P
></TD
><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the ContainsNoLoops Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the DataType Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Description </P
></TD
><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the Description Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DisplayName </P
></TD
><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the DisplayName Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EventNotifier </P
></TD
><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the EventNotifier Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Executable </P
></TD
><TD  
 valign="top"
><P 

>8 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the Executable Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Historizing </P
></TD
><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the Historizing Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>InverseName </P
></TD
><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the InverseName Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>11 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the IsAbstract Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MinimumSamplingInterval </P
></TD
><TD  
 valign="top"
><P 

>12 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the MinimumSamplingInterval Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>13 </P
></TD
><TD  
 valign="top"
><P 

>Reserved to be consistent with WriteMask defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>14 </P
></TD
><TD  
 valign="top"
><P 

>Reserved to be consistent with WriteMask defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Symmetric </P
></TD
><TD  
 valign="top"
><P 

>15 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the Symmetric Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserAccessLevel </P
></TD
><TD  
 valign="top"
><P 

>16 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the UserAccessLevel Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserExecutable </P
></TD
><TD  
 valign="top"
><P 

>17 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the UserExecutable Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserWriteMask </P
></TD
><TD  
 valign="top"
><P 

>18 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the UserWriteMask Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValueRank </P
></TD
><TD  
 valign="top"
><P 

>19 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the ValueRank Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>WriteMask </P
></TD
><TD  
 valign="top"
><P 

>20 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the WriteMask Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>21 </P
></TD
><TD  
 valign="top"
><P 

>Indicates if the Value Attribute is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>22:32 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

> </P
><H3 
 ID="LinkTarget_25310"
><FONT size="+1"><B> ObjectAttributes parameter </H3
><P 

><A href="#LinkTarget_25316" href="#">
</B>Table 146</A>
 defines the <I>ObjectAttributes</I> parameter. </P
><P 

><B>Table 146 &ndash; ObjectAttributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ObjectAttributes </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>Object</I> <I>NodeClass.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> specifiedAttributes </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields contain valid values. </P
><P 

>A field shall be ignored if the corresponding bit is set to 0. </P
><P 

>The bit values are defined in <A href="#LinkTarget_25098" href="#">
Table 145</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> displayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> eventNotifier </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> writeMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userWriteMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_25415"
><FONT size="+1"><B> VariableAttributes parameter </H3
><P 

><A href="#LinkTarget_25421" href="#">
</B>Table 147</A>
 defines the <I>VariableAttributes</I> parameter. </P
><P 

><B>Table 147 &ndash; VariableAttributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Name </P
></TH
><TH 
 valign="top"
><P 

>Type </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>VariableAttributes </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>Variable</I> <I>NodeClass</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> specifiedAttributes </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields contain valid values.  </P
><P 

>A field shall be ignored if the corresponding bit is set to 0. </P
><P 

>The bit values are defined in <A href="#LinkTarget_25098" href="#">
Table 145</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> displayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> value </P
></TD
><TD  
 valign="top"
><P 

>Defined by the <I>DataType Attribute</I> </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> dataType </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> valueRank </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> arrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>UInt32 [] </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> accessLevel </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userAccessLevel </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> minimumSamplingInterval </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> historizing </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> writeMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userWriteMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_25613"
><FONT size="+1"><B> MethodAttributes parameter </H3
><P 

><A href="#LinkTarget_25619" href="#">
</B>Table 148</A>
 defines the <I>MethodAttributes</I> parameter. </P
><P 

><B>Table 148 &ndash; MethodAttributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BaseAttributes </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>Method</I> <I>NodeClass</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> specifiedAttributes </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields contain valid values. </P
><P 

>A field shall be ignored if the corresponding bit is set to 0. </P
><P 

>The bit values are defined in <A href="#LinkTarget_25098" href="#">
Table 145</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> displayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> executable </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userExecutable </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> writeMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userWriteMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_25731"
><FONT size="+1"><B> ObjectTypeAttributes parameter </H3
><P 

><A href="#LinkTarget_25737" href="#">
</B>Table 149</A>
 defines the <I>ObjectTypeAttributes</I> parameter. </P
><P 

><B>Table 149 &ndash; ObjectTypeAttributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ObjectTypeAttributes </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>ObjectType</I> <I>NodeClass.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> specifiedAttributes </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields contain valid values. </P
><P 

>A field shall be ignored if the corresponding bit is set to 0. </P
><P 

>The bit values are defined in <A href="#LinkTarget_25098" href="#">
Table 145</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> displayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> isAbstract </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> writeMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userWriteMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_25836"
><FONT size="+1"><B> VariableTypeAttributes parameter </H3
><P 

><A href="#LinkTarget_25842" href="#">
</B>Table 150</A>
 defines the <I>VariableTypeAttributes</I> parameter. </P
><P 

><B>Table 150 &ndash; VariableTypeAttributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>VariableTypeAttributes </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>VariableType</I> <I>NodeClass</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> specifiedAttributes </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields contain valid values.  </P
><P 

>A field shall be ignored if the corresponding bit is set to 0. </P
><P 

>The bit values are defined in <A href="#LinkTarget_25098" href="#">
Table 145</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> displayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> value </P
></TD
><TD  
 valign="top"
><P 

>Defined by the <I>DataType Attribute</I> </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> dataType </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> valueRank </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> arrayDimensions </P
></TD
><TD  
 valign="top"
><P 

>UInt32 [] </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> isAbstract </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> writeMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userWriteMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_25994"
><FONT size="+1"><B> ReferenceTypeAttributes parameter </H3
><P 

><A href="#LinkTarget_26000" href="#">
</B>Table 151</A>
 defines the <I>ReferenceTypeAttributes</I> parameter. </P
><P 

><B>Table 151 &ndash; ReferenceTypeAttributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ReferenceTypeAttributes </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>ReferenceType</I> <I>NodeClass.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> specifiedAttributes </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields contain valid values. </P
><P 

>A field shall be ignored if the corresponding bit is set to 0. </P
><P 

>The bit values are defined in <A href="#LinkTarget_25098" href="#">
Table 145</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> displayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> isAbstract </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> symmetric </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> inverseName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> writeMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userWriteMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_26126"
><FONT size="+1"><B> DataTypeAttributes parameter </H3
><P 

><A href="#LinkTarget_26132" href="#">
</B>Table 152</A>
 defines the <I>DataTypeAttributes</I> parameter. </P
><P 

><B>Table 152 &ndash; DataTypeAttributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>DataTypeAttributes </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>DataType</I> <I>NodeClass.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> specifiedAttributes </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields contain valid values. </P
><P 

>A field shall be ignored if the corresponding bit is set to 0. </P
><P 

>The bit values are defined in <A href="#LinkTarget_25098" href="#">
Table 145</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> displayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> isAbstract </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> writeMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userWriteMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_26231"
><FONT size="+1"><B> ViewAttributes parameter </H3
><P 

><A href="#LinkTarget_26237" href="#">
</B>Table 153</A>
 defines the <I>ViewAttributes</I> parameter. </P
><P 

><B>Table 153 &ndash; ViewAttributes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ViewAttributes </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Defines the <I>Attributes</I> for the <I>View</I> <I>NodeClass.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> specifiedAttributes </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that indicates which fields contain valid values. </P
><P 

>A field shall be ignored if the corresponding bit is set to 0. </P
><P 

>The bit values are defined in <A href="#LinkTarget_25098" href="#">
Table 145</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> displayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> description </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> containsNoLoops </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> eventNotifier </P
></TD
><TD  
 valign="top"
><P 

>Byte </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> writeMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userWriteMask </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_7682" href="#">
Part 3</A>
 for the description of this <I>Attribute</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_26350"
><FONT size="+1"><B>7.20 NotificationData parameters </H2
><H3 
 ID="LinkTarget_26351"
> Overview </H3
><P 

></B>The <I>NotificationMessage</I> structure used in the <I>Subscription</I> <I>Service</I> set allows specifying different types of <I>NotificationData</I>. The <I>NotificationData</I> parameter is an extensible parameter whose structure depends on the type of <I>Notification</I> being sent. This parameter is defined in <A href="#LinkTarget_26363" href="#">
Table 154</A>
. Other types can be defined by additional parts of series of standards or other specifications based on OPC UA. The <I>ExtensibleParameter</I> type is defined in <A href="#LinkTarget_24217" href="#">
7.12</A>
. </P
><P 

>There may be multiple notifications for a single <I>MonitoredItem</I> in a single NotificationData structure. When that happens the <I>Server</I> shall ensure the notifications appear in the same order that they were queued in the <I>MonitoredItem</I>. These notifications do not need to appear as a contiguous block. </P
><P 

><B>Table 154 &ndash; NotificationData parameterTypeIds </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>DataChange </P
></TD
><TD  
 valign="top"
><P 

><I>Notification</I> data parameter used for data change <I>Notifications</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Event </P
></TD
><TD  
 valign="top"
><P 

><I>Notification</I> data parameter used for <I>Event</I> <I>Notifications</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>StatusChange </P
></TD
><TD  
 valign="top"
><P 

><I>Notification</I> data parameter used for Subscription status change <I>Notifications.</I><I> </I></P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_26390"
><FONT size="+1"><B> DataChangeNotification parameter </H3
><P 

><A href="#LinkTarget_26408" href="#">
</B>Table 155</A>
 defines the <I>NotificationData</I> parameter used for data change notifications. This structure contains the monitored data items that are to be reported. Monitored data items are reported under two conditions: </P
><DL 

><DD 

>a) if the <I>MonitoringMode</I> is set to REPORTING and a change in value or its status (represented by its <I>StatusCode</I>) is detected; </DD
><DD 

>b) if the <I>MonitoringMode</I> is set to SAMPLING, the <I>MonitoredItem</I> is linked to a triggering item and the triggering item triggers. </DD
></DL
><P 

>See <A href="#LinkTarget_15798" href="#">
5.12</A>
 for a description of the <I>MonitoredItem</I> <I>Service</I> set, and in particular the <I>MonitoringItemModel</I> and the <I>TriggeringModel</I>. </P
><P 

>After creating a <I>MonitoredItem,</I> the current value or status of the monitored Attribute shall be queued without applying the filter. If the current value is not available after the first sampling interval the first <I>Notification</I> shall be queued after getting the initial value or status from the data source. </P
><P 

><B>Table 155 &ndash; DataChangeNotification </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>DataChangeNotification </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Data change <I>Notification</I> data. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> monitoredItems [] </P
></TD
><TD  
 valign="top"
><P 

>MonitoredItem Notification </P
></TD
><TD  
 valign="top"
><P 

>The list of <I>MonitoredItems</I> for which a change has been detected. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  clientHandle </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

><I>Client</I>-supplied handle for the <I>MonitoredItem</I>. The <I>IntegerId</I> type is defined in <A href="#LinkTarget_24268" href="#">
7.14</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  Value </P
></TD
><TD  
 valign="top"
><P 

>DataValue </P
></TD
><TD  
 valign="top"
><P 

>The <I>StatusCode</I>, value and timestamp(s) of the monitored <I>Attribute</I> depending on the sampling and queuing configuration. </P
><P 

>If the <I>StatusCode</I> indicates an error then the value is to be ignored. </P
><P 

>If not every detected change has been returned since the <I>Server</I>'s queue buffer for the <I>MonitoredItem</I> reached its limit and had to purge out data and the size of the queue is larger than one, the <I>Overflow</I> bit in the <I>DataValue</I> <I>InfoBits</I> of the <I>statusCode</I> is set. </P
><P 

><I>DataValue</I> is a common type defined in <A href="#LinkTarget_23653" href="#">
7.7</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfos [] </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>List of diagnostic information. The size and order of this list matches the size and order of the <I>monitoredItems</I> parameter. There is one entry in this list for each <I>Node</I> contained in the <I>monitoredItems</I> parameter. This list is empty if diagnostics information was not requested or is not available for any of the <I>MonitoredItems</I>. <I>DiagnosticInfo</I> is a common type defined in <A href="#LinkTarget_23786" href="#">
7.8</A>
. </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_26478"
><FONT size="+1"><B> EventNotificationList parameter </H3
><P 

><A href="#LinkTarget_26485" href="#">
</B>Table 156</A>
 defines the <I>NotificationData</I> parameter used for <I>EventNotifications</I>. </P
><P 

>The EventNotificationList defines a table structure that is used to return <I>Event</I> fields to a <I>Client</I> <I>Subscription</I>. The structure is in the form of a table consisting of one or more <I>Events</I>, each containing an array of one or more fields. The selection and order of the fields returned for each <I>Event</I> is identical to the selected parameter of the <I>EventFilter</I>. </P
><P 

><B>Table 156 &ndash; EventNotificationList </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EventNotificationList </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Event <I>Notification</I> data. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> events [] </P
></TD
><TD  
 valign="top"
><P 

>EventFieldList </P
></TD
><TD  
 valign="top"
><P 

>The list of <I>Events</I> being delivered. This structure is defined in-line with the following indented items. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  clientHandle </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

><I>Client</I>-supplied handle for the <I>MonitoredItem</I>. The <I>IntegerId</I> type is defined in <A href="#LinkTarget_24268" href="#">
7.14</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  eventFields [] </P
></TD
><TD  
 valign="top"
><P 

>BaseDataType </P
></TD
><TD  
 valign="top"
><P 

>List of selected <I>Event</I> fields. This shall be a one to one match with the fields selected in the <I>EventFilter</I>. </P
><P 

><A href="#LinkTarget_24538" href="#">
7.17.3</A>
 specifies how the <I>Server</I> shall deal with error conditions. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_26539"
><FONT size="+1"><B> StatusChangeNotification parameter </H3
><P 

><A href="#LinkTarget_26546" href="#">
</B>Table 157</A>
 defines the <I>NotificationData</I> parameter used for a <I>StatusChangeNotification</I>. </P
><P 

>The <I>StatusChangeNotification</I> informs the client about a change in the status of a <I>Subscription</I>. </P
><P 

><B>Table 157 &ndash; StatusChangeNotification </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>StatusChangeNotification </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Event <I>Notification</I> data </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> status </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>The <I>StatusCode</I> that indicates the status change. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> diagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>Diagnostic information for the status change </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_26581"
><FONT size="+1"><B>7.21 NotificationMessage </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_26588" href="#">
Table 158</A>
. </P
><P 

><B>Table 158 &ndash; NotificationMessage </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NotificationMessage </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>The <I>Message</I> that contains one or more <I>Notifications</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> sequenceNumber </P
></TD
><TD  
 valign="top"
><P 

>Counter </P
></TD
><TD  
 valign="top"
><P 

>The sequence number of the <I>NotificationMessage</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> publishTime </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>The time that this <I>Message</I> was sent to the <I>Client</I>. If this <I>Message</I> is retransmitted to the <I>Client</I>, this parameter contains the time it was first transmitted to the <I>Client</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> notificationData [] </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>NotificationData </P
></TD
><TD  
 valign="top"
><P 

>The list of <I>NotificationData structures</I>. </P
><P 

>The <I>NotificationData</I> parameter type is an extensible parameter type specified in <A href="#LinkTarget_26350" href="#">
7.20</A>
. It specifies the types of <I>Notifications</I> that can be sent. The <I>ExtensibleParameter</I> type is specified in <A href="#LinkTarget_24217" href="#">
7.12</A>
. </P
><P 

>Notifications of the same type should be grouped into one NotificationData element. If a Subscription contains <I>MonitoredItems</I> for events and data, this array should have not more than 2 elements. If the <I>Subscription</I> contains <I>MonitoredItems</I> only for data or only for events, the array size should always be one for this <I>Subscription</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_26644"
><FONT size="+1"><B>7.22 NumericRange </H2
><P 

></B>This parameter is defined in <A href="#LinkTarget_26659" href="#">
Table 159</A>
. A formal BNF definition of the numeric range can be found in Clause A.3. </P
><P 

>The syntax for the string contains one of the following two constructs. The first construct is the string representation of an individual integer. For example, &ldquo;6&rdquo; is valid, but &ldquo;6,0&rdquo; and &ldquo;3,2&rdquo; are not. The minimum and maximum values that can be expressed are defined by the use of this parameter and not by this parameter type definition. The second construct is a range represented by two integers separated by the colon (&ldquo;:&rdquo;) character. The first integer shall always have a lower value than the second. For example, &ldquo;5:7&rdquo; is valid, while &ldquo;7:5&rdquo; and &ldquo;5:5&rdquo; are not. The minimum and maximum values that can be expressed by these integers are defined by the use of this parameter, and not by this parameter type definition. No other characters, including white-space characters, are permitted. </P
><P 

>Multi-dimensional arrays can be indexed by specifying a range for each dimension separated by a &lsquo;,&rsquo;. For example, a 2x2 block in a 4x4 matrix could be selected with the range &ldquo;1:2,0:1&rdquo;. A single element in a multi-dimensional array can be selected by specifying a single number instead of a range. For example, &ldquo;1,1&rdquo; specifies selects the [1,1] element in a two dimensional array. </P
><P 

>Dimensions are specified in the order that they appear in the <I>ArrayDimensions Attribute</I>. All dimensions shall be specified for a <I>NumericRange</I> to be valid. </P
><P 

>All indexes start with 0. The maximum value for any index is one less than the length of the dimension. </P
><P 

>When reading a value, the indexes may not specify a range that is within the bounds of the array. The <I>Server</I> shall return a partial result if some elements exist within the range. The <I>Server</I> shall return a <I>Bad_IndexRangeNoData </I>if no elements exist within the range. </P
><P 

><I>Bad_IndexRangeInvalid</I> is only used for invalid syntax of the <I>NumericRange</I>. All other invalid requests with a valid syntax shall result in <I>Bad_IndexRangeNoData</I>. </P
><P 

>When writing a value, the size of the array shall match the size specified by the <I>NumericRange</I>. The <I>Server</I> shall return an error if it cannot write all elements specified by the <I>Client</I>. </P
><P 

>The <I>NumericRange</I> can also be used to specify substrings for <I>ByteString</I> and <I>String</I> values. Arrays of <I>ByteString</I> and <I>String</I> values are treated as two dimensional arrays where the final index specifies the substring range within the <I>ByteString</I> or <I>String</I> value. The entire<I> ByteString</I> or <I>String</I> value is selected if the final index is omitted. </P
><P 

><B>Table 159 &ndash; NumericRange </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>NumericRange </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A number or a numeric range. </P
><P 

>A null string indicates that this parameter is not used. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_26679"
><FONT size="+1"><B>7.23 QueryDataSet </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_26687" href="#">
Table 160</A>
. </P
><P 

><B>Table 160 &ndash; QueryDataSet </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>QueryDataSet </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Data related to a <I>Node</I> returned in a Query response. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodeId </P
></TD
><TD  
 valign="top"
><P 

>ExpandedNodeId </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeId</I> for this <I>Node</I> description. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> typeDefinitionNode </P
></TD
><TD  
 valign="top"
><P 

>ExpandedNodeId </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeId</I> for the type definition for this <I>Node</I> description. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> values [] </P
></TD
><TD  
 valign="top"
><P 

>BaseDataType </P
></TD
><TD  
 valign="top"
><P 

>Values for the selected <I>Attributes. </I>The order of returned items matches the order of the requested items. There is an entry for each requested item for the given <I>TypeDefinitionNode</I> that matches the selected instance, this includes any related nodes that were specified using a relative path from the selected instance&rsquo;s <I>TypeDefinitionNode</I>. If no values where found for a given requested item a null value is returned for that item. If a value has a bad status, the <I>StatusCode</I> is returned instead of the value. If multiple values exist for a requested item then an array of values is returned. If the requested item is a reference then a <I>ReferenceDescription</I> or array of <I>ReferenceDescription</I> is returned for that item. </P
><P 

>If the <I>QueryDataSet</I> is returned in a <I>QueryNext</I> to continue a list of <I>ReferenceDescription</I>, the <I>values</I> array will have the same size but the other values already returned are null. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_26731"
><B>7.24 ReadValueId </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_26738" href="#">
Table 161</A>
. </P
><P 

><B>Table 161 &ndash; ReadValueId </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ReadValueId </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Identifier for an item to read or to monitor. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of a <I>Node</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> attributeId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>Id of the <I>Attribute</I>. This shall be a valid <I>Attribute</I> id. The <I>IntegerId </I>is defined in <A href="#LinkTarget_24268" href="#">
7.14</A>
. The IntegerIds for the Attributes are defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> indexRange </P
></TD
><TD  
 valign="top"
><P 

>NumericRange </P
></TD
><TD  
 valign="top"
><P 

>This parameter is used to identify a single element of an array, or a single range of indexes for arrays. If a range of elements is specified, the values are returned as a composite. The first element is identified by index 0 (zero). The <I>NumericRange</I> type is defined in <A href="#LinkTarget_26644" href="#">
7.22</A>
. </P
><P 

>This parameter is null if the specified <I>Attribute</I> is not an array. However, if the specified <I>Attribute</I> is an array, and this parameter is null, then all elements are to be included in the range. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> dataEncoding </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>This parameter specifies the <I>BrowseName</I> of the <I>DataTypeEncoding</I> that the <I>Server</I> should use when returning the Value <I>Attribute</I> of a <I>Variable</I>. It is an error to specify this parameter for other <I>Attributes</I>. </P
><P 

>A <I>Client</I> can discover what <I>DataTypeEncoding</I>s are available by following the <I>HasEncoding</I> <I>Reference</I> from the <I>DataType</I> <I>Node</I> for a <I>Variab</I><I>le</I>. </P
><P 

>OPC UA defines <I>BrowseNames</I> which <I>Servers</I> shall recognize even if the <I>DataType</I> <I>Nodes</I> are not visible in the <I>Server</I> <I>AddressSpace</I>. These <I>BrowseNames</I> are: </P
><P 

><FONT size="+1"> </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Default Binary </P
></TD
><TD  
 valign="top"
><P 

>The default or native binary (or non-XML) encoding. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Default XML </P
></TD
><TD  
 valign="top"
><P 

>The default XML encoding. </P
></TD
></TR
></TABLE
><P 

> Each <I>DataType</I> shall support at least one of these encodings. <I>DataTypes</I> that do not have a true binary encoding (e.g. they only have a non-XML text encoding) should use the Default Binary name to identify the encoding that is considered to be the default non-XML encoding. <I>DataTypes</I> that support at least one XML-based encoding shall identify one of the encodings as the Default XML encoding. Other standards bodies may define other well-known data encodings that could be supported. </P
><P 

>If this parameter is not specified then the <I>Server</I> shall choose either the Default Binary or Default XML encoding according to what <I>Message</I> encoding (see <A href="#LinkTarget_7686" href="#">
Part 6</A>
) is used for the <I>Session</I>. If the <I>Server</I> does not support the encoding that matches the <I>Message</I> encoding then the <I>Server</I> shall choose the default encoding that it does support. </P
><P 

>If this parameter is specified for a <I>Moni</I><I>toredItem</I>, the <I>Server</I> shall set the <I>StructureChanged</I> bit in the <I>StatusCode</I> (see <A href="#LinkTarget_27514" href="#">
7.34</A>
) if the <I>DataTypeEncoding</I> changes. The <I>DataTypeEncoding</I> changes if the <I>DataTypeVersion</I> of the <I>DataTypeDescription</I> or the <I>DataTypeDictionary</I> associated with the <I>DataTypeEncoding</I> changes. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_26831"
><FONT size="+1"><B>7.25 ReferenceDescription </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_26839" href="#">
Table 162</A>
. </P
><P 

><B>Table 162 &ndash; ReferenceDescription </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ReferenceDescription </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Reference parameters returned for the <I>Browse</I> <I>Service</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> referenceTypeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>ReferenceType</I> that defines the <I>Reference</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> isForward </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>If the value is TRUE, the <I>Server</I> followed a forward <I>Reference</I>. If the value is FALSE, the <I>Server</I> followed an inverse <I>Reference</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodeId </P
></TD
><TD  
 valign="top"
><P 

>Expanded </P
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>TargetNode</I> as assigned by the <I>Server</I> identified by the <I>Server</I> index. The <I>ExpandedNodeId</I> type is defined in <A href="#LinkTarget_24114" href="#">
7.11</A>
. </P
><P 

>If the <I>server</I>Index indicates that the <I>TargetNode</I> is a remote <I>Node</I>, then the <I>nodeId</I> shall contain the absolute namespace URI. If the <I>TargetNode</I> is a local <I>Node</I> the <I>nodeId</I> shall contain the namespace index. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> browseName1) </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>The <I>BrowseName</I> of the <I>TargetNode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> displayName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>The <I>DisplayName</I> of the <I>TargetNode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> nodeClass1) </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

><I>NodeClass</I> of the <I>TargetNode</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> typeDefinition1) </P
></TD
><TD  
 valign="top"
><P 

>Expanded </P
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>Type definition <I>NodeId</I> of the <I>TargetNode</I>. Type definitions are only available for the <I>NodeClasses</I> <I>Object</I> and <I>Variable</I>. For all other <I>NodeClasses</I> a null NodeId shall be returned. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">1)<FONT size="+1"> If the <I>Server</I> index indicates that the <I>TargetNode</I> is a remote <I>Node</I>, then the <I>browseName</I>, nodeClass and typeDefinition may be null or empty. If they are not, they might not be up to date because the local <I>Server</I> might not continuously monitor the remote <I>Server</I> for changes. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_26926"
><FONT size="+1"><B>7.26 RelativePath </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_26933" href="#">
Table 163</A>
. </P
><P 

><B>Table 163 &ndash; RelativePath </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Defines a sequence of <I>References</I> and <I>BrowseNames</I> to follow. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> elements [] </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
><P 

>Element </P
></TD
><TD  
 valign="top"
><P 

>A sequence of <I>References</I> and <I>BrowseNames</I> to follow. This structure is defined in-line with the following indented items. </P
><P 

>Each element in the sequence is processed by finding the targets and then using those targets as the starting nodes for the next element. The targets of the final element are the target of the <I>RelativePath</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  referenceTypeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>The type of reference to follow from the current node. </P
><P 

>The current path cannot be followed any further if the referenceTypeId is not available on the Node instance. </P
><P 

>If not specified then all <I>References</I> are included and the parameter includeSubtypes is ignored. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  isInverse </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>Indicates whether the inverse <I>Reference</I> should be followed. The inverse reference is followed if this value is TRUE. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  includeSubtypes </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>Indicates whether subtypes of the <I>ReferenceType</I> should be followed. Subtypes are included if this value is TRUE. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>  targetName </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>The <I>BrowseName</I> of the target node. </P
><P 

>The final element may have an empty <I>targetName</I>. In this situation all targets of the references identified by the referenceTypeId are the targets of the <I>RelativePath</I>. </P
><P 

>The <I>targetName</I> shall be specified for all other elements. </P
><P 

>The current path cannot be followed any further if no targets with the specified <I>BrowseName</I> exist. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">A <I>RelativePath</I> can be applied to any starting <I>Node</I>. The targets of the <I>RelativePath</I> are the set of <I>Nodes</I> that are found by sequentially following the elements in <I>RelativePath</I>. </P
><P 

>A text format for the <I>RelativePath</I> can be found in Clause A.2. This format is used in examples that explain the <I>Services</I> that make use of the <I>RelativePath</I> structure. </P
><H2 
 ID="LinkTarget_27001"
><B>7.27 RegisteredServer </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_27009" href="#">
Table 164</A>
. </P
><P 

><B>Table 164 &ndash; RegisteredServer </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>RegisteredServer </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>The server to register. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The globally unique identifier for the <I>Server</I> instance. The <I>serverUri</I> matches the <I>applicationUri</I> from the <I>ApplicationDescription</I> defined in <A href="#LinkTarget_20938" href="#">
7.1</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> productUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The globally unique identifier for the <I>Server </I>product. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverNames [] </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>A list of localized descriptive names for the <I>Server</I>. </P
><P 

>The list shall have at least one valid entry. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serverType </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>ApplicationType </P
></TD
><TD  
 valign="top"
><P 

>The type of application. </P
><P 

>The enumeration values are defined in <A href="#LinkTarget_20945" href="#">
Table 108</A>
. </P
><P 

>The value &ldquo;CLIENT_1&rdquo; (The application is a <I>Client)</I> is not allowed. The <I>Service</I> result shall be Bad_InvalidArgument in this case. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> gatewayServerUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The URI of the <I>Gateway Server</I> associated with the <I>discoveryUrls</I>. </P
><P 

>This value is only specified by <I>Gateway Servers </I>that wish to register the <I>Servers</I> that they provide access to. </P
><P 

>For <I>Servers</I> that do not act as a <I>Gateway </I><I>Server</I> this parameter shall be null. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> discoveryUrls [] </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A list of <I>Discovery Endpoints</I> for the <I>Server</I>. </P
><P 

>The list shall have at least one valid entry. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> semaphoreFilePath </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The path to the semaphore file used to identify an automatically-launched server instance; Manually-launched servers will not use this parameter. </P
><P 

> </P
><P 

>If a Semaphore file is provided, the isOnline flag is ignored. </P
><P 

>If a Semaphore file is provided and exists, the <I>LocalDiscoveryServer</I> shall save the registration information in a persistent data store that it reads whenever the <I>LocalDiscoveryServer</I> starts. </P
><P 

>If a Semaphore file is specified but does not exist the <I>Discovery</I> <I>Server</I> shall remove the registration from any persistent data store. </P
><P 

>If the Server has registered with a semaphoreFilePath, the <I>DiscoveryServer </I>shall check that this file exists before returning the <I>ApplicationDescription</I> to the client. </P
><P 

>If the Server did not register with a semaphoreFilePath (it is null or empty) then the <I>DiscoveryServer</I> does not attempt to verify the existence of the file before returning the ApplicationDescription to the client. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> isOnline </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>True if the <I>Server</I> is currently able to accept connections from <I>Clients</I>.<I> </I>The<I> </I><I>DiscoveryServer </I>shall return <I>ApplicationDescription</I><I>s</I> to the <I>Client</I>. </P
><P 

>The Server is expected to periodically re-register with the <I>DiscoveryServer</I><I>.</I> </P
><P 

>False if the <I>Server</I> is currently unable to accept connections from <I>Clients</I>.<I> </I>The<I> </I><I>DiscoveryServer </I>shall NOT return <I>ApplicationDescription</I><I>s</I> to the <I>Client</I><I>.</I> </P
><P 

>This parameter is ignored if a semaphoreFilePath is provided. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_27119"
><FONT size="+1"><B>7.28 RequestHeader </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_27126" href="#">
Table 165</A>
. </P
><P 

><B>Table 165 &ndash; RequestHeader </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>RequestHeader </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Common parameters for all requests submitted on a <I>Session</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> authenticationToken </P
></TD
><TD  
 valign="top"
><P 

>Session </P
><P 

>AuthenticationToken </P
></TD
><TD  
 valign="top"
><P 

>The secret <I>Session</I> identifier used to verify that the request is associated with the <I>Session. </I>The <I>SessionAuthenticationToken</I> type is defined in <A href="#LinkTarget_27383" href="#">
7.31</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> timestamp </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>The time the <I>Client</I> sent the request. The parameter is only used for diagnostic and logging purposes in the server.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHandle </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>A <I>requestHandle</I> associated with the request. This client defined handle can be used to cancel the request. It is also returned in the response. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> returnDiagnostics </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>A bit mask that identifies the types of vendor-specific diagnostics to be returned in <I>diagnosticInfo r</I>esponse parameters. </P
><P 

>The value of this parameter may consist of zero, one or more of the following values. No value indicates that diagnostics are not to be returned. </P
><P 

> Bit Value   Diagnostics to return </P
><P 

> 0x0000 0001 ServiceLevel / SymbolicId </P
><P 

> 0x0000 0002 ServiceLevel / LocalizedText </P
><P 

> 0x0000 0004 ServiceLevel / AdditionalInfo </P
><P 

> 0x0000 0008 ServiceLevel / Inner <I>StatusCode</I> </P
><P 

> 0x0000 0010 ServiceLevel / Inner Diagnostics </P
><P 

> 0x0000 0020 OperationLevel / SymbolicId </P
><P 

> 0x0000 0040 OperationLevel / LocalizedText </P
><P 

> 0x0000 0080 OperationLevel / AdditionalInfo </P
><P 

> 0x0000 0100 OperationLevel / Inner <I>StatusCode</I> </P
><P 

> 0x0000 0200 OperationLevel / Inner Diagnostics </P
><P 

>Each of these values is composed of two components, <I>level</I> and <I>type</I>, as described below. If none are requested, as indicated by a 0 value, or if no diagnostic information was encountered in processing of the request, then diagnostics information is not returned. </P
><P 

><I>Level: </I></P
><P 

> ServiceLevel return diagnostics in the <I>diagnosticInfo</I> of the <I>Service</I>. </P
><P 

> OperationLevel return diagnostics in the <I>diagnosticInfo</I> defined for individual operations requested in the <I>Service</I>.  </P
><P 

><I>Type: </I></P
><P 

> SymbolicId  return a namespace-qualified, symbolic identifier for an error or condition. The maximum length of this identifier is 32 characters. </P
><P 

> LocalizedText return up to 256 bytes of localized text that describes the symbolic id. </P
><P 

> AdditionalInfo return a byte string that contains additional diagnostic information, such as a memory image. The format of this byte string is vendor-specific, and may depend on the type of error or condition encountered. </P
><P 

> InnerStatusCode return the inner <I>StatusCode</I> associated with the operation or <I>Service</I>. </P
><P 

> InnerDiagnostics return the inner diagnostic info associated with the operation or <I>Service</I>. The contents of the inner diagnostic info structure are determined by other bits in the mask. Note that setting this bit could cause multiple levels of nested diagnostic info structures to be returned. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> auditEntryId </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>An identifier that identifies the <I>Client</I>&rsquo;s security audit log entry associated with this request. An empty string value means that this parameter is not used. </P
><P 

>The <I>AuditEntryId </I>typically contains who initiated the action and from where it was initiated. The <I>AuditEventId</I> is included in the <I>AuditEvent</I> to allow human readers to correlate an <I>Event</I> with the initiating action. </P
><P 

>More details of the <I>Audit</I> mechanisms are defined in <A href="#LinkTarget_20078" href="#">
6.2</A>
 and in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> timeoutHint </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>This timeout in milliseconds is used in the <I>Client</I> side <I>Communication</I> <I>Stack</I> to set the timeout on a per-call base. </P
><P 

>For a <I>Server</I> this timeout is only a hint and can be used to cancel long running operations to free resources. If the Server detects a timeout, he can cancel the operation by sending the <I>Service</I> result <I>Bad_Timeout</I>. The <I>Server</I> should wait at minimum the timeout after he received the request before cancelling the operation. The <I>Server</I> shall check the <I>timeoutHint</I> parameter of a <I>PublishRequest</I> before processing a <I>PublishResponse. </I>If the request timed out, a Bad_Timeout <I>Service</I> result is sent and another <I>PublishRequest</I> is used.  </P
><P 

>The value of 0 indicates no timeout. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> additionalHeader </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>AdditionalHeader </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. </P
><P 

>Applications that do not understand the header should ignore it. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_27245"
><FONT size="+1"><B>7.29 ResponseHeader </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_27252" href="#">
Table 166</A>
. </P
><P 

><B>Table 166 &ndash; ResponseHeader </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Common parameters for all responses. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> timestamp </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>The time the <I>Server</I> sent the response. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> requestHandle </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>The requestHandle given by the <I>Client</I> to the request. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serviceResult </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>OPC UA-defined result of the <I>Service</I> invocation. The <I>StatusCode</I> type is defined in <A href="#LinkTarget_27514" href="#">
7.34</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> serviceDiagnostics </P
></TD
><TD  
 valign="top"
><P 

>DiagnosticInfo </P
></TD
><TD  
 valign="top"
><P 

>Diagnostic information for the <I>Service</I> invocation. This parameter is empty if diagnostics information was not requested in the request header. The <I>DiagnosticInfo</I> type is defined in <A href="#LinkTarget_23786" href="#">
7.8</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> stringTable []  </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>There is one string in this list for each unique namespace, symbolic identifier, and localized text string contained in all of the diagnostics information parameters contained in the response (see <A href="#LinkTarget_23786" href="#">
7.8</A>
). Each is identified within this table by its zero-based index. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> additionalHeader </P
></TD
><TD  
 valign="top"
><P 

>Extensible Parameter </P
><P 

>AdditionalHeader </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. </P
><P 

>Applications that do not understand the header should ignore it. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_27337"
><FONT size="+1"><B>7.30 ServiceFault </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_27351" href="#">
Table 167</A>
. </P
><P 

>The <I>ServiceFault</I> parameter is returned instead of the Service response message when a service level error occurs. The <I>requestHandle</I> in the <I>ResponseHeader</I> should be set to what was provided in the <I>RequestHeader</I> even if these values were not valid. The level of diagnostics returned in the <I>ResponseHeader</I> is specified by the <I>returnDiagnostics</I> parameter in the <I>RequestHeader</I>. </P
><P 

>The exact use of this parameter depends on the mappings defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><P 

><B>Table 167 &ndash; ServiceFault </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ServiceFault </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>An error response sent when a service level error occurs. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> responseHeader </P
></TD
><TD  
 valign="top"
><P 

>ResponseHeader </P
></TD
><TD  
 valign="top"
><P 

>Common response parameters (see <A href="#LinkTarget_27245" href="#">
7.29</A>
 for <I>ResponseHeader</I> definition). </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_27383"
><FONT size="+1"><B>7.31 SessionAuthenticationToken </H2
><P 

></B>The <I>SessionAuthenticationToken</I> type is an opaque identifier that is used to identify requests associated with a particular <I>Session</I>. This identifier is used in conjunction with the <I>SecureChannelId</I> or <I>Client Certificate</I> to authenticate incoming messages. It is the secret form of the <I>sessionId</I> for internal use in the <I>Client</I> and <I>Server</I> <I>Applications</I>. </P
><P 

>A Server returns a <I>SessionAuthenticationToken </I>in the <I>CreateSession</I> response. The <I>Client</I> then sends this value with every request which allows the <I>Server</I> to verify that the sender of the request is the same as the sender of the original <I>CreateSession</I> request. </P
><P 

>For the purposes of this discussion, a <I>Server</I> consists of application (code) and a <I>Communication</I> <I>Stack</I> as shown in <A href="#LinkTarget_27395" href="#">
Figure 35</A>
. The security provided by the <I>SessionAuthenticationToken </I>depends on a trust relationship between the <I>Server</I> application and the <I>Communication Stack</I>. The <I>Communication Stack</I> shall be able to verify the sender of the message and it uses the <I>SecureChannelId</I> or the <I>Client Certificate </I>to identify the sender to the <I>Server</I>. In these cases, the <I>SessionAuthenticationToken </I>is a UInt32 identifier that allows the <I>Server</I> to distinguish between different <I>Sessions</I> created by the same sender. </P
><P 

> <DIV class="Sect" 
 Alt=""
> Application Communication Stack Server </DIV
></P
><P 

><B>Figure 35 &ndash; Logical layers of a <I>Server</I> </P
><P 

></B>In some cases, the application and the <I>Communication Stack</I> cannot exchange information at runtime which means the application will not have access to the <I>SecureChannelId</I> or the <I>Certificate </I>used to create the <I>SecureChannel. </I>In these cases the application shall create a </P
><P 

>random <I>ByteString</I> value that is at least 32 bytes long. This value shall be kept secret and shall always be exchanged over a <I>SecureChannel</I> with encryption enabled. The Administrator is responsible for ensuring that encryption is enabled. The <I>Profiles</I> in <A href="#LinkTarget_7688" href="#">
Part 7</A>
 may define additional requirements for a <I>ByteString</I> <I>SessionAuthenticationToken.</I> </P
><P 

><I>Client</I> and <I>Server</I> applications should be written to be independent of the <I>SecureChannel</I> implementation. Therefore, they should always treat the <I>SessionAuthenticationToken </I>as secret information even if it is not required when using some <I>SecureChannel</I> implementations. </P
><P 

><A href="#LinkTarget_27413" href="#">
Figure 36</A>
 illustrates the information exchanged between the Client, the Server and the Server <I>Communication Stack</I> when the <I>Client</I> obtains a <I>SessionAuthenticationToken. </I>In this figure the GetSecureChannelInfo step represents an API that depends on the <I>Communication Stack</I> implementation. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ClientServer StackServerOpenSecureChannel&bull;Client Certificate&bull;SecureChannelIdCreateSession&bull;Client CertificateOpenSecureChannel ResponseGetSecureChannelInfo&bull;Endpoint Url&bull;Security Policy&bull;Security Mode&bull;Secure Channel Id&bull;Client CertificateCreateSession Response&bull;SessionId&bull;AuthenticationTokenActivateSession&bull;SessionId&bull;AuthenticationTokenGetSecureChannelInfo&bull;Secure Channel Id&bull;Client CertificateActivateSession Response</DIV
></P
><P 

><B>Figure 36 &ndash; Obtaining a SessionAuthenticationToken </P
><P 

></B>The <I>SessionAuthenticationToken</I> is a subtype of the <I>NodeId</I> data type; however, it is never used to identify a <I>Node</I> in the <I>AddressSpace</I>. <I>Servers</I> may assign a value to the <I>NamespaceIndex</I>; however, its meaning is <I>Server</I> specific. </P
><H2 
 ID="LinkTarget_27415"
><B>7.32 SignatureData </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_27422" href="#">
Table 168</A>
. </P
><P 

><B>Table 168 &ndash; SignatureData </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SignatureData </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Contains a digital signature created with a <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> algorithm </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A string containing the URI of the <I>algorithm</I>. </P
><P 

>The URI string values are defined as part of the security profiles specified in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> signature </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>This is a signature generated with the private key associated with a <I>Certificate</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_27471"
><FONT size="+1"><B>7.33 SignedSoftwareCertificate </H2
><P 

><FONT size="+1"></B>Note: Details on SoftwareCertificates need to be defined in a future version.<FONT size="+1"> </P
><P 

><A href="#LinkTarget_27479" href="#">
Table 169</A>
 specifies <I>SignedSoftwareCertificate Structure</I>. </P
><P 

><B>Table 169 &ndash; SignedSoftwareCertificate </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SignedSoftwareCertificate </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> certificateData </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>The certificate data serialized as a ByteString. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> signature </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>The signature for the certificateData. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_27514"
><FONT size="+1"><B>7.34 StatusCode </H2
><H3 
 ID="LinkTarget_27515"
> General </H3
><P 

></B>A <I>StatusCode</I> in OPC UA is numerical value that is used to report the outcome of an operation performed by an OPC UA <I>Server</I>. This code may have associated diagnostic information that describes the status in more detail; however, the code by itself is intended to provide <I>Client</I> applications with enough information to make decisions on how to process the results of an OPC UA <I>Service</I>. </P
><P 

>The <I>StatusCode</I> is a 32-bit unsigned integer. The top 16 bits represent the numeric value of the code that shall be used for detecting specific errors or conditions. The bottom 16 bits are bit flags that contain additional information but do not affect the meaning of the <I>StatusCode</I>. </P
><P 

>All OPC UA <I>Clients</I> shall always check the <I>StatusCode</I> associated with a result before using it. Results that have an uncertain/warning status associated with them shall be used with care since these results might not be valid in all situations. Results with a bad/failed status shall never be used. </P
><P 

>OPC UA <I>Servers</I> should return good/success <I>StatusCodes</I> if the operation completed normally and the result is always valid. Different <I>StatusCode</I> values can provide additional information to the <I>Client</I>. </P
><P 

>OPC UA <I>Servers</I> should use uncertain/warning <I>StatusCodes</I> if they could not complete the operation in the manner requested by the <I>Client</I>, however, the operation did not fail entirely. </P
><P 

>The list of <I>StatusCodes</I> is managed by OPC UA. The complete list of <I>StatusCodes</I> is defined in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. <I>Servers</I> shall not define their own <I>StatusCodes</I>. OPC UA companion working groups may request additional <I>StatusCodes</I> from the OPC Foundation to be added to the list in <A href="#LinkTarget_7686" href="#">
Part 6</A>
. </P
><P 

>The exact bit assignments are shown in <A href="#LinkTarget_27538" href="#">
Table 170</A>
. </P
><P 

><B>Table 170 &ndash; StatusCode Bit Assignments </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Field </P
></TD
><TD  
 valign="top"
><P 

>Bit Range </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Severity </P
></TD
><TD  
 valign="top"
><P 

>30:31 </P
></TD
><TD  
 valign="top"
><P 

>Indicates whether the <I>StatusCode</I> represents a good, bad or uncertain condition. These bits have the following meanings: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>Good Success </P
></TD
><TD  
 valign="top"
><P 

>00 </P
></TD
><TD  
 valign="top"
><P 

>Indicates that the operation was successful and the associated results may be used. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Uncertain Warning </P
></TD
><TD  
 valign="top"
><P 

>01 </P
></TD
><TD  
 valign="top"
><P 

>Indicates that the operation was partially successful and that associated results might not be suitable for some purposes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad Failure </P
></TD
><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

>Indicates that the operation failed and any associated results cannot be used. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>11 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. All <I>Clients</I> should treat a <I>StatusCode</I> with this severity as &ldquo;Bad&rdquo;. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Reserved </P
></TD
><TD  
 valign="top"
><P 

>29:29 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for use in OPC UA application specific APIs. This bit shall always be zero on the wire but may be used by OPC UA application specific APIs for API specific status codes. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>2828 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SubCode </P
></TD
><TD  
 valign="top"
><P 

>16:27 </P
></TD
><TD  
 valign="top"
><P 

>The code is a numeric value assigned to represent different conditions. Each code has a symbolic name and a numeric value. All descriptions in the OPC UA specification refer to the symbolic name. <A href="#LinkTarget_7686" href="#">
Part 6</A>
 maps the symbolic names onto a numeric value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>StructureChanged </P
></TD
><TD  
 valign="top"
><P 

>15:15 </P
></TD
><TD  
 valign="top"
><P 

>Indicates that the structure of the associated data value has changed since the last <I>Notification</I>. <I>Clients</I> should not process the data value unless they re-read the metadata. </P
><P 

><I>Servers</I> shall set this bit if the <I>DataTypeEncoding</I> used for a <I>Variable</I> changes. <A href="#LinkTarget_26731" href="#">
7.24</A>
 describes how the <I>DataTypeEncoding</I> is specified for a <I>Variable</I>. </P
><P 

><I>Servers</I> shall also set this bit if the <I>EnumStrings</I> <I>Property</I> of the <I>DataType</I> of the <I>Variable</I> changes. </P
><P 

>This bit is provided to warn <I>Clients</I> that parse complex data values that their parsing routines could fail because the serialized form of the data value has changed. </P
><P 

>This bit has meaning only for <I>StatusCodes</I> returned as part of a data change <I>Notifica</I><I>tion</I> or the <I>HistoryRead</I>. <I>StatusCodes</I> used in other contexts shall always set this bit to zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SemanticsChanged </P
></TD
><TD  
 valign="top"
><P 

>14:14 </P
></TD
><TD  
 valign="top"
><P 

>Indicates that the semantics of the associated data value have changed. <I>Clients</I> should not process the data value until they re-read the metadata associated with the <I>Variable</I>. </P
><P 

><I>Servers</I> should set this bit if the metadata has changed in way that could cause application errors if the <I>Client</I> does not re-read the metadata. For example, a change to the engineering units could create problems if the <I>Client</I> uses the value to perform calculations. </P
><P 

><A href="#LinkTarget_7690" href="#">
Part 8</A>
 defines the conditions where a <I>Server</I> shall set this bit for a DA <I>Variable</I>. Other specifications may define additional conditions. A <I>Server</I> may define other conditions that cause this bit to be set. </P
><P 

>This bit has meaning only for <I>StatusCodes</I> returned as part of a data change <I>Notification</I> or the <I>HistoryRead</I>. <I>StatusCodes</I> used in other contexts shall always set this bit to zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>12:13 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>InfoType </P
></TD
><TD  
 valign="top"
><P 

>10:11 </P
></TD
><TD  
 valign="top"
><P 

>The type of information contained in the info bits. These bits have the following meanings: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>NotUsed </P
></TD
><TD  
 valign="top"
><P 

>00 </P
></TD
><TD  
 valign="top"
><P 

>The info bits are not used and shall be set to zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataValue </P
></TD
><TD  
 valign="top"
><P 

>01 </P
></TD
><TD  
 valign="top"
><P 

>The <I>StatusCode</I> and its info bits are associated with a data value returned from the <I>Server</I>. This flag is only used in combination with <I>StatusCodes</I> defined in <A href="#LinkTarget_7690" href="#">
Part 8</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>1X </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. The info bits shall be ignored. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">InfoBits </P
></TD
><TD  
 valign="top"
><P 

>0:9 </P
></TD
><TD  
 valign="top"
><P 

>Additional information bits that qualify the <I>StatusCode</I>. </P
><P 

>The structure of these bits depends on the Info Type field. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><A href="#LinkTarget_27707" href="#">
<FONT size="+1">Table 171</A>
 describes the structure of the <I>InfoBits</I> when the Info Type is set to <I>DataValue</I> (01). </P
><P 

><B>Table 171 &ndash; DataValue InfoBits </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Info Type </P
></TD
><TD  
 valign="top"
><P 

>Bit Range </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>LimitBits </P
></TD
><TD  
 valign="top"
><P 

>8:9 </P
></TD
><TD  
 valign="top"
><P 

>The limit bits associated with the data value. The limits bits have the following meanings: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><B>Limit </P
></TD
><TD  
 valign="top"
><P 

>Bits </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>None </P
></TD
><TD  
 valign="top"
><P 

>00 </P
></TD
><TD  
 valign="top"
><P 

>The value is free to change. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Low </P
></TD
><TD  
 valign="top"
><P 

>01 </P
></TD
><TD  
 valign="top"
><P 

>The value is at the lower limit for the data source. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>High </P
></TD
><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

>The value is at the higher limit for the data source. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Constant </P
></TD
><TD  
 valign="top"
><P 

>11 </P
></TD
><TD  
 valign="top"
><P 

>The value is constant and cannot change. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Overflow </P
></TD
><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>This bit shall only be set if the <I>MonitoredItem</I> queue size is greater than 1. </P
><P 

>If this bit is set, not every detected change has been returned since the <I>Server</I>&rsquo;s queue buffer for the <I>MonitoredItem</I> reached its limit and had to purge out data. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>5:6 </P
></TD
><TD  
 valign="top"
><P 

>Reserved for future use. Shall always be zero. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HistorianBits </P
></TD
><TD  
 valign="top"
><P 

>0:4 </P
></TD
><TD  
 valign="top"
><P 

>These bits are set only when reading historical data. They indicate where the data value came from and provide information that affects how the <I>Client</I> uses the data value. The historian bits have the following meaning: </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

>Raw </P
></TD
><TD  
 valign="top"
><P 

>XXX00 </P
></TD
><TD  
 valign="top"
><P 

>A raw data value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Calculated </P
></TD
><TD  
 valign="top"
><P 

>XXX01 </P
></TD
><TD  
 valign="top"
><P 

>A data value which was calculated. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Interpolated </P
></TD
><TD  
 valign="top"
><P 

>XXX10 </P
></TD
><TD  
 valign="top"
><P 

>A data value which was interpolated. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reserved </P
></TD
><TD  
 valign="top"
><P 

>XXX11 </P
></TD
><TD  
 valign="top"
><P 

>Undefined. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Partial </P
></TD
><TD  
 valign="top"
><P 

>XX1XX </P
></TD
><TD  
 valign="top"
><P 

>A data value which was calculated with an incomplete interval. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Extra Data </P
></TD
><TD  
 valign="top"
><P 

>X1XXX </P
></TD
><TD  
 valign="top"
><P 

>A raw data value that hides other data at the same timestamp. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Multi Value </P
></TD
><TD  
 valign="top"
><P 

>1XXXX </P
></TD
><TD  
 valign="top"
><P 

>Multiple values match the <I>Aggregate</I> criteria (i.e. multiple minimum values at different timestamps within the same interval). </P
></TD
></TR
></TABLE
><P 

><A href="#LinkTarget_7692" href="#">
Part 11</A>
 describes how these bits are used in more detail. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_27844"
><B> Common StatusCodes </H3
><P 

><A href="#LinkTarget_27854" href="#">
</B>Table 172</A>
 defines the common <I>StatusCodes</I> for all <I>Service</I> results used in more than one service. It does not provide a complete list. These <I>StatusCodes</I> may also be used as operation level result code. <A href="#LinkTarget_7686" href="#">
Part 6</A>
 maps the symbolic names to a numeric value and provides a complete list of StatusCodes including codes defines in other parts. </P
><P 

><B>Table 172 &ndash; Common Service Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Symbolic Id  </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Good </P
></TD
><TD  
 valign="top"
><P 

>The operation was successful. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Good_CompletesAsynchronously </P
></TD
><TD  
 valign="top"
><P 

>The processing will complete asynchronously. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Good_SubscriptionTransferred </P
></TD
><TD  
 valign="top"
><P 

>The subscription was transferred to another session. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateHostNameInvalid </P
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>The <I>HostName</I> used to connect to a <I>Server</I> does not match a <I>HostName</I> in the <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerRevocationUnknown </P
></TD
><TD  
 valign="top"
><P 

>It was not possible to determine if the <I>Issuer</I> <I>Certificate</I> has been revoked. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerUseNotAllowed  </P
></TD
><TD  
 valign="top"
><P 

>The <I>Issuer</I> <I>Certificate</I> may not be used for the requested operation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerTimeInvalid </P
></TD
><TD  
 valign="top"
><P 

>An <I>Issuer</I> <I>Certificate</I> has expired or is not yet valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateIssuerRevoked </P
></TD
><TD  
 valign="top"
><P 

>The <I>Issuer</I> <I>Certificate</I> has been revoked. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateInvalid </P
></TD
><TD  
 valign="top"
><P 

>The <I>C</I><I>ertificate</I> provided as a parameter is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateRevocationUnknown </P
></TD
><TD  
 valign="top"
><P 

>It was not possible to determine if the <I>Certificate</I> has been revoked. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateRevoked </P
></TD
><TD  
 valign="top"
><P 

>The <I>Certificate</I> has been revoked. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateTimeInvalid </P
></TD
><TD  
 valign="top"
><P 

>The <I>Certificate</I> has expired or is not yet valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateUriInvalid </P
></TD
><TD  
 valign="top"
><P 

>The URI specified in the <I>ApplicationDescription</I> does not match the URI in the <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateUntrusted </P
></TD
><TD  
 valign="top"
><P 

>The <I>Certificate</I> is not trusted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CertificateUseNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>The <I>Certificate</I> may not be used for the requested operation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_CommunicationError </P
></TD
><TD  
 valign="top"
><P 

>A low level communication error occurred. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DataTypeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>The extension object cannot be (de)serialized because the data type id is not recognized. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DecodingError </P
></TD
><TD  
 valign="top"
><P 

>Decoding halted because of invalid data in the stream. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_EncodingError </P
></TD
><TD  
 valign="top"
><P 

>Encoding halted because of invalid data in the objects being serialized. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_EncodingLimitsExceeded </P
></TD
><TD  
 valign="top"
><P 

>The message encoding/decoding limits imposed by the <I>Communication Stack</I> have been exceeded. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IdentityTokenInvalid </P
></TD
><TD  
 valign="top"
><P 

>The user identity token is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IdentityTokenRejected </P
></TD
><TD  
 valign="top"
><P 

>The user identity token is valid but the server has rejected it. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_InternalError </P
></TD
><TD  
 valign="top"
><P 

>An internal error occurred as a result of a programming or configuration error. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_InvalidArgument </P
></TD
><TD  
 valign="top"
><P 

>One or more arguments are invalid. </P
><P 

>Each service defines parameter-specific <I>StatusCodes</I> and these <I>StatusCodes</I> shall be used instead of this general error code. This error code shall be used only by the <I>Communication Stack</I> and in services where it is defined in the list of valid <I>StatusCodes</I> for the service. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_InvalidState </P
></TD
><TD  
 valign="top"
><P 

>The operation cannot be completed because the object is closed, uninitialized or in some other invalid state. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_InvalidTimestamp </P
></TD
><TD  
 valign="top"
><P 

>The timestamp is outside the range allowed by the server. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_LicenseExpired </P
></TD
><TD  
 valign="top"
><P 

>The UA Server requires a license to operate in general or to perform a service or operation, but existing license is expired </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_LicenseLimitsExceeded </P
></TD
><TD  
 valign="top"
><P 

>The UA Server has limits on number of allowed operations / objects,  based on installed licenses, and these limits where exceeded. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_LicenseNotAvailable </P
></TD
><TD  
 valign="top"
><P 

>The UA Server does not have a license which is required to operate in general or to perform a service or operation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NothingToDo </P
></TD
><TD  
 valign="top"
><P 

>There was nothing to do because the client passed a list of operations with no elements. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_OutOfMemory </P
></TD
><TD  
 valign="top"
><P 

>Not enough memory to complete the operation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_RequestCancelledByClient </P
></TD
><TD  
 valign="top"
><P 

>The request was cancelled by the client. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_RequestTooLarge </P
></TD
><TD  
 valign="top"
><P 

>The request message size exceeds limits set by the server. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ResponseTooLarge </P
></TD
><TD  
 valign="top"
><P 

>The response message size exceeds limits set by the client. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_RequestHeaderInvalid </P
></TD
><TD  
 valign="top"
><P 

>The header for the request is missing or invalid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ResourceUnavailable </P
></TD
><TD  
 valign="top"
><P 

>An operating system resource is not available. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SecureChannelIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The specified secure channel is not longer valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SecurityChecksFailed </P
></TD
><TD  
 valign="top"
><P 

>An error occurred while verifying security. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServerHalted </P
></TD
><TD  
 valign="top"
><P 

>The server has stopped and cannot process any requests. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServerNotConnected </P
></TD
><TD  
 valign="top"
><P 

>The operation could not complete because the client is not connected to the server. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServerUriInvalid </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> URI is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ServiceUnsupported </P
></TD
><TD  
 valign="top"
><P 

>The server does not support the requested service. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SessionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The session id is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SessionClosed </P
></TD
><TD  
 valign="top"
><P 

>The session was closed by the client. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SessionNotActivated </P
></TD
><TD  
 valign="top"
><P 

>The session cannot be used because ActivateSession has not been called. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_Shutdown </P
></TD
><TD  
 valign="top"
><P 

>The operation was cancelled because the application is shutting down. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The subscription id is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_Timeout </P
></TD
><TD  
 valign="top"
><P 

>The operation timed out. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TimestampsToReturnInvalid </P
></TD
><TD  
 valign="top"
><P 

>The timestamps to return parameter is invalid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TooManyOperations </P
></TD
><TD  
 valign="top"
><P 

>The request could not be processed because it specified too many operations. </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Symbolic Id  </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_UnexpectedError </P
></TD
><TD  
 valign="top"
><P 

>An unexpected error occurred. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UnknownResponse </P
></TD
><TD  
 valign="top"
><P 

>An unrecognized response was received from the server. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>User does not have permission to perform the requested operation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>The view id does not refer to a valid view Node. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewTimestampInvalid </P
></TD
><TD  
 valign="top"
><P 

>The view timestamp is not available or not supported. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewParameterMismatchInvalid </P
></TD
><TD  
 valign="top"
><P 

>The view parameters are not consistent with each other. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ViewVersionInvalid </P
></TD
><TD  
 valign="top"
><P 

>The view version is not available or not supported. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><A href="#LinkTarget_28238" href="#">
<FONT size="+1">Table 173</A>
 defines the common <I>StatusCodes</I> for all operation level results used in more than one service. It does not provide a complete list. <A href="#LinkTarget_7686" href="#">
Part 6</A>
 maps the symbolic names to a numeric value and provides a complete list of StatusCodes including codes defines in other parts. The common <I>Service</I> result codes can be also contained in the operation level. </P
><P 

><B>Table 173 &ndash; Common Operation Level Result Codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">Symbolic Id  </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Good_Clamped </P
></TD
><TD  
 valign="top"
><P 

>The value written was accepted but was clamped. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Good_Overload </P
></TD
><TD  
 valign="top"
><P 

>Sampling has slowed down due to resource limitations. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Uncertain </P
></TD
><TD  
 valign="top"
><P 

>The value is uncertain but no specific reason is known. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad </P
></TD
><TD  
 valign="top"
><P 

>The value is bad but no specific reason is known. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_AttributeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The attribute is not supported for the specified node. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_BrowseDirectionInvalid </P
></TD
><TD  
 valign="top"
><P 

>The browse direction is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_BrowseNameInvalid </P
></TD
><TD  
 valign="top"
><P 

>The browse name is invalid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ContentFilterInvalid </P
></TD
><TD  
 valign="top"
><P 

>The content filter is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ContinuationPointInvalid </P
></TD
><TD  
 valign="top"
><P 

>The continuation point provided is not longer valid. </P
><P 

>This status is returned if the continuation point was deleted or the address space was changed between the browse calls. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DataEncodingInvalid </P
></TD
><TD  
 valign="top"
><P 

>The data encoding is invalid. </P
><P 

>This result is used if no <I>dataEncoding</I> can be applied because an <I>Attribute</I> other than <I>Value</I> was requested or the <I>DataType</I> of the <I>Value</I> <I>Attribute</I> is not a subtype of the <I>Structure</I> <I>DataType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DataEncodingUnsupported </P
></TD
><TD  
 valign="top"
><P 

>The server does not support the requested data encoding for the node. </P
><P 

>This result is used if a <I>dataEncoding</I> can be applied but the passed data encoding is not known to the <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_EventFilterInvalid </P
></TD
><TD  
 valign="top"
><P 

>The event filter is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_FilterNotAllowed </P
></TD
><TD  
 valign="top"
><P 

>A monitoring filter cannot be used in combination with the attribute specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_FilterOperandInvalid </P
></TD
><TD  
 valign="top"
><P 

>The operand used in a content filter is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_HistoryOperationInvalid </P
></TD
><TD  
 valign="top"
><P 

>The history details parameter is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_HistoryOperationUnsupported </P
></TD
><TD  
 valign="top"
><P 

>The server does not support the requested operation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeInvalid </P
></TD
><TD  
 valign="top"
><P 

>The syntax of the index range parameter is invalid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_IndexRangeNoData </P
></TD
><TD  
 valign="top"
><P 

>No data exists within the range of indexes specified. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoredItemFilterInvalid </P
></TD
><TD  
 valign="top"
><P 

>The monitored item filter parameter is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoredItemFilterUnsupported </P
></TD
><TD  
 valign="top"
><P 

>The server does not support the requested monitored item filter. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoredItemIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The monitoring item id does not refer to a valid monitored item. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoringModeInvalid </P
></TD
><TD  
 valign="top"
><P 

>The monitoring mode is invalid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoCommunication </P
></TD
><TD  
 valign="top"
><P 

>Communication with the data source is defined, but not established, and there is no last known value available. </P
><P 

>This status/sub-status is used for cached values before the first value is received or for Write and Call if the communication is not established.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoContinuationPoints </P
></TD
><TD  
 valign="top"
><P 

>The operation could not be processed because all continuation points have been allocated. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeClassInvalid </P
></TD
><TD  
 valign="top"
><P 

>The node class is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The syntax of the node id is not valid. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>The node id refers to a node that does not exist in the server address space. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NoDeleteRights </P
></TD
><TD  
 valign="top"
><P 

>The <I>Server</I> will not allow the node to be deleted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeNotInView </P
></TD
><TD  
 valign="top"
><P 

>The nodesToBrowse is not part of the view. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NotFound </P
></TD
><TD  
 valign="top"
><P 

>A requested item was not found or a search operation ended without success. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NotImplemented </P
></TD
><TD  
 valign="top"
><P 

>Requested operation is not implemented. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NotReadable </P
></TD
><TD  
 valign="top"
><P 

>The access level does not allow reading or subscribing to the <I>Node</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NotSupported </P
></TD
><TD  
 valign="top"
><P 

>The requested operation is not supported. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NotWritable </P
></TD
><TD  
 valign="top"
><P 

>The access level does not allow writing to the <I>Node</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ObjectDeleted </P
></TD
><TD  
 valign="top"
><P 

>The object cannot be used because it has been deleted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_OutOfRange </P
></TD
><TD  
 valign="top"
><P 

>The value was out of range. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ReferenceTypeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The reference type id does not refer to a valid reference type node. </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>Symbolic Id  </P
></TH
><TH 
 valign="top"
><P 

>Description </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SecurityModeInsufficient </P
></TD
><TD  
 valign="top"
><P 

>The security level is not high enough to complete the operation. </P
><P 

>A user may have the right to receive the data but the data can only be transferred through an encrypted channel or may require other settings with higher security level. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_SourceNodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The source node id does not refer to a valid node. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_StructureMissing </P
></TD
><TD  
 valign="top"
><P 

>A mandatory structured parameter was missing or null. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TargetNodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>The target node id does not refer to a valid node. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TypeDefinitionInvalid </P
></TD
><TD  
 valign="top"
><P 

>The type definition node id does not reference an appropriate type node. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_TypeMismatch </P
></TD
><TD  
 valign="top"
><P 

>The value supplied for the attribute is not of the same type as the attribute's value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_WaitingForInitialData </P
></TD
><TD  
 valign="top"
><P 

>Waiting for the server to obtain values from the underlying data source. </P
><P 

>After creating a <I>MonitoredItem</I> or after setting the MonitoringMode from DISABLED to REPORTING or SAMPLING, it may take some time for the server to actually obtain values for these items. In such cases the server can send a <I>Notification</I> with this status prior to the <I>Notification</I> with the first value or status from the data source. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_28538"
><FONT size="+1"><B>7.35 TimestampsToReturn </H2
><P 

></B>The <I>TimestampsToReturn</I> is an enumeration that specifies the <I>Timestamp</I> <I>Attributes</I> to be transmitted for <I>MonitoredItems</I> or <I>Nodes</I> in <I>Read</I> and <I>HistoryRead</I>. The values of this parameter are defined in <A href="#LinkTarget_28545" href="#">
Table 174</A>
. </P
><P 

><B>Table 174 &ndash; TimestampsToReturn Values </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Value </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SOURCE_0 </P
></TD
><TD  
 valign="top"
><P 

>Return the source timestamp. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SERVER_1 </P
></TD
><TD  
 valign="top"
><P 

>Return the <I>Server</I> timestamp. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>BOTH_2 </P
></TD
><TD  
 valign="top"
><P 

>Return both the source and <I>Server</I> timestamps. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NEITHER_3 </P
></TD
><TD  
 valign="top"
><P 

>Return neither timestamp. </P
><P 

>This is the default value for <I>MonitoredItems</I> if a <I>Variable</I> value is not being accessed. </P
><P 

>For<I> </I><I>HistoryRead</I> this is not a valid setting. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_28580"
><FONT size="+1"><B>7.36 UserIdentityToken parameters </H2
><H3 
 ID="LinkTarget_28581"
> Overview </H3
><P 

></B>The <I>UserIdentityToken</I> structure used in the <I>Server</I> <I>Service</I> <I>Set</I> allows <I>Clients</I> to specify the identity of the user they are acting on behalf of. The exact mechanism used to identify users depends on the system configuration. The different types of identity tokens are based on the most common mechanisms that are used in systems today. <A href="#LinkTarget_28592" href="#">
Table 175</A>
 defines the current set of user identity tokens. The <I>ExtensibleParameter</I> type is defined in <A href="#LinkTarget_24217" href="#">
7.12</A>
. </P
><P 

><B>Table 175 &ndash; UserIdentityToken parameterTypeIds </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AnonymousIdentityToken </P
></TD
><TD  
 valign="top"
><P 

>No user information is available. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UserNameIdentityToken </P
></TD
><TD  
 valign="top"
><P 

>A user identified by user name and password. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>X509IdentityToken </P
></TD
><TD  
 valign="top"
><P 

>A user identified by an X509v3 <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IssuedIdentityToken </P
></TD
><TD  
 valign="top"
><P 

>A user identified by a WS-<I>SecurityToken</I>. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The <I>Client</I> shall always prove possession of a <I>UserIdentityToken </I>when it passes it to the <I>Server</I>. Some tokens include a secret such as a password which the <I>Server</I> will accept as proof. In order to protect these secrets the <I>Token</I> may be encrypted before it is passed to the <I>Server</I>. The profiles defined in <A href="#LinkTarget_7688" href="#">
Part 7</A>
 specify where encryption shall be applied. Other types of tokens allow the <I>Client</I> to create a signature with the secret associated with the <I>Token</I>. In these cases, the <I>Client</I> proves possession of a <I>UserIdentityToken </I>by appending the last <I>ServerNonce</I> to the <I>ServerCertificate</I> and uses the secret to produce a <I>Signature</I> which is passed to the <I>Server</I>.  </P
><P 

>Each <I>UserIdentityToken</I> allowed by an <I>Endpoint</I> shall have a <I>UserTokenPolicy</I> specified in the <I>EndpointDescription</I>. The <I>UserTokenPolicy</I> specifies what <I>SecurityPolicy</I> to use when encrypting or signing. If this <I>SecurityPolicy</I> is omitted then the <I>Client</I> uses the <I>SecurityPolicy</I> in the <I>EndpointDescription</I>. If the matching <I>SecurityPolicy</I> is set to None then no encryption or signature is required. It is recommended that Applications never set the <I>SecurityPolicy</I> to None for UserTokens that include a secret because these secrets could be used by an attacker to gain access to the system. </P
><P 

><A href="#LinkTarget_28638" href="#">
Table 176</A>
 describes how to serialize <I>UserIdentityTokens</I> before applying encryption. </P
><P 

><B>Table 176 &ndash; UserIdentityToken Encrypted Token Format </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>length </P
></TD
><TD  
 valign="top"
><P 

>Byte[4] </P
></TD
><TD  
 valign="top"
><P 

>The length of the encrypted data including the <I>ServerNonce</I> but excluding the <I>length</I> field. </P
><P 

>This field is a 4 byte unsigned integer encoded with the least significant bytes appearing first. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>tokenData </P
></TD
><TD  
 valign="top"
><P 

>Byte[*] </P
></TD
><TD  
 valign="top"
><P 

>The token data. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>serverNonce </P
></TD
><TD  
 valign="top"
><P 

>Byte[*] </P
></TD
><TD  
 valign="top"
><P 

>The last <I>ServerNonce</I> returned by the server in the <I>CreateSession</I> or <I>ActivateSession</I> response. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_28674"
><FONT size="+1"><B> AnonymousIdentityToken </H3
><P 

></B>The <I>AnonymousIdentityToken </I>is used to indicate that the Client has no user credentials. </P
><P 

><A href="#LinkTarget_28681" href="#">
Table 177</A>
 defines the <I>AnonymousIdentityToken</I> parameter. </P
><P 

><B>Table 177 &ndash; AnonymousIdentityToken </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AnonymousIdentityToken </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>An anonymous user identity. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> policyId </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>An identifier for the <I>UserTokenPolicy</I> that the token conforms to. </P
><P 

>The <I>UserTokenPolicy</I> structure is defined in <A href="#LinkTarget_29005" href="#">
7.37</A>
. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_28714"
><FONT size="+1"><B> UserNameIdentityToken </H3
><P 

></B>The <I>UserNameIdentityToken</I> is used to pass simple username/password credentials to the <I>Server</I>. </P
><P 

>This token shall be encrypted by the <I>Client</I> if required by the<I> Server</I> in the <I>SecurityPolicy</I> of the <I>UserTokenPolicy</I> in the <I>EndpointDescription</I>. The <I>Server</I> should specify a <I>SecurityPolicy</I> for the <I>UserTokenPolicy</I> if the <I>SecureChannel</I> has a <I>SecurityPolicy</I> of None and no transport layer encryption is available. If None is specified for the <I>UserTokenPolicy</I> and <I>SecurityPolicy</I> is None then the password only contains the UTF-8 encoded password. This configuration should not be used unless the network is encrypted in some other manner such as a VPN. The use of this configuration without network encryption would result in a serious security fault, in that it would cause the appearance of a secure user access, but it would make the password visible in clear text. </P
><P 

>If the token is encrypted the password shall be converted to a UTF8 <I>ByteString </I>and then serialized as shown in <A href="#LinkTarget_28638" href="#">
Table 176</A>
. </P
><P 

>The <I>Server</I> shall decrypt the password and verify the <I>ServerNonce</I>. </P
><P 

>If the <I>SecurityPolicy</I> is None then the password only contains the UTF-8 encoded password. </P
><P 

><A href="#LinkTarget_28730" href="#">
Table 178</A>
 defines the <I>UserNameIdentityToken</I> parameter. </P
><P 

><B>Table 178 &ndash; UserNameIdentityToken </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>UserNameIdentityToken </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>UserName value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> policyId </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>An identifier for the <I>UserTokenPolicy</I> that the token conforms to. </P
><P 

>The <I>UserTokenPolicy</I> structure is defined in <A href="#LinkTarget_29005" href="#">
7.37</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> userName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A string that identifies the user. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> password </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>The password for the user. The password can be an empty string. </P
><P 

>This parameter shall be encrypted with the Server&rsquo;s Certificate using the algorithm specified by the <I>SecurityPolicy.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> encryptionAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A string containing the URI of the <I>AsymmetricEncryptionAlgorithm</I>. </P
><P 

>The URI string values are defined names that may be used as part of the security profiles specified in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. </P
><P 

>This parameter is null if the password is not encrypted. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><A href="#LinkTarget_28802" href="#">
<FONT size="+1">Table 179</A>
 describes the dependencies for selecting the <I>AsymmetricEncryptionAlgorithm</I> for the <I>UserNameIdentityToken</I>. The <I>SecureChannel</I> <I>SecurityPolicy</I> URI is specified in the <I>EndpointDescription</I> and used in subsequent OpenSecureChannel request. The <I>UserTokenPolicy</I> <I>SecurityPolicy</I> URI is specified in the <I>EndpointDescription</I>. The <I>encryptionAlgorithm</I> is specified in </P
><P 

>the <I>UserNameIdentityToken</I> or <I>IssuedIdentityToken</I> provided by the <I>Client</I> in the <I>ActivateSession</I> call. The <I>SecurityPolicy</I> Other in the table refers to any <I>SecurityPolicy</I> other than None. The selection of the <I>EncryptionAlgorithm</I> is based on the <I>UserTokenPolicy</I>. The <I>SecurChannel</I> <I>SecurityPolicy</I> is used if the <I>UserTokenPolicy</I> is null or empty. </P
><P 

><B>Table 179 &ndash; EncryptionAlgorithm selection </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">SecureChannel SecurityPolicy </P
></TD
><TD  
 valign="top"
><P 

>UserTokenPolicy SecurityPolicy </P
></TD
><TD  
 valign="top"
><P 

>UserNameIdentityToken EncryptionAlgorithm </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Security Policy - None </P
></TD
><TD  
 valign="top"
><P 

>Null or empty </P
></TD
><TD  
 valign="top"
><P 

>No encryption </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Security Policy - None </P
></TD
><TD  
 valign="top"
><P 

>Security Policy - None </P
></TD
><TD  
 valign="top"
><P 

>No encryption </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Security Policy - None </P
></TD
><TD  
 valign="top"
><P 

>Security Policy - Other </P
></TD
><TD  
 valign="top"
><P 

>Asymmetric algorithm for &quot;Other&quot; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Security Policy - Other </P
></TD
><TD  
 valign="top"
><P 

>Null or empty </P
></TD
><TD  
 valign="top"
><P 

>Asymmetric algorithm for &quot;Other&quot; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Security Policy - Other </P
></TD
><TD  
 valign="top"
><P 

>Security Policy - Yet another </P
></TD
><TD  
 valign="top"
><P 

>Asymmetric algorithm for &quot;Yet another&quot; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Security Policy - Other </P
></TD
><TD  
 valign="top"
><P 

>Security Policy - Other </P
></TD
><TD  
 valign="top"
><P 

>Asymmetric algorithm for &quot;Other&quot; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Security Policy - Other </P
></TD
><TD  
 valign="top"
><P 

>Security Policy - None </P
></TD
><TD  
 valign="top"
><P 

>No encryption </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_28869"
><FONT size="+1"><B> X509IdentityTokens </H3
><P 

></B>The <I>X509IdentiyToken </I>is used to pass an X509v3 <I>Certificate</I> which is issued by the user. </P
><P 

>This token shall always be accompanied by a signature in the <I>userTokenSignature</I> parameter of <I>ActivateSession</I> if required by the <I>SecurityPolicy</I>. The <I>Server</I> should specify a <I>SecurityPolicy</I> for the <I>UserTokenPolicy</I> if the <I>SecureChannel</I> has a <I>SecurityPolicy</I> of None. </P
><P 

><A href="#LinkTarget_28877" href="#">
Table 180</A>
 defines the X509IdentityToken parameter. </P
><P 

><B>Table 180 &ndash; X509 Identity Token </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>X509IdentityToken </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>X509v3 value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> policyId </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>An identifier for the <I>UserTokenPolicy</I> that the token conforms to. </P
><P 

>The <I>UserTokenPolicy</I> structure is defined in <A href="#LinkTarget_29005" href="#">
7.37</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> certificateData </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>The X509 <I>Certificate</I> in DER format. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_28918"
><FONT size="+1"><B> IssuedIdentityToken </H3
><P 

></B>The <I>IssuedIdentityToken</I> is used to pass WS-Security compliant <I>SecurityToken</I>s to the <I>Server</I>. </P
><P 

>WS-Security defines a number of token profiles that may be used to represent different types of <I>SecurityTokens</I>. For example, Kerberos and SAML tokens have WSS token profiles and shall be exchanged in OPC UA as XML Security Tokens. </P
><P 

>The WSS, X509 and UserName tokens should not be exchanged as XML security tokens. OPC UA applications should use the appropriate OPC UA identity tokens to pass the information contained in these types of WSS <I>SecurityTokens. </I></P
><P 

>These tokens may be encrypted or require a signature. <A href="#LinkTarget_7688" href="#">
Part 7</A>
 defines profiles that include user related security; they also include any requirements for encryption and signatures. Additional security profiles specify encryption and signature algorithms. See <A href="#LinkTarget_28802" href="#">
Table 179</A>
 for the selection of the <I>AsymmetricEncryptionAlgorithm</I>. </P
><P 

>If the token is encrypted then the XML shall be converted to an UTF8 <I>ByteString</I> and then serialized as shown in <A href="#LinkTarget_28638" href="#">
Table 176</A>
. </P
><P 

>The <I>Server</I> shall decrypt the tokenData and verify the <I>ServerNonce</I>. </P
><P 

>If the <I>SecurityPolicy</I> is None or if the token only requires signing then the tokenData contains the UTF-8 encoded XML representation of the token. </P
><P 

><A href="#LinkTarget_28945" href="#">
Table 181</A>
 defines the <I>IssuedIdentityToken</I> parameter. </P
><P 

><B>Table 181 &ndash; IssuedIdentityToken </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>IssuedIdentityToken </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>WSS value. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> policyId </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>An identifier for the <I>UserTokenPolicy</I> that the token conforms to. </P
><P 

>The <I>UserTokenPolicy</I> structure is defined in <A href="#LinkTarget_29005" href="#">
7.37</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> tokenData </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>The XML representation of the token.<I> </I></P
><P 

>This parameter may be encrypted with the <I>Server&rsquo;s</I> <I>Certificate</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> encryptionAlgorithm </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A string containing the URI of the <I>AsymmetricEncryptionAlgorithm</I>. </P
><P 

>The list of OPC UA-defined names that may be used is specified in <A href="#LinkTarget_7688" href="#">
Part 7</A>
. </P
><P 

>This parameter is null if the token is not encrypted. </P
><P 

>The <I>encryptionAlgorithm</I> is <I>AsymmetricEncryptionAlgorithm</I> for the security policy identified by the <I>securityPolicyUri</I> for the <I>UserTokenPolicy</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

> </P
><H2 
 ID="LinkTarget_29005"
><FONT size="+1"><B>7.37 UserTokenPolicy </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_29012" href="#">
Table 182</A>
. </P
><P 

><B>Table 182 &ndash; UserTokenPolicy </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>UserTokenPolicy </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Specifies a <I>UserIdentityToken </I>that a<I> </I><I>Server </I>will accept<I>.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> policyId </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>An identifier for the UserTokenPolicy assigned by the Server. </P
><P 

>The Client specifies this value when it constructs a UserIdentityToken that conforms to the policy. </P
><P 

>This value is only unique within the context of a single Server. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> tokenType </P
></TD
><TD  
 valign="top"
><P 

>Enum </P
><P 

>UserIdentity TokenType </P
></TD
><TD  
 valign="top"
><P 

>The type of user identity token required. </P
><P 

>This value is an enumeration with one of the following values: </P
><P 

> ANONYMOUS_0  No token is required. </P
><P 

> USERNAME_1   A username/password token. </P
><P 

> CERTIFICATE_2   An X509v3 <I>C</I><I>ertificate</I> token. </P
><P 

> ISSUEDTOKEN_3 Any WS-Security defined token. </P
><P 

> A tokenType of ANONYMOUS indicates that the <I>Server</I> does not require any user identification. In this case the <I>Client</I> <I>A</I><I>pplication </I><I>I</I><I>nstance</I> <I>Certificate</I> is used as the user identification. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> issuedTokenType </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>A URI for the type of token. </P
><P 

><A href="#LinkTarget_7686" href="#">
Part 6</A>
 defines URIs for common issued token types. </P
><P 

>Vendors may specify their own token. </P
><P 

>This field may only be specified if <I>TokenType</I> is ISSUEDTOKEN_3. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> issuerEndpointUrl </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>An optional URL for the token issuing service. </P
><P 

>The meaning of this value depends on the <I>issuedTokenType.</I><I> </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> securityPolicyUri </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>The security policy to use when encrypting or signing the <I>User</I><I>Identity</I><I>Token</I> when it is passed to the <I>Server</I> in the <I>ActivateSession</I> request. Clause <A href="#LinkTarget_28580" href="#">
7.36</A>
 describes how this parameter is used. </P
><P 

>The security policy for the SecureChannel is used if this value is null or empty. </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_29095"
><FONT size="+1"><B>7.38 ViewDescription </H2
><P 

></B>The components of this parameter are defined in <A href="#LinkTarget_29102" href="#">
Table 183</A>
. </P
><P 

><B>Table 183 &ndash; ViewDescription </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ViewDescription </P
></TD
><TD  
 valign="top"
><P 

>structure </P
></TD
><TD  
 valign="top"
><P 

>Specifies a <I>View.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> viewId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>View</I> to <I>Query</I>. A null value indicates the entire <I>AddressSpace.</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> timestamp </P
><P 

><FONT size="+1"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">UtcTime </P
></TD
><TD  
 valign="top"
><P 

>The time date desired. The corresponding version is the one with the closest previous creation timestamp. Either the <I>Timestamp</I> or the <I>viewVersion</I> parameter may be set by a <I>Client</I>, but not both. If <I>ViewVersion</I> is set this parameter shall be null. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> viewVersion </P
></TD
><TD  
 valign="top"
><P 

>UInt32 </P
></TD
><TD  
 valign="top"
><P 

>The version number for the <I>View </I>desired. When <I>Nodes</I> are added to or removed from a <I>View</I>, the value of a View&rsquo;s <I>ViewVersion Property</I> is updated. Either the <I>Timestamp</I> or the <I>viewVersion</I> parameter may be set by a <I>Client</I>, but not both. The ViewVersion <I>Property</I> is defined in <A href="#LinkTarget_7682" href="#">
Part 3</A>
. If <I>timestamp</I> is set this parameter shall be 0. The current view is used if timestamp is null and viewVersion is 0. </P
></TD
></TR
></TABLE
><P 

> </P
><H1 
 ID="LinkTarget_29151"
><FONT size="+1"><B>Annex A </B>(informative)<B>  BNF definitions  </H1
><H2 
 ID="LinkTarget_29153"
><FONT size="+1">A.1 Overview over BNF </H2
><P 

><FONT size="+1"></B>The BNF (Backus-Naur form) used in this annex uses `&lt;&acute; and `&gt;&acute; to mark symbols, `[&acute; and `]&acute; to identify optional paths and `|&acute; to identify alternatives. If the &lsquo;(&lsquo; and &lsquo;)&rsquo; symbols are used, it indicates sets. </P
><H2 
 ID="LinkTarget_29155"
><FONT size="+1"><B>A.2 BNF of RelativePath </H2
><P 

><FONT size="+1"></B>A <I>RelativePath</I> is a structure that describes a sequence of <I>References</I> and <I>Nodes</I> to follow. This annex describes a text format for a <I>RelativePath</I> that can be used in documentation or in files used to store configuration information. </P
><P 

>The components of a <I>RelativePath</I> text format are specified in <A href="#LinkTarget_29163" href="#">
Table A.1</A>
. </P
><P 

><B>Table A.1 &ndash; RelativePath </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbol </P
></TD
><TD  
 valign="top"
><P 

>Meaning </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>/ </P
></TD
><TD  
 valign="top"
><P 

>The forward slash character indicates that the <I>Server</I> is to follow any subtype of <I>HierarchicalReferences</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>. </P
></TD
><TD  
 valign="top"
><P 

>The period (dot) character indicates that the <I>Server</I> is to follow any subtype of a <I>Aggregates</I> <I>ReferenceType</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&lt;[#!ns:]ReferenceType&gt; </P
></TD
><TD  
 valign="top"
><P 

>A string delimited by the &lsquo;&lt;&rsquo; and &lsquo;&gt;&rsquo; symbols specifies the <I>BrowseName</I> of a <I>ReferenceType</I> to follow. By default, any <I>References</I> of the subtypes the <I>ReferenceType</I> are followed as well. A &lsquo;#&rsquo; placed in front of the BrowseName indicates that subtypes should not be followed. </P
><P 

> A &lsquo;!&rsquo; in front of the BrowseName is used to indicate that the inverse <I>Reference</I> should be followed.  </P
><P 

>The <I>BrowseName</I> may be qualified with a namespace index (indicated by a numeric prefix followed by a colon). This namespace index is used specify the namespace component of the <I>BrowseName</I> for the <I>ReferenceType.</I> If the namespace prefix is omitted then namespace index 0 is used. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>[ns:]BrowseName </P
></TD
><TD  
 valign="top"
><P 

>A string that follows a &lsquo;/&rsquo;, &lsquo;.&rsquo; or &lsquo;&gt;&rsquo; symbol specifies the <I>BrowseName</I> of a target <I>Node</I> to return or follow. This BrowseName may be prefixed by its namespace index. If the namespace prefix is omitted then namespace index 0 is used. </P
><P 

>Omitting the final <I>BrowseNam</I><I>e</I> from a path is equivalent to a wildcard operation that matches all <I>Nodes</I> which are the target of the <I>Reference</I> specified by the path. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&amp; </P
></TD
><TD  
 valign="top"
><P 

>The &amp; sign character is the escape character. It is used to specify reserved characters that appear within a <I>BrowseNa</I><I>me</I>. A reserved character is escaped by inserting the &lsquo;&amp;&rsquo; in front of it. Examples of <I>BrowseNames</I> with escaped characters are: </P
><P 

> Received browse path name Resolves to </P
><P 

> &ldquo;&amp;/Name_1&rdquo;    &ldquo;/Name_1&rdquo;  </P
><P 

> &ldquo;&amp;.Name_2&rdquo;    &ldquo;.Name_2&rdquo;  </P
><P 

> &ldquo;&amp;:Name_3&rdquo;    &ldquo;:Name_3&rdquo; </P
><P 

> &ldquo;&amp;&amp;Name_4&rdquo;   &ldquo;&amp;Name_4&rdquo; </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><A href="#LinkTarget_29215" href="#">
<FONT size="+1">Table A.2</A>
 provides <I>RelativePaths </I>examples in text format. </P
><P 

><B>Table A.2 &ndash; <I>RelativePath</I> Examples </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Browse Path </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>&ldquo;/2:Block&amp;.Output&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Follows any forward hierarchical<I> </I><I>Reference</I> with target <I>BrowseName</I> = &ldquo;2:Block.Output&rdquo;. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&ldquo;/3:Truck.0:NodeVersion&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Follows any forward hierarchical<I> </I><I>Reference</I> with target <I>BrowseName</I> = &ldquo;3:Truck&rdquo; and from there a forward <I>Aggregates Reference </I>to a target with <I>BrowseName</I> &ldquo;0:NodeVersion&rdquo;. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&ldquo;&lt;1:ConnectedTo&gt;1:Boiler/1:HeatSensor&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Follows any forward Reference with a <I>BrowseName </I>= &lsquo;1:ConnectedTo&rsquo; and finds targets with <I>BrowseName</I> = &lsquo;1:Boiler&rsquo;. From there follows any hierarchical <I>Reference</I> and find targets with <I>BrowseName</I> = &lsquo;1:HeatSensor&rsquo;. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&ldquo;&lt;1:ConnectedTo&gt;1:Boiler/&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Follows any forward Reference with a <I>BrowseName </I>= &lsquo;1:ConnectedTo&rsquo; and finds targets with <I>BrowseName</I> = &lsquo;1:Boiler&rsquo;. From there it finds all targets of hierarchical <I>References</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&ldquo;&lt;0:HasChild&gt;2:Wheel&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Follows any forward Reference with a <I>BrowseName </I>= &lsquo;HasChild&rsquo; and qualified with the default OPC UA namespace. Then find targets with <I>BrowseName</I> = &lsquo;Wheel&rsquo; qualified with namespace index &lsquo;2&rsquo;. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&ldquo;&lt;!HasChild&gt;Truck&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Follows any inverse Reference with a <I>BrowseName </I>= &lsquo;HasChild&rsquo;. Then find targets with <I>BrowseName</I> = &lsquo;Truck&rsquo;. In both cases, the namespace component of the <I>BrowseName</I> is assumed to be 0. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>&ldquo;&lt;0:HasChild&gt;&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Finds all targets of forward <I>References</I> with a <I>BrowseName </I>= &lsquo;HasChild&rsquo; and qualified with the default OPC UA namespace. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The following BNF describes the syntax of the <I>RelativePath</I> text format. </P
><P 

>&lt;relative-path&gt; ::= &lt;reference-type&gt; &lt;browse-name&gt; [relative-path] </P
><P 

> </P
><P 

>&lt;reference-type&gt; ::= '/' | '.' | '&lt;' ['#'] ['!'] &lt;browse-name&gt; '&gt;' </P
><P 

> </P
><P 

>&lt;browse-name&gt; ::= [&lt;namespace-index&gt; ':'] &lt;name&gt; </P
><P 

> </P
><P 

>&lt;namespace-index&gt; ::= &lt;digit&gt; [&lt;digit&gt;] </P
><P 

> </P
><P 

>&lt;digit&gt;  ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' </P
><P 

> </P
><P 

>&lt;name&gt; </P
><P 

> ::= (&lt;name-char&gt; | '&amp;' &lt;reserved-char&gt;) [&lt;name&gt;] </P
><P 

> </P
><P 

>&lt;reserved-char&gt; ::= '/' | '.' | '&lt;' | '&gt;' | ':' | '#' | '!' | '&amp;' </P
><P 

> </P
><P 

>&lt;name-char&gt;  ::= All valid characters for a String (see <A href="#LinkTarget_7682" href="#">
Part 3</A>
) excluding reserved-chars. </P
><H2 
 ID="LinkTarget_29289"
><FONT size="+1"><B>A.3 BNF of NumericRange </H2
><P 

><FONT size="+1"></B>The following BNF describes the syntax of the <I>NumericRange</I> parameter type. </P
><P 

>&lt;numeric-range&gt; ::= &lt;dimension&gt; [',' &lt;dimension&gt;] </P
><P 

> </P
><P 

>&lt;dimension&gt;  ::= &lt;index&gt; [':' &lt;index&gt;] </P
><P 

> </P
><P 

>&lt;index&gt;  ::= &lt;digit&gt; [&lt;digit&gt;] </P
><P 

> </P
><P 

>&lt;digit&gt;  ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' </P
><P 

> </P
><H1 
 ID="LinkTarget_29299"
><FONT size="+1"><B>Annex B </B>(informative)<B>  Content Filter and Query Examples  </H1
><H2 
 ID="LinkTarget_29301"
><FONT size="+1">B.1 Simple ContentFilter examples </H2
><H3 
 ID="LinkTarget_29302"
><FONT size="+1">B.1.1 Overview </H3
><P 

></B>These examples provide fairly simple content filters. Filter similar to these examples may be used in processing events. </P
><P 

>The following conventions apply to these examples with regard to how Attribute operands are used (for a definition of this operand see <A href="#LinkTarget_23348" href="#">
7.4.4</A>
): </P
><DL 

><DD 

>&#61623; AttributeOperand: Refers to a <I>Node,</I> an <I>Attribute</I> of a <I>Node </I>or the <I>Value</I> <I>Attribute</I> of a <I>Property</I> associated with a <I>Node</I>. In the examples, the character names of NodeIds are used instead of an actual nodeId, this also applies to Attribute Ids. </DD
><DD 

>&#61623; The string representation of relative paths is used instead of the actual structure. </DD
><DD 

>&#61623; The NamespaceIndex used in all examples is 12 (it could just as easily have been 4 or 23 or any value). For more information about NamespaceIndex, see <A href="#LinkTarget_7682" href="#">
Part 3</A>
. The use of the NamespaceIndex illustrates that the information model being used in the examples is not a model defined by this standard, but one created for the examples. </DD
></DL
><H3 
 ID="LinkTarget_29322"
><B>B.1.2 Example 1 </H3
><P 

></B>For example the logic describe by &lsquo;(((AType.A = 5) or InList(BType.B, 3,5,7)) and BaseObjectType.displayName LIKE &ldquo;Main%&rdquo;)&rsquo; would result in a logic tree as shown in <A href="#LinkTarget_29423" href="#">
Figure B.1</A>
 and a ContentFilter as shown in <A href="#LinkTarget_29429" href="#">
Table B.1</A>
. For this example to return anything AType and BType both must be subtypes of BaseObjectType, or the resulting &ldquo;And&rdquo; operation would always be false. </P
><P 

> </P
><IMG width="47" height="41"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_0.jpg" ><IMG width="46" height="49"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_1.jpg" ><IMG width="47" height="41"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_2.jpg" ><IMG width="108" height="56"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_3.jpg" ><IMG width="31" height="31"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_4.jpg" ><IMG width="21" height="21"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_5.jpg" ><IMG width="30" height="30"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_6.jpg" ><IMG width="38" height="29"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_7.jpg" ><IMG width="10" height="12"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_8.jpg" ><IMG width="32" height="25"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_9.jpg" ><IMG width="22" height="13"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_10.jpg" ><IMG width="18" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_11.jpg" ><IMG width="28" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_12.jpg" ><IMG width="38" height="29"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_13.jpg" ><IMG width="28" height="12"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_14.jpg" ><IMG width="38" height="36"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_15.jpg" ><IMG width="28" height="12"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_16.jpg" ><IMG width="97" height="26"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_17.jpg" ><IMG width="94" height="14"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_18.jpg" ><IMG width="24" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_19.jpg" ><IMG width="14" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_20.jpg" ><IMG width="45" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_21.jpg" ><IMG width="97" height="45"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_22.jpg" ><IMG width="47" height="29"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_23.jpg" ><IMG width="40" height="12"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_24.jpg" ><IMG width="49" height="26"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_25.jpg" ><IMG width="42" height="14"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_26.jpg" ><IMG width="29" height="29"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_27.jpg" ><IMG width="29" height="29"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_28.jpg" ><IMG width="29" height="29"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_29.jpg" ><IMG width="38" height="29"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_30.jpg" ><IMG width="14" height="12"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_31.jpg" ><IMG width="49" height="26"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_32.jpg" ><IMG width="40" height="12"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_33.jpg" ><IMG width="28" height="31"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_34.jpg" ><IMG width="36" height="31"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_35.jpg" ><IMG width="28" height="31"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_36.jpg" ><IMG width="88" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_37.jpg" ><IMG width="115" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_38.jpg" ><IMG width="78" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_39.jpg" ><P 

><B>Figure B.1 &ndash; Filter Logic Tree Example </P
><P 

><A href="#LinkTarget_29429" href="#">
</B>Table B.1</A>
 describes the elements, operators and operands used in the example. </P
><P 

><B>Table B.1 &ndash; ContentFilter Example </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>Operator </P
></TD
><TD  
 valign="top"
><P 

>Operand[0] </P
></TD
><TD  
 valign="top"
><P 

>Operand[1] </P
></TD
><TD  
 valign="top"
><P 

>Operand[2] </P
></TD
><TD  
 valign="top"
><P 

>Operand[3] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>And </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 1 </P
></TD
><TD  
 valign="top"
><P 

>Element Operand = 4 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Or </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 2 </P
></TD
><TD  
 valign="top"
><P 

>Element Operand = 3 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Equals </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: AType, BrowsePath: &ldquo;.12:A&rdquo;, </P
><P 

>Attribute:value </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;5&rsquo; </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>InList </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: BType, BrowsePath: &ldquo;.12:B&rdquo;, </P
><P 

>Attribute:value </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;3&rsquo; </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;5&rsquo; </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;7&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>Like </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: BaseObjectType, BrowsePath: &ldquo;.&rdquo;, Attribute: displayName </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &ldquo;Main%&rdquo; </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_29519"
><FONT size="+1"><B>B.1.3 Example 2 </H3
><P 

></B>As another example a filter to select all <I>SystemEvents</I> (including derived types) that are contained in the Area1 <I>View</I> or the Area2 <I>View</I> would result in a logic tree as shown in <A href="#LinkTarget_29598" href="#">
Figure B.2</A>
 and a ContentFilter as shown in <A href="#LinkTarget_29604" href="#">
Table B.2</A>
. </P
><P 

> </P
><IMG width="427" height="37"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_40.jpg" ><IMG width="94" height="33"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_41.jpg" ><IMG width="95" height="61"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_42.jpg" ><IMG width="35" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_43.jpg" ><IMG width="23" height="15"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_44.jpg" ><IMG width="3" height="72"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_45.jpg" ><IMG width="3" height="60"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_46.jpg" ><IMG width="43" height="32"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_47.jpg" ><IMG width="34" height="12"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_48.jpg" ><IMG width="43" height="32"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_49.jpg" ><IMG width="34" height="12"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_48.jpg" ><IMG width="3" height="101"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_50.jpg" ><IMG width="73" height="32"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_51.jpg" ><IMG width="44" height="14"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_52.jpg" ><IMG width="108" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_53.jpg" ><IMG width="98" height="16"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_54.jpg" ><IMG width="27" height="49"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_55.jpg" ><IMG width="27" height="49"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_56.jpg" ><IMG width="35" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_57.jpg" ><IMG width="14" height="15"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_58.jpg" ><IMG width="55" height="32"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_59.jpg" ><IMG width="39" height="13"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_60.jpg" ><IMG width="55" height="32"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_61.jpg" ><IMG width="39" height="13"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_62.jpg" ><IMG width="28" height="31"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_63.jpg" ><IMG width="36" height="31"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_64.jpg" ><IMG width="28" height="31"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_65.jpg" ><IMG width="88" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_37.jpg" ><IMG width="115" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_38.jpg" ><IMG width="78" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_39.jpg" ><P 

><B>Figure B.2 &ndash; Filter Logic Tree Example </P
><P 

><A href="#LinkTarget_29604" href="#">
</B>Table B.2</A>
 describes the elements, operators and operands used in the example. </P
><P 

><B>Table B.2 &ndash; ContentFilter Example </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>Operator </P
></TD
><TD  
 valign="top"
><P 

>Operand[0] </P
></TD
><TD  
 valign="top"
><P 

>Operand[1] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>And </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 1  </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 4 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Or </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 2 </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 3 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>InView </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: Area1, BrowsePath: &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>InView </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: Area2, BrowsePath: &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>OfType </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: SystemEventType, BrowsePath: &ldquo;.&rdquo;, Attribute: NodeId&rdquo; </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

> </P
><H2 
 ID="LinkTarget_29667"
><FONT size="+1"><B>B.2 Complex Examples of Query Filters </H2
><H3 
 ID="LinkTarget_29668"
><FONT size="+1">B.2.1 Overview </H3
><P 

></B>These query examples illustrate complex filters<I>. </I>The following conventions apply to these examples with regard to Attribute operands (for a definition of these operands, see <A href="#LinkTarget_23348" href="#">
7.4.4</A>
). </P
><DL 

><DD 

>&#61623; AttributeOperand: Refers to a <I>Node</I>, an <I>Attribute</I> of a <I>Node</I> or the <I>Value</I> <I>Attribute</I> of a <I>Property</I> associated with a <I>Node</I>. In the examples character names of <I>ExpandedNodeId</I> are used instead of an actual <I>ExpandedNodeId</I>, this also applies to <I>Attribute</I> Ids. </DD
></DL
><DL 

><DD 

>&#61623; The string representation of relative paths is used instead of the actual structure. </DD
><DD 

>&#61623; The <I>NamespaceIndex</I> used in all examples is 12 (it could just as easily have been 4 or 23 or any value). For more information about <I>NamespacesIndex</I>, see <A href="#LinkTarget_7682" href="#">
Part 3</A>
. The use of the <I>NamespaceIndex</I> illustrates that the information model being used in the examples is not a model defined by this standard, but one created for the examples. </DD
></DL
><H3 
 ID="LinkTarget_29689"
><B>B.2.2 Used type model </H3
><P 

></B>The following examples use the type model described below. All <I>Property</I> values are assumed to be string unless otherwise noted </P
><P 

>New Reference types: </P
><P 

>&ldquo;HasChild&rdquo; derived from HierarchicalReference. </P
><P 

>&ldquo;HasAnimal&rdquo; derived from HierarchicalReference. </P
><P 

>&ldquo;HasPet&rdquo; derived from HasAnimal. </P
><P 

>&ldquo;HasFarmAnimal&rdquo; derived from HasAnimal. </P
><P 

>&ldquo;HasSchedule&rdquo; derived from HierarchicalReference. </P
><P 

> </P
><P 

>PersonType derived from BaseObjectType adds: </P
><P 

> HasProperty &quot;LastName&quot;. </P
><P 

> HasProperty &quot;FirstName&quot;. </P
><P 

> HasProperty &quot;StreetAddress&quot;. </P
><P 

> HasProperty &quot;City&quot;. </P
><P 

> HasProperty &quot;ZipCode&quot;. </P
><P 

> May have HasChild reference to a node of type PersonType. </P
><P 

> May have HasAnimal reference to a node of type AnimalType (or a subtype of this Reference type). </P
><P 

> </P
><P 

>AnimalType derived from BaseObjectType adds: </P
><P 

> May have HasSchedule reference to a node of type FeedingScheduleType. </P
><P 

> HasProperty &quot;Name&quot;. </P
><P 

> </P
><P 

>DogType derived from AnimalType adds: </P
><P 

> HasProperty &quot;NickName&quot;. </P
><P 

> HasProperty &quot;DogBreed&quot;. </P
><P 

> HasProperty &quot;License&quot;. </P
><P 

> </P
><P 

>CatType derived from AnimalType adds: </P
><P 

> HasProperty &quot;NickName&quot;. </P
><P 

> HasProperty &quot;CatBreed&quot;. </P
><P 

> </P
><P 

>PigType derived from AnimalType adds: </P
><P 

> HasProperty &quot;PigBreed&quot;. </P
><P 

> </P
><P 

>ScheduleType derived from BaseObjectType adds: </P
><P 

> HasProperty &quot;Period&quot;. </P
><P 

> </P
><P 

>FeedingScheduleType derived from ScheduleType adds: </P
><P 

> HasProperty &quot;Food&quot;. </P
><P 

> HasProperty &quot;Amount&quot; (Stored as an Int32). </P
><P 

> </P
><P 

>AreaType derived from <I>BaseObjectType</I> is just a simple <I>Folder</I> and contains no <I>Properties</I>. </P
><P 

>This example type system is shown in <A href="#LinkTarget_29738" href="#">
Figure B.3</A>
. In this Figure, the OPC UA notation is used for all <I>References</I> to <I>ObjectTypes</I>, <I>Variables</I>, <I>Properties</I> and subtypes.<I> </I>Additionally, supported <I>References</I> are contained in an inner box. The actual references only exist in the instances, thus, no connections to other <I>Objects</I> are shown in the Figure and they are subtypes of the listed <I>Reference</I>. </P
><P 

><FONT size="+1"> <DIV class="Sect" 
 Alt=""
>TypesBaseObjectTypeBaseReferenceTypeHierarchicalReferenceTypeHasChildHasScheduleHasAnimalHasFarmAnimalHasPetPersonTypeAnimalTypeScheduleTypeFeedingScheduleTypeFoodAmountPeriodNameCatTypePigTypeDogTypeLastnameFirstNameStreetAddressCityZipCodePigBreedNickNameCatBreedNickNameDogBreedLicenseReferences    HasChild   HasAnimalReferences    HasScheduleAreaType</DIV
></P
><P 

><FONT size="+1"><B>Figure B.3 &ndash; Example Type Nodes </P
><P 

></B>A corresponding example set of instances is shown in <A href="#LinkTarget_29756" href="#">
Figure B.4</A>
. These instances include a type <I>Reference</I> for <I>Objects</I>. Properties also have type <I>References</I>, but the <I>References</I> are omitted for simplicity. The name of the <I>Object</I> is provided in the box and a numeric instance <I>NodeId</I> in brackets. Standard <I>ReferenceTypes</I> use the OPC UA notation, custom <I>ReferenceTypes</I> are listed as a named <I>Reference</I>. For <I>Properties</I>, the <I>BrowseName</I>, <I>NodeId</I>, and <I>Value</I> are shown. The <I>Nodes</I> that are included in a <I>View</I> (View1) are enclosed in the coloured box. Two Area nodes are included for grouping of the existing person nodes. All custom nodes are defined in namespace 12 which is not included in <A href="#LinkTarget_29756" href="#">
Figure B.4</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>View1TypesJFamily1 (30)JFamily2 (36)HFamily1 (42)HFamily2 (48)HFamily3 (54)PersonTypeHasChildHasChildHasChildLastname (31)Jones FirstName (32)John City (34)Jersey Address (33)319 2nd Ave ZipCode (35)02138 InstancesCat2 (74)Dog1 (82)Pig1 (91)Cat1 (70)Schedule1 (78)Schedule2 (87)CatTypeFeedingScheduleTypeName (71)Rosemary Nickname (72)Rosie CatBreed (73)Tabby Name (75)Basil Nickname (76)Trouble CatBreed (77)Tabby Name (83)Oliver Nickname (84)Olie DogBreed (85)American Bull Dog PigBreed (92)Meat Name (93)Porker License (86)355403 Period (79)Hourly Food (80)Purino Amount (81)25 Period (88)Daily Food (89)ALPY Amount (90)100 Lastname (37)Jones FirstName (38)Sophia City (40)Jersey Address (39)319 2nd Ave ZipCode (41)02138 Lastname (43)Hervey FirstName (44)Paul City (46)Cleveland Address (45)49 Main st ZipCode (47)03854 DogTypePigTypeHasPetHasPetLastname (49)Hervey FirstName (50)Paul (Jr.)City (52)Cleveland Address (51)49 Main st ZipCode (53)03854 Lastname (55)Hervey FirstName (56)Sara City (58)Cleveland Address (5749 Main st ZipCode (59)03854 HasFarmAnimalArea1 (94)Area2 (95)HasPetAreaTypeHas ScheduleHas Schedule</DIV
></P
><P 

><B>Figure B.4 &ndash; Example Instance Nodes </P
><H3 
 ID="LinkTarget_29757"
>B.2.3 Example Notes </H3
><P 

></B>For all of the examples in <A href="#LinkTarget_23348" href="#">
7.4.4</A>
, the type definition <I>Node</I> is listed in its symbolic form, in the actual call it would be the <I>ExpandedNodeId</I> assigned to the <I>Node</I>. The <I>Attribute </I>is the symbolic name of the <I>Attribute</I>, in the actual call they would be translated to the <I>IntegerId</I> of the <I>Attribute</I>. Also in all of the examples the <I>BrowseName</I> is included in the result table for clarity; normally this would not be returned. </P
><P 

>All of the examples include the following items: </P
><DL 

><DD 

>&#61623; an English description of the object of the query,  </DD
><DD 

>&#61623; an SQL like description of the query,  </DD
><DD 

>&#61623; a table that has a NodeTypeDescription of the items that are to be returned  </DD
><DD 

>&#61623; a figure illustrating the query filter. </DD
></DL
><DL 

><DD 

>&#61623; A table describing the content filer </DD
><DD 

>&#61623; A table describing the resulting dataset </DD
></DL
><P 

>The examples assume namespace 12 is the namespace for all of the custom definitions described for the examples. </P
><H3 
 ID="LinkTarget_29781"
><B>B.2.4 Example 1 </H3
><P 

></B>This example requests a simple layered filter, a person has a pet and the pet has a schedule. </P
><P 

><B>Example 1: Get PersonType.LastName, AnimalType.Name, ScheduleType.Period where the Person Has a Pet and that Pet Has a Schedule. </P
><P 

></B>The <I>NodeTypeDescription</I> parameters used in the example are described in <A href="#LinkTarget_29790" href="#">
Table B.3</A>
. </P
><P 

><B>Table B.3 &ndash; Example 1 NodeTypeDescription </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Type Definition Node </P
></TD
><TD  
 valign="top"
><P 

>Include </P
><P 

>Subtypes </P
></TD
><TD  
 valign="top"
><P 

>QueryDataDescription </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Relative Path </P
></TD
><TD  
 valign="top"
><P 

>Attribute </P
></TD
><TD  
 valign="top"
><P 

>Index Range </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PersonType  </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:LastName&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasPet&gt;12:AnimalType. 12:Name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasPet&gt;12:AnimalType&lt;12:HasSchedule&gt; 12:Schedule. 12:Period&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The corresponding <I>ContentFilter</I> is illustrated in <A href="#LinkTarget_29901" href="#">
Figure B.5</A>
. </P
><P 

> </P
><IMG width="94" height="83"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_66.jpg" ><IMG width="95" height="61"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_67.jpg" ><IMG width="123" height="68"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_68.jpg" ><IMG width="5" height="61"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_69.jpg" ><IMG width="135" height="90"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_70.jpg" ><IMG width="5" height="50"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_71.jpg" ><IMG width="119" height="37"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_72.jpg" ><IMG width="119" height="37"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_73.jpg" ><IMG width="98" height="37"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_74.jpg" ><IMG width="94" height="37"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_75.jpg" ><IMG width="102" height="38"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_76.jpg" ><IMG width="107" height="38"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_77.jpg" ><IMG width="105" height="37"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_78.jpg" ><IMG width="28" height="31"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_79.jpg" ><IMG width="36" height="31"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_80.jpg" ><IMG width="28" height="31"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_81.jpg" ><IMG width="119" height="22"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_82.jpg" ><IMG width="115" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_38.jpg" ><IMG width="103" height="23"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_83.jpg" ><P 

><B>Figure B.5 &ndash; Example 1 Filter </P
><P 

><A href="#LinkTarget_29907" href="#">
</B>Table B.4</A>
 describes the <I>ContentFilter</I> elements, operators and operands used in the example. </P
><P 

><B>Table B.4 &ndash; Example 1 ContentFilter </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>filterOperator </P
></TD
><TD  
 valign="top"
><P 

>filterOperand[0] </P
></TD
><TD  
 valign="top"
><P 

>filterOperand[1] </P
></TD
><TD  
 valign="top"
><P 

>filterOperand[2] </P
></TD
><TD  
 valign="top"
><P 

>filterOperand[3] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>1 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo_15 </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = Nodeid: PersonType,  </P
><P 

>BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 2 </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: HasPet, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo_15 </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: AnimalType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: ScheduleType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: HasSchedule, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand= &lsquo;1&rsquo; </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><A href="#LinkTarget_29962" href="#">
<FONT size="+1">Table B.5</A>
 describes the <I>QueryDataSet</I> that results from this query if it were executed against the instances described in <A href="#LinkTarget_29756" href="#">
Figure B.4</A>
<I> </I></P
><P 

><B>Table B.5 &ndash; Example 1 QueryDataSets </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeId </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>12:30 (JFamily1) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:LastName&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Jones </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasPet&gt;12:AnimalType. 12:Name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Rosemary </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Basil </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasPet&gt;12:AnimalType&lt;12:HasSchedule&gt; 12:Schedule.12:Period&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Hourly </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Daily </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12:42(HFamily1) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:LastName&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Hervey </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasPet&gt;12:AnimalType. 12:Name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Oliver </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasPet&gt;12:AnimalType&lt;12:HasSchedule&gt; 12:Schedule.12:Period&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Daily </P
></TD
></TR
></TABLE
><P 

> </P
><P 

>NOTE The RelativePath column and browse name (in parentheses in the <I>NodeId</I> column) are not in the QueryDataSet and are only shown here for clarity. The <I>TypeDefinition NodeId</I> would be an integer not the symbolic name that is included in the table.<I> </I></P
><P 

><FONT size="+1">The Value column is returned as an array for each <I>Node</I> description, where the order of the items in the array would correspond to the order of the items that were requested for the given Node Type. In Addition, if a single <I>Attribute</I> has multiple values then it would be returned as an array within the larger array, for example in this table Rosemary and Basil would be returned in a array for the .&lt;HasPet&gt;.AnimalType.Name item. They are show as separate rows for ease of viewing. The actual value array for JFamily1 would be (&ldquo;Jones&rdquo;, {&ldquo;RoseMary&rdquo;, &rdquo;Basil&rdquo;}, {&ldquo;Hourly&rdquo;, &ldquo;Daily&rdquo;}) </P
><H3 
 ID="LinkTarget_30046"
><B>B.2.5 Example 2 </H3
><P 

></B>The second example illustrates receiving a list of disjoint <I>Nodes</I> and also illustrates that an array of results can be received.<I> </I></P
><P 

><B>Example 2: Get PersonType.LastName, AnimalType.Name where a person has a child or (a pet is of type cat and has a feeding schedule). </P
><P 

></B>The NodeTypeDescription parameters used in the example are described in <A href="#LinkTarget_30055" href="#">
Table B.6</A>
. </P
><P 

><B>Table B.6 &ndash; Example 2 NodeTypeDescription </P
><P 

><FONT size="+1"></B> </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><B>Type Definition Node </P
></TD
><TD  
 valign="top"
><P 

>Include </P
><P 

>Subtypes </P
></TD
><TD  
 valign="top"
><P 

>QueryDataDescription </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Relative Path </P
></TD
><TD  
 valign="top"
><P 

>Attribute </P
></TD
><TD  
 valign="top"
><P 

>Index Range </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PersonType  </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:LastName&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AnimalType </P
></TD
><TD  
 valign="top"
><P 

>TRUE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:Name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The corresponding ContentFilter is illustrated in <A href="#LinkTarget_30161" href="#">
Figure B.6</A>
. </P
><P 

>  </P
><P 

> </P
><DIV class="Sect" 

><P 

><FONT size="+1">FeedingSchedule </P
><IMG width="101" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_84.jpg" ></DIV
><DIV class="Sect" 

><P 

>HasSchedule </P
><IMG width="88" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_85.jpg" ></DIV
><DIV class="Sect" 

><P 

>Attribute or Property  </P
><P 

>Element </P
></DIV
><DIV class="Sect" 

><P 

>Literal Element </P
></DIV
><DIV class="Sect" 

><P 

>Operator Element </P
></DIV
><IMG width="27" height="26"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_86.jpg" ><IMG width="35" height="26"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_87.jpg" ><IMG width="27" height="26"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_88.jpg" ><DIV class="Sect" 

><P 

>RelatedTo </P
><IMG width="87" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_89.jpg" ></DIV
><DIV class="Sect" 

><P 

><FONT size="+1">or </P
><IMG width="45" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_90.jpg" ></DIV
><DIV class="Sect" 

><P 

><FONT size="+1">PersonType </P
><IMG width="77" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_91.jpg" ></DIV
><DIV class="Sect" 

><P 

>CatType </P
><IMG width="77" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_92.jpg" ></DIV
><DIV class="Sect" 

><P 

>HasChild </P
><IMG width="87" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_93.jpg" ></DIV
><DIV class="Sect" 

><P 

>PersonType </P
><IMG width="77" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_94.jpg" ></DIV
><DIV class="Sect" 

><P 

>RelatedTo </P
><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_95.jpg" ></DIV
><IMG width="36" height="56"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_96.jpg" ><IMG width="78" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_97.jpg" ><IMG width="78" height="56"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_98.jpg" ><IMG width="46" height="46"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_99.jpg" ><IMG width="88" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_100.jpg" ><IMG width="36" height="46"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_101.jpg" ><IMG width="88" height="56"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_102.jpg" ><IMG width="26" height="56"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_103.jpg" ><P 

><FONT size="+1"><B>Figure B.6 &ndash; Example 2 Filter Logic Tree </P
><P 

><A href="#LinkTarget_30167" href="#">
</B>Table B.7</A>
 describes the elements, operators and operands used in the example. It is worth noting that a CatType is a subtype of AnimalType. </P
><P 

><B>Table B.7 &ndash; Example 2 ContentFilter </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>Operator </P
></TD
><TD  
 valign="top"
><P 

>Operand[0] </P
></TD
><TD  
 valign="top"
><P 

>Operand[1] </P
></TD
><TD  
 valign="top"
><P 

>Operand[2] </P
></TD
><TD  
 valign="top"
><P 

>Operand[3] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>Or </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand=1 </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 2 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: HasChild, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: CatType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: FeedingScheduleType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: HasSchedule, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The results from this query would contain the <I>QueryDataSets</I> shown in <A href="#LinkTarget_30232" href="#">
Table B.8</A>
.<I> </I></P
><P 

><B>Table B.8 &ndash; Example 2 QueryDataSets </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeId </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition NodeId </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>12:30 (Jfamily1) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>. 12:LastName </P
></TD
><TD  
 valign="top"
><P 

>Jones </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12:42 (HFamily1) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>. 12:LastName </P
></TD
><TD  
 valign="top"
><P 

>Hervey </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12:48 (HFamily2) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>. 12:LastName </P
></TD
><TD  
 valign="top"
><P 

>Hervey </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12:70 (Cat1) </P
></TD
><TD  
 valign="top"
><P 

>CatType </P
></TD
><TD  
 valign="top"
><P 

>. 12:Name </P
></TD
><TD  
 valign="top"
><P 

>Rosemary </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12:74 (Cat2) </P
></TD
><TD  
 valign="top"
><P 

>CatType </P
></TD
><TD  
 valign="top"
><P 

>. 12:Name </P
></TD
><TD  
 valign="top"
><P 

>Basil </P
></TD
></TR
></TABLE
><P 

> </P
><P 

>NOTE The relative path column and browse name (in parentheses in the <I>NodeId</I> column) are not in the <I>QueryDataSet</I> and are only shown here for clarity. The <I>TypeDefinitionNodeId</I> would be a <I>NodeId</I> not the symbolic name that is included in the table.<I> </I></P
><H3 
 ID="LinkTarget_30296"
><FONT size="+1"><B>B.2.6 Example 3 </H3
><P 

></B>The third example provides a more complex <I>Query</I> in which the results are filtered on multiple criteria. </P
><P 

><B>Example 3: Get PersonType.LastName, AnimalType.Name, ScheduleType.Period where a</B> <B>person has a pet and the animal has a feeding schedule and the person has</B> <B>a Zipcode = &lsquo;02138&rsquo; and (the Schedule.Period is Daily or Hourly) and Amount to feed is &gt; 10.</B> </P
><P 

><A href="#LinkTarget_30304" href="#">
Table B.9</A>
 describes the NodeTypeDescription parameters used in the example. </P
><P 

><B>Table B.9 &ndash; Example 3 - NodeTypeDescription </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Type Definition Node </P
></TD
><TD  
 valign="top"
><P 

>Include </P
><P 

>Subtypes </P
></TD
><TD  
 valign="top"
><P 

>QueryDataDescription </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Attribute </P
></TD
><TD  
 valign="top"
><P 

>Index Range </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PersonType </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;12:LastName&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasPet&gt;12:AnimalType. 12:Name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasPet&gt;12:AnimalType&lt;12:HasSchedule&gt; 12:FeedingSchedule.Period&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The corresponding <I>ContentFilter</I> is illustrated in <A href="#LinkTarget_30502" href="#">
Figure B.7</A>
. </P
><P 

> </P
><P 

> </P
><IMG width="29" height="148"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_104.jpg" ><IMG width="53" height="60"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_105.jpg" ><IMG width="150" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_106.jpg" ><IMG width="108" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_107.jpg" ><IMG width="99" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_108.jpg" ><IMG width="92" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_109.jpg" ><IMG width="99" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_110.jpg" ><IMG width="88" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_111.jpg" ><IMG width="126" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_112.jpg" ><IMG width="99" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_113.jpg" ><IMG width="159" height="64"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_114.jpg" ><IMG width="64" height="97"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_115.jpg" ><IMG width="123" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_116.jpg" ><IMG width="4" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_117.jpg" ><IMG width="135" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_118.jpg" ><IMG width="40" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_119.jpg" ><IMG width="133" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_120.jpg" ><IMG width="111" height="64"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_121.jpg" ><IMG width="87" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_122.jpg" ><IMG width="28" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_123.jpg" ><IMG width="54" height="36"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_124.jpg" ><IMG width="87" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_125.jpg" ><IMG width="69" height="48"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_126.jpg" ><IMG width="59" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_127.jpg" ><IMG width="52" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_128.jpg" ><IMG width="40" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_129.jpg" ><IMG width="40" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_130.jpg" ><IMG width="102" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_131.jpg" ><IMG width="101" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_132.jpg" ><IMG width="51" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_133.jpg" ><IMG width="50" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_134.jpg" ><IMG width="52" height="75"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_135.jpg" ><IMG width="26" height="26"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_136.jpg" ><IMG width="16" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_137.jpg" ><IMG width="37" height="33"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_138.jpg" ><IMG width="28" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_139.jpg" ><IMG width="28" height="16"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_140.jpg" ><IMG width="61" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_141.jpg" ><IMG width="31" height="30"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_142.jpg" ><IMG width="40" height="30"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_143.jpg" ><IMG width="31" height="30"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_144.jpg" ><IMG width="134" height="29"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_145.jpg" ><IMG width="92" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_146.jpg" ><IMG width="89" height="22"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_147.jpg" ><IMG width="40" height="16"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_148.jpg" ><IMG width="16" height="75"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_149.jpg" ><IMG width="75" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_150.jpg" ><IMG width="56" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_151.jpg" ><IMG width="40" height="33"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_152.jpg" ><IMG width="111" height="28"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_153.jpg" ><IMG width="48" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_154.jpg" ><P 

><B>Figure B.7 &ndash; Example 3 Filter Logic Tree </P
><P 

><A href="#LinkTarget_30508" href="#">
</B>Table B.10</A>
 describes the elements, operators and operands used in the example. </P
><P 

><B>Table B.10 &ndash; Example 3 ContentFilter  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>Operator </P
></TD
><TD  
 valign="top"
><P 

>Operand[0] </P
></TD
><TD  
 valign="top"
><P 

>Operand[1] </P
></TD
><TD  
 valign="top"
><P 

>Operand[2] </P
></TD
><TD  
 valign="top"
><P 

>Operand[3] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>And </P
></TD
><TD  
 valign="top"
><P 

>Element Operand= 1 </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 2 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>And </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 4 </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 6 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>And </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 3 </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 9 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Or </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 7 </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 8 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 5 </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:HasPet, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = Node: 12:AnilmalType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
><P 

>Alias:  AT </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:FeedingScheduleType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
><P 

>Alias: FST </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:HasSchedule, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>Equals </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType BrowsePath 12:Zipcode &ldquo;.&rdquo;, Attribute: Value </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;02138&rsquo; </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>Equals </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType </P
><P 

>BrowsePath &ldquo;12:HasPet&gt;12:AnimalType&lt;12:HasSchedule&gt;12: FeedingSchedule/12:Period&rdquo;, Attribute: Value </P
><P 

>Alias: FST </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;Daily&rsquo; </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>8 </P
></TD
><TD  
 valign="top"
><P 

>Equals </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType </P
><P 

>BrowsePath &ldquo;12:HasPet&gt;12:AnimalType&lt;12:HasSchedule&gt;12: FeedingSchedule/12:Period&rdquo;, Attribute: Value </P
><P 

>Alias: FST </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;Hourly&rsquo; </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

>Greater Than </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType </P
><P 

>BrowsePath &ldquo;12:HasPet&gt;12:AnimalType&lt;12:HasSchedule&gt;12: FeedingSchedule/12:Amount&rdquo;, Attribute: Value </P
><P 

>Alias: FST </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 10 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

>Cast </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = 10 </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: Int32, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The results from this query would contain the <I>QueryDataSets</I> shown in<I> </I><A href="#LinkTarget_30695" href="#">
Table B.11</A>
. </P
><P 

><B>Table B.11 &ndash; Example 3 QueryDataSets </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeId </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>12:30 (JFamily1) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:LastName&rdquo;  </P
></TD
><TD  
 valign="top"
><P 

>Jones </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasPet&gt;12:PersonType. 12:Name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Rosemary </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Basil </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

> &ldquo;&lt;12:HasPet&gt;12:AnimalType&lt;12:HasSchedule&gt;12:FeedingSchedule. 12:Period&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Hourly </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Daily </P
></TD
></TR
></TABLE
><P 

> </P
><P 

>NOTE The RelativePath column and browse name (in parentheses in the <I>NodeId</I> column) are not in the <I>QueryDataSet</I> and are only shown here for clarity. The TypeDefinitionNodeId would be an integer not the symbolic name that is included in the table.<I> </I></P
><H3 
 ID="LinkTarget_30750"
><FONT size="+1"><B>B.2.7 Example 4 </H3
><P 

></B>The fourth example provides an illustration of the Hop parameter that is part of the RelatedTo Operator. </P
><P 

><B>Example 4: Get PersonType.LastName where a person has a child who has a child who has a pet.</B> </P
><P 

><A href="#LinkTarget_30759" href="#">
Table B.12</A>
 describes the NodeTypeDescription parameters used in the example. </P
><P 

><B>Table B.12 &ndash; Example 4 NodeTypeDescription </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Type Definition Node </P
></TD
><TD  
 valign="top"
><P 

>Include </P
><P 

>Subtypes </P
></TD
><TD  
 valign="top"
><P 

>QueryDataDescription </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Relative Path </P
></TD
><TD  
 valign="top"
><P 

>Attribute </P
></TD
><TD  
 valign="top"
><P 

>Index Range </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PersonType </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:LastName&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The corresponding <I>ContentFilter</I> is illustrated in <A href="#LinkTarget_30853" href="#">
Figure B.8</A>
. </P
><P 

> </P
><P 

> </P
><IMG width="88" height="57"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_155.jpg" ><IMG width="115" height="63"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_156.jpg" ><IMG width="5" height="57"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_157.jpg" ><IMG width="126" height="84"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_158.jpg" ><IMG width="5" height="47"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_159.jpg" ><IMG width="88" height="78"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_160.jpg" ><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_161.jpg" ><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_162.jpg" ><IMG width="77" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_163.jpg" ><IMG width="83" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_164.jpg" ><IMG width="77" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_165.jpg" ><IMG width="77" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_166.jpg" ><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_167.jpg" ><IMG width="32" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_168.jpg" ><IMG width="41" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_169.jpg" ><IMG width="32" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_170.jpg" ><IMG width="126" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_171.jpg" ><IMG width="112" height="18"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_172.jpg" ><IMG width="91" height="20"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_173.jpg" ><P 

><B>Figure B.8 &ndash; Example 4 Filter Logic Tree </P
><P 

><A href="#LinkTarget_30859" href="#">
</B>Table B.13</A>
 describes the elements, operators and operands used in the example. </P
><P 

><B>Table B.13 &ndash; Example 4 ContentFilter </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>Operator </P
></TD
><TD  
 valign="top"
><P 

>Operand[0] </P
></TD
><TD  
 valign="top"
><P 

>Operand[1] </P
></TD
><TD  
 valign="top"
><P 

>Operand[2] </P
></TD
><TD  
 valign="top"
><P 

>Operand[3] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;,  </P
><P 

>Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>Element Operand = 1 </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:HasChild, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;2&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;,  </P
><P 

>Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:AnimalType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:HasPet, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The results from this query would contain the <I>QueryDataSets</I> shown in <A href="#LinkTarget_30912" href="#">
Table B.14</A>
. It is worth noting that the pig &ldquo;Pig1&rdquo; is referenced as a pet by Sara, but is referenced as a farm animal by Sara&rsquo;s parent Paul. </P
><P 

><B>Table B.14 &ndash; Example 4 QueryDataSets </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeId </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>12:42 (HFamily1) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:LastName&rdquo;  </P
></TD
><TD  
 valign="top"
><P 

>Hervey </P
></TD
></TR
></TABLE
><P 

> </P
><P 

>NOTE The RelativePath column and browse name (in parentheses in the <I>NodeId</I> column) are not in the <I>QueryDataSet</I> and are only shown here for clarity. The TypeDefinition NodeId would be an integer not the symbolic name that is included in the table.<I> </I></P
><H3 
 ID="LinkTarget_30937"
><FONT size="+1"><B>B.2.8 Example 5 </H3
><P 

></B>The fifth example provides an illustration of the use of alias. </P
><P 

><B>Example 5: Get the last names of children that have the same first name as a parent of theirs</B> </P
><P 

><A href="#LinkTarget_30947" href="#">
Table B.15</A>
 describes the NodeTypeDescription parameters used in the example. </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Table B.15 &ndash; Example 5 NodeTypeDescription </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Type Definition Node </P
></TD
><TD  
 valign="top"
><P 

>Include </P
><P 

>Subtypes </P
></TD
><TD  
 valign="top"
><P 

>QueryDataDescription </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Relative Path </P
></TD
><TD  
 valign="top"
><P 

>Attribute </P
></TD
><TD  
 valign="top"
><P 

>Index Range </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PersonType </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasChild&gt;12:PersonType. 12:LastName&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The corresponding <I>ContentFilter</I> is illustrated in <A href="#LinkTarget_31054" href="#">
Figure B.9</A>
. </P
><P 

> </P
><P 

> </P
><IMG width="88" height="36"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_174.jpg" ><IMG width="88" height="36"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_175.jpg" ><IMG width="78" height="36"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_176.jpg" ><IMG width="88" height="36"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_177.jpg" ><IMG width="96" height="47"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_178.jpg" ><IMG width="99" height="46"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_179.jpg" ><IMG width="5" height="57"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_180.jpg" ><IMG width="61" height="40"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_181.jpg" ><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_182.jpg" ><IMG width="55" height="47"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_183.jpg" ><IMG width="129" height="46"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_184.jpg" ><IMG width="77" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_185.jpg" ><IMG width="119" height="46"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_186.jpg" ><IMG width="77" height="53"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_187.jpg" ><IMG width="77" height="53"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_188.jpg" ><IMG width="28" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_189.jpg" ><IMG width="36" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_190.jpg" ><IMG width="28" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_191.jpg" ><IMG width="136" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_192.jpg" ><IMG width="96" height="18"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_193.jpg" ><IMG width="95" height="19"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_194.jpg" ><P 

><B>Figure B.9 &ndash; Example 5 Filter Logic Tree </P
><P 

></B>In this example, one <I>Reference</I> to PersonType is aliased to &ldquo;Parent&rdquo; and another <I>Reference</I> to PersonType is aliased to &ldquo;Child&rdquo;. The value of Parent.firstName and Child.firstName are then compared. <A href="#LinkTarget_31061" href="#">
Table B.16</A>
 describes the elements, operators and operands used in the example. </P
><P 

><B>Table B.16 &ndash; Example 5 ContentFilter </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>Operator </P
></TD
><TD  
 valign="top"
><P 

>Operand[0] </P
></TD
><TD  
 valign="top"
><P 

>Operand[1] </P
></TD
><TD  
 valign="top"
><P 

>Operand[2] </P
></TD
><TD  
 valign="top"
><P 

>Operand[3} </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>And </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 1 </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 2 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand =  NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;,  </P
><P 

>Attribute: NodeId,  </P
><P 

>Alias: &ldquo;Parent&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId,  </P
><P 

>Alias: &ldquo;Child&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:HasChild, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &ldquo;1&rdquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Equals </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand =  </P
><P 

>NodeId: 12:PersonType, BrowsePath &ldquo;&ldquo;/12:FirstName&rdquo;, Attribute: Value, Alias: &ldquo;Parent&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;&ldquo;/12:FirstName&rdquo;, Attribute: Value, Alias: &ldquo;Child&rdquo; </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The results from this query would contain the <I>QueryDataSets</I> shown<I> </I>in <A href="#LinkTarget_31130" href="#">
Table B.17</A>
.<I> </I></P
><P 

><B>Table B.17 &ndash; Example 5 QueryDataSets </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeId </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>12:42 (HFamily1) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;&lt;12:HasChild&gt;12:PersonType.12:LastName&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Hervey </P
></TD
></TR
></TABLE
><P 

> </P
><P 

>NOTE The RelativePath column and browse name (in parentheses in the <I>NodeId</I> column) are not in the <I>QueryDataSet</I> and are only shown here for clarity. The <I>TypeDefinitionNodeId</I> would be an integer not the symbolic name that is included in the table. </P
><H3 
 ID="LinkTarget_31155"
><FONT size="+1"><B>B.2.9 Example 6 </H3
><P 

></B>The sixth example provides an illustration a different type of request, one in which the <I>Client</I> is interested in displaying part of the <I>AddressSpace</I> of the <I>Server</I>. This request includes listing a <I>Reference</I> as something that is to be returned. </P
><P 

><FONT size="+1"><B>Example 6: Get PersonType.NodeId, AnimalType.NodeId, PersonType.HasChild Reference, PersonType.HasAnimal Reference where a person has a child who has a Animal.</B> </P
><P 

><A href="#LinkTarget_31164" href="#">
<FONT size="+1">Table B.18</A>
 describes the NodeTypeDescription parameters used in the example. </P
><P 

><B>Table B.18 &ndash; Example 6 NodeTypeDescription </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Type Definition Node </P
></TD
><TD  
 valign="top"
><P 

>Include </P
><P 

>Subtypes </P
></TD
><TD  
 valign="top"
><P 

>QueryDataDescription </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Relative Path </P
></TD
><TD  
 valign="top"
><P 

>Attribute </P
></TD
><TD  
 valign="top"
><P 

>Index Range </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PersonType </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:NodeId&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt;12:PersonType&lt;12:HasAnimal&gt;12:AnimalType.NodeId </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt;12:PersonType&lt;12:HasAnimal&gt; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The corresponding <I>ContentFilter</I> is illustrated in <A href="#LinkTarget_31287" href="#">
Figure B.10</A>
. </P
><P 

> </P
><P 

> </P
><IMG width="88" height="57"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_195.jpg" ><IMG width="115" height="63"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_196.jpg" ><IMG width="5" height="57"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_197.jpg" ><IMG width="126" height="84"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_198.jpg" ><IMG width="5" height="47"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_199.jpg" ><IMG width="88" height="78"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_200.jpg" ><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_201.jpg" ><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_202.jpg" ><IMG width="77" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_203.jpg" ><IMG width="83" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_204.jpg" ><IMG width="77" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_205.jpg" ><IMG width="77" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_206.jpg" ><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_207.jpg" ><IMG width="35" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_208.jpg" ><IMG width="46" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_209.jpg" ><IMG width="35" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_210.jpg" ><IMG width="115" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_38.jpg" ><IMG width="101" height="18"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_211.jpg" ><IMG width="101" height="19"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_212.jpg" ><P 

><B>Figure B.10 &ndash; Example 6 Filter Logic Tree </P
><P 

><A href="#LinkTarget_31293" href="#">
</B>Table B.19</A>
 describes the elements, operators and operands used in the example. </P
><P 

><B>Table B.19 &ndash; Example 6 ContentFilter </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>Operator </P
></TD
><TD  
 valign="top"
><P 

>Operand[0] </P
></TD
><TD  
 valign="top"
><P 

>Operand[1] </P
></TD
><TD  
 valign="top"
><P 

>Operand[2] </P
></TD
><TD  
 valign="top"
><P 

>Operand[3] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 1 </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = Node: 12:HasChild, BrowsePath &ldquo;.&rdquo;,Attribute:NodeId  </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:AnimalType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:HasAnimal, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The results from this query would contain the <I>QueryDataSets</I> shown<I> </I>in <A href="#LinkTarget_31344" href="#">
Table B.20</A>
. </P
><P 

><B>Table B.20 &ndash; Example 6 QueryDataSets </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeId </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>12:42 (HFamily1) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.NodeId&rdquo;  </P
></TD
><TD  
 valign="top"
><P 

>12:42 (HFamily1) </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt;12:PersonType&lt;12:HasAnimal&gt; </P
><P 

>12:AnimalType.NodeId </P
></TD
><TD  
 valign="top"
><P 

>12:91 (Pig1) </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt; </P
></TD
><TD  
 valign="top"
><P 

>HasChild </P
><P 

><I>ReferenceDescription </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt;12:PersonType&lt;12:HasAnimal&gt; </P
></TD
><TD  
 valign="top"
><P 

>HasFarmAnimal </P
><P 

><I>ReferenceDescription </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12:48 (HFamily2) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.NodeId&rdquo;  </P
></TD
><TD  
 valign="top"
><P 

>12:48 (HFamily2) </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt;12:PersonType&lt;12:HasAnimal&gt; </P
><P 

>12:AnimalType.NodeId </P
></TD
><TD  
 valign="top"
><P 

>12:91 (Pig1) </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt; </P
></TD
><TD  
 valign="top"
><P 

>HasChild </P
><P 

><I>ReferenceDescription </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt;12:PersonType&lt;12:HasAnimal&gt; </P
></TD
><TD  
 valign="top"
><P 

>HasPet </P
><P 

><I>ReferenceDescription </I></P
></TD
></TR
></TABLE
><P 

> </P
><P 

>NOTE The RelativePath and browse name (in parentheses) is not in the <I>QueryDataSet</I> and is only shown here for clarity and the TypeDefinitionNodeId would be an integer, not the symbolic name that is included in the table. The value field would in this case be the <I>NodeId</I> where it was requested, but for the example the browse name is provided in parentheses and in the case of <I>Reference</I> types on the browse name is provided. For the <I>References</I> listed in <A href="#LinkTarget_31344" href="#">
Table B.20</A>
, the value would be a <I>ReferenceDescription </I>which are described in <A href="#LinkTarget_26831" href="#">
7.25</A>
. </P
><P 

><A href="#LinkTarget_31457" href="#">
<FONT size="+1">Table B.21</A>
 provides an example of the same QueryDataSet as shown in <A href="#LinkTarget_31344" href="#">
Table B.20</A>
 without any additional fields and minimal symbolic Ids. There is an entry for each requested Attribute, in the cases where an Attribute would return multiple entries the entries are separated by comas. If a structure is being returned then the structure is enclosed in square brackets. In the case of a ReferenceDescription the structure contains a structure and DisplayName and BrowseName are assumed to be the same and defined in <A href="#LinkTarget_29756" href="#">
Figure B.4</A>
. </P
><P 

><B>Table B.21 &ndash; Example 6 QueryDataSets without Additional Information </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeId </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>12:42  </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>12:42 </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>12:91 </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>[HasChild,TRUE,[48,HFamily2,HFamily2,PersonType]], </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>[HasFarmAnimal,TRUE[91,Pig1,Pig1,PigType] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12:48  </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>12:54 </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>12:91 </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>[HasChild,TRUE,[ 54,HFamily3,HFamily3,PersonType]] </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>[HasPet, TRUE,[ 91,Pig1,Pig1,PigType]] </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The PersonType, HasChild, PigType, HasPet, HasFarmAnimal identifiers used in the above table would be translated to actual <I>ExtendedNodeIds</I>. </P
><H3 
 ID="LinkTarget_31522"
><B>B.2.10 Example 7 </H3
><P 

></B>The seventh example provides an illustration a request in which a <I>Client</I> wants to display part of the <I>AddressSpace</I> based on a starting point that was obtained via browsing. This request includes listing <I>References</I> as something that is to be returned. In this case the Person Browsed to Area2 and wanted to <I>Query</I> for information below this starting point. </P
><P 

><B>Example 7: Get PersonType.NodeId, AnimalType.NodeId, PersonType.HasChild Reference, PersonType.HasAnimal Reference where the person is in Area2 (Cleveland nodes) and the person has a child. </P
><P 

><A href="#LinkTarget_31530" href="#">
</B>Table B.22</A>
 describes the NodeTypeDescription parameters used in the example. </P
><P 

><B>Table B.22 &ndash; Example 7 NodeTypeDescription </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Type Definition Node </P
></TD
><TD  
 valign="top"
><P 

>Include </P
><P 

>Subtypes </P
></TD
><TD  
 valign="top"
><P 

>QueryDataDescription </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Relative Path </P
></TD
><TD  
 valign="top"
><P 

>Attribute </P
></TD
><TD  
 valign="top"
><P 

>Index Range </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PersonType </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.NodeId&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt; </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasAnimal&gt;NodeId </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasAnimal&gt; </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The corresponding <I>ContentFilter</I> is illustrated in <A href="#LinkTarget_31664" href="#">
Figure B.11</A>
. Note that the <I>Browse</I> call would typically return a <I>NodeId</I>, thus the first filter is for the <I>BaseObjectType</I> with a <I>NodeId</I> of 95 where 95 is the <I>NodeId</I> associated with the Area2 node, all <I>Nodes</I> descend from <I>BaseObjectType</I>, and <I>NodeId</I> is a base <I>Property</I> so this filter will work for all <I>Queries</I> of this nature. </P
><P 

> </P
><IMG width="5" height="36"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_213.jpg" ><IMG width="98" height="57"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_214.jpg" ><IMG width="88" height="57"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_215.jpg" ><IMG width="114" height="42"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_216.jpg" ><IMG width="5" height="57"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_217.jpg" ><IMG width="83" height="74"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_218.jpg" ><IMG width="5" height="47"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_219.jpg" ><IMG width="63" height="74"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_220.jpg" ><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_221.jpg" ><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_222.jpg" ><IMG width="130" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_223.jpg" ><IMG width="77" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_224.jpg" ><IMG width="77" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_225.jpg" ><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_226.jpg" ><IMG width="33" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_227.jpg" ><IMG width="43" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_228.jpg" ><IMG width="33" height="27"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_229.jpg" ><IMG width="113" height="24"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_230.jpg" ><IMG width="96" height="18"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_231.jpg" ><IMG width="95" height="19"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_194.jpg" ><IMG width="56" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_232.jpg" ><IMG width="103" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_233.jpg" ><IMG width="56" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_234.jpg" ><P 

><B>Figure B.11 &ndash; Example 7 Filter Logic Tree </P
><P 

><A href="#LinkTarget_31670" href="#">
</B>Table B.23</A>
 describes the elements, operators and operands used in the example. </P
><P 

><B>Table B.23 &ndash; Example 7 ContentFilter </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>Operator </P
></TD
><TD  
 valign="top"
><P 

>Operand[0] </P
></TD
><TD  
 valign="top"
><P 

>Operand[1] </P
></TD
><TD  
 valign="top"
><P 

>Operand[2] </P
></TD
><TD  
 valign="top"
><P 

>Operand[3] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 2  </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 1 </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = Node:HierachicalReference, BrowsePath &ldquo;.&rdquo;, Attribute:NodeId  </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand =  </P
><P 

>NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand =  </P
><P 

>NodeId: 12:HasChild, BrowsePath &ldquo;.&rdquo;,  </P
><P 

>Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Equals </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand =  </P
><P 

>NodeId: BaseObjectType, BrowsePath &ldquo;.&rdquo;,  </P
><P 

>Attribute: NodeId, </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;95 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The results from this <I>Query</I> would contain the <I>QueryDataSets</I> shown<I> </I>in <A href="#LinkTarget_31740" href="#">
Table B.24</A>
. </P
><P 

><B>Table B.24 &ndash; Example 7 QueryDataSets </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeId </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>12:42 (HFamily1) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.NodeId&rdquo;  </P
></TD
><TD  
 valign="top"
><P 

>12:42 (HFamily1) </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt; </P
></TD
><TD  
 valign="top"
><P 

>HasChild <I>ReferenceDescription</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasAnimal&gt;12:AnimalType.NodeId </P
></TD
><TD  
 valign="top"
><P 

>NULL </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasAnimal&gt; </P
></TD
><TD  
 valign="top"
><P 

>HasFarmAnimal <I>ReferenceDescription</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12:48 (HFamily2) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.NodeId&rdquo;  </P
></TD
><TD  
 valign="top"
><P 

>12:48 (HFamily2) </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt; </P
></TD
><TD  
 valign="top"
><P 

>HasChild <I>ReferenceDescription</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasAnimal&gt;12:AnimalType.NodeId </P
></TD
><TD  
 valign="top"
><P 

>12:91 (Pig1) </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasAnimal&gt; </P
></TD
><TD  
 valign="top"
><P 

>HasFarmAnimal <I>ReferenceDescription</I> </P
></TD
></TR
></TABLE
><P 

> </P
><P 

>NOTE The RelativePath and browse name (in parentheses) is not in the <I>QueryDataSet</I> and is only shown here for clarity and the TypeDefinitionNodeId would be an integer not the symbolic name that is included in the table. The value field </P
><P 

>would in this case be the <I>NodeId</I> where it was requested, but for the example the browse name is provided in parentheses and in the case of <I>Reference</I> types on the browse name is provided. For the <I>References</I> listed in <A href="#LinkTarget_31740" href="#">
Table B.24</A>
, the value would be a <I>ReferenceDescription </I>which are described in <A href="#LinkTarget_26831" href="#">
7.25</A>
. </P
><H3 
 ID="LinkTarget_31835"
><FONT size="+1"><B>B.2.11 Example 8 </H3
><P 

></B>The eighth example provides an illustration of a request in which the <I>AddressSpace</I> is restricted by a <I>Server</I> defined <I>View</I>. This request is the same as in the second example which illustrates receiving a list of disjoint <I>Nodes</I> and also illustrates that an array of results can be received. It is <B>important</B> to note that all of the parameters and the <I>ContentFilter</I> are the same, only the View description would be specified as &ldquo;View1&rdquo;.<I> </I></P
><P 

><B>Example 8: Get PersonType.LastName, AnimalType.Name where a person has a child or (a pet is of type cat and has a feeding schedule) limited by the <I>AddressSpace</I> in View1. </P
><P 

></B>The NodeTypeDescription parameters used in the example are described in <A href="#LinkTarget_31844" href="#">
Table B.25</A>
 </P
><P 

><B>Table B.25 &ndash; Example 8 NodeTypeDescription </P
><P 

><FONT size="+1"></B> </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><B>Type Definition Node </P
></TD
><TD  
 valign="top"
><P 

>Include </P
><P 

>Subtypes </P
></TD
><TD  
 valign="top"
><P 

>QueryDataDescription </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Relative Path </P
></TD
><TD  
 valign="top"
><P 

>Attribute </P
></TD
><TD  
 valign="top"
><P 

>Index Range </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PersonType  </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:LastName&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AnimalType </P
></TD
><TD  
 valign="top"
><P 

>TRUE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;12.Name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The corresponding <I>ContentFilter</I> is illustrated in <A href="#LinkTarget_31900" href="#">
Figure B.12</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
> RelatedTo PersonType HasChild CatType PersonType FeedingSchedule Attribute or Property  Element Operator Element Literal Element or HasSchedule RelatedTo </DIV
></P
><P 

><B>Figure B.12 &ndash; Example 8 Filter Logic Tree </P
><P 

><A href="#LinkTarget_31907" href="#">
</B>Table B.26</A>
 describes the elements, operators and operands used in the example. It is worth noting that a CatType is a subtype of AnimalType. </P
><P 

><B>Table B.26 &ndash; Example 8 ContentFilter </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>Operator </P
></TD
><TD  
 valign="top"
><P 

>Operand[0] </P
></TD
><TD  
 valign="top"
><P 

>Operand[1] </P
></TD
><TD  
 valign="top"
><P 

>Operand[2] </P
></TD
><TD  
 valign="top"
><P 

>Operand[3] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>Or </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand=1 </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 2 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;,  </P
><P 

>Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:HasChild, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:CatType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:FeedingScheduleType, BrowsePath &ldquo;.&rdquo;,  </P
><P 

>Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:HasSchedule, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The results from this query would contain the <I>QueryDataSets</I> shown in <A href="#LinkTarget_31975" href="#">
Table B.27</A>
. If this is compared to the result set from example 2, the only difference is the omission of the Cat <I>Nodes</I>. These <I>Nodes</I> are not in the <I>View</I> and thus are not included in the result set.<I> </I></P
><P 

><B>Table B.27 &ndash; Example 8 QueryDataSets </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeId </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition NodeId </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>12:30 (Jfamily1) </P
></TD
><TD  
 valign="top"
><P 

>Persontype </P
></TD
><TD  
 valign="top"
><P 

>.12:LastName </P
></TD
><TD  
 valign="top"
><P 

>Jones </P
></TD
></TR
></TABLE
><P 

> </P
><P 

>NOTE The RelativePath column and browse name (in parentheses in the <I>NodeId</I> column) are not in the <I>QueryDataSet</I> and are only shown here for clarity. The TypeDefinition NodeId would be an integer not the symbolic name that is included in the table. </P
><H3 
 ID="LinkTarget_31999"
><FONT size="+1"><B>B.2.12 Example 9 </H3
><P 

></B>The ninth example provides a further illustration for a request in which the <I>AddressSpace</I> is restricted by a <I>Server</I> defined <I>View</I>. This request is similar to the second example except that some of the requested nodes are expressed in terms of a relative path. It is <B>important</B> to note that the <I>ContentFilter</I> is the same, only the View description would be specified as &ldquo;View1&rdquo;. </P
><P 

><B>Example 9: Get PersonType.LastName, AnimalType.Name where a person has a child or (a pet is of type cat and has a feeding schedule) limited by the <I>AddressSpace</I> in View1. </P
><P 

><A href="#LinkTarget_32007" href="#">
</B>Table B.28</A>
 describes the NodeTypeDescription parameters used in the example. </P
><P 

><B>Table B.28 &ndash; Example 9 NodeTypeDescription  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Type Definition Node </P
></TD
><TD  
 valign="top"
><P 

>Include </P
><P 

>Subtypes </P
></TD
><TD  
 valign="top"
><P 

>QueryDataDescription </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Relative Path </P
></TD
><TD  
 valign="top"
><P 

>Attribute </P
></TD
><TD  
 valign="top"
><P 

>Index Range </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>PersonType </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.NodeId&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt;12:PersonType&lt;12:HasAnimal&gt;12:AnimalType.NodeId </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasChild&gt;12:PersonType </P
><P 

>&lt;12:HasAnimal&gt; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>PersonType  </P
></TD
><TD  
 valign="top"
><P 

>FALSE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:LastName&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>&lt;12:HasAnimal&gt;12:AnimalType. 12:Name </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AnimalType </P
></TD
><TD  
 valign="top"
><P 

>TRUE </P
></TD
><TD  
 valign="top"
><P 

>&ldquo;.12:name&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>value </P
></TD
><TD  
 valign="top"
><P 

>N/A </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The corresponding <I>ContentFilter</I> is illustrated in <A href="#LinkTarget_32167" href="#">
Figure B.13</A>
. </P
><P 

> </P
><DIV class="Sect" 

><P 

><FONT size="+1">FeedingSchedule </P
><IMG width="101" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_235.jpg" ></DIV
><DIV class="Sect" 

><P 

>HasSchedule </P
><IMG width="87" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_236.jpg" ></DIV
><DIV class="Sect" 

><P 

>Attribute or Property  </P
><P 

>Element </P
></DIV
><DIV class="Sect" 

><P 

>Literal Element </P
></DIV
><DIV class="Sect" 

><P 

>Operator Element </P
></DIV
><IMG width="27" height="26"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_237.jpg" ><IMG width="35" height="26"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_238.jpg" ><IMG width="27" height="26"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_239.jpg" ><DIV class="Sect" 

><P 

>RelatedTo </P
><IMG width="87" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_240.jpg" ></DIV
><DIV class="Sect" 

><P 

><FONT size="+1">or </P
><IMG width="45" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_241.jpg" ></DIV
><DIV class="Sect" 

><P 

><FONT size="+1">PersonType </P
><IMG width="77" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_242.jpg" ></DIV
><DIV class="Sect" 

><P 

>CatType </P
><IMG width="77" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_243.jpg" ></DIV
><DIV class="Sect" 

><P 

>HasChild </P
><IMG width="87" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_244.jpg" ></DIV
><DIV class="Sect" 

><P 

>PersonType </P
><IMG width="77" height="34"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_245.jpg" ></DIV
><DIV class="Sect" 

><P 

>RelatedTo </P
><IMG width="87" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_246.jpg" ></DIV
><IMG width="36" height="56"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_247.jpg" ><IMG width="78" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_248.jpg" ><IMG width="78" height="56"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_249.jpg" ><IMG width="46" height="46"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_250.jpg" ><IMG width="88" height="35"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_251.jpg" ><IMG width="36" height="46"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_252.jpg" ><IMG width="88" height="56"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_253.jpg" ><IMG width="26" height="56"
 src="images/OPC UA Part 4 - Services 1.03 Specification_img_254.jpg" ><P 

><FONT size="+1"><B>Figure B.13 &ndash; Example 9 Filter Logic Tree </P
><P 

><A href="#LinkTarget_32173" href="#">
</B>Table B.29</A>
 describes the elements, operators and operands used in the example. </P
><P 

><B>Table B.29 &ndash; Example 9 ContentFilter </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Element[] </P
></TD
><TD  
 valign="top"
><P 

>Operator </P
></TD
><TD  
 valign="top"
><P 

>Operand[0] </P
></TD
><TD  
 valign="top"
><P 

>Operand[1] </P
></TD
><TD  
 valign="top"
><P 

>Operand[2] </P
></TD
><TD  
 valign="top"
><P 

>Operand[3] </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>0 </P
></TD
><TD  
 valign="top"
><P 

>Or </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand=1 </P
></TD
><TD  
 valign="top"
><P 

>ElementOperand = 2 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:PersonType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:HasChild, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>RelatedTo </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:CatType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId  </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:FeedingScheduleType, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>AttributeOperand = NodeId: 12:HasSchedule, BrowsePath &ldquo;.&rdquo;, Attribute: NodeId </P
></TD
><TD  
 valign="top"
><P 

>LiteralOperand = &lsquo;1&rsquo; </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1">The results from this <I>Query</I> would contain the <I>QueryDataSets</I> shown in <A href="#LinkTarget_32238" href="#">
Table B.30</A>
. If this is compared to the result set from example 2, the Pet <I>Nodes</I> are included in the list, even though they are outside of the <I>View</I>. This is possible since the name referenced via the relative path and the root <I>Node</I> is in the <I>View</I>.<I> </I></P
><P 

><B>Table B.30 &ndash; Example 9 QueryDataSets </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">NodeId </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition NodeId </P
></TD
><TD  
 valign="top"
><P 

>RelativePath </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>12:30 (Jfamily1) </P
></TD
><TD  
 valign="top"
><P 

>PersonType </P
></TD
><TD  
 valign="top"
><P 

>. 12:LastName </P
></TD
><TD  
 valign="top"
><P 

>Jones </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasAnimal&gt;12:AnimalType. 12:Name </P
></TD
><TD  
 valign="top"
><P 

>Rosemary </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>&lt;12:HasAnimal&gt;12:AnimalType. 12:Name </P
></TD
><TD  
 valign="top"
><P 

>Basil </P
></TD
></TR
></TABLE
><P 

> </P
><P 

>NOTE The RelativePath column and browse name (in parentheses in the <I>NodeId</I> column) are not in the QueryDataSet and are only shown here for clarity. The TypeDefinition NodeId would be an integer not the symbolic name that is included in the table. </P
><P 

><FONT size="+1"> </P
><P 

> </P
></BODY>
</HTML>
