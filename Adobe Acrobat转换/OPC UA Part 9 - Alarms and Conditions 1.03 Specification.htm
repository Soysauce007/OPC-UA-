<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!-- Created from PDF via Acrobat SaveAsXML -->
<!-- Mapping table version: 28-February-2003 -->
<HTML>
<HEAD>
<META
 name="dc.creator"
 content="Paul Hunkar" >
<META
 name="dc.description"
 content="Alarm & Conditions" >
<META
 name="dc.title"
 content="OPC Unified Architecture" >
<META
 name="dc.date"
 content="2016-03-04T12:53:33-05:00" >
<META
 name="dc.date.modified"
 content="2016-03-04T12:53:33-05:00" >
<META
 name="generator"
 content="Adobe Acrobat Exchange-Pro 8.0" >
</HEAD>
<BODY bgcolor=white text=black link=blue vlink=purple alink=fushia >
<HR>
<UL>
<LI>
<A href="#LinkTarget_2693">FIGURES</A>
</LI>
<LI>
<A href="#LinkTarget_2864">TABLES</A>
</LI>
<LI>
<A href="#LinkTarget_3562">1 Scope</A>
</LI>
<LI>
<A href="#LinkTarget_3564">2 Normative references</A>
</LI>
<LI>
<A href="#LinkTarget_3589">3 Terms, definitions, and abbreviations</A>
<UL>
<LI>
<A href="#LinkTarget_3590">3.1 Terms and definitions</A>
</LI>
<LI>
<A href="#LinkTarget_3745">3.2 Abbreviations and symbols</A>
</LI>
<LI>
<A href="#LinkTarget_3750">3.3 Used data types</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_3851">4 Concepts</A>
<UL>
<LI>
<A href="#LinkTarget_3852">4.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_3875">4.2 Conditions</A>
</LI>
<LI>
<A href="#LinkTarget_3934">4.3 Acknowledgeable Conditions</A>
</LI>
<LI>
<A href="#LinkTarget_4010">4.4 Previous states of Conditions</A>
</LI>
<LI>
<A href="#LinkTarget_4014">4.5 Condition state synchronization</A>
</LI>
<LI>
<A href="#LinkTarget_4036">4.6 Severity, quality, and comment</A>
</LI>
<LI>
<A href="#LinkTarget_4047">4.7 Dialogs</A>
</LI>
<LI>
<A href="#LinkTarget_4049">4.8 Alarms</A>
</LI>
<LI>
<A href="#LinkTarget_4089">4.9 Multiple active states</A>
</LI>
<LI>
<A href="#LinkTarget_4118">4.10 Condition instances in the AddressSpace</A>
</LI>
<LI>
<A href="#LinkTarget_4122">4.11 Alarm and Condition auditing</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_4133">5 Model</A>
<UL>
<LI>
<A href="#LinkTarget_4134">5.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_4156">5.2 Two-state state machines</A>
</LI>
<LI>
<A href="#LinkTarget_4345">5.3 Condition variables</A>
</LI>
<LI>
<A href="#LinkTarget_4425">5.4 Sub state ReferenceTypes</A>
<UL>
<LI>
<A href="#LinkTarget_4426">5.4.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_4444">5.4.2 HasTrueSubState ReferenceType</A>
</LI>
<LI>
<A href="#LinkTarget_4508">5.4.3 HasFalseSubState ReferenceType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_4573">5.5 Condition Model</A>
<UL>
<LI>
<A href="#LinkTarget_4575">5.5.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_4587">5.5.2 ConditionType</A>
</LI>
<LI>
<A href="#LinkTarget_5051">5.5.3 Condition and branch instances</A>
</LI>
<LI>
<A href="#LinkTarget_5057">5.5.4 Disable Method</A>
</LI>
<LI>
<A href="#LinkTarget_5140">5.5.5 Enable Method</A>
</LI>
<LI>
<A href="#LinkTarget_5222">5.5.6 AddComment Method</A>
</LI>
<LI>
<A href="#LinkTarget_5376">5.5.7 ConditionRefresh Method</A>
</LI>
<LI>
<A href="#LinkTarget_5567">5.5.8 ConditionRefresh2 Method</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_5785">5.6 Dialog Model</A>
<UL>
<LI>
<A href="#LinkTarget_5786">5.6.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_5788">5.6.2 DialogConditionType</A>
</LI>
<LI>
<A href="#LinkTarget_5999">5.6.3 Respond Method</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6130">5.7 Acknowledgeable Condition Model</A>
<UL>
<LI>
<A href="#LinkTarget_6131">5.7.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_6134">5.7.2 AcknowledgeableConditionType</A>
</LI>
<LI>
<A href="#LinkTarget_6325">5.7.3 Acknowledge Method</A>
</LI>
<LI>
<A href="#LinkTarget_6486">5.7.4 Confirm Method</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_6655">5.8 Alarm model</A>
<UL>
<LI>
<A href="#LinkTarget_6668">5.8.1 AlarmConditionType</A>
</LI>
<LI>
<A href="#LinkTarget_6842">5.8.2 ShelvedStateMachineType</A>
<UL>
<LI>
<A href="#LinkTarget_6843">5.8.2.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_7433">5.8.2.2 Unshelve Method</A>
</LI>
<LI>
<A href="#LinkTarget_7515">5.8.2.3 TimedShelve Method</A>
</LI>
<LI>
<A href="#LinkTarget_7651">5.8.2.4 OneShotShelve Method</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_7735">5.8.3 LimitAlarmType</A>
</LI>
<LI>
<A href="#LinkTarget_7888">5.8.4 ExclusiveLimit Types</A>
<UL>
<LI>
<A href="#LinkTarget_7889">5.8.4.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_7891">5.8.4.2 ExclusiveLimitStateMachineType</A>
</LI>
<LI>
<A href="#LinkTarget_8210">5.8.4.3 ExclusiveLimitAlarmType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8334">5.8.5 NonExclusiveLimitAlarmType</A>
</LI>
<LI>
<A href="#LinkTarget_8507">5.8.6 Level Alarm</A>
<UL>
<LI>
<A href="#LinkTarget_8508">5.8.6.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_8510">5.8.6.2 NonExclusiveLevelAlarmType</A>
</LI>
<LI>
<A href="#LinkTarget_8579">5.8.6.3 ExclusiveLevelAlarmType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8646">5.8.7 Deviation Alarm</A>
<UL>
<LI>
<A href="#LinkTarget_8647">5.8.7.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_8650">5.8.7.2 NonExclusiveDeviationAlarmType</A>
</LI>
<LI>
<A href="#LinkTarget_8720">5.8.7.3 ExclusiveDeviationAlarmType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8787">5.8.8 Rate of change Alarms</A>
<UL>
<LI>
<A href="#LinkTarget_8788">5.8.8.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_8791">5.8.8.2 NonExclusiveRateOfChangeAlarmType</A>
</LI>
<LI>
<A href="#LinkTarget_8874">5.8.8.3 ExclusiveRateOfChangeAlarmType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_8955">5.8.9 Discrete Alarms</A>
<UL>
<LI>
<A href="#LinkTarget_8956">5.8.9.1 DiscreteAlarmType</A>
</LI>
<LI>
<A href="#LinkTarget_9033">5.8.9.2 OffNormalAlarmType</A>
</LI>
<LI>
<A href="#LinkTarget_9136">5.8.9.3 SystemOffNormalAlarmType</A>
</LI>
<LI>
<A href="#LinkTarget_9194">5.8.9.4 TripAlarmType</A>
</LI>
<LI>
<A href="#LinkTarget_9255">5.8.9.5 CertificateExpirationAlarmType</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9358">5.9 ConditionClasses</A>
<UL>
<LI>
<A href="#LinkTarget_9360">5.9.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_9373">5.9.2 BaseConditionClassType</A>
</LI>
<LI>
<A href="#LinkTarget_9435">5.9.3 ProcessConditionClassType</A>
</LI>
<LI>
<A href="#LinkTarget_9497">5.9.4 MaintenanceConditionClassType</A>
</LI>
<LI>
<A href="#LinkTarget_9561">5.9.5 SystemConditionClassType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_9613">5.10 Audit Events</A>
<UL>
<LI>
<A href="#LinkTarget_9623">5.10.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_9637">5.10.2 AuditConditionEventType</A>
</LI>
<LI>
<A href="#LinkTarget_9702">5.10.3 AuditConditionEnableEventType</A>
</LI>
<LI>
<A href="#LinkTarget_9756">5.10.4 AuditConditionCommentEventType</A>
</LI>
<LI>
<A href="#LinkTarget_9838">5.10.5 AuditConditionRespondEventType</A>
</LI>
<LI>
<A href="#LinkTarget_9920">5.10.6 AuditConditionAcknowledgeEventType</A>
</LI>
<LI>
<A href="#LinkTarget_10002">5.10.7 AuditConditionConfirmEventType</A>
</LI>
<LI>
<A href="#LinkTarget_10085">5.10.8 AuditConditionShelvingEventType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10167">5.11 Condition Refresh related Events</A>
<UL>
<LI>
<A href="#LinkTarget_10168">5.11.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_10180">5.11.2 RefreshStartEventType</A>
</LI>
<LI>
<A href="#LinkTarget_10242">5.11.3 RefreshEndEventType</A>
</LI>
<LI>
<A href="#LinkTarget_10305">5.11.4 RefreshRequiredEventType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10368">5.12 HasCondition Reference type</A>
</LI>
<LI>
<A href="#LinkTarget_10447">5.13 Alarm & Condition status codes</A>
</LI>
<LI>
<A href="#LinkTarget_10529">5.14 Expected A&C server behaviours</A>
<UL>
<LI>
<A href="#LinkTarget_10530">5.14.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_10532">5.14.2 Communication problems</A>
</LI>
<LI>
<A href="#LinkTarget_10549">5.14.3 Redundant A&C servers</A>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10561">6 AddressSpace organisation</A>
<UL>
<LI>
<A href="#LinkTarget_10562">6.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_10570">6.2 EventNotifier and source hierarchy</A>
</LI>
<LI>
<A href="#LinkTarget_10587">6.3 Adding Conditions to the hierarchy</A>
</LI>
<LI>
<A href="#LinkTarget_10601">6.4 Conditions in InstanceDeclarations</A>
</LI>
<LI>
<A href="#LinkTarget_10612">6.5 Conditions in a VariableType</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_10626">Annex A  (informative) Recommended localized names</A>
<UL>
<LI>
<A href="#LinkTarget_10628">A.1 Recommended state names for TwoState variables</A>
<UL>
<LI>
<A href="#LinkTarget_10629">A.1.1 LocaleId &ldquo;en&rdquo;</A>
</LI>
<LI>
<A href="#LinkTarget_10842">A.1.2 LocaleId &ldquo;de&rdquo;</A>
</LI>
<LI>
<A href="#LinkTarget_11054">A.1.3 LocaleId &ldquo;fr&rdquo;</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11268">A.2 Recommended dialog response options</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11374">Annex B  (informative) Examples</A>
<UL>
<LI>
<A href="#LinkTarget_11376">B.1 Examples for Event sequences from Condition instances</A>
<UL>
<LI>
<A href="#LinkTarget_11377">B.1.1 Overview</A>
</LI>
<LI>
<A href="#LinkTarget_11379">B.1.2 Server maintains current state only</A>
</LI>
<LI>
<A href="#LinkTarget_11586">B.1.3 Server maintains previous states</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11872">B.2 AddressSpace examples</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_11906">Annex C  (informative) Mapping to EEMUA</A>
</LI>
<LI>
<A href="#LinkTarget_12065">Annex D (informative) Mapping from OPC A&E to OPC UA A&C</A>
<UL>
<LI>
<A href="#LinkTarget_12067">D.1  Overview</A>
</LI>
<LI>
<A href="#LinkTarget_12073">D.2 Alarms and Events COM UA wrapper</A>
<UL>
<LI>
<A href="#LinkTarget_12074">D.2.1 Event areas</A>
</LI>
<LI>
<A href="#LinkTarget_12081">D.2.2 Event sources</A>
</LI>
<LI>
<A href="#LinkTarget_12084">D.2.3 Event categories</A>
</LI>
<LI>
<A href="#LinkTarget_12277">D.2.4 Event attributes</A>
</LI>
<LI>
<A href="#LinkTarget_12279">D.2.5 Event subscriptions</A>
</LI>
<LI>
<A href="#LinkTarget_12606">D.2.6 Condition instances</A>
</LI>
<LI>
<A href="#LinkTarget_12609">D.2.7 Condition Refresh</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12611">D.3 Alarms and Events COM UA proxy</A>
<UL>
<LI>
<A href="#LinkTarget_12613">D.3.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_12626">D.3.2 Server status mapping</A>
</LI>
<LI>
<A href="#LinkTarget_12629">D.3.3 Event Type mapping</A>
</LI>
<LI>
<A href="#LinkTarget_12650">D.3.4 Event category mapping</A>
</LI>
<LI>
<A href="#LinkTarget_12672">D.3.5 Event Category attribute mapping</A>
</LI>
<LI>
<A href="#LinkTarget_12912">D.3.6 Event Condition mapping</A>
</LI>
<LI>
<A href="#LinkTarget_12919">D.3.7 Browse mapping</A>
</LI>
<LI>
<A href="#LinkTarget_12925">D.3.8 Qualified names</A>
<UL>
<LI>
<A href="#LinkTarget_12926">D.3.8.1 Qualified name syntax</A>
</LI>
<LI>
<A href="#LinkTarget_12937">D.3.8.2 Namespace table</A>
</LI>
</UL>
</LI>
<LI>
<A href="#LinkTarget_12946">D.3.9 Subscription filters</A>
<UL>
<LI>
<A href="#LinkTarget_12947">D.3.9.1 General</A>
</LI>
<LI>
<A href="#LinkTarget_12949">D.3.9.2 Filter by Event, category or severity</A>
</LI>
<LI>
<A href="#LinkTarget_12951">D.3.9.3 Filter by source</A>
</LI>
<LI>
<A href="#LinkTarget_12953">D.3.9.4 Filter by area</A>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</HR>
<DIV class="Part" 

><P 

><FONT size="+1" color="#000000"></B>` </P
><P 

> <DIV class="Sect" 
 Alt=""
>  F  O  U  N  D  A  T  I  O  N &reg; </DIV
></P
><P 

><FONT size="+3"><B>OPC Unified Architecture </P
><P 

>Specification </P
><P 

>Part 9: Alarms &amp; Conditions </P
><P 

>Release 1.03 </P
><P 

>March 4, 2016 </P
><P 

>  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1"></B>Specification Type: </P
></TD
><TD  
 valign="top"
><P 

>Industry Standard Specification </P
></TD
><TD  
 valign="top"
><P 

>Comments: </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Title: </P
></TD
><TD  
 valign="top"
><P 

>OPC Unified Architecture  Part 9 :Alarms &amp; Conditions </P
></TD
><TD  
 valign="top"
><P 

>Date: </P
></TD
><TD  
 valign="top"
><P 

>March 4, 2016 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Version: </P
></TD
><TD  
 valign="top"
><P 

>Release 1.03 </P
></TD
><TD  
 valign="top"
><P 

>Software: </P
></TD
><TD  
 valign="top"
><P 

>MS-Word </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>Source: </P
></TD
><TD  
 valign="top"
><P 

>OPC UA Part 9 - Alarms and Conditions 1.03 Specification.docx </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Author: </P
></TD
><TD  
 valign="top"
><P 

>OPC FOUNDATION </P
></TD
><TD  
 valign="top"
><P 

>Status: </P
></TD
><TD  
 valign="top"
><P 

>Release </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

>  </P
><DIV class="TOC" 

><DIV class="TOCI" 

><FONT size="+1">CONTENTS </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_2693" href="#">
<FONT size="+1"><B>FIGURES ............................................................................................................................... v</A>
<FONT size="+1"></B> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_2864" href="#">
<FONT size="+1"><B>TABLES ................................................................................................................................. vi</A>
<FONT size="+1"></B> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3562" href="#">
<FONT size="+1">1<FONT size="+1"> <FONT size="+1">Scope ............................................................................................................................. 1</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3564" href="#">
<FONT size="+1">2<FONT size="+1"> <FONT size="+1">Normative references ...................................................................................................... 1</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3589" href="#">
<FONT size="+1">3<FONT size="+1"> <FONT size="+1">Terms, definitions, and abbreviations .............................................................................. 1</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3590" href="#">
<FONT size="+1">3.1<FONT size="+1"> <FONT size="+1">Terms and definitions ............................................................................................. 1</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3745" href="#">
<FONT size="+1">3.2<FONT size="+1"> <FONT size="+1">Abbreviations and symbols ..................................................................................... 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3750" href="#">
<FONT size="+1">3.3<FONT size="+1"> <FONT size="+1">Used data types ..................................................................................................... 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3851" href="#">
<FONT size="+1">4<FONT size="+1"> <FONT size="+1">Concepts ........................................................................................................................ 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3852" href="#">
<FONT size="+1">4.1<FONT size="+1"> <FONT size="+1">General .................................................................................................................. 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3875" href="#">
<FONT size="+1">4.2<FONT size="+1"> <FONT size="+1">Conditions .............................................................................................................. 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3934" href="#">
<FONT size="+1">4.3<FONT size="+1"> <FONT size="+1">Acknowledgeable Conditions .................................................................................. 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4010" href="#">
<FONT size="+1">4.4<FONT size="+1"> <FONT size="+1">Previous states of Conditions ................................................................................. 6</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4014" href="#">
<FONT size="+1">4.5<FONT size="+1"> <FONT size="+1">Condition state synchronization .............................................................................. 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4036" href="#">
<FONT size="+1">4.6<FONT size="+1"> <FONT size="+1">Severity, quality, and comment ............................................................................... 7</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4047" href="#">
<FONT size="+1">4.7<FONT size="+1"> <FONT size="+1">Dialogs ................................................................................................................... 8</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4049" href="#">
<FONT size="+1">4.8<FONT size="+1"> <FONT size="+1">Alarms .................................................................................................................... 8</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4089" href="#">
<FONT size="+1">4.9<FONT size="+1"> <FONT size="+1">Multiple active states .............................................................................................. 9</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4118" href="#">
<FONT size="+1">4.10<FONT size="+1"> <FONT size="+1">Condition instances in the AddressSpace ............................................................. 10</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4122" href="#">
<FONT size="+1">4.11<FONT size="+1"> <FONT size="+1">Alarm and Condition auditing................................................................................ 10</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4133" href="#">
<FONT size="+1">5<FONT size="+1"> <FONT size="+1">Model ............................................................................................................................ 11</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4134" href="#">
<FONT size="+1">5.1<FONT size="+1"> <FONT size="+1">General ................................................................................................................ 11</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4156" href="#">
<FONT size="+1">5.2<FONT size="+1"> <FONT size="+1">Two-state state machines ..................................................................................... 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4345" href="#">
<FONT size="+1">5.3<FONT size="+1"> <FONT size="+1">Condition variables ............................................................................................... 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4425" href="#">
<FONT size="+1">5.4<FONT size="+1"> <FONT size="+1">Sub state ReferenceTypes ................................................................................... 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4426" href="#">
<FONT size="+1">5.4.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4444" href="#">
<FONT size="+1">5.4.2<FONT size="+1"> <FONT size="+1">HasTrueSubState ReferenceType ................................................................. 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4508" href="#">
<FONT size="+1">5.4.3<FONT size="+1"> <FONT size="+1">HasFalseSubState ReferenceType ................................................................ 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4573" href="#">
<FONT size="+1">5.5<FONT size="+1"> <FONT size="+1">Condition Model ................................................................................................... 15</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4575" href="#">
<FONT size="+1">5.5.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 15</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4587" href="#">
<FONT size="+1">5.5.2<FONT size="+1"> <FONT size="+1">ConditionType ............................................................................................... 15</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5051" href="#">
<FONT size="+1">5.5.3<FONT size="+1"> <FONT size="+1">Condition and branch instances .................................................................... 18</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5057" href="#">
<FONT size="+1">5.5.4<FONT size="+1"> <FONT size="+1">Disable Method ............................................................................................. 18</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5140" href="#">
<FONT size="+1">5.5.5<FONT size="+1"> <FONT size="+1">Enable Method .............................................................................................. 19</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5222" href="#">
<FONT size="+1">5.5.6<FONT size="+1"> <FONT size="+1">AddComment Method .................................................................................... 19</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5376" href="#">
<FONT size="+1">5.5.7<FONT size="+1"> <FONT size="+1">ConditionRefresh Method .............................................................................. 20</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5567" href="#">
<FONT size="+1">5.5.8<FONT size="+1"> <FONT size="+1">ConditionRefresh2 Method ............................................................................ 22</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5785" href="#">
<FONT size="+1">5.6<FONT size="+1"> <FONT size="+1">Dialog Model ........................................................................................................ 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5786" href="#">
<FONT size="+1">5.6.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5788" href="#">
<FONT size="+1">5.6.2<FONT size="+1"> <FONT size="+1">DialogConditionType ..................................................................................... 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5999" href="#">
<FONT size="+1">5.6.3<FONT size="+1"> <FONT size="+1">Respond Method ........................................................................................... 25</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6130" href="#">
<FONT size="+1">5.7<FONT size="+1"> <FONT size="+1">Acknowledgeable Condition Model ....................................................................... 25</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6131" href="#">
<FONT size="+1">5.7.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 25</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6134" href="#">
<FONT size="+1">5.7.2<FONT size="+1"> <FONT size="+1">AcknowledgeableConditionType .................................................................... 26</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6325" href="#">
<FONT size="+1">5.7.3<FONT size="+1"> <FONT size="+1">Acknowledge Method .................................................................................... 26</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6486" href="#">
<FONT size="+1">5.7.4<FONT size="+1"> <FONT size="+1">Confirm Method ............................................................................................ 27</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_6655" href="#">
<FONT size="+1">5.8<FONT size="+1"> <FONT size="+1">Alarm model ......................................................................................................... 28</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6668" href="#">
<FONT size="+1">5.8.1<FONT size="+1"> <FONT size="+1">AlarmConditionType ...................................................................................... 29</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6842" href="#">
<FONT size="+1">5.8.2<FONT size="+1"> <FONT size="+1">ShelvedStateMachineType ............................................................................ 30</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7735" href="#">
<FONT size="+1">5.8.3<FONT size="+1"> <FONT size="+1">LimitAlarmType ............................................................................................. 35</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7888" href="#">
<FONT size="+1">5.8.4<FONT size="+1"> <FONT size="+1">ExclusiveLimit Types..................................................................................... 36</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8334" href="#">
<FONT size="+1">5.8.5<FONT size="+1"> <FONT size="+1">NonExclusiveLimitAlarmType ........................................................................ 38</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8507" href="#">
<FONT size="+1">5.8.6<FONT size="+1"> <FONT size="+1">Level Alarm ................................................................................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8646" href="#">
<FONT size="+1">5.8.7<FONT size="+1"> <FONT size="+1">Deviation Alarm ............................................................................................ 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8787" href="#">
<FONT size="+1">5.8.8<FONT size="+1"> <FONT size="+1">Rate of change Alarms .................................................................................. 41</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8955" href="#">
<FONT size="+1">5.8.9<FONT size="+1"> <FONT size="+1">Discrete Alarms ............................................................................................ 42</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9358" href="#">
<FONT size="+1">5.9<FONT size="+1"> <FONT size="+1">ConditionClasses ................................................................................................. 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9360" href="#">
<FONT size="+1">5.9.1<FONT size="+1"> <FONT size="+1">Overview ....................................................................................................... 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9373" href="#">
<FONT size="+1">5.9.2<FONT size="+1"> <FONT size="+1">BaseConditionClassType .............................................................................. 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9435" href="#">
<FONT size="+1">5.9.3<FONT size="+1"> <FONT size="+1">ProcessConditionClassType .......................................................................... 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9497" href="#">
<FONT size="+1">5.9.4<FONT size="+1"> <FONT size="+1">MaintenanceConditionClassType .................................................................. 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9561" href="#">
<FONT size="+1">5.9.5<FONT size="+1"> <FONT size="+1">SystemConditionClassType ........................................................................... 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9613" href="#">
<FONT size="+1">5.10<FONT size="+1"> <FONT size="+1">Audit Events ......................................................................................................... 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9623" href="#">
<FONT size="+1">5.10.1<FONT size="+1"> <FONT size="+1">Overview ....................................................................................................... 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9637" href="#">
<FONT size="+1">5.10.2<FONT size="+1"> <FONT size="+1">AuditConditionEventType .............................................................................. 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9702" href="#">
<FONT size="+1">5.10.3<FONT size="+1"> <FONT size="+1">AuditConditionEnableEventType ................................................................... 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9756" href="#">
<FONT size="+1">5.10.4<FONT size="+1"> <FONT size="+1">AuditConditionCommentEventType ............................................................... 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9838" href="#">
<FONT size="+1">5.10.5<FONT size="+1"> <FONT size="+1">AuditConditionRespondEventType ................................................................ 48</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9920" href="#">
<FONT size="+1">5.10.6<FONT size="+1"> <FONT size="+1">AuditConditionAcknowledgeEventType ......................................................... 48</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10002" href="#">
<FONT size="+1">5.10.7<FONT size="+1"> <FONT size="+1">AuditConditionConfirmEventType .................................................................. 48</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10085" href="#">
<FONT size="+1">5.10.8<FONT size="+1"> <FONT size="+1">AuditConditionShelvingEventType ................................................................. 48</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10167" href="#">
<FONT size="+1">5.11<FONT size="+1"> <FONT size="+1">Condition Refresh related Events ......................................................................... 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10168" href="#">
<FONT size="+1">5.11.1<FONT size="+1"> <FONT size="+1">Overview ....................................................................................................... 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10180" href="#">
<FONT size="+1">5.11.2<FONT size="+1"> <FONT size="+1">RefreshStartEventType ................................................................................. 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10242" href="#">
<FONT size="+1">5.11.3<FONT size="+1"> <FONT size="+1">RefreshEndEventType .................................................................................. 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10305" href="#">
<FONT size="+1">5.11.4<FONT size="+1"> <FONT size="+1">RefreshRequiredEventType .......................................................................... 50</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10368" href="#">
<FONT size="+1">5.12<FONT size="+1"> <FONT size="+1">HasCondition Reference type ............................................................................... 50</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10447" href="#">
<FONT size="+1">5.13<FONT size="+1"> <FONT size="+1">Alarm &amp; Condition status codes ............................................................................ 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10529" href="#">
<FONT size="+1">5.14<FONT size="+1"> <FONT size="+1">Expected A&amp;C server behaviours ......................................................................... 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10530" href="#">
<FONT size="+1">5.14.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10532" href="#">
<FONT size="+1">5.14.2<FONT size="+1"> <FONT size="+1">Communication problems .............................................................................. 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10549" href="#">
<FONT size="+1">5.14.3<FONT size="+1"> <FONT size="+1">Redundant A&amp;C servers ................................................................................ 52</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10561" href="#">
<FONT size="+1">6<FONT size="+1"> <FONT size="+1">AddressSpace organisation ........................................................................................... 52</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10562" href="#">
<FONT size="+1">6.1<FONT size="+1"> <FONT size="+1">General ................................................................................................................ 52</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10570" href="#">
<FONT size="+1">6.2<FONT size="+1"> <FONT size="+1">EventNotifier and source hierarchy ....................................................................... 52</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10587" href="#">
<FONT size="+1">6.3<FONT size="+1"> <FONT size="+1">Adding Conditions to the hierarchy ....................................................................... 53</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10601" href="#">
<FONT size="+1">6.4<FONT size="+1"> <FONT size="+1">Conditions in InstanceDeclarations ....................................................................... 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10612" href="#">
<FONT size="+1">6.5<FONT size="+1"> <FONT size="+1">Conditions in a VariableType ................................................................................ 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10626" href="#">
<FONT size="+1">Annex A (informative) Recommended localized names ......................................................... 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10628" href="#">
<FONT size="+1">A.1<FONT size="+1"> <FONT size="+1">Recommended state names for TwoState variables.............................................. 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10629" href="#">
<FONT size="+1">A.1.1<FONT size="+1"> <FONT size="+1">LocaleId &ldquo;en&rdquo; ................................................................................................. 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10842" href="#">
<FONT size="+1">A.1.2<FONT size="+1"> <FONT size="+1">LocaleId &ldquo;de&rdquo; ................................................................................................. 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11054" href="#">
<FONT size="+1">A.1.3<FONT size="+1"> <FONT size="+1">LocaleId &ldquo;fr&rdquo; .................................................................................................. 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11268" href="#">
<FONT size="+1">A.2<FONT size="+1"> <FONT size="+1">Recommended dialog response options ............................................................... 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11374" href="#">
<FONT size="+1">Annex B (informative) Examples ........................................................................................... 58</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_11376" href="#">
<FONT size="+1">B.1<FONT size="+1"> <FONT size="+1">Examples for Event sequences from Condition instances ..................................... 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11377" href="#">
<FONT size="+1">B.1.1<FONT size="+1"> <FONT size="+1">Overview ....................................................................................................... 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11379" href="#">
<FONT size="+1">B.1.2<FONT size="+1"> <FONT size="+1">Server maintains current state only ............................................................... 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11586" href="#">
<FONT size="+1">B.1.3<FONT size="+1"> <FONT size="+1">Server maintains previous states .................................................................. 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11872" href="#">
<FONT size="+1">B.2<FONT size="+1"> <FONT size="+1">AddressSpace examples ...................................................................................... 60</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11906" href="#">
<FONT size="+1">Annex C (informative) Mapping to EEMUA ........................................................................... 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12065" href="#">
<FONT size="+1">Annex D (informative) Mapping from OPC A&amp;E to OPC UA A&amp;C .......................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12067" href="#">
<FONT size="+1">D.1<FONT size="+1"> <FONT size="+1">Overview .............................................................................................................. 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12073" href="#">
<FONT size="+1">D.2<FONT size="+1"> <FONT size="+1">Alarms and Events COM UA wrapper ................................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12074" href="#">
<FONT size="+1">D.2.1<FONT size="+1"> <FONT size="+1">Event areas................................................................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12081" href="#">
<FONT size="+1">D.2.2<FONT size="+1"> <FONT size="+1">Event sources ............................................................................................... 63</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12084" href="#">
<FONT size="+1">D.2.3<FONT size="+1"> <FONT size="+1">Event categories ........................................................................................... 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12277" href="#">
<FONT size="+1">D.2.4<FONT size="+1"> <FONT size="+1">Event attributes ............................................................................................. 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12279" href="#">
<FONT size="+1">D.2.5<FONT size="+1"> <FONT size="+1">Event subscriptions ....................................................................................... 65</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12606" href="#">
<FONT size="+1">D.2.6<FONT size="+1"> <FONT size="+1">Condition instances ....................................................................................... 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12609" href="#">
<FONT size="+1">D.2.7<FONT size="+1"> <FONT size="+1">Condition Refresh ......................................................................................... 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12611" href="#">
<FONT size="+1">D.3<FONT size="+1"> <FONT size="+1">Alarms and Events COM UA proxy ....................................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12613" href="#">
<FONT size="+1">D.3.1<FONT size="+1"> <FONT size="+1">General ......................................................................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12626" href="#">
<FONT size="+1">D.3.2<FONT size="+1"> <FONT size="+1">Server status mapping .................................................................................. 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12629" href="#">
<FONT size="+1">D.3.3<FONT size="+1"> <FONT size="+1">Event Type mapping ..................................................................................... 68</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12650" href="#">
<FONT size="+1">D.3.4<FONT size="+1"> <FONT size="+1">Event category mapping ................................................................................ 69</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12672" href="#">
<FONT size="+1">D.3.5<FONT size="+1"> <FONT size="+1">Event Category attribute mapping ................................................................. 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12912" href="#">
<FONT size="+1">D.3.6<FONT size="+1"> <FONT size="+1">Event Condition mapping .............................................................................. 73</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12919" href="#">
<FONT size="+1">D.3.7<FONT size="+1"> <FONT size="+1">Browse mapping ........................................................................................... 73</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12925" href="#">
<FONT size="+1">D.3.8<FONT size="+1"> <FONT size="+1">Qualified names ............................................................................................ 74</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12946" href="#">
<FONT size="+1">D.3.9<FONT size="+1"> <FONT size="+1">Subscription filters ........................................................................................ 75</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1">  </DIV
></DIV
><H1 
 ID="LinkTarget_2693"
><B>FIGURES </H1
><DIV class="TOC" 

><DIV class="TOCI" 

></B> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3923" href="#">
Figure 1 &ndash; BaseCondition state model .................................................................................... 4</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3957" href="#">
<FONT size="+1">Figure 2 &ndash; AcknowledgeableConditions state model ............................................................... 5</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3981" href="#">
<FONT size="+1">Figure 3 &ndash; Acknowledge state model ...................................................................................... 6</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="file:///C:/Users/jim.luth/Desktop/OPC%20UA%20Part%209%20-%20Alarms%20and%20Conditions%201.03%20Specification.docx%23_Toc444859317">
<FONT size="+1">Figure 4 - Confirmed Acknowledge state model ...................................................................... 6</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4056" href="#">
<FONT size="+1">Figure 5 &ndash; Alarm state machine model ................................................................................... 9</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4113" href="#">
<FONT size="+1">Figure 6 &ndash; Multiple active states example ............................................................................. 10</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4154" href="#">
<FONT size="+1">Figure 7 - ConditionType hierarchy....................................................................................... 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4586" href="#">
<FONT size="+1">Figure 8 &ndash; Condition model .................................................................................................. 15</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5804" href="#">
<FONT size="+1">Figure 9 - DialogConditionType Overview ............................................................................. 24</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6149" href="#">
<FONT size="+1">Figure 10 &ndash; AcknowledgeableConditionType overview.......................................................... 26</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6666" href="#">
<FONT size="+1">Figure 11 - AlarmConditionType hierarchy model ................................................................. 29</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6683" href="#">
<FONT size="+1">Figure 12 &ndash; Alarm Model ...................................................................................................... 29</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6870" href="#">
<FONT size="+1">Figure 13 &ndash; Shelve state transitions ..................................................................................... 31</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6887" href="#">
<FONT size="+1">Figure 14 &ndash; ShelvedStateMachineType model ...................................................................... 32</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7747" href="#">
<FONT size="+1">Figure 15 &ndash; LimitAlarmType.................................................................................................. 35</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7901" href="#">
<FONT size="+1">Figure 16 &ndash; ExclusiveLimitStateMachineType ....................................................................... 36</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8222" href="#">
<FONT size="+1">Figure 17 &ndash; ExclusiveLimitAlarmType ................................................................................... 38</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_8345" href="#">
<FONT size="+1">Figure 18 &ndash; NonExclusiveLimitAlarmType ............................................................................. 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8972" href="#">
<FONT size="+1">Figure 19 &ndash; DiscreteAlarmType Hierarchy ............................................................................ 43</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9369" href="#">
<FONT size="+1">Figure 20 &ndash; ConditionClass type hierarchy ........................................................................... 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9634" href="#">
<FONT size="+1">Figure 21 &ndash; AuditEvent hierarchy ......................................................................................... 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10179" href="#">
<FONT size="+1">Figure 22 &ndash; Refresh Related Event Hierarchy ....................................................................... 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10585" href="#">
<FONT size="+1">Figure 23 - Typical Event Hierarchy ..................................................................................... 53</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10599" href="#">
<FONT size="+1">Figure 24 - Use of HasCondition in an Event hierarchy ......................................................... 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10611" href="#">
<FONT size="+1">Figure 25 &ndash; Use of HasCondition in an InstanceDeclaration ................................................. 54</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10624" href="#">
<FONT size="+1">Figure 26 &ndash; Use of HasCondition in a VariableType .............................................................. 55</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11394" href="#">
<FONT size="+1">Figure B.1 &ndash; Single state example ........................................................................................ 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11602" href="#">
<FONT size="+1">Figure B.2 &ndash; Previous state example .................................................................................... 59</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11884" href="#">
<FONT size="+1">Figure B.3 &ndash; HasCondition used with Condition instances .................................................... 60</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11895" href="#">
<FONT size="+1">Figure B.4 &ndash; HasCondition reference to a Condition type...................................................... 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11904" href="#">
<FONT size="+1">Figure B.5 &ndash; HasCondition used with an instance declaration ............................................... 61</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12645" href="#">
<FONT size="+1">Figure D.2 &ndash; Mapping UA Event Types to COM A&amp;E Event Types ........................................ 69</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12665" href="#">
<FONT size="+1">Figure D.3 &ndash; Example mapping of UA Event Types to COM A&amp;E categories ......................... 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1">  </DIV
></DIV
><H1 
 ID="LinkTarget_2864"
><B>TABLES </H1
><DIV class="TOC" 

><DIV class="TOCI" 

></B> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3770" href="#">
Table 1 &ndash; Parameter types defined in Part 3 ........................................................................... 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_3831" href="#">
<FONT size="+1">Table 2 &ndash; Parameter types defined in Part 4 ........................................................................... 3</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4173" href="#">
<FONT size="+1">Table 3 &ndash; TwoStateVariableType definition ........................................................................... 12</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4353" href="#">
<FONT size="+1">Table 4 &ndash; ConditionVariableType definition .......................................................................... 13</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4454" href="#">
<FONT size="+1">Table 5 &ndash; HasTrueSubState ReferenceType ......................................................................... 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4519" href="#">
<FONT size="+1">Table 6 &ndash; HasFalseSubState ReferenceType ....................................................................... 14</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_4594" href="#">
<FONT size="+1">Table 7 &ndash; ConditionType definition ....................................................................................... 16</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5006" href="#">
<FONT size="+1">Table 8 &ndash; SimpleAttributeOperand ........................................................................................ 18</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5068" href="#">
<FONT size="+1">Table 9 &ndash; Disable result codes ............................................................................................. 18</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5095" href="#">
<FONT size="+1">Table 10 &ndash; Disable Method AddressSpace definition ............................................................ 19</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5151" href="#">
<FONT size="+1">Table 11 &ndash; Enable result codes ............................................................................................ 19</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5177" href="#">
<FONT size="+1">Table 12 &ndash; Enable Method AddressSpace definition ............................................................. 19</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5236" href="#">
<FONT size="+1">Table 13 &ndash; AddComment arguments ..................................................................................... 20</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5265" href="#">
<FONT size="+1">Table 14 &ndash; AddComment result codes .................................................................................. 20</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5317" href="#">
<FONT size="+1">Table 15 &ndash; AddComment Method AddressSpace definition ................................................... 20</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5389" href="#">
<FONT size="+1">Table 16 &ndash; ConditionRefresh parameters ............................................................................. 21</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5412" href="#">
<FONT size="+1">Table 17 &ndash; ConditionRefresh result codes ............................................................................ 21</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5491" href="#">
<FONT size="+1">Table 18 &ndash; ConditionRefresh Method AddressSpace definition ............................................. 22</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5582" href="#">
<FONT size="+1">Table 19 &ndash; ConditionRefresh2 parameters............................................................................ 22</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5610" href="#">
<FONT size="+1">Table 20 &ndash; ConditionRefresh2 result codes .......................................................................... 22</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5711" href="#">
<FONT size="+1">Table 21 &ndash; ConditionRefresh2 Method AddressSpace definition ........................................... 23</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_5806" href="#">
<FONT size="+1">Table 22 &ndash; DialogConditionType Definition ........................................................................... 24</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6011" href="#">
<FONT size="+1">Table 23 &ndash; Respond parameters........................................................................................... 25</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6034" href="#">
<FONT size="+1">Table 24 &ndash; Respond ResultCodes ........................................................................................ 25</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_6071" href="#">
<FONT size="+1">Table 25 &ndash; Respond Method AddressSpace definition .......................................................... 25</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6150" href="#">
<FONT size="+1">Table 26 &ndash; AcknowledgeableConditionType definition .......................................................... 26</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6340" href="#">
<FONT size="+1">Table 27 &ndash; Acknowledge parameters .................................................................................... 27</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6369" href="#">
<FONT size="+1">Table 28 &ndash; Acknowledge result codes .................................................................................. 27</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6427" href="#">
<FONT size="+1">Table 29 &ndash; Acknowledge Method AddressSpace definition ................................................... 27</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6501" href="#">
<FONT size="+1">Table 30 &ndash; Confirm Method parameters ................................................................................ 28</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6530" href="#">
<FONT size="+1">Table 31 &ndash; Confirm result codes ........................................................................................... 28</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6596" href="#">
<FONT size="+1">Table 32 &ndash; Confirm Method AddressSpace definition ............................................................ 28</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6684" href="#">
<FONT size="+1">Table 33 &ndash; AlarmConditionType definition ............................................................................ 30</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_6888" href="#">
<FONT size="+1">Table 34 &ndash;ShelvedStateMachineType definition ................................................................... 32</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7191" href="#">
<FONT size="+1">Table 35 &ndash; ShelvedStateMachineType transitions ................................................................ 33</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7444" href="#">
<FONT size="+1">Table 36 &ndash; Unshelve result codes......................................................................................... 33</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7470" href="#">
<FONT size="+1">Table 37 &ndash; Unshelve Method AddressSpace definition ......................................................... 33</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7533" href="#">
<FONT size="+1">Table 38 &ndash; TimedShelve parameters .................................................................................... 34</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7551" href="#">
<FONT size="+1">Table 39 &ndash; TimedShelve result codes ................................................................................... 34</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7592" href="#">
<FONT size="+1">Table 40 &ndash; TimedShelve Method AddressSpace definition .................................................... 34</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7662" href="#">
<FONT size="+1">Table 41 &ndash; OneShotShelve result codes ............................................................................... 35</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7690" href="#">
<FONT size="+1">Table 42 &ndash; OneShotShelve Method AddressSpace definition ................................................ 35</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7754" href="#">
<FONT size="+1">Table 43 &ndash; LimitAlarmType definition .................................................................................... 35</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_7912" href="#">
<FONT size="+1">Table 44 &ndash; ExclusiveLimitStateMachineType definition ......................................................... 37</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8066" href="#">
<FONT size="+1">Table 45 &ndash; ExclusiveLimitStateMachineType transitions ....................................................... 37</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8229" href="#">
<FONT size="+1">Table 46 &ndash; ExclusiveLimitAlarmType definition ..................................................................... 38</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8352" href="#">
<FONT size="+1">Table 47 &ndash; NonExclusiveLimitAlarmType definition ............................................................... 39</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8518" href="#">
<FONT size="+1">Table 48 &ndash; NonExclusiveLevelAlarmType definition .............................................................. 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8586" href="#">
<FONT size="+1">Table 49 &ndash; ExclusiveLevelAlarmType definition .................................................................... 40</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8660" href="#">
<FONT size="+1">Table 50 &ndash; NonExclusiveDeviationAlarmType definition ....................................................... 41</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8727" href="#">
<FONT size="+1">Table 51 &ndash; ExclusiveDeviationAlarmType definition .............................................................. 41</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8799" href="#">
<FONT size="+1">Table 52 &ndash; NonExclusiveRateOfChangeAlarmType definition ............................................... 42</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8881" href="#">
<FONT size="+1">Table 53 &ndash; ExclusiveRateOfChangeAlarmType definition ..................................................... 42</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_8973" href="#">
<FONT size="+1">Table 54 &ndash; DiscreteAlarmType definition .............................................................................. 43</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9040" href="#">
<FONT size="+1">Table 55 &ndash; OffNormalAlarmType Definition ........................................................................... 43</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9144" href="#">
<FONT size="+1">Table 56 &ndash; SystemOffNormalAlarmType definition ................................................................ 44</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9201" href="#">
<FONT size="+1">Table 57 &ndash; TripAlarmType definition ..................................................................................... 44</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9257" href="#">
<FONT size="+1">Table 58 &ndash; CertificateExpirationAlarmType definition ............................................................ 44</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9380" href="#">
<FONT size="+1">Table 59 &ndash; BaseConditionClassType definition ..................................................................... 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9442" href="#">
<FONT size="+1">Table 60 &ndash; ProcessConditionClassType definition ................................................................ 45</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9505" href="#">
<FONT size="+1">Table 61 &ndash; MaintenanceConditionClassType definition ......................................................... 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9568" href="#">
<FONT size="+1">Table 62 &ndash; SystemConditionClassType definition ................................................................. 46</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9644" href="#">
<FONT size="+1">Table 63 &ndash; AuditConditionEventType definition..................................................................... 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9709" href="#">
<FONT size="+1">Table 64 &ndash; AuditConditionEnableEventType definition .......................................................... 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9763" href="#">
<FONT size="+1">Table 65 &ndash; AuditConditionCommentEventType definition ...................................................... 47</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9846" href="#">
<FONT size="+1">Table 66 &ndash; AuditConditionRespondEventType definition ....................................................... 48</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_9927" href="#">
<FONT size="+1">Table 67 &ndash; AuditConditionAcknowledgeEventType definition ................................................ 48</A>
<FONT size="+1"> </DIV
></DIV
><DIV class="TOC" 

><DIV class="TOCI" 

><A href="#LinkTarget_10009" href="#">
<FONT size="+1">Table 68 &ndash; AuditConditionConfirmEventType definition ........................................................ 48</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10092" href="#">
<FONT size="+1">Table 69 &ndash; AuditConditionShelvingEventType definition ....................................................... 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10187" href="#">
<FONT size="+1">Table 70 &ndash; RefreshStartEventType definition ........................................................................ 49</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10249" href="#">
<FONT size="+1">Table 71 &ndash; RefreshEndEventType definition ......................................................................... 50</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10312" href="#">
<FONT size="+1">Table 72 &ndash; RefreshRequiredEventType definition ................................................................. 50</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10392" href="#">
<FONT size="+1">Table 73 &ndash; HasCondition reference type ............................................................................... 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10453" href="#">
<FONT size="+1">Table 74 &ndash; Alarm &amp; Condition result codes ........................................................................... 51</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10640" href="#">
<FONT size="+1">Table A.1 &ndash; Recommended state names for LocaleId &ldquo;en&rdquo; .................................................... 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10770" href="#">
<FONT size="+1">Table A.2 &ndash; Recommended display names for LocaleId &ldquo;en&rdquo; ................................................. 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10853" href="#">
<FONT size="+1">Table A.3 &ndash; Recommended state names for LocaleId &ldquo;de&rdquo; .................................................... 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_10972" href="#">
<FONT size="+1">Table A.4 &ndash; Recommended display names for LocaleId &ldquo;de&rdquo; ................................................. 56</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11066" href="#">
<FONT size="+1">Table A.5 &ndash; Recommended state names for LocaleId &ldquo;fr&rdquo; ..................................................... 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11186" href="#">
<FONT size="+1">Table A.6 &ndash; Recommended display names for LocaleId &ldquo;fr&rdquo; .................................................. 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11275" href="#">
<FONT size="+1">Table A.7 &ndash; Recommended dialog response options ............................................................ 57</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11395" href="#">
<FONT size="+1">Table B.1 &ndash; Example of a Condition that only keeps the latest state ..................................... 58</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11603" href="#">
<FONT size="+1">Table B.2 &ndash; Example of a <I>Condition</I> that maintains previous states via branches ................. 59</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_11913" href="#">
<FONT size="+1">Table C.1 &ndash; EEMUA Terms .................................................................................................. 62</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12093" href="#">
<FONT size="+1">Table D.1 &ndash; Mapping from standard Event categories to OPC UA Event types ..................... 64</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12290" href="#">
<FONT size="+1">Table D.2 &ndash; Mapping from ONEVENTSTRUCT fields to UA BaseEventType Variables ......... 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12385" href="#">
<FONT size="+1">Table D.3 &ndash; Mapping from ONEVENTSTRUCT fields to UA AuditEventType Variables ......... 66</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12441" href="#">
<FONT size="+1">Table D.4 &ndash; Mapping from ONEVENTSTRUCT fields to UA AlarmType Variables ................. 67</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><A href="#LinkTarget_12683" href="#">
<FONT size="+1">Table D.5 &ndash; Event category attribute mapping table ............................................................. 70</A>
<FONT size="+1"> </DIV
><DIV class="TOCI" 

><FONT size="+1"> </DIV
></DIV
><P 

><FONT size="+1"><B>OPC FOUNDATION </P
><P 

><FONT size="+1"></B>____________ </P
><P 

><FONT size="+1"><B> </P
><P 

>UNIFIED ARCHITECTURE &ndash;  </P
><P 

><FONT size="+1">FOREWORD </P
><P 

><FONT size="+1"></B>This specification is the specification for developers of OPC UA applications. The specification is a result of an analysis and design process to develop a standard interface to facilitate the development of applications by multiple vendors that shall inter-operate seamlessly together.  </P
><P 

><B>Copyright &copy; 2006-2016, OPC Foundation, Inc. </P
><P 

><FONT size="+1">AGREEMENT OF USE </P
><P 

><FONT size="+1"></B>COPYRIGHT RESTRICTIONS </P
><P 

>Any unauthorized use of this specification may violate copyright laws, trademark laws, and communications regulations and statutes. This document contains information which is protected by copyright. All Rights Reserved. No part of this work covered by copyright herein may be reproduced or used in any form or by any means--graphic, electronic, or mechanical, including photocopying, recording, taping, or information storage and retrieval systems--without permission of the copyright owner. </P
><P 

>OPC Foundation members and non-members are prohibited from copying and redistributing this specification. All copies must be obtained on an individual basis, directly from the OPC Foundation Web site <FONT size="+1">H<A href="http://www.opcfoundation.org/">
TUhttp://www.opcfoundation.orgUT</A>
H. </P
><P 

><FONT size="+1">PATENTS </P
><P 

>The attention of adopters is directed to the possibility that compliance with or adoption of OPC specifications may require use of an invention covered by patent rights. OPC shall not be responsible for identifying patents for which a license may be required by any OPC specification, or for conducting legal inquiries into the legal validity or scope of those patents that are brought to its attention. OPC specifications are prospective and advisory only. Prospective users are responsible for protecting themselves against liability for infringement of patents. </P
><P 

>WARRANTY AND LIABILITY DISCLAIMERS </P
><P 

>WHILE THIS PUBLICATION IS BELIEVED TO BE ACCURATE, IT IS PROVIDED &quot;AS IS&quot; AND MAY CONTAIN ERRORS OR MISPRINTS. THE OPC FOUDATION MAKES NO WARRANTY OF ANY KIND, EXPRESSED OR IMPLIED, WITH REGARD TO THIS PUBLICATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTY OF TITLE OR OWNERSHIP, IMPLIED WARRANTY OF MERCHANTABILITY OR WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE OR USE. IN NO EVENT SHALL THE OPC FOUNDATION BE LIABLE FOR ERRORS CONTAINED HEREIN OR FOR DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, RELIANCE OR COVER DAMAGES, INCLUDING LOSS OF PROFITS, REVENUE, DATA OR USE, INCURRED BY ANY USER OR ANY THIRD PARTY IN CONNECTION WITH THE FURNISHING, PERFORMANCE, OR USE OF THIS MATERIAL, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. </P
><P 

>The entire risk as to the quality and performance of software developed using this specification is borne by you.  </P
><P 

>RESTRICTED RIGHTS LEGEND </P
><P 

>This Specification is provided with Restricted Rights. Use, duplication or disclosure by the U.S. government is subject to restrictions as set forth in (a) this Agreement pursuant to DFARs 227.7202-3(a); (b) subparagraph (c)(1)(i) of the Rights in Technical Data and Computer Software clause at DFARs 252.227-7013; or (c) the Commercial Computer Software Restricted Rights clause at FAR 52.227-19 subdivision (c)(1) and (2), as applicable. Contractor / manufacturer are the OPC Foundation,. 16101 N. 82nd Street, Suite 3B, Scottsdale, AZ, 85260-1830 </P
><P 

>COMPLIANCE </P
><P 

>The OPC Foundation shall at all times be the sole entity that may authorize developers, suppliers and sellers of hardware and software to use certification marks, trademarks or other special designations to indicate compliance with these materials. Products developed using this specification may claim compliance or conformance with this specification if and only if the software satisfactorily meets the certification requirements set by the OPC Foundation. Products that do not meet these requirements may claim only that the product was based on this specification and must not claim compliance or conformance with this specification.  </P
><P 

>TRADEMARKS </P
><P 

>Most computer and software brand names have trademarks or registered trademarks. The individual trademarks have not been listed here. </P
><P 

>GENERAL PROVISIONS </P
><P 

>Should any provision of this Agreement be held to be void, invalid, unenforceable or illegal by a court, the validity and enforceability of the other provisions shall not be affected thereby.  </P
><P 

>This Agreement shall be governed by and construed under the laws of the State of Minnesota, excluding its choice or law rules. </P
><P 

>This Agreement embodies the entire understanding between the parties with respect to, and supersedes any prior understanding or agreement (oral or written) relating to, this specification.  </P
><P 

>ISSUE REPORTING </P
><P 

>The OPC Foundation strives to maintain the highest quality standards for its published specifications, hence they undergo constant review and refinement. Readers are encouraged to report any issues and view any existing errata here: <FONT size="+1">H<A href="http://www.opcfoundation.org/errata">
TUhttp://www.opcfoundation.org/errataUT</A>
H </P
><P 

><FONT size="+1"><B>Revision 1.03 Highlights </P
><P 

></B>The following table includes the Mantis issues resolved with this revision.  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><B>Mantis ID </P
></TD
><TD  
 valign="top"
><P 

>Summary </P
></TD
><TD  
 valign="top"
><P 

>Resolution </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2029">
<FONT size="+1" color="#0000FF"></B>2029</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Clarification on Refresh for a subscription </P
></TD
><TD  
 valign="top"
><P 

>Added text to explain expected behaviour if multiple monitored items are in the same subscription.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2195">
<FONT color="#0000FF">2195</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Information on Certificate expiration </P
></TD
><TD  
 valign="top"
><P 

>Added Acknowledgeable Condition to indicate if the Server certificate is about to expire. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2793">
<FONT color="#0000FF">2793</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Confirm relationship to Ack </P
></TD
><TD  
 valign="top"
><P 

>Any relationship is server specific, added text to explain that </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2789">
<FONT color="#0000FF">2789</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Result code for confirm method </P
></TD
><TD  
 valign="top"
><P 

>Fixed text to better explain what is required </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2797">
<FONT color="#0000FF">2797</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>AddComment: why Bad_MethodInvalid instead of Bad_NotSupported? </P
></TD
><TD  
 valign="top"
><P 

>Fixed sub text to correctly indicate EventId as the problem </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2798">
<FONT color="#0000FF">2798</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>AddComment: Required or Optional? Can't determine </P
></TD
><TD  
 valign="top"
><P 

>Added text to indicate that if the event referenced by the event id is not of condition type (or a sub type of it) comments are not allowed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2808">
<FONT color="#0000FF">2808</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Rate of Change: Missing a property for EngineeringUnits </P
></TD
><TD  
 valign="top"
><P 

>Added optional engineering units to the definition of Rate Of Change alarms </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2809">
<FONT color="#0000FF">2809</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Values of event fields not clear for Disabled state </P
></TD
><TD  
 valign="top"
><P 

>Added text to explain that an event could be null of the error code, the DA variable must be the error code </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2810">
<FONT color="#0000FF">2810</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Inconsistency in capitalization for LocaleId &ldquo;fr&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Fixed Caps </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2886">
<FONT color="#0000FF">2886</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>ConditionRefresh does not require Session check </P
></TD
><TD  
 valign="top"
><P 

>Fixed text to include description that a refresh can only apply to a subscription owned by the requesting session </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2940">
<FONT color="#0000FF">2940</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>Add status code for wrong session to Refresh methods </P
></TD
><TD  
 valign="top"
><P 

>Added text as recommended (Bad_UserAccessDenied) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2947">
<FONT color="#0000FF">2947</A>
<FONT color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

>0002947: IEC - additional feedback items (FDIS 62541-9 ed.2.0) </P
></TD
><TD  
 valign="top"
><P 

>Multiple minor fixes made &ndash; some requests not agreed with. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=2955">
<FONT color="#0000FF">2955</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

> <FONT size="+1">Call Service: objectId parameter description ambiguous </P
></TD
><TD  
 valign="top"
><P 

>Updated text and added <I>ConditionRefresh2</I> method </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=3028">
<FONT color="#0000FF">3028</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">CertificateExpirationType name </P
></TD
><TD  
 valign="top"
><P 

>Change header into CertificateExpirationAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><A href="https://opcfoundation-onlineapplications.org/mantis/view.php?id=3029">
<FONT color="#0000FF">3029</A>
<FONT size="+1" color="#000000"> </P
></TD
><TD  
 valign="top"
><P 

><FONT size="+1">CertificateExpirationType shall be sub-type of SystemOffNormalAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Changed to be subtype as required, included text updates to describe additional fields </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>OPC Unified Architecture Specification </P
><P 

><FONT size="+1"></B> </P
><P 

><FONT size="+1"><B>Part 9: Alarms &amp; Conditions </P
><P 

> </P
><P 

> </P
><H1 
 ID="LinkTarget_3562"
><FONT size="+1">1 Scope </H1
><P 

><FONT size="+1"></B>This document specifies the representation of <I>Alarms </I>and <I>Conditions</I> in the OPC Unified Architecture. Included is the <I>Information Model</I> representation of <I>Alarms </I>and <I>Conditions</I> in the OPC UA address space.  </P
><H1 
 ID="LinkTarget_3564"
><FONT size="+1"><B>2 Normative references </H1
><P 

><FONT size="+1"></B>The following documents, in whole or in part, are normatively referenced in this document and are indispensable for its application. </P
><P 

>Part 1: OPC UA Specification: Part 1 &ndash; Concepts </P
><P 

><FONT color="#0000FF"><B>http://www.opcfoundation.org/UA/Part1/ </P
><P 

><FONT color="#000000"></B>Part 3: <B>OPC UA Specification: Part 3 </B>&ndash; Address Space Model </P
><P 

><FONT color="#0000FF"><B>http://www.opcfoundation.org/UA</B>/<B>Part3/</B> </P
><P 

><FONT color="#000000">Part 4: <B>OPC UA Specification: Part 4 </B>&ndash; Services </P
><P 

><FONT color="#0000FF"><B>http://www.opcfoundation.org/UA</B>/Part4/ </P
><P 

><FONT color="#000000">Part 5: <B>OPC UA Specification: Part 5 </B>&ndash; Information Model </P
><P 

><FONT color="#0000FF"><B>http://www.opcfoundation.org/UA</B>/Part5/ </P
><P 

><FONT color="#000000">Part 6: <B>OPC UA Specification: Part 6 </B>&ndash; Mappings </P
><P 

><FONT color="#0000FF"><B>http://www.opcfoundation.org/UA</B>/Part6/ </P
><P 

><FONT color="#000000">Part 7: <B>OPC UA Specification: Part 7 </B>&ndash; Profiles </P
><P 

><FONT color="#0000FF"><B>http://www.opcfoundation.org/UA</B>/Part7/ </P
><P 

><FONT color="#000000">Part 8: <B>OPC UA Specification: Part 8 </B>&ndash; Data Access </P
><P 

><FONT color="#0000FF"><B>http://www.opcfoundation.org/UA</B>/Part8/ </P
><P 

><FONT color="#000000">Part 11: <B>OPC UA Specification: Part 11 </B>&ndash; Historical Access </P
><P 

><FONT color="#0000FF"><B>http://www.opcfoundation.org/UA</B>/Part11/ </P
><P 

><FONT color="#000000">EEMUA: 2nd Edition EEMUA 191 &ndash; <I>Alarm System</I><I> </I><I>&ndash;</I><I> </I><I>A guide to design, management and </I><I>procurement </I><I>(Appendixes 6, 7, 8, 9)</I> </P
><P 

><A href="https://www.eemua.org/Products/Publications/Print/EEMUA-Publication-191.aspx">
<FONT color="#0000FF"><B>https://www.eemua.org/Products/Publications/Print/EEMUA-Publication-191.aspx</A>
 </P
><P 

><FONT color="#000000"></B> </P
><H1 
 ID="LinkTarget_3589"
><FONT size="+1"><B>3 Terms, definitions, and abbreviations </H1
><H2 
 ID="LinkTarget_3590"
><FONT size="+1">3.1 Terms and definitions </H2
><P 

></B>For the purposes of this document, the terms and definitions given in <A href="#LinkTarget_3566" href="#">
Part 1</A>
, <A href="#LinkTarget_3568" href="#">
Part 3</A>
, <A href="#LinkTarget_3570" href="#">
Part 4</A>
, and <A href="#LinkTarget_3572" href="#">
Part 5</A>
 as well as the following apply. </P
><DL 

><DL 

><DL 

><DD 

><B>3.1.1  </DD
></DL
></DL
></DL
><P 

>Acknowledge </P
><P 

></B><I>Operator</I> action that indicates recognition of a new <I>Alarm</I> </P
><P 

><FONT size="+1">Note 1 to entry: This definition is copied from <A href="#LinkTarget_3582" href="#">
EEMUA</A>
. The term &ldquo;Accept&rdquo; is another common term used to describe <I>Acknowledge</I>. They can be used interchangeably. This document will use <I>Acknowledge.</I> </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.2  </DD
></DL
></DL
></DL
><P 

>Active </P
><P 

></B><I>state for an </I><I>Alarm</I> that indicates that the situation the <I>Alarm</I> is representing currently exists </P
><P 

><FONT size="+1">Note 1 to entry: Other common terms defined by <A href="#LinkTarget_3582" href="#">
EEMUA</A>
 are &ldquo;Standing&rdquo; for an <I>Active</I> <I>Alarm</I> and &ldquo;Cleared&rdquo; when the <I>Condition</I> has returned to normal and is no longer <I>Active</I>. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.3  </DD
></DL
></DL
></DL
><P 

>ConditionClass </P
><P 

></B>Condition grouping that indicates in which domain or for what purpose a certain <I>Condition</I> is used </P
><P 

><FONT size="+1">Note 1 to entry: Some top-level <I>ConditionClasses</I> are defined in this specification. Vendors or organisations may derive more concrete classes or define different top-level classes. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.4  </DD
></DL
></DL
></DL
><P 

>ConditionBranch </P
><P 

></B>specific state of a <I>Condition</I> </P
><P 

><FONT size="+1">Note 1 to entry: The <I>Server</I> can maintain <I>ConditionBranches</I> for the current state as well as for previous states. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.5  </DD
></DL
></DL
></DL
><P 

>ConditionSource </P
><P 

></B>element which a specific <I>Condition</I> is based upon or related to </P
><P 

><FONT size="+1">Note 1 to entry: Typically, it will be a <I>Variable</I> representing a process tag (e.g. FIC101) or an <I>Object</I> representing a device or subsystem. </P
><P 

>In <I>Events </I>generated for <I>Conditions</I>, the <I>SourceNode Property </I>(inherited from the <I>BaseEventType</I>) will contain the <I>NodeId</I> of the <I>ConditionSource</I>. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.6  </DD
></DL
></DL
></DL
><P 

>Confirm </P
><P 

></B><I>O</I><I>perator</I> action informing the <I>Server</I> that a corrective action has been taken to address the cause of the <I>Alarm</I> </P
><DL 

><DL 

><DL 

><DD 

><B>3.1.7  </DD
></DL
></DL
></DL
><P 

>Disable </P
><P 

></B> system is configured such that the <I>Alarm</I> will not be generated even though the base <I>Alarm</I> <I>Condi</I><I>tion</I> is present </P
><P 

><FONT size="+1">Note 1 to entry:  This definition is copied from <A href="#LinkTarget_3582" href="#">
EEMUA</A>
 and is further defined in <A href="#LinkTarget_3582" href="#">
EEMUA</A>
. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.8  </DD
></DL
></DL
></DL
><P 

>Operator </P
><P 

></B>special user who is assigned to monitor and control a portion of a process </P
><P 

><FONT size="+1">Note 1 to entry:  &ldquo;A Member of the operations team who is assigned to monitor and control a portion of the process and is working at the control system&rsquo;s Console&rdquo; as defined in <A href="#LinkTarget_3582" href="#">
EEMUA</A>
. In this standard an Operator is a special user. All descriptions that apply to general users also apply to Operators. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.9  </DD
></DL
></DL
></DL
><P 

>Refresh </P
><P 

></B>act of providing an update to an <I>Event</I> <I>Subscription</I> that provides all <I>A</I><I>larms</I> which are considered to be <I>Retained</I><FONT size="+1"> </P
><P 

>Note 1 to entry: This concept is further defined in <A href="#LinkTarget_3582" href="#">
EEMUA</A>
. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.10  </DD
></DL
></DL
></DL
><P 

>Retain </P
><P 

></B><I>Alarm</I> in a state that is interesting for a <I>Client</I> wishing to synchronize its state of <I>Conditions </I>with the <I>Server</I>&rsquo;s state </P
><DL 

><DL 

><DL 

><DD 

><B>3.1.11  </DD
></DL
></DL
></DL
><P 

>Shelving </P
><P 

></B>facility where the <I>Operator</I> is able to temporarily prevent an <I>Alarm</I> from being displayed to the <I>Operator</I> when it is causing the <I>Ope</I><I>rator</I> a nuisance </P
><P 

><FONT size="+1">Note 1 to entry &rdquo;A Shelved <I>Alarm</I> will be removed from the list and will not re-annunciate until un-shelved.&rdquo; as defined in <A href="#LinkTarget_3582" href="#">
EEMUA</A>
. </P
><DL 

><DL 

><DL 

><DD 

><FONT size="+1"><B>3.1.12  </DD
></DL
></DL
></DL
><P 

>Suppress </P
><P 

></B>act of determining whether an <I>Alarm</I> should not occur </P
><P 

><FONT size="+1">Note 1 to entry: &ldquo;An <I>Alarm</I> is suppressed when logical criteria are applied to determine that the <I>Alarm</I> should not occur, even though the base <I>Alarm</I> <I>Condition</I> (e.g. <I>Alarm</I> setting exceeded) is present&rdquo; as defined in <A href="#LinkTarget_3582" href="#">
EEMUA</A>
. </P
><H2 
 ID="LinkTarget_3745"
><FONT size="+1"><B>3.2 Abbreviations and symbols </H2
><P 

></B>A&amp;E Alarm &amp; Event (as used for OPC COM) </P
><P 

>COM (Microsoft Windows) Component Object Model </P
><P 

>DA Data Access </P
><P 

>UA  Unified Architecture </P
><H2 
 ID="LinkTarget_3750"
><B>3.3 Used data types </H2
><P 

></B>The following tables describe the data types that are used throughout this document. These types are separated into two tables. Base data types defined in <A href="#LinkTarget_3568" href="#">
Part 3</A>
 are given in <A href="#LinkTarget_3770" href="#">
Table 1</A>
. The base types and data types defined in <A href="#LinkTarget_3570" href="#">
Part 4</A>
 are given in <A href="#LinkTarget_3831" href="#">
Table 2</A>
. </P
><P 

><B>Table 1 &ndash; Parameter types defined in <A href="#LinkTarget_3568" href="#">
Part 3</A>
 </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Parameter Type  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Argument </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>BaseDataType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NodeId </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Boolean </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ByteString </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Double </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Duration </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>String </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UInt16 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Int32 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UtcTime </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><B>Table 2 &ndash; Parameter types defined in <A href="#LinkTarget_3570" href="#">
Part 4</A>
 </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Parameter Type  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>IntegerId </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>StatusCode </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H1 
 ID="LinkTarget_3851"
><FONT size="+1"><B>4 Concepts </H1
><H2 
 ID="LinkTarget_3852"
><FONT size="+1">4.1 General </H2
><P 

></B>This standard defines an <I>Information Model</I> for <I>Conditions</I>, Dialog<I> </I><I>Conditions</I>, and <I>Alarms</I> including acknowledgement capabilities. It is built upon and extends base Event handling which is defined in <A href="#LinkTarget_3568" href="#">
Part 3</A>
, <A href="#LinkTarget_3570" href="#">
Part 4</A>
 and <A href="#LinkTarget_3572" href="#">
Part 5</A>
. This <I>Information Model</I> can also be extended to support the additional needs of specific domains. The details of what aspects of the Information Model are supported are defined via Profiles (see <A href="#LinkTarget_3576" href="#">
Part 7</A>
 for Profile definitions). Some systems may expose historical Events and Conditions via the standard Historical Access framework (see <A href="#LinkTarget_3580" href="#">
Part 11</A>
 for Historical Event definitions). </P
><H2 
 ID="LinkTarget_3875"
><B>4.2 Conditions </H2
><P 

></B><I>Conditions</I> are used to represent the state of a system or one of its components. Some common examples are: </P
><DL 

><DD 

>&#61623; a temperature exceeding a configured limit </DD
><DD 

>&#61623; a device needing maintenance </DD
></DL
><DL 

><DD 

>&#61623; a batch process that requires a user to confirm some step in the process before proceeding </DD
></DL
><P 

>Each <I>Condition</I> instance is of a specific <I>ConditionType</I>. The <I>ConditionType</I> and derived types are sub-types of the <I>BaseEventType</I> (see <A href="#LinkTarget_3568" href="#">
Part 3</A>
 and <A href="#LinkTarget_3572" href="#">
Part 5</A>
). This part defines types that are common across many industries. It is expected that vendors or other standardisation groups will define additional <I>ConditionTypes</I> deriving from the common base types defined in this part. The <I>ConditionTypes</I> supported by a <I>Server</I> are exposed in the <I>AddressSpace</I> of the <I>Server</I>. </P
><P 

><I>Condition</I> instances are specific implementations of a <I>ConditionType</I>. It is up to the <I>Server</I> whether such instances are also exposed in the <I>Server&rsquo;s</I> <I>AddressSpace</I>. Clause <A href="#LinkTarget_4118" href="#">
4.10</A>
 provides additional background about <I>Condition</I> instances. <I>Condition</I> instances shall have a unique identifier to differentiate them from other instances. This is independent of whether they are exposed in the <I>AddressSpace</I>. </P
><P 

>As mentioned above, <I>Conditions</I> represent the state of a system or one of its components. In certain cases, however, previous states that still need attention also have to be maintained. <I>ConditionBranches</I> are introduced to deal with this requirement and distinguish current state and previous states. Each <I>ConditionBranch</I> has a BranchId that differentiates it from other branches of the same <I>Condition</I> instance. The <I>ConditionBra</I><I>nch</I> which represents the current state of the <I>Condition</I> (the trunk) has a Null BranchId. <I>Server</I>s can generate separate <I>Event</I> <I>Notifications </I>for each branch. When the state represented by a <I>ConditionBranch</I> does not need further attention, a final <I>Event</I> <I>Notif</I><I>ication</I> for this branch will have the <I>Retain</I> <I>Property</I> set to False. Clause <A href="#LinkTarget_4010" href="#">
4.4</A>
 provides more information and use cases. Maintaining previous states and therefore also the support of multiple branches is optional for <I>Servers</I>. </P
><P 

>Conceptually, the lifetime of the <I>Condition</I> instance is independent of its state. However, <I>Servers</I> may provide access to <I>Condition</I> instances only while <I>ConditionBranches</I> exist. </P
><P 

>The base <I>Condition</I> state model is illustrated in <A href="#LinkTarget_3923" href="#">
Figure 1</A>
. It is extended by the various <I>Condition</I> subtypes defined in this standard and may be further extended by vendors or other standardisation groups. The primary states of a <I>Condition</I> are disabled and enabled. The <I>D</I><I>isabled</I> state is intended to allow <I>Conditions</I> to be turned off at the <I>Server</I> or below the <I>Server</I> (in a device or some underlying system). The <I>E</I><I>nabled</I> state is normally extended with the addition of sub-states. </P
><P 

> </P
><IMG Alt="" width="197" height="233"
 src="images/OPC UA Part 9 - Alarms and Conditions 1.03 Specification_img_0.jpg" ><P 

><B>Figure 1 &ndash; BaseCondition state model </P
><P 

></B>A transition into the <I>Disable</I>d state results in a <I>Condition</I> <I>Event </I>however no subsequent <I>Event</I> <I>Notifications</I> are generated until the <I>Condition</I> returns to the Enabled state. </P
><P 

>When a <I>Condition</I> enters the Enabled state, that transition and all subsequent transitions result in <I>Condition</I> <I>Events</I> being generated by the <I>Server</I>. </P
><P 

>If <I>Auditing</I> is supported by a <I>Server</I>, the following <I>Auditing</I> related action shall be performed. The <I>Server</I> will generate <I>AuditEvents</I> for <I>Enable</I> and <I>D</I><I>isable</I> operations (either through a </P
><P 

><I>Method</I> call or some <I>Server</I> / vendor &ndash; specific means), rather than generating an <I>AuditEvent</I> <I>Notification</I> for each <I>Condition</I> instance being enabled or disabled. For more information, see the definition of <I>AuditConditionEnableEventType</I> in <A href="#LinkTarget_9637" href="#">
5.10.2</A>
. <I>AuditEvents</I> are also generated for any other <I>Operator</I> action that results in changes to the <I>Conditions</I>. </P
><H2 
 ID="LinkTarget_3934"
><B>4.3 Acknowledgeable Conditions </H2
><P 

></B><I>AcknowledgeableConditions</I> are sub-types of the base <I>ConditionType</I>. <I>AcknowledgeableConditions</I> expose states to indicate whether a <I>Condition</I> has to be acknowledged or confirmed. </P
><P 

>An <I>AckedState</I> and a <I>ConfirmedState</I> extend the <I>EnabledS</I><I>tate</I> defined by the <I>Condition</I>. The state model is illustrated in <A href="#LinkTarget_3957" href="#">
Figure 2</A>
. The enabled state is extended by adding the <I>AckedState</I> and (optionally) the <I>ConfirmedState</I>. </P
><P 

> </P
><IMG Alt="" width="450" height="283"
 src="images/OPC UA Part 9 - Alarms and Conditions 1.03 Specification_img_1.jpg" ><P 

><B>Figure 2 &ndash; AcknowledgeableConditions state model </P
><P 

></B>Acknowledgment of the transition may come from the <I>Client</I> or may be due to some logic internal to the <I>Server</I>. For example, acknowledgment of a related <I>Condition</I> may result in this <I>Condition</I> becoming acknowledged, or the <I>Condition</I> may be set up to automatically acknowledge itself when the acknowledgeable situation disappears. </P
><P 

>Two <I>Acknowledge</I> state models are supported by this standard. Either of these state models can be extended to support more complex acknowledgement situations. </P
><P 

>The basic <I>Acknowledge</I> state model is illustrated in <A href="#LinkTarget_3981" href="#">
Figure 3</A>
. This model defines an AckedState. The specific state changes that result in a change to the state depend on a Server&rsquo;s implementation. For example, in typical <I>Alarm</I> models the change is limited to a transition to the <I>Active</I> state or transitions within the <I>Active</I> state. More complex models however can also allow for changes to the AckedState when the <I>Condition</I> transitions to an inactive state. </P
><P 

> </P
><IMG Alt="" width="479" height="235"
 src="images/OPC UA Part 9 - Alarms and Conditions 1.03 Specification_img_2.jpg" ><P 

> </P
><P 

><B>Figure 3 &ndash; Acknowledge state model </P
><P 

></B>A more complex state model which adds a confirmation to the basic <I>Acknowledge</I> is illustrated in <A href="#LinkTarget_4009" href="#">
Figure 4</A>
. The <I>Confirmed</I> <I>Acknowledge</I> model is typically used to differentiate between acknowledging the presence of a <I>Condition</I> and having done something to address the <I>Condition</I>. For example an <I>Operat</I><I>or</I> receiving a motor high temperature <I>Notification</I> calls the <I>Acknowledge Method</I> to inform the <I>Server</I> that the high temperature has been observed. The <I>Operator</I> then takes some action such as lowering the load on the motor in order to reduce the temperature. The <I>Operator</I> then calls the <I>Confirm Method</I> to inform the <I>Server</I> that a corrective action has been taken. </P
><P 

><B> </P
><DIV class="Sect" 

><P 

>Figure 4 - Confirmed Acknowledge state model<FONT size="+1"> </P
></DIV
><IMG Alt="" width="605" height="254"
 src="images/OPC UA Part 9 - Alarms and Conditions 1.03 Specification_img_3.jpg" ><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_4010"
>4.4 Previous states of Conditions </H2
><P 

></B>Some systems require that previous states of a <I>Condition</I> are preserved for some time. A common use case is the acknowledgement process. In certain environments it is required to acknowledge both the transition into <I>Active</I> state and the transition into an inactive state. Systems with strict safety rules sometimes require that every transition into <I>Active</I> state has to be acknowledged. In situations where state changes occur in short succession there can be multiple unacknowledged states and the <I>Server</I> has to maintain <I>ConditionBranches</I> for all previous unacknowledged states. These branches will be deleted after they have been acknowledged or if they reached their final state. </P
><P 

><I>Multiple ConditionBranches</I> can also be used for other use cases where snapshots of previous states of a <I>Condition</I> require additional actions. </P
><H2 
 ID="LinkTarget_4014"
><B>4.5 Condition state synchronization </H2
><P 

></B>When a <I>Client</I> subscribes for <I>Events</I>, the <I>Notification</I> of transitions will begin at the time of the <I>Subscription</I>. The currently existing state will not be reported. This means for example that <I>Clients</I> are not informed of currently <I>Active</I> <I>Alarms</I> until a new state change occurs. </P
><P 

><I>Clients</I> can obtain the current state of all <I>Condition </I>instances that are in an interesting state, by requesting a <I>Refresh</I> for a <I>Subscription</I>. It should be noted that <I>Refresh</I> is not a general replay capability since the <I>Server</I> is not required to maintain an <I>Event</I> history. </P
><P 

><I>Clients</I> request a <I>Refresh</I> by calling the ConditionRefresh <I>Method</I>. The <I>Server</I> will respond with a <I>RefreshStartEvent</I>. This <I>Event</I> is followed by the <I>Retained</I> <I>Co</I><I>nditions</I>. The <I>Server</I> may also send new <I>Event</I> <I>Notification</I><I>s</I> interspersed with the <I>Refresh</I> related<I> </I><I>Event</I> <I>Notifications</I>. After the <I>Server</I> is done with the <I>Refresh</I>, a <I>RefreshEndEvent</I> is issued marking the completion of the Refresh. <I>Clients</I> shall check for multiple <I>Event</I> <I>Notifications</I> for a <I>ConditionBranch</I> to avoid overwriting a new state delivered together with an older state from the <I>Refresh</I> process. If a <I>ConditionBranch</I> exists, then the current <I>Condition</I> shall be reported. This is true even if the only interesting item regarding the <I>Condition</I> is that <I>ConditionBranches</I> exist. This allows a <I>Client</I> to accurately represent the current <I>Condition</I> state. </P
><P 

>A <I>Client</I> that wishes to display the current status of <I>Alarms </I>and <I>Conditions</I> (known as a &ldquo;current <I>Alarm </I>display&rdquo;) would use the following logic to process <I>Refresh</I> <I>Event</I> <I>Notifications</I>. The <I>Client</I> flags all <I>Retained</I> <I>Conditions</I> as suspect on reception of the <I>Event</I> of the <I>RefreshStartEvent</I>. The <I>Client</I> adds any new <I>Events</I> that are received during the Refresh without flagging them as suspect. The <I>Client</I> also removes the suspect flag from any <I>Retained</I> <I>Conditions</I> that are returned as part of the Refresh. When the <I>Client</I> receives a <I>RefreshEndEvent</I>, the <I>Client</I> removes any remaining suspect <I>Events</I>, since they no longer apply. </P
><P 

>The following items should be noted with regard to ConditionRefresh: </P
><DL 

><DD 

>&#61623; As described in <A href="#LinkTarget_4010" href="#">
4.4</A>
 some systems require that previous states of a <I>Condition</I> are preserved for some time. Some <I>Servers</I> &ndash; in particular if they require acknowledgement of previous states &ndash; will maintain separate <I>ConditionBranches</I> for prior states that still need attention. </DD
></DL
><P 

><I>ConditionRefresh</I> shall issue <I>Event</I> <I>Notifications</I> for all interesting states (current and previous) of a <I>Condition</I> instance and <I>Clients</I> can therefore receive more than one <I>Event</I> for a <I>Condition</I> instance with different BranchIds. </P
><DL 

><DD 

>&#61623; Under some circumstances a <I>Server</I> may not be capable of ensuring the <I>Client</I> is fully in sync with the current state of <I>Condition </I>instances. For example if the underlying system represented by the <I>Server</I> is reset or communications are lost for some period of time the <I>Server</I> may need to resynchronize itself with the underlying system. In these cases the <I>Server</I> shall send an <I>Event</I> of the <I>RefreshRequiredEventType</I> to advise the <I>Client</I> that a <I>Refresh</I> may be necessary. A <I>Client</I> receiving this special <I>Event</I> should initiate a <I>ConditionRefresh</I> as noted in this clause. </DD
><DD 

>&#61623; To ensure a <I>Client</I> is always informed, the three special <I>EventTypes</I> (<I>RefreshEndEventType</I>, <I>RefreshStartEventType</I> and <I>RefreshRequiredEventType</I>) ignore the <I>Event</I> content filtering associated with a <I>Subscription</I> and will always be delivered to the <I>Client</I>. </DD
><DD 

>&#61623; <I>ConditionRefresh</I> applies to a <I>S</I><I>ubscription</I>. If multiple <I>Event Notifiers</I> are included in the same <I>S</I><I>ubscription</I>, all <I>Event</I> <I>N</I><I>otifiers</I> are refreshed. </DD
></DL
><H2 
 ID="LinkTarget_4036"
><B>4.6 Severity, quality, and comment </H2
><P 

></B>Comment, severity and quality are important elements of <I>Conditions</I> and any change to them will cause <I>Event</I> <I>Notification</I>s. </P
><P 

>The Severity of a <I>Condition</I> is inherited from the base <I>Event</I> model defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
. It indicates the urgency of the <I>Condition</I> and is also commonly called &lsquo;priority&rsquo;, especially in relation to <I>Alarms</I> of the <I>ProcessConditionClass</I><I>Type</I>. </P
><P 

>A Comment is a user generated string that is to be associated with a certain state of a <I>Condition</I>. </P
><P 

>Quality refers to the quality of the data value(s) upon which this <I>Condition</I> is based. Since a <I>Condition</I> is usually based on one or more <I>Variables</I>, the <I>Condi</I><I>tion</I> inherits the quality of these <I>Variables</I>. E.g., if the process value is &ldquo;Uncertain&rdquo;, the &ldquo;LevelAlarm&rdquo; <I>Condition</I> is also questionable. If more than one variable is represented by a given condition or if the condition is from an underlining system and no direct mapping to a variable is available, it is up to the application to determine what quality is displayed as part of the condition. </P
><H2 
 ID="LinkTarget_4047"
><B>4.7 Dialogs </H2
><P 

></B>Dialogs are <I>ConditionTypes</I> used by a <I>Server</I> to request user input. They are typically used when a <I>Server</I> has entered some state that requires intervention by a <I>Client</I>. For example a <I>Server</I> monitoring a paper machine indicates that a roll of paper has been wound and is ready for inspection. The <I>Server</I> would activate a Dialog <I>Condition</I> indicating to the user that an inspection is required. Once the inspection has taken place the user responds by informing the <I>Server</I> of an accepted or unaccepted inspection allowing the process to continue. </P
><H2 
 ID="LinkTarget_4049"
><B>4.8 Alarms </H2
><P 

></B><I>Alarms</I> are specializations of <I>AcknowledgeableConditions</I> that add the concepts of an <I>Active</I> state, a <I>Shelving</I> state and a <I>S</I><I>uppressed</I> state to a <I>Condition</I>. The state model is illustrated in <A href="#LinkTarget_4056" href="#">
Figure 5</A>
. </P
><P 

> </P
><IMG Alt="" width="497" height="548"
 src="images/OPC UA Part 9 - Alarms and Conditions 1.03 Specification_img_4.jpg" ><P 

><B>Figure 5 &ndash; Alarm state machine model </P
><P 

></B>An <I>Alarm</I> in the <I>Active</I> state indicates that the situation the <I>Condition</I> is representing currently exists. When an <I>Alarm</I> is an inactive state it is representing a situation that has returned to a normal state. </P
><P 

>Some <I>Alarm </I>subtypes introduce sub-states of the <I>Active</I> state. For example an <I>Alarm</I> representing a temperature may provide a high level state as well as a critically high state (see following Clause). </P
><P 

>The <I>Shelving</I> state can be set by an <I>Operator</I> via OPC UA <I>Methods</I>. The <I>S</I><I>uppressed</I> state is set internally by the <I>Server</I> due to system specific reasons. <I>Alarm</I> systems typically implement the <I>Suppress</I> and Shelve features to help keep <I>Operators</I> from being overwhelmed during <I>Alarm </I>&ldquo;storms&rdquo; by limiting the number of <I>Alarms </I>an <I>Operator</I> sees on a current <I>Alarm </I>display. This is accomplished by setting the <I>SuppressedOrShelved</I> flag on second order dependent <I>Alarms </I>and/or <I>Alarms </I>of less severity, leading the <I>Operator</I> to concentrate on the most critical issues. </P
><P 

>The <I>Shelved</I> and <I>S</I><I>uppressed</I> states differ from the <I>Disable</I>d state in that <I>Alarms</I> are still fully functional and can be included in <I>Subscription</I> <I>Notifications</I> to a <I>Client</I>. </P
><H2 
 ID="LinkTarget_4089"
><B>4.9 Multiple active states </H2
><P 

></B>In some cases it is desirable to further define the <I>Active</I> state of an <I>Alarm </I>by providing a sub-state machine for the <I>Active</I> State. For example a multi-state level <I>Alarm </I>when in the <I>Active</I> state may be in one of the following sub-states: LowLow, Low, High or HighHigh. The state model is illustrated in <A href="#LinkTarget_4113" href="#">
Figure 6</A>
. </P
><P 

> </P
><IMG Alt="" width="512" height="397"
 src="images/OPC UA Part 9 - Alarms and Conditions 1.03 Specification_img_5.jpg" ><P 

> </P
><P 

><B>Figure 6 &ndash; Multiple active states example </P
><P 

></B>With the multi-state <I>Alarm </I>model, state transitions among the sub-states of <I>Active</I> are allowed without causing a transition out of the <I>Active</I> state. </P
><P 

>To accommodate different use cases both a (mutually) exclusive and a non-exclusive model are supported. </P
><P 

>Exclusive means that the <I>Alarm</I> can only be in one sub-state at a time. If for example a temperature exceeds the HighHigh limit the associated exclusive LevelAlarm will be in the HighHigh sub-state and not in the High sub-state. </P
><P 

>Some <I>Alarm </I>systems, however, allow multiple sub-states to exist in parallel. This is called non-exclusive. In the previous example where the temperature exceeds the HighHigh limit a non-exclusive LevelAlarm will be both in the High and the HighHigh sub-state. </P
><H2 
 ID="LinkTarget_4118"
><B>4.10 Condition instances in the AddressSpace </H2
><P 

></B>Because <I>Conditions</I> always have a state (<I>E</I><I>nabled</I> or <I>D</I><I>isabled</I>) and possibly many sub-states it makes sense to have instances of <I>Conditions</I> present in the <I>AddressSpace</I>. If the <I>Server</I> exposes <I>Condition</I> instances they usually will appear in the <I>AddressSpace</I> as components of the <I>Objects</I> that &ldquo;own&rdquo; them. For example a temperature transmitter that has a built-in high temperature <I>Alarm </I>would appear in the <I>AddressSpace</I> as an instance of some temperature transmitter <I>Object</I> with a <I>HasComponent</I> <I>Reference</I> to an instance of a <I>LevelAlarmType</I>. </P
><P 

>The availability of instances allows Data Access <I>Clients</I> to monitor the current <I>Condition</I> state by subscribing to the <I>Attribute</I> values of <I>Variable</I> <I>Nodes</I>. </P
><P 

>While exposing <I>Condition</I> instances in the <I>AddressSpace</I> is not always possible, doing so allows for direct interaction (read, write and <I>Method</I> invocation) with a specific <I>Condition</I> instance. For example, if a <I>Condition</I> instance is not exposed, there is no way to invoke the <I>Enable</I> or <I>Disable</I> <I>Method </I>for the specific <I>Condition</I> instance. </P
><H2 
 ID="LinkTarget_4122"
><B>4.11 Alarm and Condition auditing </H2
><P 

></B>The OPC UA Standards include provisions for auditing. Auditing is an important security and tracking concept. Audit records provide the &ldquo;Who&rdquo;, &ldquo;When&rdquo; and &ldquo;What&rdquo; information regarding </P
><P 

>user interactions with a system. These audit records are especially important when <I>Alarm</I> management is considered. <I>Alarms</I> are the typical instrument for providing information to a user that something needs the user&rsquo;s attention. A record of how the user reacts to this information is required in many cases. Audit records are generated for all <I>Method</I> calls that affect the state of the system, for example an <I>Acknowledge</I> <I>Method</I> call would generate an <I>Event</I> of <I>AuditConditionAck</I><I>nowledge</I><I>Event</I><I>Type</I>. </P
><P 

>The standard <I>AuditEventType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
 already includes the fields required for <I>Condition</I> related audit records. To allow for filtering and grouping, this standard defines a number of sub-types of the <I>AuditEventType</I> but without adding new fields to them. </P
><P 

>This standard describes the <I>AuditEventType </I>that<I> </I>each <I>Me</I><I>thod</I> is required to generate. For example, the <I>Disable</I> <I>Method</I> has an <I>AlwaysGeneratesEvent</I> <I>Reference</I> to an <I>AuditConditionEnableEventType</I>. An <I>Event </I>of this type shall be generated for every invocation of the <I>Method</I>. The audit <I>Event </I>describes the user interaction with the system, in some cases this interaction may affect more than one <I>Condition</I> or be related to more than one state. </P
><H1 
 ID="LinkTarget_4133"
><FONT size="+1"><B>5 Model </H1
><H2 
 ID="LinkTarget_4134"
><FONT size="+1">5.1 General </H2
><P 

></B>The <I>Alarm </I>and <I>Condition</I> model extends the OPC UA base <I>Event</I> model by defining various <I>Even</I><I>t</I> <I>Types</I> based on the <I>BaseEventType</I>. All of the <I>Event</I> <I>Types</I> defined in this standard can be further extended to form domain or <I>Server</I> specific <I>Alarm </I>and <I>Condition</I> <I>Types</I>. </P
><P 

>Instances of <I>Alarm </I>and <I>Condition</I> <I>Types</I> may be optionally exposed in the <I>AddressSpace</I> in order to allow direct access to the state of an <I>Alarm </I>or <I>Condition</I>.  </P
><P 

>The following sub clauses define the OPC UA <I>Alarm </I>and <I>Condition</I> <I>Types</I>. <A href="#LinkTarget_4154" href="#">
Figure 7</A>
 informally describes the hierarchy of these <I>Types</I>. Subtypes of the <I>LimitAlarmType</I> and the <I>DiscreteAlarmType</I> are not shown. The full <I>AlarmConditionType</I> hierarchy can be found in <A href="#LinkTarget_6665" href="#">
 </A>
</P
><P 

><A>
Figure 11 - AlarmConditionType hierarchy model </A>
</P
><P 

> <DIV class="Sect" 
 Alt=""
>Defined in [UA Part 5]BaseEventTypeAcknowledgeableCondition TypeRefreshStartEventTypeSystemEventTypeRefreshRequiredEventTypeRefreshEndEventTypeAlarmConditionTypeDialogConditionTypeConditionTypeStateMachineTypeExclusiveLimit StateMachineTypeShelvedStateMachineTypeLimitAlarmTypeDiscreteAlarmTypeOffNormalAlarm TypeSystemOffNormal AlarmType</DIV
></P
><P 

><B>Figure 7 - ConditionType hierarchy </P
><P 

></B> </P
><H2 
 ID="LinkTarget_4156"
><B>5.2 Two-state state machines </H2
><P 

></B>Most states defined in this standard are simple &ndash; i.e. they are either TRUE or FALSE. The <I>TwoStateVariableType</I> is introduced specifically for this use case. More complex states are modelled by using a <I>StateMachineType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
. </P
><P 

>The <I>TwoStateVariableType</I> is derived from the <I>StateVariableType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
 and formally defined in <A href="#LinkTarget_4173" href="#">
Table 3</A>
. </P
><P 

><B>Table 3 &ndash; TwoStateVariableType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValueRank </P
></TD
><TD  
 valign="top"
><P 

>-1 (-1 = Scalar) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the <I>StateVariableType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
.  </P
><P 

>Note that a <I>Reference</I> to this subtype is not shown in the definition of the <I>StateVariableType</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>Id </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>TransitionTime </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>EffectiveTransitionTime </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>TrueState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>FalseState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasTrueSubState </P
></TD
><TD  
 valign="top"
><P 

>StateMachine or TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>&lt;StateIdentifier&gt; </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_4444" href="#">
5.4.2</A>
 </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasFalseSubState </P
></TD
><TD  
 valign="top"
><P 

>StateMachine or TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>&lt;StateIdentifier&gt; </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_4508" href="#">
5.4.3</A>
 </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>Value</I> <I>Attribute</I> of a <I>TwoStateVariable</I><I>Type</I> contains the current state as a human readable name. The <I>EnabledState</I> for example, might contain the name &ldquo;Enabled&rdquo; when TRUE and &ldquo;Disabled&rdquo; when FALSE. </P
><P 

><I>Id </I>is inherited from the <I>StateVariableType</I> and overridden to reflect the required <I>DataType</I> (Boolean). The value shall be the current state, i.e. either TRUE or FALSE. </P
><P 

><I>TransitionTime</I> specifies the time when the current state was entered. </P
><P 

><I>EffectiveTransitionTime</I> specifies the time when the current state or one of its sub states was entered. If, for example, a LimitAlarmType is active and &ndash; while active &ndash; switches several times between High and HighHigh, then the <I>TransitionTime</I> stays at the point in time where the <I>Alarm</I> became active whereas the <I>EffectiveTransitionTime</I> changes with each shift of a sub state. </P
><P 

>The optional <I>Property</I> <I>EffectiveDisplayName </I>from the<I> </I><I>StateVariableType</I> is used if a state has sub states. It contains a human readable name for the current state after taking the state of any <I>SubStateMachines</I> in account. As an example, the <I>EffectiveDisplayName</I> of the <I>EnabledState</I> could contain &ldquo;Active/HighHigh&rdquo; to specify that the <I>Condition</I> is active and has exceeded the HighHigh limit. </P
><P 

>Other optional <I>Properties</I> of the <I>StateVariableType</I> have no defined meaning for <I>TwoStateVariables</I>. </P
><P 

><I>TrueState </I>and <I>FalseState </I>contain the localized string for the <I>TwoStateVariable</I> value<I> </I>when its <I>Id</I> <I>Property</I> has the value TRUE or FALSE, respectively. Since the two <I>Properties</I> provide meta-data for the <I>Type</I>, <I>Servers</I> may not allow these <I>Properties</I> to be selected in the <I>Event</I> filter for a monitored item. <I>Clients</I> can use the Read <I>Service</I> to get the information from the specific <I>ConditionType</I>. </P
><P 

>A <I>HasTrueSubState</I> <I>Reference</I> is used to indicate that the TRUE state has sub states. </P
><P 

>A <I>HasFalseSubState</I> <I>Reference</I> is used to indicate that the FALSE state has sub states. </P
><H2 
 ID="LinkTarget_4345"
><B>5.3 Condition variables </H2
><P 

></B>Various information elements of a <I>Condition</I> are not considered to be states. However, a change in their value is considered important and supposed to trigger an <I>Event Notification</I>. These information elements are called <I>ConditionVariables</I>. </P
><P 

><I>ConditionVariables</I> are represented by a <I>ConditionVariableType</I> formally defined in <A href="#LinkTarget_4353" href="#">
Table 4</A>
. </P
><P 

><B>Table 4 &ndash; ConditionVariableType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ConditionVariableType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>BaseDataType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ValueRank </P
></TD
><TD  
 valign="top"
><P 

>-2 (-2 = Any) </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the <I>BaseDataVariableType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>SourceTimestamp </P
></TD
><TD  
 valign="top"
><P 

>UtcTime </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><I>SourceTimestamp</I> indicates the time of the last change of the <I>Value</I> of this <I>ConditionVariable</I>. It shall be the same time that would be returned from the <I>Read</I> <I>Service</I> inside the <I>DataValue</I> structure for the <I>ConditionVariable</I> <I>Value</I> <I>Attribute</I>. </P
><H2 
 ID="LinkTarget_4425"
><B>5.4 Sub state ReferenceTypes </H2
><H3 
 ID="LinkTarget_4426"
>5.4.1 General </H3
><P 

></B>This Clause defines <I>ReferenceTypes</I> that are needed beyond those already specified as part of <A href="#LinkTarget_3568" href="#">
Part 3</A>
 and <A href="#LinkTarget_3572" href="#">
Part 5</A>
 to extend <I>TwoState</I> state machines with sub states. These <I>References</I> will only exist when sub states are available. For example if a TwoState machine is in a </P
><P 

>FALSE State, then any sub states referenced from the TRUE state will not be available. If an Event is generated while in the FALSE state and information from the TRUE state sub state is part of the data that is to be reported than this data would be reported as a NULL. With this approach <I>TwoStateVariables</I> can be extended with subordinate state machines in a similar fashion to the <I>StateMachineType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
. </P
><H3 
 ID="LinkTarget_4444"
><B>5.4.2 HasTrueSubState ReferenceType </H3
><P 

></B>The <I>HasTrueSubState ReferenceType</I> is a concrete <I>ReferenceType</I> that can be used directly. It is a subtype of the<I> </I><I>NonHierarchicalReferences</I><B> </B><I>ReferenceType</I>. </P
><P 

>The semantics indicate that the sub state (the target <I>Node</I>) is a subordinate state of the TRUE super state. If more than one state within a <I>Condition</I> is a sub state of the same super state (i.e. several <I>HasTrueSubState</I> <I>References</I> exist for the same super state) they are all treated as independent sub states. The representation in the <I>AddressSpace</I> is specified in <A href="#LinkTarget_4454" href="#">
Table 5</A>
. </P
><P 

>The <I>So</I><I>urceNode</I> of the <I>Reference</I> shall be an instance of a <I>TwoStateVariableType</I> and the <I>TargetNode</I> shall either be an instance of a <I>TwoStateVariableType</I> or an instance of a subtype of a <I>StateMachineType</I>. </P
><P 

>It is not required to provide the <I>HasTrueSubState </I><I>Reference</I><I> </I>from super state to sub state, but it is required that the sub state provides the inverse <I>Reference</I> (IsTrueSubStateOf) to its super state. </P
><P 

><B>Table 5 &ndash; HasTrueSubState ReferenceType  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attributes </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>HasTrueSubState </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>InverseName </P
></TD
><TD  
 valign="top"
><P 

>IsTrueSubStateOf  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Symmetric </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>Comment </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_4508"
><FONT size="+1"><B>5.4.3 HasFalseSubState ReferenceType </H3
><P 

></B>The <I>HasFalseSubState ReferenceType</I> is a concrete <I>ReferenceType</I> that can be used directly. It is a subtype of the <I>NonHierarchicalReferences</I><B> </B><I>ReferenceType</I>. </P
><P 

>The semantics indicate that the sub state (the target <I>Node</I>) is a subordinate state of the FALSE super state. If more than one state within a <I>Condition</I> is a sub state of the same super state (i.e. several <I>HasFalseSubState</I> <I>References</I> exist for the same super state) they are all treated as independent sub states. The representation in the <I>AddressSpace</I> is specified in <A href="#LinkTarget_4519" href="#">
Table 6</A>
. </P
><P 

>The <I>SourceNode</I> of the <I>Reference</I> shall be an instance of a <I>TwoStateVariableType</I> and the <I>TargetNode</I> shall either be an instance of a <I>TwoStateVariableType</I> or an instance of a subtype of a <I>StateMachineType</I>. </P
><P 

>It is not required to provide the <I>HasFalseSubState </I><I>Reference </I>from super state to sub state, but it is required that the sub state provides the inverse <I>Reference</I> (IsFalseSubStateOf) to its super state. </P
><P 

><B>Table 6 &ndash; HasFalseSubState ReferenceType  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attributes </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>HasFalseSubState </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>InverseName </P
></TD
><TD  
 valign="top"
><P 

>IsFalseSubStateOf </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Symmetric </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>Comment </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_4573"
><FONT size="+1"><B>5.5 Condition Model </H2
><H3 
 ID="LinkTarget_4575"
>5.5.1 General </H3
><P 

></B>The <I>Condition</I> model extends the <I>Event</I> model by defining the <I>ConditionType</I>. The <I>ConditionType</I> introduces the concept of states differentiating it from the base <I>Event</I> model. Unlike the <I>BaseEventType</I>, <I>Conditions</I> are not transient. The <I>ConditionType</I> is further extended into Dialog and <I>AcknowledgeableConditionType</I>, each of which have their own sub-types. </P
><P 

>The <I>Condition</I> model is illustrated in <A href="#LinkTarget_4586" href="#">
Figure 8</A>
 and formally defined in the subsequent tables. It is worth noting that this figure, like all figures in this document, is not intended to be complete. Rather, the figures only illustrate information provided by the formal definitions. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ConditionTypePropertyType:RetainConditionRefreshTwoStateVariableType:EnableStateConditionVariableType:QualityDisableClientUserIdAddCommentConditionVariableType:CommentBaseEventTypeEnableAcknowledgeableConditionTypeDialogConditionTypeConditionVariableType:LastSeverityPropertyType:BranchIdPropertyType:ConditionNamePropertyType:ConditionClassIdPropertyType:ConditionClassNameConditionRefresh2</DIV
></P
><P 

><B>Figure 8 &ndash; Condition model<I> </I></P
><H3 
 ID="LinkTarget_4587"
>5.5.2 ConditionType </H3
><P 

></B>The <I>ConditionType</I> defines all general characteristics of a <I>Condition</I>. All other <I>ConditionTypes</I> derive from it. It is formally defined in <A href="#LinkTarget_4594" href="#">
Table 7</A>
. The FALSE state of the <I>EnabledState</I> shall not be extended with a sub state machine. </P
><P 

><B>Table 7 &ndash; ConditionType definition  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ConditionType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the <I>BaseEventType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>DialogConditionType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_5788" href="#">
5.6.2</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>AcknowledgeableConditionType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_6134" href="#">
5.7.2</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>ConditionClassId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>ConditionClassName </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>ConditionName </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>BranchId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>Retain </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>EnabledState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>Quality </P
></TD
><TD  
 valign="top"
><P 

>StatusCode </P
></TD
><TD  
 valign="top"
><P 

>ConditionVariableType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>LastSeverity </P
></TD
><TD  
 valign="top"
><P 

>UInt16 </P
></TD
><TD  
 valign="top"
><P 

>ConditionVariableType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>Comment </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>ConditionVariableType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>ClientUserId </P
></TD
><TD  
 valign="top"
><P 

>String </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>Disable </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_5057" href="#">
5.5.4</A>
 </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>Enable </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_5140" href="#">
5.5.5</A>
 </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>AddComment </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_5222" href="#">
5.5.6</A>
 </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>ConditionRefresh </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_5376" href="#">
5.5.7</A>
 </P
></TD
><TD  
 valign="top"
><P 

>None </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>ConditionRefresh2 </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_5567" href="#">
5.5.8</A>
 </P
></TD
><TD  
 valign="top"
><P 

>None </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>ConditionType</I> inherits all <I>Properties</I> of the <I>BaseEventType</I>. Their semantic is defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
. <I>SourceNode </I>identifies the <I>ConditionSource</I>. See <A href="#LinkTarget_10368" href="#">
5.12</A>
 for more details. If the <I>ConditionSource</I> is not a <I>Node</I> in the <I>AddressSpace</I> the <I>NodeId</I> is set to null. The <I>SourceNode</I> is the <I>Node</I> which the condition is associated with, it may be the same as the InputNode for an alarm, but it may be a separate node. For example a motor, which is a variable with a value that is an RPM, may be the <I>ConditionSource</I> for <I>Conditions</I> that are related to the motor as well as a temperature sensor associated with the motor. In the former the InputNode for the High RPM alarm is the value of the Motor RPM, while in the later the InputNode of the High Alarm would be the value of the temperature sensor that is associated with the motor. </P
><P 

><I>ConditionClassId</I> specifies in which domain this <I>Condition</I> is used. It is the <I>NodeId</I> of the corresponding <I>ConditionClassType</I>. See <A href="#LinkTarget_9358" href="#">
5.9</A>
 for the definition of <I>ConditionClass</I> and a set of <I>ConditionClasses</I> defined in this standard. When using this <I>Property</I> for filtering, <I>Clients</I> have to specify all individual <I>ConditionClassType</I> NodeIds. The OfType operator cannot be applied. <I>BaseConditionClassType</I> is used as class whenever a <I>Condition</I> cannot be assigned to a more concrete class. </P
><P 

><I>ConditionClassName</I> provides the display name of the <I>ConditionClassType</I>. </P
><P 

><I>ConditionName</I> identifies the <I>C</I><I>ondition </I>instance that the <I>Event </I>originated from. It can be used together with the <I>SourceName</I> in a user display to distinguish between different <I>Condition </I>instances. If a <I>ConditionSource</I> has only one instance of a <I>ConditionType</I>, and the <I>Server</I> has no instance name, the <I>Server</I> shall supply the <I>ConditionType</I> browse name. </P
><P 

><I>BranchId</I> is Null for all <I>Event Notifications</I> that relate to the current state of the <I>Condition</I> instance. If <I>BranchId</I> is not Null it identifies a previous state of this <I>Condition</I> instance that still needs attention by an <I>Operator</I>. If the current <I>ConditionBranch</I> is transformed into a previous <I>ConditionBranch</I> then the Server needs to assign a non-null BranchId. An initial <I>Event</I> for the branch will generated with the values of the <I>Con</I><I>ditionBranch</I> and the new BranchId. The <I>ConditionBranch</I> can be updated many times before it is no longer needed. When the <I>ConditionBranch</I> no longer requires <I>Operator</I> input the final <I>Event</I> will have <I>Retain</I> set to FALSE. The retain bit on the current Event is TRUE, as long as any ConditionBranches require Operator input. See <A href="#LinkTarget_4010" href="#">
4.4</A>
 for more information about the need for creating and maintaining previous <I>ConditionBranches</I> and Clause <A href="#LinkTarget_11376" href="#">
B.1</A>
 for an example using branches. The BranchId <I>DataType</I> is <I>NodeId</I> although the <I>Server</I> is not required to have <I>ConditionBranches</I> </P
><P 

>in the <I>Address Space</I>. The use of a <I>NodeId</I> allows the <I>Server</I> to use simple numeric identifiers, strings or arrays of bytes. </P
><P 

><I>Retain</I> when TRUE describes a <I>Condition</I> (or <I>ConditionBranch</I>) as being in a state that is interesting for a <I>Client</I> wishing to synchronize its state with the <I>Server</I>&rsquo;s state. The logic to determine how this flag is set is <I>Server</I> specific. Typically all <I>Active</I><I> </I><I>Alarms</I> would have the <I>Retain</I> flag set; however, it is also possible for inactive <I>Alarms</I> to have their <I>Retain</I> flag set to TRUE. </P
><P 

>In normal processing when a <I>Client</I> receives an <I>Event </I>with the <I>Retain</I> flag set to FALSE, the <I>Client</I> should consider this as a <I>Con</I><I>ditionBranch </I>that is no longer of interest, in the case of a &ldquo;current <I>Alarm</I> display&rdquo; the <I>ConditionBranch</I> would be removed from the display. </P
><P 

><I>EnabledState</I> indicates whether the <I>Condition</I> is enabled. <I>EnabledState/Id</I> is TRUE if enabled, FALSE otherwise. <I>Enable</I><I>dState/TransitionTime</I> defines when the <I>EnabledState</I> last changed. Recommended state names are described in <A href="#LinkTarget_10626" href="#">
Annex A</A>
. </P
><P 

>A <I>Condition</I>&rsquo;s <I>EnabledState</I> effects the generation of <I>Event</I> <I>Notifications</I> and as such results in the following specific behaviour: </P
><DL 

><DD 

>&#61623; When the <I>Condition</I> instance enters the <I>D</I><I>isabled</I> state, the <I>Retain</I> <I>Property</I> of this <I>Condition</I> shall be set to FALSE by the <I>Server</I> to indicate to the <I>Client</I> that the <I>Condition</I> instance is currently not of interest to <I>Client</I>s.  </DD
><DD 

>&#61623; When the <I>Condition</I> instance enters the enabled state, the <I>Condition</I> shall be evaluated and all of its <I>Properties</I> updated to reflect the current values. If this evaluation causes the <I>Retain Property</I> to transition to TRUE for any <I>ConditionBranch</I>, then an <I>Event Notification</I> shall be generated for that <I>ConditionBranch</I>. </DD
><DD 

>&#61623; The <I>Server</I> may choose to continue to test for a <I>Condition</I> instance while it is <I>Disable</I>d. However, no <I>Event</I> <I>Notificatio</I><I>ns</I> will be generated while the <I>Condition</I> instance is disabled. </DD
><DD 

>&#61623; For any <I>Condition</I> that exists in the <I>AddressSpace</I> the <I>Attributes</I> and the following <I>Variables</I> will continue to have valid values even in the <I>Disable</I>d state; EventId, <I>Event</I> Type, Source <I>Node</I>, Source Name, Time, and EnabledState. Other properties may no longer provide current valid values. All <I>Variables</I> that are no longer provided shall return a status of Bad_ConditionDisabled. The Event that reports the Disabled state should report the properties as NULL or with a status of Bad_ConditionDisabled. </DD
></DL
><P 

>When enabled, changes to the following components shall cause a <I>ConditionType</I> <I>Event</I> <I>Notification</I>: </P
><DL 

><DD 

>&#61623; Quality </DD
><DD 

>&#61623; Severity (inherited from <I>BaseEventType</I>) </DD
><DD 

>&#61623; Comment </DD
></DL
><P 

>This may not be the complete list. Sub-Types may define additional <I>Variables</I> that trigger <I>Event</I> <I>Notifications</I>. In general changes to <I>Variables</I> of the types <I>TwoStateVariableType</I> or <I>ConditionVariableType</I> trigger <I>Event</I> <I>Notifications</I>. </P
><P 

><I>Quality</I> reveals the status of process values or other resources that this <I>Condition</I> instance is based upon. If, for example, a process value is &ldquo;Uncertain&rdquo;, the associated &ldquo;LevelAlarm&rdquo; <I>Condition</I> is also questionable. Values for the <I>Quality</I> can be any of the OPC <I>StatusCodes</I> defined in <A href="#LinkTarget_3578" href="#">
Part 8</A>
 as well as <I>Good</I>, <I>Uncertain</I> and <I>Bad</I> as defined in <A href="#LinkTarget_3570" href="#">
Part 4</A>
. These <I>StatusCodes</I> are similar to but slightly more generic than the description of data quality in the various field bus specifications. It is the responsibility of the <I>Server</I> to map internal status information to these codes. A <I>Server</I> which supports no quality information shall return <I>Good</I>. This quality can also reflect the communication status associated with the system that this value or resource is based on and from which this <I>Alarm</I> was received. For communication errors to the underlying system, especially those that result in some unavailable <I>Event</I> fields, the quality shall be Bad_NoCommunication error. </P
><P 

><I>Events</I> are only generated for <I>Conditions</I> that have their <I>Retain</I> field set to true. </P
><P 

><I>LastSeverity</I> provides the previous severity of the <I>ConditionBranch</I>. Initially this <I>Variable</I> contains a zero value; it will return a value only after a severity change. The new severity is supplied via the <I>Severity</I> <I>Property</I> which is inherited from the <I>BaseEventType</I>. </P
><P 

><I>Comment</I> contains the last comment provided for a certain state (<I>ConditionBranch</I>). It may have been provided by an AddComment <I>Method</I><I>,</I> some other <I>Method</I><I> </I>or in some other manner. The initial value of this <I>Variable</I> is null, unless it is provided in some other manner. If a Method provides as an option the ability to set a Comment, then the value of this <I>Variable</I> is reset to null if an optional comment is not provided. </P
><P 

><I>ClientUserId</I> is related to the <I>Comment</I> field and contains the identity of the user who inserted the most recent <I>Comment.</I> The logic to obtain the <I>ClientUserId</I> is defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
. </P
><P 

>The <I>NodeId</I> of the <I>Condition</I> instance is used as <I>ConditionId</I>. It is not explicitly modelled as a component of the <I>ConditionType</I>. However, it can be requested with the following <I>Simp</I><I>leAttributeOperand</I> (see <A href="#LinkTarget_5006" href="#">
Table 8</A>
) in the <I>SelectClause</I> of the <I>EventFilter</I>: </P
><P 

><B>Table 8 &ndash; SimpleAttributeOperand  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Name </P
></TD
><TD  
 valign="top"
><P 

>Type </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SimpleAttributeOperand </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> typeId </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

><I>NodeId</I> of the <I>ConditionType Node</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> browsePath[] </P
></TD
><TD  
 valign="top"
><P 

>QualifiedName </P
></TD
><TD  
 valign="top"
><P 

>empty  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> attributeId </P
></TD
><TD  
 valign="top"
><P 

>IntegerId </P
></TD
><TD  
 valign="top"
><P 

>Id of the <I>NodeId Attribute</I> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_5051"
><FONT size="+1"><B>5.5.3 Condition and branch instances </H3
><P 

></B><I>Conditions</I> are <I>Objects</I> which have a state which changes over time. Each <I>Condition</I> instance has the <I>ConditionId</I> as identifier which uniquely identifies it within the <I>Server</I>. </P
><P 

>A <I>Condition</I> instance may be an <I>Object</I> that appears in the <I>Server</I> <I>Address</I> <I>Space</I>. If this is the case the <I>C</I><I>onditionId</I> is the <I>NodeId</I> for the <I>Object</I>. </P
><P 

>The state of a <I>Condition</I> instance at any given time is the set values for the <I>Variable</I>s that belong to the <I>Condition</I> instance. If one or more <I>Variable</I> values change the <I>Server</I> generates an <I>Event</I> with a unique <I>EventId</I>. </P
><P 

>If a <I>Client</I> calls <I>Refresh</I> the <I>Server</I> will report the current state of a <I>Condition</I> instance by re-sending the last <I>Event</I> (i.e. the same <I>EventId</I> and <I>Time</I> is sent). </P
><P 

>A <I>ConditionBranch</I> is a copy of the <I>Condition</I> instance state that can change independently of the current <I>Condition</I> instance state. Each <I>Branch</I> has an identifier called a <I>BranchId</I> which is unique among all active <I>Branches</I> for a <I>Condition</I> instance. <I>Branches</I> are typically not visible in the <I>Address</I> <I>Space</I> and this standard does not define a standard way to make them visible. </P
><H3 
 ID="LinkTarget_5057"
><B>5.5.4 Disable Method </H3
><P 

></B>The<I> </I><I>Disable</I> <I>Method</I> is used to change a <I>Condition</I> instance to the <I>D</I><I>isabled</I> state. Normally, the <I>NodeId</I> of the object instance as the <I>ObjectId</I> is passed to the Call <I>Service</I>. However, some <I>Servers</I> do not expose <I>Condition</I> instances in the <I>AddressSpace. </I>Therefore all <I>Servers</I> shall allow <I>Clients</I> to call the <I>Disable</I> <I>Method</I> by specifying <I>ConditionId</I> as the <I>ObjectId.</I> The <I>Method</I> cannot be called with an <I>ObjectId</I> of the <I>ConditionType</I> <I>Node</I>. </P
><P 

><B>Signature </P
><P 

>Disable(); </P
><P 

><FONT size="+1"></B> </P
><P 

><FONT size="+1">Method Result Codes in <A href="#LinkTarget_5068" href="#">
Table 9</A>
 (defined in Call Ser<I>v</I>ice) </P
><P 

><B>Table 9 &ndash; Disable result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ConditionAlreadyDisabled </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><A href="#LinkTarget_5095" href="#">
<FONT size="+1">Table 10</A>
 specifies the <I>AddressSpace</I> representation for the <I>Disable</I> <I>Method</I>. </P
><P 

><B>Table 10 &ndash; Disable Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>Disable </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_9637" href="#">
5.10.2</A>
 </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionEnableEventType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

> </P
><H3 
 ID="LinkTarget_5140"
><FONT size="+1"><B>5.5.5 Enable Method </H3
><P 

></B>The<I> </I><I>Enable</I> <I>Method</I> is used to change a <I>Condition</I> instance to the enabled state. Normally, the <I>NodeId</I> of the object instance as the <I>ObjectId</I> is<I> </I>passed to the Call <I>Service</I>. However, some <I>Servers</I> do not expose <I>Condition</I> instances in the <I>AddressSpace. </I>Therefore all <I>Servers</I> shall allow <I>Clients</I> to call the <I>Enable</I> <I>Method</I> by specifying <I>ConditionId</I> as the <I>ObjectId</I><I>.</I> The <I>Method</I> cannot be called with an <I>ObjectId</I> of the <I>ConditionType</I> <I>Node</I>. If the <I>Condition</I> instance is not exposed, than it may be difficult for a <I>Client</I> to determine the <I>ConditionId</I> for a disabled <I>Condition.</I> </P
><P 

><B>Signature </P
><P 

>Enable</B>(); </P
><P 

> </P
><P 

>Method Result Codes in <A href="#LinkTarget_5151" href="#">
Table 11</A>
 (defined in Call Ser<I>v</I>ice) </P
><P 

><B>Table 11 &ndash; Enable result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ConditionAlreadyEnabled </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><A href="#LinkTarget_5177" href="#">
<FONT size="+1">Table 12</A>
 specifies the <I>AddressSpace</I> representation for the <I>E</I><I>nable</I> <I>Method</I>. </P
><P 

><B>Table 12 &ndash; Enable Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>Enable </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_9637" href="#">
5.10.2</A>
 </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionEnableEventType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_5222"
><FONT size="+1"><B>5.5.6 AddComment Method </H3
><P 

></B>The<I> </I><I>AddComment</I> <I>Method</I> is used to apply a comment to a specific state of a <I>Condition</I> instance. Normally, the <I>NodeId</I> of the object instance as the <I>ObjectId</I> is passed to the <I>Call</I> <I>Service</I>. However, some <I>Servers</I> do not expose <I>Condition</I> instances in the <I>AddressSpace. </I>Therefore all <I>Servers</I> shall also allow <I>Clients</I> to call the <I>AddComment</I> <I>Method</I> by specifying <I>ConditionId</I> as the <I>ObjectId.</I> The <I>Method</I> cannot be called with an <I>ObjectId</I> of the <I>ConditionType</I> <I>Node</I>. </P
><P 

><B>Signature </P
><P 

>AddComment( </P
><P 

></B> [in] ByteString EventId </P
><P 

> [in] LocalizedText Comment </P
><P 

> ); </P
><P 

> </P
><P 

>The parameters are defined in <A href="#LinkTarget_5236" href="#">
Table 13</A>
 </P
><P 

><B>Table 13 &ndash; AddComment arguments </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Argument </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EventId </P
></TD
><TD  
 valign="top"
><P 

>EventId identifying a particular <I>Event</I> <I>Notification</I> where a state was reported for a <I>Condition</I>.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Comment </P
></TD
><TD  
 valign="top"
><P 

>A localized text to be applied to the <I>Condition</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Method Result Codes in <A href="#LinkTarget_5265" href="#">
Table 14</A>
 (defined in Call Service) </P
><P 

><B>Table 14 &ndash; AddComment result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_MethodInvalid </P
></TD
><TD  
 valign="top"
><P 

>.The MethodId provided does not correspond to the ObjectId provided. See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the general description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_EventIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>Used to indicate that the specified <I>ObjectId</I> is not valid or that the <I>Method</I> was called on the ConditionType <I>Node</I>.  </P
><P 

>See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the general description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1"><B>Comments </P
><P 

></B><I>Comments</I> are added to <I>Event</I> occurrences identified via an <I>EventId</I>. <I>EventIds</I> where the related <I>EventType</I> is not a ConditionType (or subtype of it) and thus does not support <I>Comments</I> are rejected. </P
><P 

>A <I>ConditionEvent</I> &ndash; where the <I>Comment</I> <I>Variable</I> contains this text &ndash; will be sent for the identified state. If a comment is added to a previous state (i.e. a state for which the Server has created a branch), the <I>BranchId</I> and all <I>Condition</I> values of this branch will be reported. </P
><P 

><A href="#LinkTarget_5317" href="#">
Table 15</A>
 specifies the <I>AddressSpace</I> representation for the <I>AddComment</I> <I>Method</I>.  </P
><P 

><B>Table 15 &ndash; AddComment Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>AddComment </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

><I>Variable </I></P
></TD
><TD  
 valign="top"
><P 

>InputArguments </P
></TD
><TD  
 valign="top"
><P 

>Argument[]  </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_9756" href="#">
5.10.4</A>
 </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionCommentEventType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_5376"
><FONT size="+1"><B>5.5.7 ConditionRefresh Method </H3
><P 

></B><I>ConditionRefresh</I> allows a <I>Client</I> to request a <I>Refresh</I> of all <I>Condition </I>instances that currently are in an interesting state (they have the <I>Retain</I> flag set). This includes previous states of a <I>Condition</I> instance for which the <I>Server</I> maintains <I>Branches</I>. A <I>Client</I> would typically invoke this <I>Method</I> when it initially connects to a <I>Server</I> and following any situations, such as communication disruptions, in which it would require resynchronization with the <I>Server</I>. This <I>M</I><I>ethod</I> is only available on the <I>Condition</I><I>Type</I> or its subtypes. To invoke this <I>M</I><I>ethod</I>, the call shall pass the well known <I>MethodId</I> of the <I>Method</I> on the <I>ConditionType</I> and the <I>ObjectId</I> shall be the well known <I>ObjectId</I> of the <I>ConditionType</I> <I>Object</I>. </P
><P 

><B>Signature </P
><P 

>ConditionRefresh( </P
><P 

></B> [in] IntegerId SubscriptionId </P
><P 

> ); </P
><P 

> </P
><P 

>The parameters are defined in <A href="#LinkTarget_5389" href="#">
Table 16</A>
 </P
><P 

><B>Table 16 &ndash; ConditionRefresh parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Argument </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SubscriptionId </P
></TD
><TD  
 valign="top"
><P 

>A valid <I>Subscription</I> Id of the <I>Subscription</I> to be refreshed. The <I>Server</I> shall verify that the <I>SubscriptionId</I> provided is part of the <I>S</I><I>ession</I> that is invoking the <I>Method</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Method Result Codes in <A href="#LinkTarget_5412" href="#">
Table 17</A>
 (defined in Call Ser<I>v</I>ice) </P
><P 

><B>Table 17 &ndash; ConditionRefresh result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the description of this result code </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_RefreshInProgress </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>The <I>Method</I> was not called in the context of the <I>Session</I> that owns the <I>Subscription</I> </P
><P 

>See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the general description of this result code. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Comments </P
><P 

></B>Sub clause <A href="#LinkTarget_4014" href="#">
4.5</A>
 describes the concept, use cases and information flow in more detail. </P
><P 

>The input argument provides a <I>Subscription</I> identifier indicating which <I>Client</I> <I>Subscription</I> shall be refreshed. If the <I>Sub</I><I>scription</I> is accepted the <I>Server</I> will react as follows: </P
><DL 

><DD 

>1) The <I>Server</I> issues a <I>RefreshStartEvent</I> (defined in <A href="#LinkTarget_10180" href="#">
5.11.2</A>
) marking the start of <I>Refresh.</I> A copy of the <I>RefreshStartEvent</I> is queued into the <I>Event</I> stream for every<I> </I><I>Notifier MonitoredItem</I><I> </I>in the <I>Subscription</I>. Each of the <I>Event </I>copies shall contain the same <I>EventId</I>. </DD
><DD 

>2) The <I>Server</I> issues <I>Event Notifications</I> of any <I>Retained</I> <I>Conditions</I> and <I>Retained</I> <I>Branches</I> of <I>Conditions</I> that meet the <I>Subscriptions</I> content filter criteria. Note that the EventId for such a refreshed <I>Notification</I> shall be identical to the one for the original <I>Notification</I>. </DD
><DD 

>3) The <I>Server</I> may intersperse new <I>Event</I> <I>Notifications</I> that have not been previously issued to the notifier along with those being sent as part of the <I>Refresh</I> request. <I>Clients</I> shall check for multiple <I>Event</I> <I>Notifications</I> for a <I>ConditionBranch</I> to avoid overwriting a new state delivered together with an older state from the <I>Refresh</I> process. </DD
><DD 

>4) The <I>Server</I> issues a <I>RefreshEndEvent</I> (defined in <A href="#LinkTarget_10242" href="#">
5.11.3</A>
) to signal the end of the <I>Refresh. </I>A copy of the <I>RefreshEndEvent</I> is queued into the <I>Event</I> stream for every <I>Notifier MonitoredItem</I> in the <I>Subscription</I>. Each of the <I>Events</I> copies shall contain the same <I>EventId</I>. </DD
></DL
><P 

>It is important to note that if multiple <I>Event</I> <I>N</I><I>otifiers</I> are in a <I>S</I><I>ubscription</I> all <I>Event N</I><I>otifiers</I> are processed. If a <I>C</I><I>li</I><I>ent</I> does not want all <I>MonitoredI</I><I>tems</I> refreshed, then the <I>C</I><I>lient</I> should place each <I>MonitoredI</I><I>tem</I> in a separate <I>S</I><I>ubscription</I> or call <I>ConditionRefresh2</I> if the <I>Server</I> supports it. </P
><P 

>If more than one <I>Subscription</I> is to be refreshed, then the standard call <I>Service</I> array processing can be used. </P
><P 

>As mentioned above, <I>ConditionRefresh</I> shall also issue <I>Event</I> <I>Notifications</I> for prior states if they still need attention. In particular this is true for <I>Condition </I>instances where previous states still need acknowledgement or confirmation. </P
><P 

><A href="#LinkTarget_5491" href="#">
Table 18</A>
 specifies the <I>AddressSpace</I> representation for the <I>ConditionRefresh</I> <I>Method</I>. </P
><P 

><B>Table 18 &ndash; ConditionRefresh Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ConditionRefresh </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

><I>Variable </I></P
></TD
><TD  
 valign="top"
><P 

>InputArguments </P
></TD
><TD  
 valign="top"
><P 

>Argument[]  </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_10180" href="#">
5.11.2</A>
 </P
></TD
><TD  
 valign="top"
><P 

>RefreshStartEvent </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_10242" href="#">
5.11.3</A>
 </P
></TD
><TD  
 valign="top"
><P 

>RefreshEndEvent </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_5567"
><FONT size="+1"><B>5.5.8 ConditionRefresh2 Method </H3
><P 

></B><I>ConditionRefresh</I><I>2</I> allows a <I>Client</I> to request a <I>Refresh</I> of all <I>Condition </I>instances that currently are in an interesting state (they have the <I>Retain</I> flag set) that are associated with the given Monitored item. In all other respects it functions as ConditionRefresh. A <I>Client</I> would typically invoke this <I>Method</I> when it initially connects to a <I>Server</I> and following any situations, such as communication disruptions where only a single monitored item is to be resynchronized with the <I>Server</I>. This <I>Method</I> is only available on the <I>ConditionType</I> or its subtypes. To invoke this <I>Method</I>, the call shall pass the well known <I>MethodId</I> of the <I>Method</I> on the <I>ConditionType</I> and the <I>ObjectId</I> shall be the well known <I>ObjectId</I> of the <I>ConditionType</I> <I>Object</I>. </P
><P 

>This <I>M</I><I>ethod</I> is optional and as such <I>C</I><I>lients</I> must be prepared to handle <I>Servers</I> which do not provide the <I>M</I><I>ethod</I>. If the <I>M</I><I>ethod</I> returns Bad_MethodInvalid, the <I>C</I><I>lient</I> shall revert to <I>ConditionRefresh</I>. </P
><P 

><B>Signature </P
><P 

>ConditionRefresh2( </P
><P 

></B> [in] IntegerId SubscriptionId </P
><P 

> [in] IntegerId MonitoredItemId </P
><P 

> ); </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The parameters are defined in <A href="#LinkTarget_5389" href="#">
Table 16</A>
 </P
><P 

><B>Table 19 &ndash; ConditionRefresh2 parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Argument </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SubscriptionId </P
></TD
><TD  
 valign="top"
><P 

>The identifier of the <I>Subscription</I> containing the <I>MonitoredItem</I> to be refreshed. The <I>Server</I> shall verify that the <I>SubscriptionId</I> provided is part of the <I>S</I><I>ession</I> that is invoking the <I>Method</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>MonitoredItemId </P
></TD
><TD  
 valign="top"
><P 

>The identifier of the <I>MonitoredItem</I> to be refreshed. The <I>M</I><I>onitored</I><I>I</I><I>tem</I><I>Id </I>shall be in the provided <I>Subscription</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Method Result Codes in <A href="#LinkTarget_5412" href="#">
Table 17</A>
 (defined in Call Ser<I>v</I>ice) </P
><P 

><B>Table 20 &ndash; ConditionRefresh2 result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_SubscriptionIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the description of this result code </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MonitoredItemIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the description of this result code </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_RefreshInProgress </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_UserAccessDenied </P
></TD
><TD  
 valign="top"
><P 

>The Method was not called in the context of the Session that owns the Subscription </P
><P 

>See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the general description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MethodInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the description of this result code </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Comments </P
><P 

></B>Sub clause <A href="#LinkTarget_4014" href="#">
4.5</A>
 describes the concept, use cases and information flow in more detail. </P
><P 

>The input argument provides a <I>Subscription</I> identifier and <I>MonitoredItem</I> identifier indicating which <I>MonitoredItem</I> in the selected <I>Client</I> <I>Subscription</I> shall be refreshed. If the <I>Subscription</I> and <I>MonitoredItem</I> are accepted the <I>Server</I> will react as follows: </P
><DL 

><DD 

>1) The <I>Server</I> issues a <I>RefreshStartEvent</I> (defined in <A href="#LinkTarget_10180" href="#">
5.11.2</A>
) marking the start of <I>Refresh.</I><I> </I>The <I>RefreshStartEvent</I> is queued into the <I>Event</I> stream for the<I> </I><I>Notifier </I><I>MonitoredItem </I>in the <I>Subscription</I>. </DD
><DD 

>2) The <I>Se</I><I>rver</I> issues <I>Event Notifications</I> of any <I>Retained</I> <I>Conditions</I> and <I>Retained</I> <I>Branches</I> of <I>Conditions</I> that meet the <I>Subscriptions</I> content filter criteria. Note that the EventId for such a refreshed <I>Notification</I> shall be identical to the one for the original <I>Notif</I><I>ication</I>. </DD
><DD 

>3) The <I>Server</I> may intersperse new <I>Event</I> <I>Notifications</I> that have not been previously issued to the notifier along with those being sent as part of the <I>Refresh</I> request. <I>Clients</I> shall check for multiple <I>Event</I> <I>Notifications</I> for a <I>ConditionBranch</I> to avoid overwriting a new state delivered together with an older state from the <I>Refresh</I> process. </DD
><DD 

>4) The <I>Server</I> issues a <I>RefreshEndEvent</I> (defined in <A href="#LinkTarget_10242" href="#">
5.11.3</A>
) to signal the end of the <I>Refresh. </I>The <I>Refresh</I><I>End</I><I>Event</I> is queued into the <I>Event</I> stream for the<I> </I><I>Notifier </I><I>MonitoredItem </I>in the <I>Subscription</I>. </DD
></DL
><P 

>If more than one <I>MonitoredItem</I> or <I>Subscription</I> is to be refreshed, then the standard call <I>Service</I> array processing can be used. </P
><P 

>As mentioned above, <I>ConditionRefresh</I><I>2</I> shall also issue <I>Event</I> <I>Notifications</I> for prior states if those states still need attention. In particular this is true for <I>Condition </I>instances where previous states still need acknowledgement or confirmation. </P
><P 

><A href="#LinkTarget_5491" href="#">
Table 18</A>
 specifies the <I>AddressSpace</I> representation for the <I>ConditionRefresh</I><I>2</I> <I>Method</I>. </P
><P 

><B>Table 21 &ndash; ConditionRefresh2 Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ConditionRefresh2 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

><I>Variable </I></P
></TD
><TD  
 valign="top"
><P 

>InputArguments </P
></TD
><TD  
 valign="top"
><P 

>Argument[]  </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_10180" href="#">
5.11.2</A>
 </P
></TD
><TD  
 valign="top"
><P 

>RefreshStartEvent </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_10242" href="#">
5.11.3</A>
 </P
></TD
><TD  
 valign="top"
><P 

>RefreshEndEvent </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_5785"
><FONT size="+1"><B>5.6 Dialog Model </H2
><H3 
 ID="LinkTarget_5786"
>5.6.1 General </H3
><P 

></B>The Dialog Model is an extension of the <I>Condition</I> model used by a <I>Server</I> to request user input. It provides functionality similar to the standard <I>Message</I> dialogs found in most operating systems. The model can easily be customized by providing <I>Server</I> specific response options in the <I>ResponseOptionSet</I> and by adding additional functionality to derived <I>Condition</I> <I>Types</I>. </P
><H3 
 ID="LinkTarget_5788"
><B>5.6.2 DialogConditionType </H3
><P 

></B>The <I>DialogCond</I><I>itionType</I> is used to represent <I>Conditions</I> as dialogs. It is illustrated in <A href="#LinkTarget_5804" href="#">
Figure 9</A>
 and formally defined in <A href="#LinkTarget_5806" href="#">
Table 22</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>LastResponseDialogConditionTypeResponseOptionSetTwoStateVariableType:DialogStateRespondOkResponseConditionTypeEnableStateIsTrueSubStatePromptDefaultResponseCancelResponse</DIV
></P
><P 

><B>Figure 9 - DialogConditionType Overview </P
><P 

></B> </P
><P 

><B>Table 22 &ndash; DialogConditionType Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DialogConditionType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the ConditionType defined in clause <A href="#LinkTarget_4587" href="#">
5.5.2</A>
  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>DialogState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>Prompt </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>ResponseOptionSet </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText [ ] </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>DefaultResponse </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>LastResponse </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>OkResponse </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>CancelResponse </P
></TD
><TD  
 valign="top"
><P 

>Int32 </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>Respond </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_5999" href="#">
5.6.3</A>
. </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>DialogConditionType</I> inherits all <I>Properties</I> of the <I>ConditionType</I>. </P
><P 

><I>DialogState/Id</I> when set to TRUE indicates that the <I>Dialog</I> is active and waiting for a response. Recommended state names are described in <A href="#LinkTarget_10626" href="#">
Annex A</A>
. </P
><P 

><I>Prompt</I> is a dialog prompt to be shown to the user. </P
><P 

><I>ResponseOptionSet</I> specifies the desired set of responses as array of <I>LocalizedText</I>. The index in this array is used for the corresponding fields like <I>DefaultResponse</I>, <I>LastResponse</I> and <I>SelectedOption</I> in the <I>Respond</I> <I>Method</I>. The recommended localized names for the common options are described in <A href="#LinkTarget_10626" href="#">
Annex A</A>
. </P
><P 

>Typical combinations of response options are </P
><DL 

><DD 

>&#61623; OK </DD
><DD 

>&#61623; OK, Cancel </DD
><DD 

>&#61623; Yes, No, Cancel </DD
><DD 

>&#61623; Abort, Retry, Ignore </DD
><DD 

>&#61623; Retry, Cancel </DD
><DD 

>&#61623; Yes, No </DD
></DL
><P 

><I>DefaultResponse</I> identifies the response option that should be shown as default to the user. It is the index in the <I>ResponseOptionSet</I> array. If no response option is the default, the value of the <I>Property</I> is -1. </P
><P 

><I>LastRes</I><I>ponse</I> contains the last response provided by a <I>Client</I> in the <I>Respond Method</I>. If no previous response exists then the value of the <I>Property</I> is -1. </P
><P 

><I>OkResponse</I> provides the index of the OK option in the <I>ResponseOptionSet</I> array. This choice is the response that will allow the system to proceed with the operation described by the prompt. This allows a <I>Client</I> to identify the OK option if a special handling for this option is available. If no OK option is available the value of this <I>Property</I> is -1. </P
><P 

><I>CancelResponse</I> provides the index of the response in the <I>ResponseOptionSet</I> array that will cause the Dialog to go into the inactive state without proceeding with the operation described by the prompt. This allows a <I>Client</I> to identify the Cancel option if a special handling for this option is available. If no Cancel option is available the value of this <I>Property</I> is -1. </P
><H3 
 ID="LinkTarget_5999"
><B>5.6.3 Respond Method </H3
><P 

></B><I>Respond</I> is used to pass the selected response option and end the dialog. <I>DialogState/Id</I> will return to FALSE. </P
><P 

><B>Signature </P
><P 

>Respond( </P
><P 

></B> [in] Int32 SelectedResponse </P
><P 

> ); </P
><P 

>The parameters are defined in <A href="#LinkTarget_6011" href="#">
Table 23</A>
  </P
><P 

><B>Table 23 &ndash; Respond parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Argument </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SelectedResponse </P
></TD
><TD  
 valign="top"
><P 

>Selected index of the <I>ResponseOptionSet</I> array. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Method Result Codes in <A href="#LinkTarget_6034" href="#">
Table 24</A>
 (defined in Call Ser<I>v</I>ice) </P
><P 

><B>Table 24 &ndash; Respond ResultCodes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_DialogNotActive </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DialogResponseInvalid </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><A href="#LinkTarget_6071" href="#">
<FONT size="+1">Table 25</A>
 specifies the <I>AddressSpace</I> representation for the <I>R</I><I>espond</I> <I>Method</I>. </P
><P 

><B>Table 25 &ndash; Respond Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>Respond </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

><I>Variable </I></P
></TD
><TD  
 valign="top"
><P 

>InputArguments </P
></TD
><TD  
 valign="top"
><P 

>Argument[]  </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_9838" href="#">
5.10.5</A>
 </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionRespondEventType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_6130"
><FONT size="+1"><B>5.7 Acknowledgeable Condition Model </H2
><H3 
 ID="LinkTarget_6131"
>5.7.1 General </H3
><P 

></B>The Acknowledgeable<I> </I><I>Condition</I> Model extends the <I>Condition</I> model. States for acknowledgement and confirmation are added to the <I>Condition</I> model. </P
><P 

><I>AcknowledgeableConditions</I> are represented by the <I>AcknowledgeableConditionType</I> which is a subtype of the <I>ConditionType</I>. The model is formally defined in the following sub clauses. </P
><H3 
 ID="LinkTarget_6134"
><B>5.7.2 AcknowledgeableConditionType </H3
><P 

></B>The <I>AcknowledgeableConditionType</I> extends the <I>ConditionType</I> by defining acknowledgement characteristics. It is an abstract type. The <I>AcknowledgeableConditionType</I> is illustrated in <A href="#LinkTarget_6149" href="#">
Figure 10</A>
 and formally defined in <A href="#LinkTarget_6150" href="#">
Table 26</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>AcknowledgeableConditionTypeAcknowledgeTwoStateVariableType:AckedStateTwoStateVariableType:ConfirmedStateConfirmConditionTypeEnableStateHasTrueSubState</DIV
></P
><P 

><B>Figure 10 &ndash; AcknowledgeableConditionType overview </P
><P 

>Table 26 &ndash; AcknowledgeableConditionType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>AcknowledgeableConditionType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the <I>ConditionType </I>defined in<I> </I>clause <A href="#LinkTarget_4587" href="#">
5.5.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_6667" href="#">
0</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>AckedState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>ConfirmedState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>Acknowledge </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_6325" href="#">
5.7.3</A>
 </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>Confirm </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_6486" href="#">
5.7.4</A>
 </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>AcknowledgeableConditionType</I> inherits all <I>Properties</I> of the <I>ConditionType</I>. </P
><P 

><I>AckedState</I> when FALSE indicates that the <I>Condition</I> instance requires acknowledgement for the reported <I>Condition</I> state. When the <I>Condition</I> instance is acknowledged the <I>AckedState</I> is set to TRUE. <I>ConfirmedState</I> indicates whether it requires confirmation. Recommended state names are described in <A href="#LinkTarget_10626" href="#">
Annex A</A>
. The two states are sub-states of the TRUE <I>EnabledState</I>. See <A href="#LinkTarget_3934" href="#">
4.3</A>
 for more information about acknowledgement and confirmation models. The <I>EventId</I> used in the <I>Event Notification</I> is considered the identifier of this state and has to be used when calling the <I>M</I><I>ethods</I> for acknowledgement or confirmation. </P
><P 

>A <I>Server</I> may require that previous states be acknowledged. If the acknowledgement of a previous state is still open and a new state also requires acknowledgement, the <I>Server</I> shall create a branch of the <I>Condition</I> instance as specified in <A href="#LinkTarget_4010" href="#">
4.4</A>
.<I> </I><I>Clients</I> are expected to keep track of all <I>ConditionBranches</I> where <I>AckedState</I>/Id is FALSE to allow acknowledgement of those. See also <A href="#LinkTarget_4587" href="#">
5.5.2</A>
 for more information about <I>ConditionBranches</I> and the examples in Clause <A href="#LinkTarget_11376" href="#">
B.1</A>
. The handling of the <I>AckedState</I> and branches also applies to the <I>ConfirmState</I>. </P
><H3 
 ID="LinkTarget_6325"
><B>5.7.3 Acknowledge Method </H3
><P 

></B>The<I> </I><I>Acknowledge</I> <I>Method</I> is used to acknowledge an <I>Event</I><I> </I><I>Notification</I> for a <I>Condition</I> instance state where <I>AckedState</I> is FALSE. Normally, the <I>NodeId</I> of the object instance as the <I>ObjectId</I> is passed to the <I>Call</I> <I>Service</I>. However, some <I>Servers</I> do not expose <I>Condition</I> instances in the <I>AddressSpace. </I>Therefore all <I>Servers</I> shall also allow <I>Clients</I> to call the </P
><P 

><I>Acknowledge</I> <I>Method</I> by specifying <I>ConditionId</I> as the <I>ObjectId.</I> The <I>Method</I> cannot be called with an <I>ObjectId</I> of the <I>AcknowledgeableConditionType</I> <I>Node</I>. </P
><P 

><B>Signature </P
><P 

>Acknowledge( </P
><P 

></B> [in] ByteString EventId </P
><P 

> [in] LocalizedText Comment </P
><P 

> ); </P
><P 

>The parameters are defined in <A href="#LinkTarget_6340" href="#">
Table 27</A>
 </P
><P 

><B>Table 27 &ndash; Acknowledge parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Argument </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EventId </P
></TD
><TD  
 valign="top"
><P 

>EventId identifying a particular <I>Event Notification</I>. </P
><P 

>Only <I>Event Notifications</I> where AckedState/Id was FALSE can be acknowledged.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Comment </P
></TD
><TD  
 valign="top"
><P 

>A localized text to be applied to the <I>Condition</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Method Result Codes in <A href="#LinkTarget_6369" href="#">
Table 28</A>
 (defined in Call Service) </P
><P 

><B>Table 28 &ndash; Acknowledge result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ConditionBranchAlreadyAcked </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MethodInvalid </P
></TD
><TD  
 valign="top"
><P 

>The method id does not refer to a method for the specified object or ConditionId.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_EventIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdInvalid </P
></TD
><TD  
 valign="top"
><P 

>Used to indicate that the specified <I>ObjectId</I> is not valid or that the <I>Method</I> was called on the ConditionType <I>Node</I>. See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the general description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1"><B>Comments </P
><P 

></B>A <I>Server</I> is responsible to ensure that each <I>Event</I> has a unique <I>EventId</I>. This allows <I>Clients</I> to identify and acknowledge a particular <I>Event Notification</I>. </P
><P 

>The <I>EventId</I> identifies a specific <I>Event Notification</I> where a state to be acknowledged was reported. Acknowledgement and the optional comment will be applied to the state identified with the <I>Even</I><I>tId</I>. If the comment field is NULL (both locale and text are empty) it will be ignored and any existing comments will remain unchanged. If the comment is to be reset, an empty text with a locale shall be provided. </P
><P 

>A valid <I>EventId</I> will result in an <I>Event Not</I><I>ification</I> where <I>AckedState</I>/Id is set to TRUE and the <I>Comment Property</I> contains the text of the optional comment argument. If a previous state is acknowledged, the <I>BranchId</I> and all <I>Condition</I> values of this branch will be reported. <A href="#LinkTarget_6427" href="#">
Table 29</A>
 specifies the <I>AddressSpace</I> representation for the <I>Acknowledge</I> <I>Method</I>. </P
><P 

><B>Table 29 &ndash; Acknowledge Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>Acknowledge </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

><I>Variable </I></P
></TD
><TD  
 valign="top"
><P 

>InputArguments </P
></TD
><TD  
 valign="top"
><P 

>Argument[]  </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_9838" href="#">
5.10.5</A>
 </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionAcknowledge EventType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_6486"
><FONT size="+1"><B>5.7.4 Confirm Method </H3
><P 

></B>The<I> </I><I>Confirm</I> <I>Method</I> is used to confirm an <I>Event Notifications</I> for a <I>Condition</I> instance state where <I>ConfirmedState</I> is FALSE. Normally, the <I>NodeId</I> of the object instance as the <I>ObjectId</I> is passed to the <I>Call</I> <I>Service</I>. However, some <I>Servers</I> do not expose <I>Condition</I> instances in the <I>AddressSpace. </I>Therefore all <I>Servers</I> shall also allow <I>Clients</I> to call the <I>Confirm</I> <I>Method</I> </P
><P 

>by specifying <I>ConditionId</I> as the <I>ObjectId</I><I>.</I> The <I>Method</I> cannot be called with an <I>ObjectId</I> of the <I>AcknowledgeableConditionType</I><I> </I><I>Node</I><I>.</I> </P
><P 

><B>Signature </P
><P 

>Confirm( </P
><P 

></B> [in] ByteString  EventId </P
><P 

> [in] LocalizedText Comment </P
><P 

> ); </P
><P 

>The parameters are defined in <A href="#LinkTarget_6501" href="#">
Table 30</A>
 </P
><P 

><B>Table 30 &ndash; Confirm Method parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Argument </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EventId </P
></TD
><TD  
 valign="top"
><P 

><I>EventId</I> identifying a particular <I>Event Notification</I>. </P
><P 

>Only <I>Event Notifications</I> where the Id property of <I>ConfirmedState</I> is False can be confirmed.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Comment </P
></TD
><TD  
 valign="top"
><P 

>A localized text to be applied to the <I>Conditions</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Method Result Codes in <A href="#LinkTarget_6530" href="#">
Table 31</A>
 (defined in Call Service) </P
><P 

><B>Table 31 &ndash; Confirm result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ConditionBranchAlreadyConfirmed </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_MethodInvalid </P
></TD
><TD  
 valign="top"
><P 

>The method id does not refer to a method for the specified object or ConditionId. </P
><P 

>See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the general description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_EventIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_NodeIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>Used to indicate that the specified <I>ObjectId</I> is not valid or that the <I>Method</I> was called on the ConditionType <I>Node</I>. </P
><P 

>See <A href="#LinkTarget_3570" href="#">
Part 4</A>
 for the general description of this result code. </P
></TD
></TR
></TABLE
><P 

> </P
><P 

><FONT size="+1"><B>Comments </P
><P 

></B>A <I>Server</I> is responsible to ensure that each <I>Event</I> has a unique <I>EventId</I>. This allows <I>Clients</I> to identify and confirm a particular <I>Event Notification</I>. </P
><P 

>The <I>EventId</I> identifies a specific <I>Event Notification</I> where a state to be confirmed was reported. A <I>Comment</I> can be provided which will be applied to the state identified with the <I>EventId</I>. </P
><P 

>A valid <I>EventId</I> will result in an <I>Event Notification</I> where <I>ConfirmedState</I>/Id is set to TRUE and the <I>Comment Property</I> contains the text of the optional comment argument. If a previous state is confirmed, the <I>BranchId</I> and all <I>Condition</I> values of this branch will be reported. A <I>C</I><I>lient</I> can confirm only events that have a ConfirmedState/Id set to FALSE. The logic for setting ConfirmedState/Id to FALSE is <I>S</I><I>erver</I> specific and may even be event or condition specific. </P
><P 

><A href="#LinkTarget_6596" href="#">
Table 32</A>
 specifies the <I>AddressSpace</I> representation for the <I>Confirm</I> <I>Method</I>. </P
><P 

><B>Table 32 &ndash; Confirm Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>Confirm </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

><I>Variable </I></P
></TD
><TD  
 valign="top"
><P 

>InputArguments </P
></TD
><TD  
 valign="top"
><P 

>Argument[]  </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_10002" href="#">
5.10.7</A>
 </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionConfirm EventType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 
 ID="LinkTarget_6655"
> </P
><H2 

><FONT size="+1"><B>5.8 Alarm model </H2
><P 

><A href="#LinkTarget_6666" href="#">
</B>Figure 11</A>
 informally describes the AlarmConditionType, its sub-types and where it is in the hierarchy of <I>Event Types</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>AlarmConditionTypeAcknowledgeableConditionTypeConditionTypeExclusiveLimitAlarmTypeExclusiveLevelExclusiveMultiDeviationExclusiveRateOfChangeNonExclusiveLimitAlarmTypeNonExclusiveLevelNonExclusiveMultiDeviationNonExclusiveRateOfChangeOffNormalAlarmTypeDiscreteAlarmTypeSystemOffNormalAlarmTypeLimitAlarmType</DIV
></P
><P 

><B>Figure 11 - AlarmConditionType hierarchy model </P
><P 

></B> </P
><H3 
 ID="LinkTarget_6668"
><B>5.8.1 AlarmConditionType </H3
><P 

></B>The <I>AlarmConditionType</I> is an abstract type that extends the <I>AcknowledgeableConditionType</I> by introducing an <I>ActiveState</I>, <I>SuppressedState</I> and <I>Shelving</I><I>State</I>. The <I>Alarm </I>model is illustrated in <A href="#LinkTarget_6683" href="#">
Figure 12</A>
. This illustration is not intended to be a complete definition. It is formally defined in <A href="#LinkTarget_6684" href="#">
Table 33</A>
.  </P
><P 

> <DIV class="Sect" 
 Alt=""
>AcknowledgeableConditionTypeTwoStateVariableType:ActiveStateTwoStateVariableType:SuppressedStateConditionTypeEnableStateIsTrueSubStateAlarmConditionTypeStateMachineType:ShelvingStateCurrentState</DIV
></P
><P 

><B>Figure 12 &ndash; Alarm Model </P
><P 

>Table 33 &ndash; AlarmConditionType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the AcknowledgeableConditionType defined in clause <A href="#LinkTarget_6134" href="#">
5.7.2</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>ActiveState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>InputNode </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>SuppressedState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>ShelvingState </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ShelvedStateMachineType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>SuppressedOrShelved </P
></TD
><TD  
 valign="top"
><P 

>Boolean </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>MaxTimeShelved </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>AlarmConditionType</I> inherits all <I>Properties</I> of the <I>AcknowledgeableConditionType</I>. The following states are sub-states of the TRUE <I>EnabledState</I>. </P
><P 

><I>ActiveState/Id</I> when set to TRUE indicates that the situation the <I>Condition</I> is representing currently exists. When a <I>Condition</I> instance is in the inactive state (<I>ActiveState/Id</I> when set to FALSE) it is representing a situation that has returned to a normal state. The transitions of <I>Conditions</I> to the inactive and <I>Active</I> states are triggered by <I>Server</I> specific actions. Sub-Types of the AlarmConditionType specified later in this document will have sub-state models that further define the <I>Active</I> state. Recommended state names are described in <A href="#LinkTarget_10626" href="#">
Annex A</A>
. </P
><P 

>The <I>InputNode Property</I> provides the <I>NodeId</I> of the <I>Variable</I> the <I>Value</I> of which is used as primary input in the calculation of the <I>Alarm</I> state. If this <I>Variable</I> is not in the <I>AddressSpace</I>, a Null <I>NodeId</I> shall be provided. In some systems, an <I>Alarm</I> may be calculated based on multiple <I>Variables</I> <I>Values</I>; it is up to the system to determine which <I>Variable&rsquo;s</I> NodeId is used. </P
><P 

><I>Suppress</I><I>ed</I><I>State</I> is used internally by a <I>Server</I> to automatically suppress <I>Alarms</I> due to system specific reasons. For example a system may be configured to suppress <I>Alarms</I> that are associated with machinery that is shutdown, such as a low level <I>Alarm</I> for a tank that is currently not in use. Recommended state names are described in <A href="#LinkTarget_10626" href="#">
Annex A</A>
. </P
><P 

><I>ShelvingState</I> suggests whether an <I>Alarm</I> shall (temporarily) be prevented from being displayed to the user. It is quite often used to block nuisance <I>Alarms</I>. The <I>ShelvingState</I> is defined in <A href="#LinkTarget_6842" href="#">
5.8.2</A>
. </P
><P 

>The <I>SuppressedState</I> and the <I>ShelvingState</I> together result in the <I>SuppressedOrShelved</I> status of the <I>Condition</I>. When an <I>Alarm</I> is in one of the states, the <I>SuppressedOrShelved</I> property will be set TRUE and this <I>Alarm</I> is then typically not displayed by the <I>Client</I>. State transitions associated with the <I>Alarm</I> do occur, but they are not typically displayed by the <I>Client</I>s as long as the <I>Alarm</I> remains in either the <I>S</I><I>uppressed</I> or <I>S</I><I>helved</I> state. </P
><P 

>The optional <I>Property</I> <I>MaxTimeShelved</I> is used to set the maximum time that an <I>Alarm</I> <I>Condition</I> may be shelved. The value is expressed as duration. Systems can use this <I>Property</I> to prevent permanent <I>Shelving</I> of an <I>Alarm.</I> If this <I>Property</I> is present it will be an upper limit on the duration passed into a TimedShelve <I>Method</I> call. If a value that exceeds the value of this property is passed to the TimedShelve <I>Method</I>, than a <I>Bad</I>_<I>ShelvingTimeOutOfRange</I> error code is returned on the call. If this <I>Property</I> is present it will also be enforced for the OneShotShelved state, in that an <I>Alarm Condition </I>will transition to the Unshelved state from the OneShotShelved state if the duration specified in this <I>Proper</I><I>ty</I> expires following a OneShotShelve operation without a change of any of the other items associated with the <I>Condition</I>. </P
><P 

>More details about the <I>Alarm</I> Model and the various states can be found in Sub clause <A href="#LinkTarget_4049" href="#">
4.8</A>
. </P
><H3 
 ID="LinkTarget_6842"
><B>5.8.2 ShelvedStateMachineType </H3
><H4 
 ID="LinkTarget_6843"
>5.8.2.1 Overview </H4
><P 

></B>The <I>ShelvedStateMachineType</I> defines a sub-state machine that represents an advanced <I>Alarm </I>filtering model. This model is illustrated in <A href="#LinkTarget_6887" href="#">
Figure 14</A>
. </P
><P 

>The state model supports two types of <I>Shelving</I>: <I>OneShotShelving</I> and <I>TimedShelving</I>. They are illustrated in <A href="#LinkTarget_6870" href="#">
Figure 13</A>
. The illustration includes the allowed transitions between the various sub-states. <I>Shelving</I> is an <I>Operator</I> initiated activity. </P
><P 

>In <I>OneShotShelving</I>, a user requests that an <I>Alarm</I> be Shelved for its current <I>Active</I> state. This type of <I>Shelving</I> is typically used when an <I>Alarm</I> is continually occurring on a boundary (i.e. a <I>Condition</I> is jumping between High <I>Alarm</I> and HighHigh <I>Alarm</I>, always in the <I>Active</I> state). The One Shot <I>Shelving</I> will automatically clear when an <I>Alarm</I> returns to an inactive state. Another use for this type of <I>Shelving</I> is for a plant area that is shutdown i.e. a long running <I>Alarm</I> such as a low level <I>Alarm</I> for a tank that is not in use. When the tank starts operation again the <I>Shelving</I> state will automatically clear. </P
><P 

>In <I>TimedShelving</I>, a user specifies that an <I>Alarm</I> be shelved for a fixed time period. This type of <I>Shelving</I> is quite often used to block nuisance <I>Alarms</I>. For example, an <I>Alarm</I> that occurs more than 10 times in a minute may get shelved for a few minutes. </P
><P 

>In all states, the <I>Unshelve</I> can be called to cause a transition to the Unshelve state; this includes <I>U</I><I>n</I><I>-</I><I>shelving</I> an<I> </I><I>Alarm</I> that is in the <I>TimedShelve</I> state before the time has expired and the <I>OneShotShelve</I> state without a transition to an inactive state. </P
><P 

>All but two transitions are caused by <I>Method</I> calls as illustrated in <A href="#LinkTarget_6870" href="#">
Figure 13</A>
. The &ldquo;Time Expired&rdquo; transition is simply a system generated transition that occurs when the time value defined as part of the &ldquo;Timed Shelved Call&rdquo; has expired. The &ldquo;Any Transition Occurs&rdquo; transition is also a system generated transition; this transition is generated when the <I>Condition</I> goes to an inactive state. </P
><P 

> <DIV class="Sect" 
 Alt=""
>TimedShelvedOneshotShelvedUnshelvedTimed Shelve callAny Transition OccursOne Shot Shelve callTime ExpiredUnShelve callUnShelve callTimed Shelve callOne Shot Shelve call</DIV
></P
><P 

><B>Figure 13 &ndash; Shelve state transitions </P
><P 

></B>The <I>ShelvedStateMachine</I> includes a hierarchy of sub-states. It supports all transitions between Unshelved, OneShotShelved and TimedShelved. </P
><P 

>The state machine is illustrated in <A href="#LinkTarget_6887" href="#">
Figure 14</A>
 and formally defined in <A href="#LinkTarget_6888" href="#">
Table 34</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>OneShotShelveShelvedStateMachineTypeTimedShelvedOneShotShelvedUnShelvedToTimedShelvedHasCauseFiniteStateMachineTypeUnshelvedUnShelvedToOneShotShelvedTimedShelvedToUnshelvedOneShotShelvedToUnShelvedUnshelveHasCauseHasCauseTimedShelveHasCauseTimedShelvedToOneShotShelvedHasCauseOneShotShelvedToTimedShelvedHasCauseStateTypeTransitionTypeUnshelveTime</DIV
></P
><P 

><B>Figure 14 &ndash; ShelvedStateMachineType model </P
><P 

>Table 34 &ndash;ShelvedStateMachineType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ShelvedStateMachineType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the Finite<I>StateMachineType </I>defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
 </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>UnshelveTime </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>Unshelved </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>TimedShelved </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelved </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>UnshelvedToTimedShelved </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>TransitionType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>TimedShelvedToUnshelved </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>TransitionType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>TimedShelvedToOneShotShelved </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>TransitionType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>UnshelvedToOneShotShelved </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>TransitionType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelvedToUnshelved </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>TransitionType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelvedToTimedShelved </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>TransitionType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>TimedShelve </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_7515" href="#">
5.8.2.3</A>
 </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelve </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_7651" href="#">
5.8.2.4</A>
 </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Method </P
></TD
><TD  
 valign="top"
><P 

>Unshelve </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_7433" href="#">
5.8.2.2</A>
 </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><I>UnshelveTime</I> specifies the remaining time in milliseconds until the <I>Alarm</I> automatically transitions into the <I>Un</I><I>-</I><I>s</I><I>helved</I> state. For the TimedShelved state this time is initialised with the <I>ShelvingTime</I> argument of the <I>TimedShelve Method</I> call. For the OneShotShelved state the UnshelveTime will be a constant set to the maximum Duration except if a <I>MaxTimeShelved</I> Property is provided. </P
><P 

>This <I>Finite</I><I>StateMachine</I> supports three <I>Active</I> states; Unshelved, TimedShelved and OneShotShelved. It also supports six transitions. The states and transitions are described in </P
><P 

><A href="#LinkTarget_7191" href="#">
Table 35</A>
. This <I>Finite</I><I>StateMachine</I> also supports three <I>Method</I>s; TimedShelve, OneShotShelve and UnShelve. </P
><P 

><B>Table 35 &ndash; ShelvedStateMachineType transitions </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">BrowseName </P
></TD
><TD  
 valign="top"
><P 

>References </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Transitions </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>UnshelvedToTimedShelved </P
></TD
><TD  
 valign="top"
><P 

>FromState </P
></TD
><TD  
 valign="top"
><P 

>Unshelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ToState </P
></TD
><TD  
 valign="top"
><P 

>TimedShelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasEffect </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasCause </P
></TD
><TD  
 valign="top"
><P 

>TimedShelve </P
></TD
><TD  
 valign="top"
><P 

><I>Method </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>UnshelvedToOneShotShelved </P
></TD
><TD  
 valign="top"
><P 

>FromState </P
></TD
><TD  
 valign="top"
><P 

>Unshelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ToState </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasEffect </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasCause </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelve </P
></TD
><TD  
 valign="top"
><P 

><I>Method </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TimedShelvedToUnshelved </P
></TD
><TD  
 valign="top"
><P 

>FromState </P
></TD
><TD  
 valign="top"
><P 

>TimedShelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ToState </P
></TD
><TD  
 valign="top"
><P 

>Unshelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasEffect </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>TimedShelvedToOneShotShelved </P
></TD
><TD  
 valign="top"
><P 

>FromState </P
></TD
><TD  
 valign="top"
><P 

>TimedShelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ToState </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasEffect </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasCause </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelving </P
></TD
><TD  
 valign="top"
><P 

><I>Method </I></P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OneShotShelvedToUnshelved </P
></TD
><TD  
 valign="top"
><P 

>FromState </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ToState </P
></TD
><TD  
 valign="top"
><P 

>Unshelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasEffect </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>OneShotShelvedToTimedShelved </P
></TD
><TD  
 valign="top"
><P 

>FromState </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ToState </P
></TD
><TD  
 valign="top"
><P 

>TimedShelved </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasEffect </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasCause </P
></TD
><TD  
 valign="top"
><P 

>TimedShelve </P
></TD
><TD  
 valign="top"
><P 

><I>Method </I></P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_7433"
><FONT size="+1"><B>5.8.2.2 Unshelve Method </H4
><P 

></B>The<I> </I><I>Unshelve</I> <I>Method</I> sets the <I>AlarmCondition</I> to the <I>Unshelved</I> state. Normally, the <I>MethodId</I> found in the <I>Shelving</I> child of the <I>Condition</I> instance and the <I>NodeId</I> of the <I>Shelving</I> object as the <I>ObjectId</I> are passed to the <I>Call</I> <I>Service</I>. However, some <I>Servers</I> do not expose <I>Condition</I> instances in the <I>AddressSpace. </I>Therefore all <I>Servers</I> shall also allow <I>Clients</I> to call the <I>Unshelve</I> <I>Method</I> by specifying <I>ConditionId</I> as the <I>ObjectId.</I> The <I>Method</I> cannot be called with an <I>ObjectId</I> of the <I>ShelvedStateMachineType</I> <I>Node</I>. </P
><P 

><B>Signature </P
><P 

>Unshelve</B>( ); </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Method Result Codes in <A href="#LinkTarget_7444" href="#">
Table 36</A>
 (defined in Call Service) </P
><P 

><B>Table 36 &ndash; Unshelve result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ConditionNotShelved </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><A href="#LinkTarget_7470" href="#">
<FONT size="+1">Table 37</A>
 specifies the <I>AddressSpace</I> representation for the <I>Unshelve</I> <I>Method</I>. </P
><P 

><B>Table 37 &ndash; Unshelve Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>Unshelve </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_10002" href="#">
5.10.7</A>
 </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionShelvingEventType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

> </P
><H4 
 ID="LinkTarget_7515"
><FONT size="+1"><B>5.8.2.3 TimedShelve Method </H4
><P 

></B>The<I> </I><I>TimedShelve</I><I> </I><I>Method</I> sets the <I>AlarmCondition</I> to the <I>TimedShelved</I> state (parameters are defined in <A href="#LinkTarget_7533" href="#">
Table 38</A>
 and result codes are described in <A href="#LinkTarget_7551" href="#">
Table 39</A>
). Normally, the <I>MethodId</I> found in the <I>Shelving</I> child of the <I>Condition</I> instance and the <I>NodeId</I> of the <I>Shelving</I> object as </P
><P 

>the <I>ObjectId</I> are passed to the <I>Call</I> <I>Service</I>. However, some <I>Servers</I> do not expose <I>Condition</I> instances in the <I>AddressSpace. </I>Therefore all <I>Servers</I> shall also allow <I>Clients</I> to call the <I>TimedShelve</I> <I>Method</I> by specifying <I>ConditionId</I> as the <I>ObjectId</I><I>.</I> The <I>Method</I> cannot be called with an <I>ObjectId</I> of the <I>ShelvedStateMachineType</I> <I>Node</I>. </P
><P 

><B>Signature </P
><P 

></B>TimedShelve( </P
><P 

> [in] Duration ShelvingTime </P
><P 

> ); </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Table 38 &ndash; TimedShelve parameters </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Argument </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ShelvingTime </P
></TD
><TD  
 valign="top"
><P 

>Specifies a fixed time for which the <I>Alarm</I> is to be shelved. The <I>Server</I> may refuse the provided duration. If a <I>MaxTimeShelved </I>Property exist on the <I>Alarm</I> than the <I>Shelving</I> time shall be less than or equal to the value of this Property. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Method Result Codes (defined in Call Service) </P
><P 

><B>Table 39 &ndash; TimedShelve result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ConditionAlreadyShelved </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
><P 

>The <I>Alarm</I> is already in TimedShelved state and the system does not allow a reset of the shelved timer. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ShelvingTimeOutOfRange </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Comments </P
><P 

></B><I>Shelving</I> for some time is quite often used to block nuisance <I>Alarms</I>. For example, an <I>Alarm</I> that occurs more than 10 times in a minute may get shelved for a few minutes. </P
><P 

>In some systems the length of time covered by this duration may be limited and the <I>Server</I> may generate an error refusing the provided duration. This limit may be exposed as the <I>MaxTimeShelved</I> <I>Pro</I><I>perty</I>. </P
><P 

><A href="#LinkTarget_7592" href="#">
Table 40</A>
 specifies the <I>AddressSpace</I> representation for the <I>TimedShelve</I> <I>Method</I>. </P
><P 

><B>Table 40 &ndash; TimedShelve Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>TimedShelve </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>InputArguments </P
></TD
><TD  
 valign="top"
><P 

>Argument[] </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_10002" href="#">
5.10.7</A>
 </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionShelvingEventType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_7651"
><FONT size="+1"><B>5.8.2.4 OneShotShelve Method </H4
><P 

></B>The<I> </I><I>OneShotShelve</I><I> </I><I>Method</I> sets the <I>AlarmCondition</I> to the <I>OneShotShelved</I> state. Normally, the <I>MethodId</I> found in the <I>Shelving</I> child of the <I>Condition</I> instance and the <I>NodeId</I> of the <I>Shelving</I> object as the <I>ObjectId</I> are passed to the <I>Call</I> <I>Service</I>. However, some <I>Servers</I> do not expose <I>Condition</I> instances in the <I>AddressSpace. </I>Therefore all <I>Servers</I> shall also allow <I>Clients</I> to call the <I>O</I><I>neShotShelve</I> <I>Method</I> by specifying <I>ConditionId</I> as the <I>ObjectId.</I> The <I>Method</I> cannot be called with an <I>ObjectId</I> of the <I>ShelvedStateMachineType</I> <I>Node</I>. </P
><P 

><B>Signature </P
><P 

></B>OneShotShelve( ); </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Method Result Codes are defined in <A href="#LinkTarget_7662" href="#">
Table 41</A>
 (status code field is defined in <I>Call</I> Ser<I>v</I>ice) </P
><P 

><B>Table 41 &ndash; OneShotShelve result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">ResultCode </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ConditionAlreadyShelved </P
></TD
><TD  
 valign="top"
><P 

>See <A href="#LinkTarget_10453" href="#">
Table 74</A>
 for the description of this result code. </P
><P 

>The <I>Alarm</I> is already in OneShotShelved state. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><A href="#LinkTarget_7690" href="#">
<FONT size="+1">Table 42</A>
 specifies the <I>AddressSpace</I> representation for the <I>OneShotShelve</I> <I>Method</I>. </P
><P 

><B>Table 42 &ndash; OneShotShelve Method AddressSpace definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelve </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AlwaysGeneratesEvent </P
></TD
><TD  
 valign="top"
><P 

>Defined in <A href="#LinkTarget_10002" href="#">
5.10.7</A>
 </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionShelvingEventType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_7735"
><FONT size="+1"><B>5.8.3 LimitAlarmType </H3
><P 

></B><I>Alarms</I> can be modelled with multiple exclusive sub-states and assigned limits or they may be modelled with non exclusive limits that can be used to group multiple states together. </P
><P 

>The <I>LimitAlarmType</I> is an abstract type used to provide a base <I>Type</I> for <I>Alarm</I><I>Condit</I><I>ions</I> with multiple limits. The <I>LimitAlarmType</I> is illustrated in <A href="#LinkTarget_7747" href="#">
Figure 15</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>AlarmConditionTypeLimitAlarmTypeLowLimitLowLowLimitHighLimitHighHighLimitExclusiveLimitAlarmTypeNonExclusiveLimitAlarmType</DIV
></P
><P 

><B>Figure 15 &ndash; LimitAlarmType </P
><P 

></B>The <I>LimitAlarmType</I> is formally defined in <A href="#LinkTarget_7754" href="#">
Table 43</A>
. </P
><P 

><B>Table 43 &ndash; LimitAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>LimitAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the AlarmConditionType defined in clause <A href="#LinkTarget_6667" href="#">
0</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveLimitAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_8210" href="#">
5.8.4.3</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveLimitAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_8334" href="#">
5.8.5</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>HighHighLimit </P
></TD
><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>HighLimit </P
></TD
><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>LowLimit </P
></TD
><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>LowLowLimit </P
></TD
><TD  
 valign="top"
><P 

>Double </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">Four optional limits are defined that configure the states of the derived limit <I>Alarm</I> Types. These Properties shall be set for any <I>Alarm</I> limits that are exposed by the derived limit <I>Alarm</I> Types. These <I>Properties</I> are listed as optional but at least one is required. For cases where an underlying system cannot provide the actual value of a limit, the limit <I>Property</I> shall still be provided, but will have its <I>AccessLevel</I> set to not readable. It is assumed that the limits are described using the same Engineering Unit that is assigned to the variable that is the source of the alarm. For Rate of change limit alarms, it is assumed this rate is units per second unless otherwise specified. </P
><P 

>The <I>Alarm</I> limits listed may cause an <I>Alarm</I> to be generate when a value equals the limit or it may generate the <I>Alarm</I> when the limit is exceeded, (i.e. the Value is above the limit for HighLimit and below the limit for LowLimit). The exact behaviour when the value is equal to the limit is <I>Server</I> specific. </P
><H3 
 ID="LinkTarget_7888"
><B>5.8.4 ExclusiveLimit Types </H3
><H4 
 ID="LinkTarget_7889"
>5.8.4.1 Overview </H4
><P 

></B>This Clause describes the state machine and the base <I>Alarm</I> Type behaviour for <I>Alarm</I> Types with multiple mutually exclusive limits. </P
><H4 
 ID="LinkTarget_7891"
><B>5.8.4.2 ExclusiveLimitStateMachineType </H4
><P 

></B>The <I>ExclusiveLimitStateMachineType</I> defines the state machine used by <I>AlarmTypes</I> that handle multiple mutually exclusive limits. It is illustrated in <A href="#LinkTarget_7901" href="#">
Figure 16</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>FiniteStateMachineTypeLowHighExclusiveLimit StateMachineTypeLowLowHighHighHighHighToHighHighToHighHighLowToLowLowLowLowToLowStateTypeTransitionType</DIV
></P
><P 

><B>Figure 16 &ndash; ExclusiveLimitStateMachineType </P
><P 

></B>It is created by extending the <I>Finite</I><I>StateMachineType</I>. It is formally defined in <A href="#LinkTarget_7912" href="#">
Table 44</A>
 and the state transitions are described in <A href="#LinkTarget_8066" href="#">
Table 45</A>
. </P
><P 

><B>Table 44 &ndash; ExclusiveLimitStateMachineType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveLimitStateMachineType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the <I>Finite</I><I>StateMachineType</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>HighHigh </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>High </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>Low </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>LowLow </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>LowToLowLow </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>TransitionType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>LowLowToLow </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>TransitionType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>HighToHighHigh </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>TransitionType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>HighHighToHigh </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>TransitionType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Table 45 &ndash; ExclusiveLimitStateMachineType transitions </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">BrowseName </P
></TD
><TD  
 valign="top"
><P 

>References </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Transitions </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HighHighToHigh </P
></TD
><TD  
 valign="top"
><P 

>FromState </P
></TD
><TD  
 valign="top"
><P 

>HighHigh </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ToState </P
></TD
><TD  
 valign="top"
><P 

>High </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasEffect </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HighToHighHigh </P
></TD
><TD  
 valign="top"
><P 

>FromState </P
></TD
><TD  
 valign="top"
><P 

>High </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ToState </P
></TD
><TD  
 valign="top"
><P 

>HighHigh </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasEffect </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LowLowToLow </P
></TD
><TD  
 valign="top"
><P 

>FromState </P
></TD
><TD  
 valign="top"
><P 

>LowLow </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ToState </P
></TD
><TD  
 valign="top"
><P 

>Low </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasEffect </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LowToLowLow </P
></TD
><TD  
 valign="top"
><P 

>FromState </P
></TD
><TD  
 valign="top"
><P 

>Low </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>ToState </P
></TD
><TD  
 valign="top"
><P 

>LowLow </P
></TD
><TD  
 valign="top"
><P 

>StateType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>HasEffect </P
></TD
><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>ExclusiveLimitStateMachine</I><I>Type</I> defines the sub state machine that represents the actual level of a multilevel <I>Alarm </I>when it is in the <I>Active</I> state. The sub state machine defined here includes High, Low, HighHigh and LowLow states. This model also includes in its transition state a series of transition to and from a parent state, the inactive state. This state machine as it is defined shall be used as a sub state machine for a state machine which has an <I>Active</I> state. This <I>Active</I> state could be part of a &ldquo;level&rdquo; <I>Alarm</I> or &ldquo;deviation&rdquo; <I>Alarm</I> or any other <I>Alarm</I> state machine. </P
><P 

>The LowLow, Low, High, HighHigh are typical for many industries. Vendors can introduce sub-state models that include additional limits; they may also omit limits in an instance. </P
><H4 
 ID="LinkTarget_8210"
><B>5.8.4.3 ExclusiveLimitAlarmType </H4
><P 

></B>The <I>ExclusiveLimitAlarmType</I> is used to specify the common behaviour for <I>Alarm Types</I> with multiple mutually exclusive limits. The <I>ExclusiveLimitAlarmType</I> is illustrated in <A href="#LinkTarget_8222" href="#">
Figure 17</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ConditionTypeAcknowledgeableConditionTypeAlarmConditionTypeExclusiveLimit AlarmTypeActiveStateEnableStateIsTrueSubStateLowLimitLowLowLimitHighLimitHighHighLimitExclusiveLimitStateMachineType:LimitStateCurrentStateIsTrueSubStateExclusiveLevelAlarmTypeExclusiveDeviationAlarmTypeExclusiveRateOfChangeAlarmTypeLimitAlarmType</DIV
></P
><P 

><B>Figure 17 &ndash; ExclusiveLimitAlarmType </P
><P 

></B> The <I>ExclusiveLimitAlarmType</I> is formally defined in <A href="#LinkTarget_8229" href="#">
Table 46</A>
. </P
><P 

><B>Table 46 &ndash; ExclusiveLimitAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveLimitAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the LimitAlarmType defined in clause <A href="#LinkTarget_7735" href="#">
5.8.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveLevelAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_8579" href="#">
5.8.6.3</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveDeviationAlarmType Type </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_8720" href="#">
5.8.7.3</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveRateOfChangeAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_8874" href="#">
5.8.8.3</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Object </P
></TD
><TD  
 valign="top"
><P 

>LimitState </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I>ExclusiveLimitStateMachineType </I></P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>LimitState</I> is a Substate of the ActiveState and has a <I>IsTrueSubStateOf</I> reference to the <I>ActiveState</I>. The <I>LimitState</I> represents the actual limit that is violated in an <I>ExclusiveLimitAlarm</I>. When the ActiveState of the AlarmConditionType is inactive the <I>LimitState</I> shall not be available and shall return NULL on read. Any <I>Events</I> that subscribe for fields from the <I>LimitState</I> when the <I>ActiveState</I> is inactive shall return a NULL for these unavailable fields. </P
><H3 
 ID="LinkTarget_8334"
><B>5.8.5 NonExclusiveLimitAlarmType </H3
><P 

></B>The <I>NonExclusiveLimitAla</I><I>rmType</I> is used to specify the common behaviour for <I>Alarm Types</I> with multiple non-exclusive limits. The <I>NonExclusiveLimitAlarmType</I> is illustrated in <A href="#LinkTarget_8345" href="#">
Figure 18</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ConditionTypeAcknowledgeableConditionTypeAlarmConditionTypeNonExclusiveLimit AlarmTypeActiveStateEnableStateIsTrueSubStateIsTrueSubStateNonExclusiveLevelAlarmTypeNonExclusiveDeviationAlarmTypeNonExclusiveRateOfChangeAlarmTypeHighHighStateHighStateLowStateLowLowStateLimitAlarmTypeLowLimitLowLowLimitHighLimitHighHighLimit</DIV
></P
><P 

><B>Figure 18 &ndash; NonExclusiveLimitAlarmType </P
><P 

></B> The <I>NonExclusiveLimitAlarmType</I> is formally defined in <A href="#LinkTarget_8352" href="#">
Table 47</A>
. </P
><P 

><B>Table 47 &ndash; NonExclusiveLimitAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveLimitAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the LimitAlarmType defined in clause <A href="#LinkTarget_7735" href="#">
5.8.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveLevelAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_8510" href="#">
5.8.6.2</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveDeviationAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_8650" href="#">
5.8.7.2</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

>ObjectType </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveRateOfChangeAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_8791" href="#">
5.8.8.2</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>HighHighState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>HighState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>LowState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasComponent </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>LowLowState </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>TwoStateVariableType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><I>HighHighState</I>, <I>HighState</I>, <I>LowState</I>, and <I>LowLowState</I> represent the non-exclusive states. As an example, it is possible that both HighState and HighHighState are in their TRUE state. Vendors may choose to support any subset of these states. Recommended state names are described in <A href="#LinkTarget_10626" href="#">
Annex A</A>
. </P
><P 

>Four optional limits are defined that configure these states. At least the HighState or the LowState shall be provided even though all states are optional. It is implied by the definition </P
><P 

>of a HighState and a LowState, that these groupings are mutually exclusive. A value cannot exceed both a HighState value and a LowState value simultaneously. </P
><H3 
 ID="LinkTarget_8507"
><B>5.8.6 Level Alarm </H3
><H4 
 ID="LinkTarget_8508"
>5.8.6.1 Overview </H4
><P 

></B>A level<I> </I><I>Alarm </I>is commonly used to report when a limit is exceeded. It typically relates to an instrument &ndash; e.g. a temperature meter. The level <I>Al</I><I>arm</I> becomes active when the observed value is above a high limit or below a low limit. </P
><H4 
 ID="LinkTarget_8510"
><B>5.8.6.2 NonExclusiveLevelAlarmType </H4
><P 

></B>The <I>NonExclusiveLevelAlarmType</I> is a special level <I>Alarm</I> utilized with one or more non-exclusive states. If for example both the High and HighHigh states need to be maintained as active at the same time this <I>AlarmType</I> should be used. </P
><P 

>The <I>NonExclusiveLevelAlarmType</I> is based on the <I>NonExclusiveLimitAlarmType</I>. It is formally defined in <A href="#LinkTarget_8518" href="#">
Table 48</A>
. </P
><P 

><B>Table 48 &ndash; NonExclusiveLevelAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveLevelAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the NonExclusiveLimitAlarmType defined in clause <A href="#LinkTarget_8334" href="#">
5.8.5</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">No additional <I>Properties</I> to the <I>NonExclusiveLimitAlarmType</I> are defined. </P
><H4 
 ID="LinkTarget_8579"
><B>5.8.6.3 ExclusiveLevelAlarmType </H4
><P 

></B>The <I>ExclusiveLevelAlarmType</I> is a special level <I>Alarm</I> utilized with multiple mutually exclusive limits. It is formally defined in <A href="#LinkTarget_8586" href="#">
Table 49</A>
. </P
><P 

><B>Table 49 &ndash; ExclusiveLevelAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveLevelAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Inherits the Properties of the ExclusiveLimitAlarmType defined in clause <A href="#LinkTarget_8210" href="#">
5.8.4.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">No additional <I>Properties</I> to the <I>ExclusiveLimitAlarmType</I> are defined. </P
><H3 
 ID="LinkTarget_8646"
><B>5.8.7 Deviation Alarm </H3
><H4 
 ID="LinkTarget_8647"
>5.8.7.1 Overview </H4
><P 

></B>A deviation <I>Alarm</I> is commonly used to report an excess deviation between a desired set point level of a process value and an actual measurement of that value. The deviation <I>Alarm</I> becomes active when the deviation exceeds or drops below a defined limit. </P
><P 

>For example if a set point had a value of 10 and the high deviation <I>Alarm</I> limit were set for 2 and the low deviation <I>Alarm</I> limit had a value of -1 then the low sub state is entered if the process value dropped to below 9; the high sub state is entered if the process value became larger than 12. If the set point were changed to 11 then the new deviation values would be 10 and 13 respectively. </P
><H4 
 ID="LinkTarget_8650"
><B>5.8.7.2 NonExclusiveDeviationAlarmType </H4
><P 

></B>The <I>NonExclusiveDeviationAlarmType</I> is a special level <I>Alarm</I> utilized with one or more non-exclusive states. If for example both the High and HighHigh states need to be maintained as active at the same time this <I>AlarmType</I> should be used. </P
><P 

>The <I>NonExclusiveDeviationAlarmType</I> is based on the <I>NonExclusiveLimitAlarmType</I>. It is formally defined in <A href="#LinkTarget_8660" href="#">
Table 50</A>
. </P
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Table 50 &ndash; NonExclusiveDeviationAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveDeviationAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the NonExclusiveLimitAlarmType defined in clause <A href="#LinkTarget_8334" href="#">
5.8.5</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>SetpointNode </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>SetpointNode Property</I> provides the <I>NodeId</I> of the set point used in the deviation calculation. If this <I>Variable</I> is not in the <I>AddressSpace</I>, a Null <I>NodeId</I> shall be provided. </P
><H4 
 ID="LinkTarget_8720"
><B>5.8.7.3 ExclusiveDeviationAlarmType </H4
><P 

></B>The <I>ExclusiveDeviationAlarmType</I> is utilized with multiple mutually exclusive limits. It is formally defined in <A href="#LinkTarget_8727" href="#">
Table 51</A>
. </P
><P 

><B>Table 51 &ndash; ExclusiveDeviationAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveDeviationAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Inherits the <I>Properties</I> of the <I>ExclusiveLimitAlarmType</I> defined in clause <A href="#LinkTarget_8210" href="#">
5.8.4.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>SetpointNode </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>SetpointNode Property</I> provides the <I>NodeId</I> of the set point used in the <I>Deviation</I> calculation. If this <I>Variable</I> is not in the <I>AddressSpace</I>, a Null <I>NodeId</I> shall be provided. </P
><H3 
 ID="LinkTarget_8787"
><B>5.8.8 Rate of change Alarms </H3
><H4 
 ID="LinkTarget_8788"
>5.8.8.1 Overview </H4
><P 

></B>A <I>Rate</I> of <I>Change</I> <I>Alarm</I> is commonly used to report an unusual change or lack of change in a measured value related to the speed at which the value has changed. The <I>Rate</I> of <I>Change</I> <I>Alarm</I> becomes active when the rate at which the value changes exceeds or drops below a defined limit. </P
><P 

>A <I>Rate</I> of <I>Change</I> is measured in some time unit, such as seconds or minutes and some unit of measure such as percent or meter. For example a tank may have a High limit for the <I>Rate</I> of <I>Change</I> of its level (measured in meters) which would be 4 meters per minute. If the tank level changes at a rate that is greater than 4 meters per minute then the High sub state is entered. </P
><H4 
 ID="LinkTarget_8791"
><B>5.8.8.2 NonExclusiveRateOfChangeAlarmType </H4
><P 

></B>The <I>NonExclusiveRateOfChangeAlarmType</I> is a special level <I>Alarm</I> utilized with one or more non-exclusive states. If for example both the High and HighHigh states need to be maintained as active at the same time this <I>AlarmType</I> should be used </P
><P 

>The <I>NonExclusiveRateOfChangeAlarmType</I> is based on the <I>NonExclusiveLimitAlarmType</I>. It is formally defined in <A href="#LinkTarget_8799" href="#">
Table 52</A>
. </P
><P 

><B>Table 52 &ndash; NonExclusiveRateOfChangeAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveRateOfChangeAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the NonExclusiveLimitAlarmType defined in clause <A href="#LinkTarget_8334" href="#">
5.8.5</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>EngineeringUnits </P
></TD
><TD  
 valign="top"
><P 

>EUInformation </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">EngineeringUnits provides the engineering units associated with the limits values. If this is not provided the assumed Engineering Unit is the same as the EU associated with the parent variable per second e.g. if parent is meters, this unit is meters/second. </P
><H4 
 ID="LinkTarget_8874"
><B>5.8.8.3 ExclusiveRateOfChangeAlarmType </H4
><P 

></B><I>ExclusiveRateOfChangeAlarmType</I> is utilized with multiple mutually exclusive limits. It is formally defined in <A href="#LinkTarget_8881" href="#">
Table 53</A>
. </P
><P 

><B>Table 53 &ndash; ExclusiveRateOfChangeAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveRateOfChangeAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Inherits the <I>Properties</I> of the <I>ExclusiveLimitAlarmType</I> defined in clause <A href="#LinkTarget_8210" href="#">
5.8.4.3</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>EngineeringUnits </P
></TD
><TD  
 valign="top"
><P 

>EUInformation </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">EngineeringUnits provides the engineering units associated with the limits values. If this is not provided the assumed Engineering Unit is the same as the EU associated with the parent variable per second e.g. if parent is meters, this unit is meters/second. </P
><H3 
 ID="LinkTarget_8955"
><B>5.8.9 Discrete Alarms </H3
><H4 
 ID="LinkTarget_8956"
>5.8.9.1 DiscreteAlarmType </H4
><P 

></B>The <I>DiscreteAlarmType</I> is used to classify <I>Types</I> into <I>Alarm Conditions</I> where the input for the <I>Alarm</I> may take on only a certain number of possible values (e.g. true/false, running/stopped/terminating). The <I>DiscreteAlarmType</I> with sub types defined in this standard is illustrated in <A href="#LinkTarget_8972" href="#">
Figure 19</A>
. It is formally defined in <A href="#LinkTarget_8973" href="#">
Table 54</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>AlarmConditionTypeOffNormalAlarmTypeDiscreteAlarmTypeTripAlarmTypeLimitAlarmTypeCertificateExpirationAlarmTypeSystemOffNormalAlarmType</DIV
></P
><P 

><B>Figure 19 &ndash; DiscreteAlarmType Hierarchy </P
><P 

>Table 54 &ndash; DiscreteAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DiscreteAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the AlarmConditionType defined in clause <A href="#LinkTarget_6667" href="#">
0</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

><I>ObjectType </I></P
></TD
><TD  
 valign="top"
><P 

>OffNormalAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_8646" href="#">
5.8.7</A>
 </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_9033"
><FONT size="+1"><B>5.8.9.2 OffNormalAlarmType </H4
><P 

></B>The <I>OffNormalAlarmType</I> is a specialization of the <I>DiscreteAlarmType</I> intended to represent a discrete <I>Condition</I> that is considered to be not normal. It is formally defined in <A href="#LinkTarget_9040" href="#">
Table 55</A>
. This sub type is usually used to indicate that a discrete value is in an <I>Alarm</I> state, it is active as long as a non-normal value is present. </P
><P 

><B>Table 55 &ndash; OffNormalAlarmType Definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>OffNormalAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the DiscreteAlarmType defined in clause <A href="#LinkTarget_8956" href="#">
5.8.9.1</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

><I>ObjectType </I></P
></TD
><TD  
 valign="top"
><P 

>TripAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause <A href="#LinkTarget_9194" href="#">
5.8.9.4</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

><I>ObjectType </I></P
></TD
><TD  
 valign="top"
><P 

>SystemOffNormalAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause 5.8.9.3 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

><I> </I></P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

><I>Variable </I></P
></TD
><TD  
 valign="top"
><P 

>NormalState </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>NormalState Property</I> is a <I>Property</I> that points to a <I>Variable</I> which has a value that corresponds to one of the possible values of the <I>Variable</I> pointed to by the <I>InputNode</I> <I>Property</I> where the <I>NormalState</I> <I>Property</I> <I>Variable</I> value is the value that is considered to be the normal state of the <I>Variable</I> pointed to by the <I>InputNode</I> <I>Property</I>. When the value of the <I>Variable</I> referenced by the <I>InputNode Property</I> is not equal to the value of the <I>NormalState </I><I>Property</I> the <I>Alarm</I> is <I>Active</I>. If this <I>Variable</I> is not in the <I>AddressSpace</I>, a Null <I>NodeId</I> shall be provided. </P
><H4 
 ID="LinkTarget_9136"
><B>5.8.9.3 SystemOffNormalAlarmType </H4
><P 

></B>This <I>Condition</I> is used by a <I>Server</I> to indicate that an underlying system that is providing <I>Alarm</I> information is having a communication problem and that the <I>Server</I> may have invalid or incomplete <I>Condition</I> state in the <I>Subscription</I>. Its representation in the <I>AddressSpace</I> is formally defined in <A href="#LinkTarget_9144" href="#">
Table 56</A>
. </P
><P 

><B>Table 56 &ndash; SystemOffNormalAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>SystemOffNormalAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasSubtype </P
></TD
><TD  
 valign="top"
><P 

><I>ObjectType </I></P
></TD
><TD  
 valign="top"
><P 

>CertificateExpirationAlarmType </P
></TD
><TD  
 valign="top"
><P 

>Defined in Clause 5.8.9.5 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Subtype of the <I>OffNormalAlarmType</I>, i.e. it has HasProperty <I>References</I> to the same <I>Nodes</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H4 
 ID="LinkTarget_9194"
><FONT size="+1"><B>5.8.9.4 TripAlarmType  </H4
><P 

></B>The <I>TripAlarmType</I> is a specialization of the <I>OffNormalAlarmType</I> intended to represent an equipment trip <I>Condition</I>. The <I>Alarm</I> becomes active when the monitored piece of equipment experiences some abnormal fault such as a motor shutting down due to an overload <I>Condition</I>. It is formally defined in <A href="#LinkTarget_9201" href="#">
Table 57</A>
. This <I>Type</I> is mainly used for categorization. </P
><P 

><B>Table 57 &ndash; TripAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>TripAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the OffNormalAlarmType defined in clause <A href="#LinkTarget_9033" href="#">
5.8.9.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><H4 
 ID="LinkTarget_9255"
><FONT size="+1"><B>5.8.9.5 CertificateExpirationAlarmType  </H4
><P 

></B>This <I>SystemOffNormalAlarmType</I> is raised by the <I>Server</I> when the <I>Server&rsquo;s</I> Certificate is within the <I>ExpirationLimit</I> of expiration. This alarm automatically returns to normal when the certificate is updated. </P
><P 

><B>Table 58 &ndash; CertificateExpirationAlarmType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>CertificateExpirationAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the SystemOffNormalAlarmType defined in clause 5.8.9.3 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>ExpirationDate </P
></TD
><TD  
 valign="top"
><P 

>DateTime </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>ExpirationLimit </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>CertificateType </P
></TD
><TD  
 valign="top"
><P 

>NodeId </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>Certificate </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><I>ExpirationDate</I> is the date and time this certificate will expire. </P
><P 

><I>ExpirationLimit</I> is the time interval before the <I>ExpirationDate</I> at which this alarm will trigger. This shall be a positive number. If the property is not provided, a default of 2 weeks shall be used. </P
><P 

><I>CertificateType</I> &ndash; See Part 12 for definition of <I>CertificateType.</I> </P
><P 

><I>Certificate</I> is the certificate that is about to expire. </P
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_9358"
><FONT size="+1"><B>5.9 ConditionClasses </H2
><H3 
 ID="LinkTarget_9360"
>5.9.1 Overview </H3
><P 

></B><I>Conditions</I> are used in specific application domains like Maintenance, System or Process. The <I>ConditionClass</I> hierarchy is used to specify domains and is orthogonal to the <I>Con</I><I>ditionType</I> hierarchy. The <I>ConditionClassId Property</I> of the <I>ConditionType</I> is used to assign a <I>Condition</I> to a <I>ConditionClass</I>. <I>Clients</I> can use this <I>Property</I> to filter out essential classes. OPC UA defines the base <I>ObjectType</I> for all <I>ConditionClasses</I> and a set of common classes used across many industries. <A href="#LinkTarget_9369" href="#">
Figure 20 &ndash; ConditionClass type hierarchy</A>
 informally describes the hierarchy of <I>ConditionClass</I> <I>Types</I> defined in this standard. </P
><P 

><FONT size="+1"> <DIV class="Sect" 
 Alt=""
>Defined in [UA Part 5]BaseObjectTypeBaseConditionClassTypeProcessConditionClassTypeMaintenanceConditionClassTypeSystemConditionClassType</DIV
></P
><P 

><FONT size="+1"><B>Figure 20 &ndash; ConditionClass type hierarchy </P
><P 

></B><I>ConditionClasses</I> are not representations of <I>Object</I>s in the underlying system and, therefore, only exist as <I>Type Nodes</I> in the <I>Address Space</I>. </P
><H3 
 ID="LinkTarget_9373"
><B>5.9.2 BaseConditionClassType </H3
><P 

></B><I>BaseConditionClassType</I> is used as class whenever a <I>Condition</I> cannot be assigned to a more concrete class. <I>Servers</I> should use a more specific <I>ConditionClass</I>, if possible. All <I>ConditionClass</I> <I>Types</I> derive from <I>BaseConditionClassType</I>. It is formally defined in <A href="#LinkTarget_9380" href="#">
Table 59</A>
. </P
><P 

><B>Table 59 &ndash; BaseConditionClassType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>BaseConditionClassType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the BaseObjectType defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_9435"
><FONT size="+1"><B>5.9.3 ProcessConditionClassType </H3
><P 

></B>The <I>ProcessConditionClassType</I> is used to classify <I>Conditions</I> related to the process itself. Examples of a process would be a control system in a boiler or the instrumentation associated with a chemical plant or paper machine. The <I>ProcessConditionClassType</I> is formally defined in <A href="#LinkTarget_9442" href="#">
Table 60</A>
. </P
><P 

><B>Table 60 &ndash; ProcessConditionClassType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>ProcessConditionClassType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>Modelling Rule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the BaseConditionClassType defined in clause <A href="#LinkTarget_9373" href="#">
5.9.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_9497"
><FONT size="+1"><B>5.9.4 MaintenanceConditionClassType </H3
><P 

></B>The <I>MaintenanceConditionClassType</I> is used to classify <I>Conditions</I> related to maintenance. Examples of maintenance would be Asset Management systems or conditions, which occur in process control systems, which are related to calibration of equipment. The <I>MaintenanceConditionClassType</I> is formally defined in <A href="#LinkTarget_9505" href="#">
Table 61</A>
. No further definition is provided here. It is expected that other standards groups will define domain-specific sub-types. </P
><P 

><B>Table 61 &ndash; MaintenanceConditionClassType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>MaintenanceConditionClassType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the BaseConditionClassType defined in clause <A href="#LinkTarget_9373" href="#">
5.9.2</A>
.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_9561"
><FONT size="+1"><B>5.9.5 SystemConditionClassType </H3
><P 

></B>The <I>SystemConditionClassType</I> is used to classify <I>Conditions</I> related to the System. It is formally defined in <A href="#LinkTarget_9568" href="#">
Table 62</A>
. System <I>Conditions</I> occur in the controlling or monitoring system process. .Examples of System related items could include available disk space on a computer, Archive media availability, network loading issues or a controller error, No further definition is provided here. It is expected that other standards groups or vendors will define domain-specific sub-types. </P
><P 

><B>Table 62 &ndash; SystemConditionClassType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>SystemConditionClassType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the <I>BaseConditionClassType</I> defined in clause <A href="#LinkTarget_9373" href="#">
5.9.2</A>
. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><H2 

><FONT size="+1"><B>5.10 Audit Events </H2
><H3 
 ID="LinkTarget_9623"
>5.10.1 Overview </H3
><P 

></B>Following are sub-types of <I>AuditUpdateMethodEventType</I> that will be generated in response to the <I>Methods</I> defined in this document. They are illustrated in <A href="#LinkTarget_9634" href="#">
Figure 21</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Defined in [UA Part 5]AuditEventTypeAuditConditionComment EventTypeAuditCondition EventTypeAuditUpdateMethod EventTypeAuditConditionAcknowledge EventTypeAuditConditionEnable EventTypeAuditConditionShelving EventTypeAuditConditionRespond EventTypeAuditConditionConfirm EventType</DIV
></P
><P 

><B>Figure 21 &ndash; AuditEvent hierarchy  </P
><P 

></B><I>Audit Condition EventTypes</I> are normally used in response to a <I>Method</I> call. However, these <I>Events</I> shall also be notified if the functionality of such a <I>Method</I> is performed by some other <I>Server</I>-specific means. In this case the <I>SourceName Property</I> shall contain a proper description of this internal means and the other properties should be filled in as described for the given <I>Event</I> type. </P
><H3 
 ID="LinkTarget_9637"
><B>5.10.2 AuditConditionEventType </H3
><P 

></B>This <I>EventType</I> is used to subsume all <I>Audit Condition EventTypes</I>. It is formally defined in <A href="#LinkTarget_9644" href="#">
Table 63</A>
. </P
><P 

><B>Table 63 &ndash; AuditConditionEventType definition  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the <I>AuditUpdateMethodEventType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
  </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><I>Audit Condition EventTypes</I> inherit all <I>Properties</I> of the <I>AuditUpdateMethodEventType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
. Unless a subtype overrides the definition, the inherited properties of the <I>Condition</I> will be used as defined. </P
><DL 

><DD 

>&#61623; The inherited <I>Property</I> <I>SourceNode</I> shall be filled with the <I>ConditionId</I>. </DD
><DD 

>&#61623; The <I>SourceName</I> shall be &ldquo;Method/&rdquo; and the name of the <I>Service</I> that generated the <I>Event </I>(e.g. <I>Disable</I>, Enable, <I>Acknowledge</I><I>,</I><I> </I>etc<I>).</I> </DD
></DL
><P 

>This <I>Event</I> Type can be further customized to reflect particular <I>Condition</I> related actions. </P
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_9702"
><FONT size="+1"><B>5.10.3 AuditConditionEnableEventType </H3
><P 

></B>This <I>EventType</I> is used to indicate a change in the enabled state of a <I>Condition</I> instance. It is formally defined in <A href="#LinkTarget_9709" href="#">
Table 64</A>
. </P
><P 

><B>Table 64 &ndash; AuditConditionEnableEventType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionEnableEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the <I>Audit</I><I>Condition</I><I>EventType</I> defined in <A href="#LinkTarget_9637" href="#">
5.10.2</A>
 that is, inheriting the InstanceDeclarations of that Node. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The SourceName shall indicate Method/Enable or Method/Disable. If the audit <I>Event</I> is not the result of a <I>Method</I> call, but due to an internal action of the <I>Server</I> the SourceName shall reflect Enable or Disable, it may be preceded by an appropriate description such as &ldquo;Internal/Enable&rdquo; or &ldquo;Remote/Enable&rdquo;. </P
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_9756"
><FONT size="+1"><B>5.10.4 AuditConditionCommentEventType </H3
><P 

></B>This <I>EventType</I> is used to report an <I>AddComment</I> action. It is formally defined in <A href="#LinkTarget_9763" href="#">
Table 65</A>
. </P
><P 

><B>Table 65 &ndash; AuditConditionCommentEventType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionCommentEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>EventId </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>Comment </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Subtype of the <I>AuditConditionEventType</I> defined in <A href="#LinkTarget_9637" href="#">
5.10.2</A>
 that is, inheriting the InstanceDeclarations of that Node. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>EventId</I> field shall contain the id of the event for which the comment was added. </P
><P 

>The Comment contains the actual comment that was added. </P
><H3 
 ID="LinkTarget_9838"
><B>5.10.5 AuditConditionRespondEventType </H3
><P 

></B>This <I>EventType</I> is used to report a <I>Respond</I> action. It is formally defined in <A href="#LinkTarget_9846" href="#">
Table 66</A>
. </P
><P 

><B>Table 66 &ndash; AuditConditionRespondEventType definition  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionRespondEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>SelectedResponse </P
></TD
><TD  
 valign="top"
><P 

>Uint32 </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the <I>AuditConditionEventType</I> defined in <A href="#LinkTarget_9637" href="#">
5.10.2</A>
 that is, inheriting the InstanceDeclarations of that Node. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The SelectedResponse field shall contain the response that was selected. </P
><H3 
 ID="LinkTarget_9920"
><B>5.10.6 AuditConditionAcknowledgeEventType </H3
><P 

></B>This <I>EventType</I> is used to indicate acknowledgement or confirmation of one or more <I>Conditions</I>. It is formally defined in <A href="#LinkTarget_9927" href="#">
Table 67</A>
. </P
><P 

><B>Table 67 &ndash; AuditConditionAcknowledgeEventType definition  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionCommentEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>EventId </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>Comment </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Subtype of the <I>AuditConditionEventType</I> defined in <A href="#LinkTarget_9637" href="#">
5.10.2</A>
 that is, inheriting the InstanceDeclarations of that Node. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>EventId</I> field shall contain the id of the <I>Event</I> that was acknowledged. </P
><P 

>The Comment contains the actual comment that was added, it may be a blank comment or a null. </P
><H3 
 ID="LinkTarget_10002"
><B>5.10.7 AuditConditionConfirmEventType </H3
><P 

></B>This <I>EventType</I> is used to report a <I>Confirm</I> action. It is formally defined in <A href="#LinkTarget_10009" href="#">
Table 68</A>
. </P
><P 

><B>Table 68 &ndash; AuditConditionConfirmEventType definition  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionCommentEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>EventId </P
></TD
><TD  
 valign="top"
><P 

>ByteString </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>Comment </P
></TD
><TD  
 valign="top"
><P 

>LocalizedText </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Mandatory </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Subtype of the <I>AuditConditionEventType</I> defined in <A href="#LinkTarget_9637" href="#">
5.10.2</A>
 that is, inheriting the InstanceDeclarations of that Node. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">The <I>EventId</I> field shall contain the id of the <I>Event</I> that was confirmed. </P
><P 

>The Comment contains the actual comment that was added, it may be a blank comment or a null. </P
><H3 
 ID="LinkTarget_10085"
><B>5.10.8 AuditConditionShelvingEventType </H3
><P 

></B>This <I>EventType</I> is used to indicate a change to the <I>Shelving</I> state of a <I>Condition</I> instance. It is formally defined in <A href="#LinkTarget_10092" href="#">
Table 69</A>
. </P
><P 

><B>Table 69 &ndash; AuditConditionShelvingEventType definition  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>AuditConditionShelvingEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>HasProperty </P
></TD
><TD  
 valign="top"
><P 

>Variable </P
></TD
><TD  
 valign="top"
><P 

>ShelvingTime </P
></TD
><TD  
 valign="top"
><P 

>Duration </P
></TD
><TD  
 valign="top"
><P 

>PropertyType </P
></TD
><TD  
 valign="top"
><P 

>Optional </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Subtype of the <I>AuditConditionEventType</I> defined in <A href="#LinkTarget_9637" href="#">
5.10.2</A>
 that is, inheriting the InstanceDeclarations of that Node. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">If the <I>Method</I> indicates a TimedShelve operation, the <I>ShelvingTime</I> field shall contain duration for which the <I>Alarm</I> is to be shelved. For other <I>Shelving</I> <I>M</I><I>ethods</I>, this parameter may be omitted or null. </P
><H2 
 ID="LinkTarget_10167"
><B>5.11 Condition Refresh related Events </H2
><H3 
 ID="LinkTarget_10168"
>5.11.1 Overview </H3
><P 

></B>Following are sub-types of <I>SystemEventType</I> that will be generated in response to a <I>Refresh</I> <I>Methods</I> call. They are illustrated in <A href="#LinkTarget_10179" href="#">
Figure 22</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Defined in [UA Part 5]RefreshEndEventTypeSystemEventTypeBaseEventTypeRefreshRequired EventTypeRefreshStart EventType</DIV
></P
><P 

><B>Figure 22 &ndash; Refresh Related Event Hierarchy  </P
><H3 
 ID="LinkTarget_10180"
>5.11.2 RefreshStartEventType </H3
><P 

></B>This <I>EventType</I> is used by a <I>Server</I> to mark the beginning of a <I>Refresh</I> <I>Notification</I> cycle. Its representation in the <I>AddressSpace</I> is formally defined in <A href="#LinkTarget_10187" href="#">
Table 70</A>
. </P
><P 

><B>Table 70 &ndash; RefreshStartEventType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>RefreshStartEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Subtype of the <I>SystemEventType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
, i.e. it has HasProperty <I>References</I> to the same <I>Nodes</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_10242"
><FONT size="+1"><B>5.11.3 RefreshEndEventType </H3
><P 

></B>This <I>EventType</I> is used by a <I>Server</I> to mark the end of a <I>Refresh</I> <I>Notification</I> cycle. Its representation in the <I>AddressSpace</I> is formally defined in <A href="#LinkTarget_10249" href="#">
Table 71</A>
. </P
><P 

><B>Table 71 &ndash; RefreshEndEventType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>RefreshEndEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Subtype of the <I>SystemEventType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
, i.e. it has HasProperty <I>References</I> to the same <I>Nodes</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_10305"
><FONT size="+1"><B>5.11.4 RefreshRequiredEventType </H3
><P 

></B>This <I>EventType</I> is used by a <I>Server</I> to indicate that a significant change has occurred in the <I>Server</I> or in the subsystem below the <I>Server</I> that may or does invalidate the <I>Condition</I> state of a <I>Subscription</I>. Its representation in the <I>AddressSpace</I> is formally defined in <A href="#LinkTarget_10312" href="#">
Table 72</A>
. </P
><P 

><B>Table 72 &ndash; RefreshRequiredEventType definition </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attribute </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>RefreshRequiredEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>DataType </P
></TD
><TD  
 valign="top"
><P 

>TypeDefinition </P
></TD
><TD  
 valign="top"
><P 

>ModellingRule </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Subtype of the <I>SystemEventType</I> defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
, i.e. it has HasProperty <I>References</I> to the same <I>Nodes</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1">When a <I>Server</I> detects an <I>Event</I> queue overflow, it shall track if any <I>C</I><I>ondition</I> <I>Event</I>s have been lost, if any <I>Condition</I> <I>Event</I>s were lost, it shall issue a <I>RefreshRequiredEventType</I> <I>Event</I> to the <I>C</I><I>lient</I> after the <I>Event</I> queue is no longer in an overflow state. </P
><H2 
 ID="LinkTarget_10368"
><B>5.12 HasCondition Reference type </H2
><P 

></B>The <I>HasCondition</I> <I>ReferenceType</I> is a concrete <I>ReferenceTy</I><I>pe</I> and can be used directly. It is a subtype of <I>NonHierarchicalReferences</I>. The representation in the <I>AddressSpace</I> is specified in <A href="#LinkTarget_10392" href="#">
Table 73</A>
. </P
><P 

>The semantic of this <I>ReferenceType</I> is to specify the relationship between a <I>ConditionSource</I> and its <I>Conditions</I>. Each <I>ConditionSource</I> shall be the target of a <I>HasEventSource Reference</I> or a sub type of <I>HasEventSource</I>. The <I>AddressSpace</I> organisation that shall be provided for <I>Clie</I><I>nts</I> to detect <I>Conditions</I> and <I>ConditionSources</I> is defined in Clause <A href="#LinkTarget_10561" href="#">
6</A>
. Various examples for the use of this <I>ReferenceType</I> can be found in <A href="#LinkTarget_11872" href="#">
B.2</A>
. </P
><P 

><I>HasCondition</I> <I>References</I> can be used in the <I>Type</I> definition of an <I>Object</I> or a <I>Variable</I>. In this case, the <I>SourceNode</I> of this <I>ReferenceType</I> shall be an <I>ObjectType</I> or<I> </I><I>VariableType Node</I> or one of their <I>InstanceDeclaration Nodes</I>. The <I>TargetNode</I> shall be a <I>Condition</I> instance declaration or a <I>ConditionType</I>. The following rules for instantiation apply: </P
><DL 

><DD 

>&#61623; All <I>HasCondition</I> <I>References</I> used in a <I>Type</I> shall exist in instances of these <I>Types</I> as well. </DD
><DD 

>&#61623; If the <I>TargetNode</I> in the <I>Type</I> definition is a <I>ConditionType</I>, the same <I>TargetNode</I> will be referenced on the instance. </DD
></DL
><P 

><I>HasCondition</I> <I>References</I> may be used solely in the instance space when they are not available in <I>Type</I> definitions. In this case the <I>Source</I><I>Node</I> of this <I>ReferenceType</I> shall be an <I>Object</I>, <I>Variable</I> or <I>Method</I> <I>Node</I>. The <I>TargetNode</I> shall be a <I>Condition</I> instance or a <I>ConditionType</I>. </P
><P 

><B>Table 73 &ndash; HasCondition reference type  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Attributes </P
></TD
><TD  
 valign="top"
><P 

>Value </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>BrowseName </P
></TD
><TD  
 valign="top"
><P 

>HasCondition </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>InverseName </P
></TD
><TD  
 valign="top"
><P 

>IsConditionOf </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Symmetric </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>IsAbstract </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>References </P
></TD
><TD  
 valign="top"
><P 

>NodeClass </P
></TD
><TD  
 valign="top"
><P 

>BrowseName  </P
></TD
><TD  
 valign="top"
><P 

>Comment </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_10447"
><FONT size="+1"><B>5.13 Alarm &amp; Condition status codes </H2
><P 

><A href="#LinkTarget_10453" href="#">
</B>Table 74</A>
 defines the <I>StatusCodes</I> defined for <I>Alarm</I> &amp; <I>Conditions</I>. </P
><P 

><B>Table 74 &ndash; Alarm &amp; Condition result codes </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Symbolic Id  </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Bad_ConditionAlreadyEnabled </P
></TD
><TD  
 valign="top"
><P 

>The addressed Condition is already enabled. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ConditionAlreadyDisabled </P
></TD
><TD  
 valign="top"
><P 

>The addressed Condition is already disabled. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ConditionAlreadyShelved </P
></TD
><TD  
 valign="top"
><P 

>The Alarm is already in a shelved state. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ConditionBranchAlreadyAcked </P
></TD
><TD  
 valign="top"
><P 

>The <I>EventId</I> does not refer to a state that needs acknowledgement. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ConditionBranchAlreadyConfirmed </P
></TD
><TD  
 valign="top"
><P 

>The <I>EventId</I> does not refer to a state that needs confirmation. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ConditionNotShelved </P
></TD
><TD  
 valign="top"
><P 

>The Alarm is not in the requested shelved state. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DialogNotActive </P
></TD
><TD  
 valign="top"
><P 

>The <I>Di</I><I>alogCondition</I><I>Type</I> instance is not in <I>Active</I> state. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_DialogResponseInvalid </P
></TD
><TD  
 valign="top"
><P 

>The selected option is not a valid index in the <I>ResponseOptionSet</I> array. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_EventIdUnknown </P
></TD
><TD  
 valign="top"
><P 

>The specified <I>EventId</I> is not known to the <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_RefreshInProgress </P
></TD
><TD  
 valign="top"
><P 

>A ConditionRefresh operation is already in progress. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Bad_ShelvingTimeOutOfRange </P
></TD
><TD  
 valign="top"
><P 

>The provided <I>Shelving</I> time is outside the range allowed by the <I>Server</I> for <I>Shelving</I> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_10529"
><FONT size="+1"><B>5.14 Expected A&amp;C server behaviours </H2
><H3 
 ID="LinkTarget_10530"
>5.14.1 General </H3
><P 

></B>This section describes behaviour that is expected from an OPC UA <I>Server</I> that is implementing the <I>A&amp;C </I><I>I</I><I>nformation</I> <I>M</I><I>odel</I>. In particular this section describes specific behaviours that apply to various aspect of the A&amp;C <I>Information Model</I>. </P
><H3 
 ID="LinkTarget_10532"
><B>5.14.2 Communication problems </H3
><P 

></B>In some implementation of an OPC UA A&amp;C <I>Server</I>, the <I>Alarms</I> and <I>Condition</I> are provided by an underlying system. The expected behaviour of an A&amp;C <I>Server</I> when it is encountering communication problems with the underlying system is: </P
><DL 

><DD 

>&#61623; If communication fails to the underlying system, </DD
><DD 

>&ndash; For any <I>Event</I> field related information that is exposed in the address space, the Value/<I>StatusCode</I> obtained when reading the <I>Event</I> fields that are associated with the communication failure shall have a value of NULL and a <I>S</I><I>tatus</I><I>C</I><I>ode</I> of Bad_CommunicationError. </DD
><DD 

>&ndash; For <I>Subsc</I><I>ription</I>s that contain <I>Conditions</I> for which the failure applies, the effected <I>Conditions</I> generate an <I>Event</I><I>,</I> if the <I>Retain</I> field is set to true. These <I>Event</I><I>s</I> shall have their <I>E</I><I>vent</I> fields that are associated with the communication failure contain a <I>S</I><I>tatusC</I><I>ode</I> of Bad_CommunicationError for the value. </DD
><DD 

>&ndash; A <I>Condition</I> of the SystemOffNormalAlarmType shall be used to report the communication failure to <I>Alarm</I> <I>Clients</I>. The <I>NormalState</I><I> </I>field shall contain the <I>NodeId</I> of the <I>V</I><I>ariable</I> that indicates the status of the underlying system. </DD
><DD 

>&#61623; For start-up of an A&amp;C <I>Server</I> that is obtaining A&amp;C information from an already running underlying system: </DD
><DD 

>&ndash; If a value is unavailable for an <I>Event</I> field that is being reported do to a start-up of the UA <I>Server</I> (i.e. the information is just not available for the <I>Event</I>) the <I>Event</I> field shall contain a <I>S</I><I>tatusCode</I> set to Bad_WaitingForInitialData for the value. </DD
><DD 

>&ndash; If the Time field is normally provided by the underlying system and is unavailable, the Time will be reported as a <I>S</I><I>tatus</I><I>Code</I> with a value of Bad_WaitingForInitialData. </DD
></DL
><H3 
 ID="LinkTarget_10549"
><B>5.14.3 Redundant A&amp;C servers </H3
><P 

></B>In an OPC UA <I>Server</I> that is implementing the A&amp;C <I>Information Model</I> and that is configured to be a redundant OPC UA <I>Server</I> the following behaviour is expected: </P
><DL 

><DD 

>&#61623; The EventId is used to uniquely identify an <I>Event</I>. For an <I>Event</I> that is in each of the redundant <I>S</I><I>erver</I><I>s</I>, it shall be identical. This applies to all standard <I>Event</I>s, <I>Alarms</I> and <I>Conditions</I>. This may be accomplished by sharing of information between redundant <I>Server</I> (such as actual <I>Event</I>s) or it may be accomplished by providing a strict <I>EventId</I> generating algorithm that will generate an identical <I>EventId</I> for each <I>Event</I> </DD
><DD 

>&#61623; It is expected that for cold or warm failovers of redundant <I>Server</I>s, <I>Subscription</I> for <I>Event</I><I>s</I> shall require a Refresh operation. The <I>Client</I> shall initiate this <I>Refresh</I> operation.  </DD
><DD 

>&#61623; It is expected that for hot failovers of redundant <I>Server</I>s, <I>S</I><I>ubscription</I><I>s</I> for <I>E</I><I>vents</I> may require a <I>Refresh</I> operation. The <I>Server</I> shall issue a <I>RefreshRequiredEventType</I> <I>Event</I> if it is required.  </DD
><DD 

>&#61623; For transparent redundancy, a <I>Server</I> shall not require any action be performed by a <I>Client</I>. </DD
></DL
><H1 
 ID="LinkTarget_10561"
><FONT size="+1"><B>6 AddressSpace organisation </H1
><H2 
 ID="LinkTarget_10562"
><FONT size="+1">6.1 General </H2
><P 

></B>The <I>AddressSpace</I> organisation described in this Clause allows <I>Clients</I> to detect <I>Conditions</I> and <I>ConditionSources</I>. An additional hierarchy of <I>Object</I> <I>Nodes</I> that are notifies may be established to define one or more areas; the <I>Client</I> can subscribe to specific areas to limit the <I>Event</I> <I>Notifications</I> sent by the <I>Server</I>. Additional examples can be found in Clause <A href="#LinkTarget_11872" href="#">
B.2</A>
. </P
><H2 
 ID="LinkTarget_10570"
><B>6.2 EventNotifier and source hierarchy </H2
><P 

></B><I>HasNotifier</I> and <I>HasEventSource</I> <I>References</I> are used to expose the hierarchical organization of <I>Event</I> notifying <I>Objects</I> and <I>ConditionSources</I>. An <I>Event</I> notifying <I>Object</I> represents typically an area of <I>Operator</I> responsibility. The definition of such an area configuration is outside the scope of this standard. If areas are available they shall be linked together and with the included <I>ConditionSources</I> using the <I>HasNotifier</I> and the <I>HasEventSource</I> <I>Reference</I> <I>Types</I>. The <I>Server</I> <I>Object</I> shall be the root of this hierarchy. </P
><P 

><A href="#LinkTarget_10585" href="#">
Figure 23</A>
 shows such a hierarchy. Note that <I>HasNotifier</I> is a sub-type of <I>HasEventSource</I>. I.e. the target <I>Node</I> of a <I>HasNotifier</I> <I>Reference</I> (an <I>Event</I> notifying <I>Object</I>) may also be a <I>ConditionSource</I>. The <I>HasEventSou</I><I>rce</I> <I>Reference</I> is used if the target <I>Node</I> is a <I>ConditionSource</I> but cannot be used as <I>Event</I> notifier. See <A href="#LinkTarget_3568" href="#">
Part 3</A>
 for the formal definition of these <I>Reference Types</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ServerTank ALevelMeasurementArea 1HasNotifierHasNotifierTank FarmHasNotifierHasEventSourceMachine BHasNotifierDevice BHasNotifierDevice CHasEventSource</DIV
></P
><P 

><B>Figure 23 - Typical Event Hierarchy<I> </I></P
><P 

> </P
><H2 
 ID="LinkTarget_10587"
>6.3 Adding Conditions to the hierarchy </H2
><P 

></B><I>HasCondition</I> is used to reference <I>Conditions</I>. The <I>Reference</I> is from a <I>ConditionSource</I> to a <I>Condition</I> instance or &ndash; if no instance is exposed by the <I>Server</I> &ndash; to the <I>ConditionType</I>. </P
><P 

><I>Clients</I> can locate <I>Conditions</I> by first browsing for <I>ConditionSources</I> following <I>HasEventSo</I><I>urce References</I> (including sub-types like the <I>HasNotifier Reference</I>) and then browsing for <I>HasCondition References</I> from all target <I>Nodes</I> of the discovered<I> </I><I>References</I>. </P
><P 

><A href="#LinkTarget_10599" href="#">
Figure 24</A>
 shows the application of the <I>HasCondition Reference</I> in an <I>Event</I> hierarchy. The <I>Variable</I> LevelMeasurement and the <I>Object</I> &ldquo;Device B&rdquo; <I>Reference</I> <I>Condition</I> instances. The <I>Object</I> &ldquo;Tank A&rdquo; <I>Reference</I>s a <I>ConditionType</I> (MySystemAlarmType) indicating that a <I>Condition</I> exists but is not exposed in the <I>AddressSpace</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ServerTank ALevelMeasurementArea 1HasNotifierHasNotifierTank FarmHasNotifierHasEventSourceMachine BHasNotifierDevice BHasNotifierMyLevelAlarmType:LevelMonitoringHasConditionMyAlarmTypeA:Condition 1MyAlarmTypeA:Condition 2HasConditionHasConditionMySystemAlarmType</DIV
></P
><P 

><B>Figure 24 - Use of HasCondition in an Event hierarchy </P
><P 

> </P
><H2 
 ID="LinkTarget_10601"
>6.4 Conditions in InstanceDeclarations </H2
><P 

><A href="#LinkTarget_10611" href="#">
</B>Figure 25</A>
 shows the use of the <I>HasCondition Reference</I> and the <I>HasEventSource Reference</I> in an <I>InstanceDeclaration</I>. They are used to indicate what <I>References</I> and <I>Conditions</I> are available on the instance of the <I>ObjectType</I>. </P
><P 

>The use of the <I>HasEventSource Reference</I> in the context of <I>InstanceDeclarations</I> and <I>TypeDefinition Nodes</I> has no effect for <I>Event</I> generation. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Tank AMyLevelAlarmType:LevelMonitoringLevelMeasurementMyLevelAlarmType:LevelMonitoringLevelMeasurementTankTypeHasConditionHasEventSourceHasEventSourceHasCondition</DIV
></P
><P 

><B>Figure 25 &ndash; Use of HasCondition in an InstanceDeclaration </P
><H2 
 ID="LinkTarget_10612"
>6.5 Conditions in a VariableType </H2
><P 

></B>Use of <I>HasCondition</I> in a <I>VariableType</I> is a special use case since <I>Variables</I> (and <I>VariableTypes</I>) may not have <I>Conditions</I> as components. <A href="#LinkTarget_10624" href="#">
Figure 26</A>
 provides an example of </P
><P 

>this use case. Note that there is no component relationship for the &ldquo;LevelMonitoring&rdquo; <I>Alarm</I>. It is <I>Server</I>-specific whether and where they assign a <I>HasComponent Reference</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Tank AExclusiveLevelAlarmType:LevelMonitoringLevelMeasurementType:LevelMeasurementHasEventSourceHasConditionAlarmTypeLevelMeasurementTypeAnalogItemTypeExclusiveLevelAlarmType:LevelMonitoringHasConditionExclusiveLevelAlarmTypeBaseObjectTypeBaseVariableType</DIV
></P
><P 

><B>Figure 26 &ndash; Use of HasCondition in a VariableType </P
><P 

></B> </P
><H1 
 ID="LinkTarget_10626"
><FONT size="+1"><B>Annex A (informative) Recommended localized names  </H1
><H2 
 ID="LinkTarget_10628"
><FONT size="+1">A.1 Recommended state names for TwoState variables </H2
><H3 
 ID="LinkTarget_10629"
><FONT size="+1">A.1.1 LocaleId &ldquo;en&rdquo; </H3
><P 

></B>The recommended state display names for the LocaleId &ldquo;en&rdquo; are listed in <A href="#LinkTarget_10640" href="#">
Table A.1</A>
 and  <A href="#LinkTarget_10770" href="#">
Table A.2</A>
 </P
><P 

><B>Table A.1 &ndash; Recommended state names for LocaleId &ldquo;en&rdquo; </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Condition Type </P
></TD
><TD  
 valign="top"
><P 

>State Variable </P
></TD
><TD  
 valign="top"
><P 

>FALSE State Name </P
></TD
><TD  
 valign="top"
><P 

>TRUE State Name </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ConditionType </P
></TD
><TD  
 valign="top"
><P 

>EnabledState </P
></TD
><TD  
 valign="top"
><P 

>Disabled </P
></TD
><TD  
 valign="top"
><P 

>Enabled </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DialogConditionType </P
></TD
><TD  
 valign="top"
><P 

>DialogState </P
></TD
><TD  
 valign="top"
><P 

>Inactive </P
></TD
><TD  
 valign="top"
><P 

>Active </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AcknowledgeableConditionType </P
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>AckedState </P
></TD
><TD  
 valign="top"
><P 

>Unacknowledged </P
></TD
><TD  
 valign="top"
><P 

>Acknowledged </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>ConfirmedState </P
></TD
><TD  
 valign="top"
><P 

>Unconfirmed </P
></TD
><TD  
 valign="top"
><P 

>Confirmed </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

>ActiveState </P
></TD
><TD  
 valign="top"
><P 

>Inactive </P
></TD
><TD  
 valign="top"
><P 

>Active </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>SuppressedState </P
></TD
><TD  
 valign="top"
><P 

>Unsuppressed </P
></TD
><TD  
 valign="top"
><P 

>Suppressed </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NonExclusiveLimitAlarmType </P
></TD
><TD  
 valign="top"
><P 

>HighHighState </P
></TD
><TD  
 valign="top"
><P 

>HighHigh inactive </P
></TD
><TD  
 valign="top"
><P 

>HighHigh active </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>HighState </P
></TD
><TD  
 valign="top"
><P 

>High inactive </P
></TD
><TD  
 valign="top"
><P 

>High active </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>LowState </P
></TD
><TD  
 valign="top"
><P 

>Low inactive </P
></TD
><TD  
 valign="top"
><P 

>Low active </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>LowLowState </P
></TD
><TD  
 valign="top"
><P 

>LowLow inactive </P
></TD
><TD  
 valign="top"
><P 

>LowLow active </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><P 

><FONT size="+1"><B>Table A.2 &ndash; Recommended display names for LocaleId &ldquo;en&rdquo; </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Condition Type </P
></TD
><TD  
 valign="top"
><P 

>Browse Name </P
></TD
><TD  
 valign="top"
><P 

>display name </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Shelved </P
></TD
><TD  
 valign="top"
><P 

>Unshelved </P
></TD
><TD  
 valign="top"
><P 

>Unshelved </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>TimedShelved </P
></TD
><TD  
 valign="top"
><P 

>Timed Shelved </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>OneShotShelved </P
></TD
><TD  
 valign="top"
><P 

>One Shot Shelved </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Exclusive </P
></TD
><TD  
 valign="top"
><P 

>HighHigh </P
></TD
><TD  
 valign="top"
><P 

>HighHigh </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>High </P
></TD
><TD  
 valign="top"
><P 

>High </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Low </P
></TD
><TD  
 valign="top"
><P 

>Low </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>LowLow </P
></TD
><TD  
 valign="top"
><P 

>LowLow </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_10842"
><FONT size="+1"><B>A.1.2 LocaleId &ldquo;de&rdquo; </H3
><P 

></B>The recommended state display names for the LocaleId &ldquo;de&rdquo; are listed in <A href="#LinkTarget_10853" href="#">
Table A.3</A>
 and  <A href="#LinkTarget_10972" href="#">
Table A.4</A>
. </P
><P 

><B>Table A.3 &ndash; Recommended state names for LocaleId &ldquo;de&rdquo; </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Condition Type </P
></TD
><TD  
 valign="top"
><P 

>State Variable </P
></TD
><TD  
 valign="top"
><P 

>FALSE State Name </P
></TD
><TD  
 valign="top"
><P 

>TRUE State Name </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ConditionType </P
></TD
><TD  
 valign="top"
><P 

>EnabledState </P
></TD
><TD  
 valign="top"
><P 

>Ausgeschaltet </P
></TD
><TD  
 valign="top"
><P 

>Eingeschaltet </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DialogConditionType </P
></TD
><TD  
 valign="top"
><P 

>DialogState </P
></TD
><TD  
 valign="top"
><P 

>Inaktiv </P
></TD
><TD  
 valign="top"
><P 

>Aktiv </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AcknowledgeableConditionType </P
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>AckedState </P
></TD
><TD  
 valign="top"
><P 

>Unquittiert </P
></TD
><TD  
 valign="top"
><P 

>Quittiert </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>ConfirmedState </P
></TD
><TD  
 valign="top"
><P 

>Unbest&auml;tigt </P
></TD
><TD  
 valign="top"
><P 

>Best&auml;tigt </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

>ActiveState </P
></TD
><TD  
 valign="top"
><P 

>Inaktiv </P
></TD
><TD  
 valign="top"
><P 

>Aktiv </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>SuppressedState </P
></TD
><TD  
 valign="top"
><P 

>Nicht unterdr&uuml;ckt </P
></TD
><TD  
 valign="top"
><P 

>Unterdr&uuml;ckt </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NonExclusiveLimitAlarmType </P
></TD
><TD  
 valign="top"
><P 

>HighHighState </P
></TD
><TD  
 valign="top"
><P 

>HighHigh inaktiv </P
></TD
><TD  
 valign="top"
><P 

>HighHigh aktiv </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>HighState </P
></TD
><TD  
 valign="top"
><P 

>High inaktiv </P
></TD
><TD  
 valign="top"
><P 

>High aktiv </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>LowState </P
></TD
><TD  
 valign="top"
><P 

>Low inaktiv </P
></TD
><TD  
 valign="top"
><P 

>Low aktiv </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>LowLowState </P
></TD
><TD  
 valign="top"
><P 

>LowLow inaktiv </P
></TD
><TD  
 valign="top"
><P 

>LowLow aktiv </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"><B>Table A.4 &ndash; Recommended display names for LocaleId &ldquo;de&rdquo; </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Condition Type </P
></TD
><TD  
 valign="top"
><P 

>Browse Name </P
></TD
><TD  
 valign="top"
><P 

>display name </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Shelved </P
></TD
><TD  
 valign="top"
><P 

>Unshelved </P
></TD
><TD  
 valign="top"
><P 

>Nicht zur&uuml;ckgestellt </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>TimedShelved </P
></TD
><TD  
 valign="top"
><P 

>Befristet zur&uuml;ckgestellt </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>OneShotShelved </P
></TD
><TD  
 valign="top"
><P 

>Einmalig zur&uuml;ckgestellt </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Exclusive </P
></TD
><TD  
 valign="top"
><P 

>HighHigh </P
></TD
><TD  
 valign="top"
><P 

>HighHigh </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>High </P
></TD
><TD  
 valign="top"
><P 

>High </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Low </P
></TD
><TD  
 valign="top"
><P 

>Low </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>LowLow </P
></TD
><TD  
 valign="top"
><P 

>LowLow </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_11054"
><FONT size="+1"><B>A.1.3 LocaleId &ldquo;fr&rdquo; </H3
><P 

></B>The recommended state display names for the LocaleId &ldquo;fr&rdquo; are listed in <A href="#LinkTarget_11066" href="#">
Table A.5</A>
 and  <A href="#LinkTarget_11186" href="#">
Table A.6</A>
. </P
><P 

><B>Table A.5 &ndash; Recommended state names for LocaleId &ldquo;fr&rdquo; </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Condition Type </P
></TD
><TD  
 valign="top"
><P 

>State Variable </P
></TD
><TD  
 valign="top"
><P 

>FALSE State Name </P
></TD
><TD  
 valign="top"
><P 

>TRUE State Name </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ConditionType </P
></TD
><TD  
 valign="top"
><P 

>EnabledState </P
></TD
><TD  
 valign="top"
><P 

>Hors Service </P
></TD
><TD  
 valign="top"
><P 

>En Service </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>DialogConditionType </P
></TD
><TD  
 valign="top"
><P 

>DialogState </P
></TD
><TD  
 valign="top"
><P 

>Inactive </P
></TD
><TD  
 valign="top"
><P 

>Active </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AcknowledgeableConditionType </P
><P 

> </P
></TD
><TD  
 valign="top"
><P 

>AckedState </P
></TD
><TD  
 valign="top"
><P 

>Non-acquitt&eacute; </P
></TD
><TD  
 valign="top"
><P 

>Acquitt&eacute; </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>ConfirmedState </P
></TD
><TD  
 valign="top"
><P 

>Non-Confirm&eacute; </P
></TD
><TD  
 valign="top"
><P 

> Confirm&eacute;  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AlarmConditionType </P
></TD
><TD  
 valign="top"
><P 

>ActiveState </P
></TD
><TD  
 valign="top"
><P 

>Inactive </P
></TD
><TD  
 valign="top"
><P 

>Active </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>SuppressedState </P
></TD
><TD  
 valign="top"
><P 

>Pr&eacute;sent </P
></TD
><TD  
 valign="top"
><P 

>Supprim&eacute; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>NonExclusiveLimitAlarmType </P
></TD
><TD  
 valign="top"
><P 

>HighHighState </P
></TD
><TD  
 valign="top"
><P 

>Tr&egrave;s Haute Inactive </P
></TD
><TD  
 valign="top"
><P 

>Tr&egrave;s Haute Active </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>HighState </P
></TD
><TD  
 valign="top"
><P 

>Haute inactive </P
></TD
><TD  
 valign="top"
><P 

>Haute active </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>LowState </P
></TD
><TD  
 valign="top"
><P 

>Basse inactive </P
></TD
><TD  
 valign="top"
><P 

>Basse active </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>LowLowState </P
></TD
><TD  
 valign="top"
><P 

>Tr&egrave;s basse inactive </P
></TD
><TD  
 valign="top"
><P 

>Tr&egrave;s basse active </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"><B>Table A.6 &ndash; Recommended display names for LocaleId &ldquo;fr&rdquo; </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Condition Type </P
></TD
><TD  
 valign="top"
><P 

>Browse Name </P
></TD
><TD  
 valign="top"
><P 

>display name </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Shelved </P
></TD
><TD  
 valign="top"
><P 

>Unshelved </P
></TD
><TD  
 valign="top"
><P 

>Surveill&eacute;e </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>TimedShelved </P
></TD
><TD  
 valign="top"
><P 

>Mise de cot&eacute; temporelle </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>OneShotShelved </P
></TD
><TD  
 valign="top"
><P 

>Mise de cot&eacute; unique </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Exclusive </P
></TD
><TD  
 valign="top"
><P 

>HighHigh </P
></TD
><TD  
 valign="top"
><P 

>Tr&egrave;s haute </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>High </P
></TD
><TD  
 valign="top"
><P 

>Haute </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>Low </P
></TD
><TD  
 valign="top"
><P 

>Basse </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>LowLow </P
></TD
><TD  
 valign="top"
><P 

>Tr&egrave;s basse </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_11268"
><FONT size="+1"><B>A.2 Recommended dialog response options </H2
><P 

><FONT size="+1"></B>The recommended <I>Dialog</I> response option names in different locales are listed in <A href="#LinkTarget_11275" href="#">
Table A.7</A>
. </P
><P 

><B>Table A.7 &ndash; Recommended dialog response options </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">Locale &ldquo;en&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Locale &ldquo;de&rdquo; </P
></TD
><TD  
 valign="top"
><P 

>Locale &ldquo;fr&rdquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Ok </P
></TD
><TD  
 valign="top"
><P 

>OK </P
></TD
><TD  
 valign="top"
><P 

> Ok </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Cancel </P
></TD
><TD  
 valign="top"
><P 

>Abbrechen </P
></TD
><TD  
 valign="top"
><P 

> Annuler </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Yes </P
></TD
><TD  
 valign="top"
><P 

>Ja </P
></TD
><TD  
 valign="top"
><P 

> Oui </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>No </P
></TD
><TD  
 valign="top"
><P 

>Nein </P
></TD
><TD  
 valign="top"
><P 

> Non </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Abort </P
></TD
><TD  
 valign="top"
><P 

>Abbrechen </P
></TD
><TD  
 valign="top"
><P 

> Abandonner </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Retry </P
></TD
><TD  
 valign="top"
><P 

>Wiederholen </P
></TD
><TD  
 valign="top"
><P 

> R&eacute;essayer </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Ignore </P
></TD
><TD  
 valign="top"
><P 

>Ignorieren </P
></TD
><TD  
 valign="top"
><P 

> Ignorer </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Next </P
></TD
><TD  
 valign="top"
><P 

>N&auml;chster </P
></TD
><TD  
 valign="top"
><P 

> Prochain </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Previous </P
></TD
><TD  
 valign="top"
><P 

>Vorheriger </P
></TD
><TD  
 valign="top"
><P 

> Precedent </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H1 
 ID="LinkTarget_11374"
><FONT size="+1"><B>Annex B (informative) Examples  </H1
><H2 
 ID="LinkTarget_11376"
><FONT size="+1">B.1 Examples for Event sequences from Condition instances </H2
><H3 
 ID="LinkTarget_11377"
><FONT size="+1">B.1.1 Overview </H3
><P 

></B> The following examples show the <I>Event</I> flow for typical <I>Alarm</I> situations. The tables list the value of state <I>Variables</I> for each <I>Event</I> <I>Notification</I>. </P
><H3 
 ID="LinkTarget_11379"
><B>B.1.2 Server maintains current state only </H3
><P 

></B>This example is for <I>Server</I><I>s</I> that do not support previous states and therefore do not create and maintain <I>Branches</I> of a single <I>Condition</I>. </P
><P 

><A href="#LinkTarget_11394" href="#">
Figure B.1</A>
 shows an <I>Alarm</I> as it becomes active and then inactive and also the acknowledgement and confirmation cycles. <A href="#LinkTarget_11395" href="#">
Table B.1</A>
 lists the values of the state <I>Variables</I>. All <I>Events</I> are coming from the same <I>Condition</I> instance and therefore have the same <I>ConditionId</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Time AxisActive1EventNotificationsAckedConfirmed7653284</DIV
></P
><P 

><B>Figure B.1 &ndash; Single state example </P
><P 

>Table B.1 &ndash; Example of a Condition that only keeps the latest state </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">EventId </P
></TD
><TD  
 valign="top"
><P 

>BranchId </P
></TD
><TD  
 valign="top"
><P 

>Active  </P
></TD
><TD  
 valign="top"
><P 

>Acked </P
></TD
><TD  
 valign="top"
><P 

>Confirmed </P
></TD
><TD  
 valign="top"
><P 

>Retain </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>-*) </P
></TD
><TD  
 valign="top"
><P 

>Null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>Initial state of <I>Condition</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>Null </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

><I>Alarm</I> goes active. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>Null </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

><I>Condition</I> acknowledged Confirm required </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>Null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

><I>Alarm</I> goes inactive. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>Null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

><I>Condition</I> confirmed </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>Null </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

><I>Alarm</I> goes active. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>Null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

><I>Alarm</I> goes inactive. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>Null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

><I>Condition</I> acknowledged, Confirm required. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>8 </P
></TD
><TD  
 valign="top"
><P 

>Null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

><I>Condition</I> confirmed. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>*) The first row is included to illustrate the initial state of the <I>Condition</I>. This state will not be reported by an <I>Event</I>. </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H3 
 ID="LinkTarget_11586"
><FONT size="+1"><B>B.1.3 Server maintains previous states </H3
><P 

></B>This example is for <I>Servers</I> that are able to maintain previous states of a <I>Condition</I> and therefore create and maintain <I>Branches</I> of a single <I>Condition</I>. </P
><P 

><A href="#LinkTarget_11602" href="#">
Figure B.2</A>
 illustrates the use of branches by a <I>Server</I> requiring acknowledgement of all transitions into <I>Active</I> state, not just the most recent transition. In this example no acknowledgement is required on a transition into an inactive state. <A href="#LinkTarget_11603" href="#">
Table B.2</A>
 lists the values of the state <I>Variables</I>. All <I>Events</I> are coming from the same <I>Condition</I> instance and have therefore the same <I>ConditionId</I>. </P
><P 

> <DIV class="Sect" 
 Alt=""
>         Time AxisActive1EventNotificationsAckedConfirmed832Current State(BranchId Null)Active=truePrevious State(BranchId 1)Previous State(BranchId 2)Active=trueAcked=false576911121314104</DIV
></P
><P 

><B>Figure B.2 &ndash; Previous state example </P
><P 

>Table B.2 &ndash; Example of a <I>Condition</I> that maintains previous states via branches </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">EventId </P
></TD
><TD  
 valign="top"
><P 

>BranchId </P
></TD
><TD  
 valign="top"
><P 

>Active  </P
></TD
><TD  
 valign="top"
><P 

>Acked </P
></TD
><TD  
 valign="top"
><P 

>Confirmed </P
></TD
><TD  
 valign="top"
><P 

>Retain </P
></TD
><TD  
 valign="top"
><P 

>Description </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>a) </P
></TD
><TD  
 valign="top"
><P 

>null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>Initial state of <I>Condition</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>null </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>Alarm goes active. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>null </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>Condition acknowledged requires Confirm </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>3 </P
></TD
><TD  
 valign="top"
><P 

>null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

><I>Alarm</I> goes inactive. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>4 </P
></TD
><TD  
 valign="top"
><P 

>null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>Confirmed </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>5 </P
></TD
><TD  
 valign="top"
><P 

>null </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

><I>Alarm</I> goes active. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>6 </P
></TD
><TD  
 valign="top"
><P 

>null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

><I>Alarm</I> goes inactive. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>7 </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True b) </P
></TD
><TD  
 valign="top"
><P 

>Prior state needs acknowledgment. Branch #1 created. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>8 </P
></TD
><TD  
 valign="top"
><P 

>null </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

><I>Alarm</I> goes active again. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>9 </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>Prior state acknowledged, Confirm required. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>10 </P
></TD
><TD  
 valign="top"
><P 

>null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True b) </P
></TD
><TD  
 valign="top"
><P 

><I>Alarm</I> goes inactive again. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>11 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>Prior state needs acknowledgment. Branch #2 created. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>12 </P
></TD
><TD  
 valign="top"
><P 

>1 </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>Prior state confirmed. Branch #1 deleted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>13 </P
></TD
><TD  
 valign="top"
><P 

>2 </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>Prior state acknowledged, Auto Confirmed by system Branch #2 deleted. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>14 </P
></TD
><TD  
 valign="top"
><P 

>Null </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>True </P
></TD
><TD  
 valign="top"
><P 

>False </P
></TD
><TD  
 valign="top"
><P 

>No longer of interest. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>a)<I> </I><I>The first row</I> is included to illustrate the initial state of the <I>Condition</I>. This state will not be reported by an <I>Event</I>. </P
><P 

>Notes on specific situations shown with this example: </P
><P 

>If the current state of the <I>Condition</I> is acknowledged then the <I>Acked</I> flag is set and the new state is reported (<I>Event</I> #2). If the <I>Condition</I> state changes before it can be acknowledged (<I>Event</I> #6) then a branch state is reported (<I>Event</I> #7). Timestamps for the <I>Event</I>s #6 and #7 is identical. </P
><P 

>The branch state can be updated several times (<I>Event</I>s #9) before it is cleared (<I>Event</I> #12). </P
><P 

>A single <I>Condition</I> can have many branch states active (<I>Event</I>s #11) </P
><P 

>b)<I> </I><I>It is recommended</I> as in this table to leave Retain=True as long as there exist previous states (branches). </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"> </P
><H2 
 ID="LinkTarget_11872"
><FONT size="+1"><B>B.2 AddressSpace examples </H2
><P 

><FONT size="+1"></B>This Clause provides additional examples for the use of <I>HasNotifier</I>, <I>HasEventSource</I> and <I>HasCondition</I> <I>References</I> to expose the organization of areas and sources with their associated <I>Conditions</I>. This hierarchy is additional to a hierarchy provided with <I>Organizes</I> and <I>Aggregates References</I>. </P
><P 

><A href="#LinkTarget_11884" href="#">
Figure B.3</A>
 illustrates the use of the <I>HasCondition</I> <I>Reference</I> with <I>Condition</I> instances. </P
><P 

> </P
><P 

> <DIV class="Sect" 
 Alt=""
>HasNotifierObjectsServerTank AOrganizesMyLevelAlarmType:LevelMonitoringLevelMeasurementArea 1Tank FarmMachine BDevice BMyAlarmTypeA:Condition 1MyAlarmTypeA:Condition 2HasEventSourceHasEventSourceHasConditionHasCondition</DIV
></P
><P 

><B>Figure B.3 &ndash; HasCondition used with Condition instances </P
><P 

></B>In systems where <I>Conditions</I> are not available as instances, the <I>ConditionSource</I> can reference the <I>ConditionTypes</I> instead. This is illustrated with the example in <A href="#LinkTarget_11895" href="#">
Figure B.4</A>
. </P
><P 

> <DIV class="Sect" 
 Alt=""
>ObjectsServerTank AOrganizesLevelMeasurementProcessAlarmTypeExclusiveLimitAlarmTypeExclusiveLevelMyLevelAlarmTypeHasNotifierArea 1Tank FarmMachine BHasEventSourceHasCondition</DIV
></P
><P 

><B>Figure B.4 &ndash; HasCondition reference to a Condition type </P
><P 

><A href="#LinkTarget_11904" href="#">
</B>Figure B.5</A>
 provides an example where the <I>HasCondition Reference</I> is already defined in the <I>Type</I> system. The <I>Reference</I> can point to a <I>Condition Type</I> or to an instance. Both variants are shown in this example. A <I>Reference</I> to a <I>Condition</I> <I>Type</I> in the <I>Type</I> system will result in a <I>Reference</I> to the same <I>Type</I> <I>Node</I> in the instance. </P
><P 

> <DIV class="Sect" 
 Alt=""
>Tank AMyLevelAlarmType:LevelMonitoringLevelMeasurementTank FarmHasEventSourceHasConditionMyLevelAlarmType:LevelMonitoringLevelMeasurementTankTypeHasConditionHasEventSourceMySystemAlarmTypeHasNotifierHasConditionHasCondition</DIV
></P
><P 

><B>Figure B.5 &ndash; HasCondition used with an instance declaration </P
><P 

></B> </P
><H1 
 ID="LinkTarget_11906"
><FONT size="+1"><B>Annex C</B> (informative) <B>Mapping to EEMUA  </H1
><P 

><A href="#LinkTarget_11913" href="#">
<FONT size="+1"></B>Table C.1</A>
 lists EEMUA terms and how OPC UA terms maps to them. </P
><P 

><B>Table C.1 &ndash; EEMUA Terms </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">EEMUA Term </P
></TD
><TD  
 valign="top"
><P 

>OPC UA Term </P
></TD
><TD  
 valign="top"
><P 

>EEMUA Definition </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Accepted </P
></TD
><TD  
 valign="top"
><P 

>Acknowledged=true </P
></TD
><TD  
 valign="top"
><P 

>An <I>Alarm</I> is accepted when the <I>Operator</I> has indicated awareness of its presence. </P
><P 

>In OPC UA this can be accomplished with the <I>Acknowledge</I> <I>Method</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Active Alarm </P
></TD
><TD  
 valign="top"
><P 

>Active = True </P
></TD
><TD  
 valign="top"
><P 

>An <I>Alarm</I> <I>Condition</I> which is on (i.e. limit has been exceeded and <I>Condition</I> continues to exist). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Alarm Message </P
></TD
><TD  
 valign="top"
><P 

>Message Property (defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
.) </P
></TD
><TD  
 valign="top"
><P 

>Test information presented to the <I>Operator</I> that describes the <I>Alarm</I> <I>Condition</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Alarm Priority </P
></TD
><TD  
 valign="top"
><P 

>Severity Property (defined in <A href="#LinkTarget_3572" href="#">
Part 5</A>
.) </P
></TD
><TD  
 valign="top"
><P 

>The ranking of <I>Alarms</I> by severity and response time. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Alert </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>A lower priority <I>Notifica</I><I>tion</I> than an <I>Alarm</I> that has no serious consequence if ignored or missed. In some Industries also referred to as a Prompt or Warning&rdquo;. </P
><P 

>No direct mapping! In UA the concept of <I>Alerts</I> can be accomplished by the use of severity. E.g., <I>Alarms</I> that have a severity below 50 may be considered as <I>Alerts</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Cleared </P
></TD
><TD  
 valign="top"
><P 

>Active = False </P
></TD
><TD  
 valign="top"
><P 

>An <I>Alarm </I>state that indicates the <I>Condition</I> has returned to normal. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Disable </P
></TD
><TD  
 valign="top"
><P 

>Enabled = False </P
></TD
><TD  
 valign="top"
><P 

>An <I>Alarm</I> is disabled when the system is configured such that the <I>Alarm</I> will not be generated even though the base <I>Alarm</I> <I>Condition</I> is present. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Prompt </P
></TD
><TD  
 valign="top"
><P 

>Dialog </P
></TD
><TD  
 valign="top"
><P 

>A request from the control system that the operator perform some process action that the system cannot perform or that requires <I>Operator</I> authority to perform.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Raised </P
></TD
><TD  
 valign="top"
><P 

>Active = True </P
></TD
><TD  
 valign="top"
><P 

>An <I>Alarm</I> is <I>Raised</I> or initiated when the <I>Condition</I> creating the <I>Alarm</I> has occurred. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Release </P
></TD
><TD  
 valign="top"
><P 

>OneShotShelving </P
></TD
><TD  
 valign="top"
><P 

>A &lsquo;release&rsquo; is a facility that can be applied to a standing (UA = active) <I>Alarm</I> in a similar way to which <I>Shelving</I> is applied. A released <I>Alarm</I> is temporarily removed from the <I>Alarm</I> list and put on the shelf. There is no indication to the <I>Operator</I> when the <I>Alarm</I> clears, but it is taken off the shelf. Hence, when the <I>Alarm</I> is raised again it appears on the <I>Alarm</I> list in the normal way. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Reset </P
></TD
><TD  
 valign="top"
><P 

>Retain=False </P
></TD
><TD  
 valign="top"
><P 

>An <I>Alarm</I> is Reset when it is in a state that can be removed from the Display list. </P
><P 

>OPC UA includes <I>Retain</I> flag which as part of its definition states: &ldquo;when a <I>Client</I> receives an <I>Event</I> with the <I>Retain</I> flag set to FALSE, the <I>Client</I> should consider this as a <I>Condition</I>/Branch that is no longer of interest, in the case of a &ldquo;current <I>Alarm</I> display&rdquo; the <I>Condition</I>/Branch would be removed from the display&rdquo; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Shelving </P
></TD
><TD  
 valign="top"
><P 

>Shelving </P
></TD
><TD  
 valign="top"
><P 

><I>Shelving</I> is a facility where the <I>Op</I><I>erator</I> is able to temporarily prevent an <I>Alarm</I> from being displayed to the <I>Operator</I> when it is causing the <I>Operator</I> a nuisance. A Shelved <I>Alarm</I> will be removed from the list and will not re-annunciate until un-shelved. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Standing </P
></TD
><TD  
 valign="top"
><P 

>Active = True </P
></TD
><TD  
 valign="top"
><P 

>An <I>Alarm</I> is <I>Standing</I> whilst the <I>Condition</I> persists (<I>Raised</I> and <I>Standing</I> are often used interchangeably)&rsquo;. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Suppress </P
></TD
><TD  
 valign="top"
><P 

>Suppress </P
></TD
><TD  
 valign="top"
><P 

>An <I>Alarm</I> is suppressed when logical criteria are applied to determine that the <I>Alarm</I> should not occur, even though the base <I>Alarm</I> <I>Condition</I> (e.g. <I>Alarm</I> setting exceeded) is present. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Unaccepted </P
></TD
><TD  
 valign="top"
><P 

>Acknowledged = False </P
></TD
><TD  
 valign="top"
><P 

>An <I>Alarm</I> is accepted when the <I>Operator</I> has indicated awareness of its presence. It is unaccepted until this has been done.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><H1 
 ID="LinkTarget_12065"
><FONT size="+1"><B>Annex D</B>(informative) <B>Mapping from OPC A&amp;E to OPC UA A&amp;C  </H1
><H2 
 ID="LinkTarget_12067"
><FONT size="+1">D.1  Overview </H2
><P 

><FONT size="+1"></B>Serving as a bridge between COM and OPC UA components, the Alarm and <I>Event</I>s proxy and wrapper enable existing A&amp;E COM <I>Clients</I> and <I>Servers</I> to connect to UA <I>Alarms</I> and <I>Condition</I><I>s</I> components.  </P
><P 

>Simply stated, there are two aspects to the migration strategy. The first aspect enables a UA <I>Alarms</I> and <I>Conditions</I> <I>C</I><I>lient</I> to connect to an existing Alarms and <I>Event</I>s COM <I>Server</I> via a UA <I>Server</I> wrapper. This wrapper is notated from this point forward as the A&amp;E COM UA Wrapper. The second aspect enables an existing Alarms and <I>Event</I>s COM <I>Client</I> to connect to a UA <I>Alarms</I> and <I>Conditions</I> <I>Server</I> via a COM proxy. This proxy is notated from this point forward as the A&amp;E COM UA Proxy. </P
><P 

>An Alarms and <I>Event</I>s COM <I>C</I><I>lient</I> is notated from this point forward as A&amp;E COM <I>Client</I>.  </P
><P 

>A UA <I>Alarms</I> and <I>Conditions</I> <I>Server</I> is notated from this point forward as UA A&amp;C <I>Server</I>. </P
><P 

>The mappings describe generic A&amp;E COM interoperability components. It is recommended that vendors use this mapping if they develop their own components, however, some applications may benefit from vendor specific mappings. </P
><H2 
 ID="LinkTarget_12073"
><FONT size="+1"><B>D.2 Alarms and Events COM UA wrapper </H2
><H3 
 ID="LinkTarget_12074"
><FONT size="+1">D.2.1 Event areas </H3
><P 

></B><I>Event</I> Areas in the A&amp;E COM <I>Server</I> are represented in the A&amp;E COM UA Wrapper as <I>Objects</I> with a <I>TypeDefinition</I> of <I>BaseObjectType</I>. The EventNotifier <I>Attribute</I> for these <I>Objects</I> always has the SubscribeToEvents flag set to true. </P
><P 

>The root Area is represented by an <I>Object</I> with a <I>BrowseName</I> that depends on the UA <I>Server</I>. It is always the target of a HasNotifier <I>Reference</I> from the <I>Server</I> <I>Node</I>. The root Area allows multiple A&amp;E COM <I>Server</I>s to be wrapped within a single UA <I>Server</I>. </P
><P 

>The Area hierarchy is discovered with the BrowseOPCAreas and the GetQualifiedAreaName <I>Method</I>s. The Area name returned by BrowseOPCAreas is used as the <I>BrowseName</I> and <I>D</I><I>isplayName</I> for each Area <I>Node</I>. The QualifiedAreaName is used to construct the <I>NodeId</I>. The NamespaceURI qualifying the <I>NodeId</I> and <I>BrowseName</I> is a unique URI assigned to the combination of machine and COM <I>Server</I>.  </P
><P 

>Each Area is the target of <I>HasNotifier</I> <I>Refer</I><I>ence</I> from its parent Area. It may be the source of one or more HasNotifier <I>Reference</I>s to its child Areas. It may also be a source of a <I>HasEventSource</I> <I>Reference</I> to any sources in the Area. </P
><P 

>The A&amp;E COM <I>Server</I> may not support filtering by Areas. If this is the case then no Area <I>Node</I>s are shown in the UA <I>Server</I> address space. Some implementations could use the AREAS <I>Attribute</I> to provide filtering by Areas within the A&amp;E COM UA Wrapper. </P
><H3 
 ID="LinkTarget_12081"
><B>D.2.2 Event sources </H3
><P 

></B><I>Event</I> Sources in the A&amp;E COM <I>Server</I> are represented in the A&amp;E COM UA Wrapper as <I>Objects</I> with a <I>TypeDefinition</I> of <I>BaseObjectType</I>. If the A&amp;E COM <I>Server</I> supports source filtering then the SubscribeToEvents flag is true and the Source is a target of a HasNotifier <I>Reference</I>. If source filtering is not supported the SubscribeToEvents flag is false and the Source is a target of a HasEventSource <I>Reference</I>. </P
><P 

>The Sources are discovered by calling BrowseOPCAreas and the GetQualifiedSourceName <I>Method</I>s. The Source name returned by BrowseOPCAreas is used as the BrowseName and DisplayName. The QualifiedSourceName is used to construct the <I>NodeId</I>. <I>Event</I> Source <I>Node</I>s are always targets of a HasEventSource <I>Reference</I> from an Area.  </P
><H3 
 ID="LinkTarget_12084"
><B>D.2.3 Event categories </H3
><P 

></B><I>Event</I> Categories in the A&amp;E COM <I>S</I><I>erver</I> are represented in the UA <I>Server</I> as <I>ObjectTypes</I> which are subtypes of <I>BaseEventType</I>. The <I>BrowseName</I> and <I>DisplayName</I> of the <I>ObjectType</I> <I>Node</I> for Simple and Tracking <I>Event</I> Types are constructed by appending the text &lsquo;EventType&rsquo; to the Description of the <I>Event</I> Category. For <I>Condition</I> <I>Event</I> Types the text &lsquo;AlarmType&rsquo; is appended to the <I>Condition</I> Name. </P
><P 

>These <I>ObjectType</I> <I>Node</I>s have a super type which depends on the A&amp;E <I>Event</I> Type, the <I>Event</I> Category Description and the <I>Condition</I> Name; however, the best mapping requires knowledge of the semantics associated with the <I>Event</I> Categories and <I>Condition</I> Names. If an A&amp;E COM UA Wrapper does not know these semantics then Simple <I>Event</I> Types are subtypes of <I>BaseEventType</I>, Tracking <I>Event</I> Types are subtypes of <I>AuditEventType</I> and <I>Condition</I> <I>Event</I> Types are subtypes of the <I>AlarmType</I>. <A href="#LinkTarget_12093" href="#">
Table D.1</A>
 defines mappings for a set of &ldquo;well known&rdquo; Category description and <I>Condition</I> Names to a standard super type. </P
><P 

><B>Table D.1 &ndash; Mapping from standard Event categories to OPC UA Event types </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">COM A&amp;E Event Type </P
></TD
><TD  
 valign="top"
><P 

>Category Description </P
></TD
><TD  
 valign="top"
><P 

>Condition Name </P
></TD
><TD  
 valign="top"
><P 

>OPC UA EventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>Simple </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>BaseEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Simple </P
></TD
><TD  
 valign="top"
><P 

>Device Failure </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>DeviceFailureEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Simple  </P
></TD
><TD  
 valign="top"
><P 

>System Message </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>SystemEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Tracking </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>AuditEventType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>AlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Level </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>LimitAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Level </P
></TD
><TD  
 valign="top"
><P 

>PVLEVEL </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveLevelAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Level </P
></TD
><TD  
 valign="top"
><P 

>SPLEVEL </P
></TD
><TD  
 valign="top"
><P 

>ExclusiveLevelAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Level </P
></TD
><TD  
 valign="top"
><P 

>HI HI </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveLevelAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Level </P
></TD
><TD  
 valign="top"
><P 

>HI </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveLevelAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Level </P
></TD
><TD  
 valign="top"
><P 

>LO </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveLevelAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Level </P
></TD
><TD  
 valign="top"
><P 

>LO LO </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveLevelAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Deviation </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>NonExclusiveDeviationAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Discrete </P
></TD
><TD  
 valign="top"
><P 

>--- </P
></TD
><TD  
 valign="top"
><P 

>DiscreteAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Discrete </P
></TD
><TD  
 valign="top"
><P 

>CFN </P
></TD
><TD  
 valign="top"
><P 

>OffNormalAlarmType </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Condition </P
></TD
><TD  
 valign="top"
><P 

>Discrete </P
></TD
><TD  
 valign="top"
><P 

>TRIP </P
></TD
><TD  
 valign="top"
><P 

>TripAlarmType </P
></TD
></TR
></TABLE
><P 

><FONT size="+1">There is no generic mapping defined for A&amp;E COM sub-<I>C</I><I>onditions</I>. If an <I>Event</I> Category is mapped to a <I>LimitAlarmType</I> then the sub <I>Condition</I> name in the <I>Event</I> are be used to set the state of a suitable State <I>Variable</I>. For example, if the sub-<I>Condition</I> name is &ldquo;HI HI&rdquo; then that means the <I>HighHigh</I> state for the<I> </I><I>LimitAlarmType</I> is active </P
><P 

>For <I>Condition</I> <I>Event</I> Types the <I>Event</I> Category is also used to define subtypes of <I>BaseConditionClassType</I>.  </P
><P 

><A href="#LinkTarget_12274" href="#">
Figure D.1</A>
 illustrates how <I>ObjectType</I> <I>Nodes</I> created from the <I>Event</I> Categories and <I>Condition</I> Names are placed in the standard OPC UA <I>Event</I> hierarchy. </P
><P 

>Figure D.1 &ndash; The type model of a wrapped COM AE server <DIV class="Sect" 
 Alt=""
>BaseEventType&lt;CategoryA&gt;EventType&lt;CategoryB&gt;EventTypeAuditEventType&lt;CategoryC&gt;EventTypeAlarmType&lt;ConditionNameX&gt;AlarmTypeExclusiveLevelAlarmTypeLevelAlarmTypeExclusiveLimitAlarmTypeDeviationAlarmType&lt;ConditionNameY&gt;AlarmType&lt;ConditionNameZ&gt;AlarmType</DIV
></P
><H3 
 ID="LinkTarget_12277"
><B>D.2.4 Event attributes </H3
><P 

></B><I>Event</I> <I>Attribute</I>s in the A&amp;E COM <I>Server</I> are represented in the UA <I>Server</I> as <I>Variables</I> which are targets of <I>HasProperty</I> <I>Reference</I>s from the <I>ObjectTypes</I> which represent the <I>Event</I> Categories. The <I>BrowseName</I> and <I>DisplayName</I> are the description for the <I>Event</I> <I>Attribute</I>. The data type of the <I>Event</I> <I>Attribute</I> is used to set <I>DataType</I> and <I>ValueRank</I>. The <I>NodeId</I> is constructed from the EventCategoryId, ConditionName and the AttributeId. </P
><H3 
 ID="LinkTarget_12279"
><B>D.2.5 Event subscriptions </H3
><P 

></B>The A&amp;E COM UA Wrapper creates a <I>Subscription</I> with the COM AE <I>Server</I> the first time a <I>MonitoredItem</I> is created for the <I>Server</I> <I>Object</I> or one of the <I>Node</I>s representing Areas. The Area filter is set based on the <I>Node</I> being monitored. No other filters are specified.  </P
><P 

>If all <I>MonitoredItems</I> for an Area are disabled then the <I>Subscription</I> will be deactivated. </P
><P 

>The <I>Subscription</I> is deleted when the last <I>MonitoredItem</I> for the <I>Node</I> is deleted. </P
><P 

>When filtering by Area the A&amp;E COM UA Wrapper needs to add two Area filters: one based on the QualifiedAreaName which forms the NodeId and one with the text &lsquo;/*&rsquo; appended to it. This ensures that <I>Event</I>s from sub areas are correctly reported by the COM AE <I>Server</I>. </P
><P 

>A simple A&amp;E COM UA Wrapper will always request all <I>Attributes</I> for all <I>Event</I> Categories when creating the <I>Subscription</I>. A more sophisticated wrapper may look at the <I>Event</I><I>Filter</I> to determine which <I>Attributes</I> are actually used and only request those. </P
><P 

><A href="#LinkTarget_12290" href="#">
Table D.2</A>
 lists how the fields in the ONEVENTSTRUCT that are used by the A&amp;E COM UA Wrapper are mapped to UA BaseEventType <I>Variable</I>s. </P
><P 

><B>Table D.2 &ndash; Mapping from ONEVENTSTRUCT fields to UA BaseEventType Variables  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">UA Event Variable </P
></TD
><TD  
 valign="top"
><P 

>ONEVENTSTRUCT Field </P
></TD
><TD  
 valign="top"
><P 

>Notes </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>EventId </P
></TD
><TD  
 valign="top"
><P 

>szSource </P
><P 

>szConditionName </P
><P 

>ftTime </P
><P 

>ftActiveTime </P
><P 

>dwCookie </P
></TD
><TD  
 valign="top"
><P 

>A ByteString constructed by appending the fields together. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EventType </P
></TD
><TD  
 valign="top"
><P 

>dwEventType </P
><P 

>dwEventCategory </P
><P 

>szConditionName </P
></TD
><TD  
 valign="top"
><P 

>The NodeId for the corresponding <I>ObjectType</I> <I>Node</I>. The szConditionName maybe omitted by some implementations. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SourceNode </P
></TD
><TD  
 valign="top"
><P 

>szSource </P
></TD
><TD  
 valign="top"
><P 

>The <I>NodeId</I> of the corresponding Source <I>Object</I> <I>Node</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>SourceName </P
></TD
><TD  
 valign="top"
><P 

>szSource </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Time </P
></TD
><TD  
 valign="top"
><P 

>ftTime </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ReceiveTime </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>Set when the <I>Notification</I> is received by the wrapper. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>LocalTime </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>Set based on the clock of the machine running the wrapper. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Message </P
></TD
><TD  
 valign="top"
><P 

>szMessage </P
></TD
><TD  
 valign="top"
><P 

>Locale is the default locale for the COM AE <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Severity </P
></TD
><TD  
 valign="top"
><P 

>dwSeverity </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
></TABLE
><P 

><A href="#LinkTarget_12385" href="#">
<FONT size="+1">Table D.3</A>
 lists how the fields in the ONEVENTSTRUCT that are used by the A&amp;E COM UA Wrapper are mapped to UA <I>AuditEventType</I> <I>Variable</I>s.  </P
><P 

><B>Table D.3 &ndash; Mapping from ONEVENTSTRUCT fields to UA AuditEventType Variables  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">UA Event Variable </P
></TD
><TD  
 valign="top"
><P 

>ONEVENTSTRUCT Field </P
></TD
><TD  
 valign="top"
><P 

>Notes </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ActionTimeStamp </P
></TD
><TD  
 valign="top"
><P 

>ftTime </P
></TD
><TD  
 valign="top"
><P 

>Only set for tracking <I>Event</I>s. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Status </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>Always set to True. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ServerId </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>Set to the COM AE <I>Server</I> NamespaceURI </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ClientAuditEntryId </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>Not set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ClientUserId </P
></TD
><TD  
 valign="top"
><P 

>szActorID </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
></TABLE
><P 

><A href="#LinkTarget_12441" href="#">
<FONT size="+1">Table D.4</A>
 lists how the fields in the ONEVENTSTRUCT that are used by the A&amp;E COM UA Wrapper are mapped to UA AlarmType Variables.  </P
><P 

><B>Table D.4 &ndash; Mapping from ONEVENTSTRUCT fields to UA AlarmType Variables  </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TD  
 valign="top"
><P 

><FONT size="+1">UA Event Variable </P
></TD
><TD  
 valign="top"
><P 

>ONEVENTSTRUCT Field </P
></TD
><TD  
 valign="top"
><P 

>Notes </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ConditionClassId </P
></TD
><TD  
 valign="top"
><P 

>dwEventType </P
></TD
><TD  
 valign="top"
><P 

>Set to the <I>NodeId</I> of the <I>ConditionClassType</I> for the <I>Event</I> Category of a <I>Condition</I> <I>Event</I> Type. Set to the <I>NodeId</I> of <I>BaseConditionClassType</I> <I>Node</I> for non-<I>Condition</I> <I>Event</I> Types. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ConditionClassName </P
></TD
><TD  
 valign="top"
><P 

>dwEventType </P
></TD
><TD  
 valign="top"
><P 

>Set to the <I>BrowseName</I> of the <I>ConditionClassType</I> for the <I>Event</I> Category of Condition <I>Event</I> Type. To set &ldquo;BaseConditionClass&quot; non-<I>Condition</I> <I>Event</I> Types. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ConditionName </P
></TD
><TD  
 valign="top"
><P 

>szConditionName </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>BranchId </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>Always set to null. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Retain </P
></TD
><TD  
 valign="top"
><P 

>wNewState </P
></TD
><TD  
 valign="top"
><P 

>Set to True if the OPC_CONDITION_ACKED bit is not set or OPC_CONDITION_ACTIVE bit is set. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EnabledState </P
></TD
><TD  
 valign="top"
><P 

>wNewState </P
></TD
><TD  
 valign="top"
><P 

>Set to &quot;Enabled&quot; or &quot;Disabled&quot; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EnabledState.Id </P
></TD
><TD  
 valign="top"
><P 

>wNewState </P
></TD
><TD  
 valign="top"
><P 

>Set to True if OPC_CONDITION_ENABLED is set </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>EnabledState. </P
><P 

>EffectiveDisplayName </P
></TD
><TD  
 valign="top"
><P 

>wNewState </P
></TD
><TD  
 valign="top"
><P 

>A string constructed from the bits in the wNewState flag. </P
><P 

>The following rules are applied in order to select the string: </P
><P 

>&quot;Disabled&quot; if OPC_CONDITION_ENABLED is not set.  </P
><P 

>&quot;Unacknowledged&quot; if OPC_CONDITION_ACKED is not set.  </P
><P 

>&quot;Active&quot; if OPC_CONDITION_ACKED is set.  </P
><P 

>&quot;Enabled&quot; if OPC_CONDITION_ENABLED is set.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Quality </P
></TD
><TD  
 valign="top"
><P 

>wQuality </P
></TD
><TD  
 valign="top"
><P 

>The COM DA Quality converted to a UA StatusCode. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Severity </P
></TD
><TD  
 valign="top"
><P 

>dwSeverity </P
></TD
><TD  
 valign="top"
><P 

>Set based on the last <I>Event</I> received for the <I>Condition</I> instance. </P
><P 

>Set to the current value if the last <I>Event</I> is not available. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>Comment </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
><TD  
 valign="top"
><P 

>The value of the ACK_COMMENT <I>Attribute</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ClientUserId </P
></TD
><TD  
 valign="top"
><P 

>szActorID </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AckedState </P
></TD
><TD  
 valign="top"
><P 

>wNewState </P
></TD
><TD  
 valign="top"
><P 

>Set to &quot;Acknowledged&quot; or &quot;Unacknowledged &quot; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>AckedState.Id </P
></TD
><TD  
 valign="top"
><P 

>wNewState </P
></TD
><TD  
 valign="top"
><P 

>Set to True if OPC_CONDITION_ACKED is set </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ActiveState </P
></TD
><TD  
 valign="top"
><P 

>wNewState </P
></TD
><TD  
 valign="top"
><P 

>Set to &quot;Active&quot; or &quot;Inactive &quot; </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ActiveState.Id </P
></TD
><TD  
 valign="top"
><P 

>wNewState </P
></TD
><TD  
 valign="top"
><P 

>Set to True if OPC_CONDITION_ACTIVE is set </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ActiveState.TransitionTime </P
></TD
><TD  
 valign="top"
><P 

>ftActiveTime </P
></TD
><TD  
 valign="top"
><P 

>- </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><P 

><FONT size="+1">The A&amp;C <I>Condition</I> Model defines other optional <I>Variable</I>s which are not needed in the A&amp;E COM UA Wrapper. Any additional fields associated with <I>Event</I> <I>Attributes</I> are also reported.  </P
><H3 
 ID="LinkTarget_12606"
><B>D.2.6 Condition instances </H3
><P 

></B><I>Condition</I> instances do not appear in the UA <I>Server</I> address space. <I>Condition</I>s can be acknowledged by passing the EventId to the <I>Acknowledge</I> <I>Method</I> defined on the <I>AcknowledgeableConditionType</I>. </P
><P 

><I>Condition</I>s cannot be enabled or disabled via the COM A&amp;E Wrapper. </P
><H3 
 ID="LinkTarget_12609"
><B>D.2.7 Condition Refresh </H3
><P 

></B>The COM A&amp;E Wrapper does not store the state of <I>Condition</I>s. When <I>ConditionRefresh</I> is called the <I>Refresh</I> <I>Method</I> is called on all COM AE <I>Subscription</I>s associated with the <I>ConditionRefresh</I> call. The wrapper needs to wait until it receives the call back with the bLastRefresh flag set to True in the OnEvent call before it can tell the UA <I>Client</I> that the <I>Refresh</I> has completed.  </P
><H2 
 ID="LinkTarget_12611"
><FONT size="+1"><B>D.3 Alarms and Events COM UA proxy </H2
><H3 
 ID="LinkTarget_12613"
><FONT size="+1">D.3.1 General </H3
><P 

></B>As illustrated in the figure below, the A&amp;E COM UA Proxy is a COM <I>Server</I> combined with a UA <I>Client</I>. It maps the <I>Alarm</I><I>s</I> and <I>C</I><I>onditions</I> address space of UA A&amp;C <I>Server</I> into the appropriate COM Alarms and <I>Event</I> <I>Object</I>s.  </P
><P 

>Subclauses <A href="#LinkTarget_12626" href="#">
D.3.2</A>
 through <A href="#LinkTarget_12946" href="#">
D.3.9</A>
 identify the design guidelines and constraints used to develop the A&amp;E COM UA Proxy provided by the OPC Foundation. In order to maintain a high degree of consistency and interoperability, it is strongly recommended that vendors, who choose to implement their own version of the A&amp;E COM UA Proxy, follow these same guidelines and constraints. </P
><P 

>The A&amp;E COM <I>Client</I> simply needs to address how to connect to the UA A&amp;C <I>Server</I>. Connectivity approaches include the one where A&amp;E COM <I>Client</I>s connect to a UA A&amp;C <I>Server</I> with a CLSID just as if the target <I>Server</I> were an A&amp;E COM <I>Server</I>. However, the CLSID can be considered virtual since it is defined to connect to intermediary components that ultimately connect to the UA A&amp;C <I>Server</I>. Using this approach, the A&amp;E COM <I>Client</I> calls co-create instance with a virtual CLSID as described above. This connects to the A&amp;E COM UA Proxy components. The A&amp;E COM UA Proxy then establishes a secure channel and session with the UA A&amp;C <I>Server</I>. As a result, the A&amp;E COM <I>Client</I> gets a COM <I>Event</I> <I>Server</I> interface pointer. </P
><H3 
 ID="LinkTarget_12626"
><B>D.3.2 Server status mapping </H3
><P 

></B>The A&amp;E COM UA Proxy reads the UA A&amp;C <I>Server</I> status from the <I>Server</I> <I>Object</I> <I>Variable</I> <I>Node</I>. Status enumeration values that are returned in <I>ServerStatusDataType </I>structure can be mapped 1 for 1 to the A&amp;E COM <I>Server</I> status values with the exception of UA A&amp;C <I>S</I><I>erver</I> status values <I>Unknown</I> and <I>Communication Fault.</I> These both map to the A&amp;E COM <I>Server</I> status value of <I>Failed</I>. </P
><P 

>The VendorInfo string of the A&amp;E COM <I>Server</I> status is mapped from <I>ManufacturerName</I>. </P
><H3 
 ID="LinkTarget_12629"
><B>D.3.3 Event Type mapping </H3
><P 

></B>Since all <I>Alarms</I> and <I>Conditions</I> <I>Event</I>s belong to a subtype of <I>BaseEventType</I>, the A&amp;E COM UA Proxy maps the subtype as received from the UA A&amp;C <I>Server</I> to one of the three A&amp;E <I>Event</I> types: Simple, Tracking and <I>Condition</I>. <A href="#LinkTarget_12645" href="#">
Figure D.2</A>
 shows the mapping as follows: </P
><DL 

><DD 

>&#61623; Those A&amp;C <I>Event</I>s which are of subtype <I>AuditEventType</I> are marked as A&amp;E <I>Event</I> type Tracking.  </DD
><DD 

>&#61623; Those A&amp;C <I>Event</I>s which are <I>ConditionType</I> are marked as A&amp;E <I>Event</I> type <I>Condition</I>.  </DD
><DD 

>&#61623; Those A&amp;C <I>Event</I>s which are of any subtype except <I>AuditEventType</I> or <I>ConditionType</I> are marked as A&amp;E <I>Event</I> type Simple. </DD
></DL
><P 

> </P
><P 

> <DIV class="Sect" 
 Alt=""
>BaseEventTypeAuditEventTypeBaseModelChangeEventTypeConditionTypeSystemEventType UA Base Event TypesCOM  Alarm and Event TypesTrackingConditionSimpleMapping of UA Events includes subtypes of each base event type </DIV
></P
><P 

><B>Figure D.2 &ndash; Mapping UA Event Types to COM A&amp;E Event Types </P
><P 

></B>Note that the <I>Event</I> type mapping described above also applies to the children of each subtype.  </P
><H3 
 ID="LinkTarget_12650"
><B>D.3.4 Event category mapping </H3
><P 

></B>Each A&amp;E <I>Event</I> type (e.g. Simple, Tracking, <I>Condition</I>) has an associated set of <I>Event</I> categories which are intended to define groupings of A&amp;E <I>Event</I>s. For example, Level and Deviation are possible <I>Event</I> categories of the <I>Condition</I> <I>Event</I> type for an A&amp;E COM <I>Server</I>. However, since A&amp;C does not explicitly support <I>Event</I> categories, the A&amp;E COM UA Proxy uses A&amp;C <I>Event</I> types to return A&amp;E <I>Event</I> categories to the A&amp;E COM <I>Client</I>. The A&amp;E COM UA Proxy builds the collection of supported categories by traversing the type definitions in the address space of the UA A&amp;C <I>Server</I>. <A href="#LinkTarget_12665" href="#">
Figure D.3</A>
 shows the mapping as follows:  </P
><DL 

><DD 

>&#61623; A&amp;E Tracking categories consist of the set of all <I>Event</I> types defined in the hierarchy of subtypes of AuditEventType and TransitionEventType, including AuditEventType itself and TransitionEventType itself.  </DD
><DD 

>&#61623; A&amp;E <I>Condition</I> categories consist of the set of all <I>Event</I> types defined in the hierarchy of subtypes of <I>ConditionType</I>, including <I>ConditionType</I> itself.  </DD
><DD 

>&#61623; A&amp;E Simple categories consist of the set of <I>Event</I> types defined in the hierarchy of subtypes of <I>BaseEventType</I> excluding <I>AuditEventType</I> and <I>ConditionType</I> and their respective subtypes. </DD
></DL
><P 

> <DIV class="Sect" 
 Alt=""
>BaseEventTypeConditionType UA Condition Type Hierarchy(partial)COM A&amp;E Condition TypeCondition Event TypeAcknowledgeableConditionTypeAlarmConditionTypeCatergory 2 : AcknowledgeableConditionTypeCatergory 3 : AlarmConditionTypeCatergory 1 : ConditionType</DIV
></P
><P 

><B>Figure D.3 &ndash; Example mapping of UA Event Types to COM A&amp;E categories </P
><P 

></B>Category name is derived from the display name <I>Attribute</I> of the <I>Node</I> type as discovered in the type hierarchy of the UA A&amp;C <I>Server</I>.  </P
><P 

>Category description is derived from the description <I>Attribute</I> of the <I>Node</I> type as discovered in the type hierarchy of the UA A&amp;C <I>Server</I>.  </P
><P 

>The A&amp;E COM UA Proxy assigns Category IDs.  </P
><H3 
 ID="LinkTarget_12672"
><B>D.3.5 Event Category attribute mapping </H3
><P 

></B>The collection of <I>Attribute</I>s associated with any given A&amp;E <I>Event</I> is encapsulated within the ONEVENTSTRUCT. Therefore the A&amp;E COM UA Proxy populates the <I>Attribute</I> fields within the ONEVENTSTRUCT using corresponding values from UA <I>Event</I> <I>Notification</I>s either directly (e.g., Source, Time, Severity) or indirectly (e.g., OPC COM <I>Event</I> category determined by way of the UA <I>Ev</I><I>ent</I> type). <A href="#LinkTarget_12683" href="#">
<I>Table D.5</I></A>
 lists the <I>Attribute</I>s currently defined in the ONEVENTSTRUCT in the leftmost column. The rightmost column of <A href="#LinkTarget_12683" href="#">
Table D.5</A>
 indicates how the A&amp;E COM UA proxy defines that <I>Attribute</I>. </P
><P 

><B>Table D.5 &ndash; Event category attribute mapping table </P
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><FONT size="+1">A&amp;E ONEVENTSTRUCT &ldquo;attribute&rdquo; </P
></TH
><TH 
 valign="top"
><P 

>A&amp;E COM UA Proxy Mapping </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

>The following items are present for all A&amp;E event types </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>szSource </P
></TD
><TD  
 valign="top"
><P 

>UA <I>BaseEventType</I> <I>Property</I>: <I>SourceName</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ftTime </P
></TD
><TD  
 valign="top"
><P 

>UA <I>BaseEventType</I> <I>Property</I>: <I>Time</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>szMessage </P
></TD
><TD  
 valign="top"
><P 

>UA <I>BaseEventType</I> <I>Property</I>: <I>Message</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>dwEventType </P
></TD
><TD  
 valign="top"
><P 

>See Clause <A href="#LinkTarget_12629" href="#">
D.3.3</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>dwEventCategory </P
></TD
><TD  
 valign="top"
><P 

>See Clause <A href="#LinkTarget_12650" href="#">
D.3.4</A>
 </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>dwSeverity </P
></TD
><TD  
 valign="top"
><P 

>UA <I>BaseEventType</I> <I>Property</I>: <I>Severity</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>dwNumEventAttrs </P
></TD
><TD  
 valign="top"
><P 

>Calculated within A&amp;E COM UA Proxy </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>pEventAttributes </P
></TD
><TD  
 valign="top"
><P 

>Constructed within A&amp;E COM UA Proxy </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>The following items are present only for A&amp;E Condition-Related Events </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>szConditionName </P
></TD
><TD  
 valign="top"
><P 

>UA <I>ConditionType</I> <I>Property</I>: <I>ConditionName</I> </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>A&amp;E ONEVENTSTRUCT &ldquo;attribute&rdquo; </P
></TH
><TH 
 valign="top"
><P 

>A&amp;E COM UA Proxy Mapping </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>szSubConditionName </P
></TD
><TD  
 valign="top"
><P 

>UA <I>ActiveState</I> <I>Property</I>: <I>EffectiveDisplayName</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>wChangeMask </P
></TD
><TD  
 valign="top"
><P 

>Calculated within Alarms and Events COM UA proxy </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>wNewState: OPC_CONDITION_ACTIVE </P
></TD
><TD  
 valign="top"
><P 

>A&amp;C <I>AlarmConditionType</I> <I>Property</I>: ActiveState </P
><P 

>Note that events mapped as non-<I>Condition</I> <I>Event</I>s and those that do not derive from <I>AlarmConditionType</I> are set to ACTIVE by default. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>wNewState: OPC_CONDITION_ENABLED </P
></TD
><TD  
 valign="top"
><P 

>A&amp;C <I>ConditionType</I> <I>Property</I>: EnabledState </P
><P 

> Note, <I>Event</I>s mapped as non-<I>Condition</I> <I>Event</I>s are set to ENABLED (state bit mask = 0x1) by default. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>wNewState: OPC_CONDITION_ACKED </P
></TD
><TD  
 valign="top"
><P 

>A&amp;C <I>AcknowledgeableConditionType</I> <I>Property</I>: AckedState </P
><P 

>Note that A&amp;C <I>Event</I>s mapped as non-<I>Condition</I> <I>Event</I>s or which do not derive from <I>AcknowledgeableConditionType</I> are set to UNACKNOWLEDGED and AckRequired = false by default.  </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>wQuality </P
></TD
><TD  
 valign="top"
><P 

>A&amp;C ConditionType <I>Property</I>: Quality </P
><P 

> Note that <I>Event</I>s mapped as non-<I>Condition</I> <I>Event</I>s are set to OPC_QUALITY_GOOD by default. </P
><P 

> </P
><P 

>In general, the Severity field of the StatusCode is used to map COM status codes OPC_QUALITY_BAD, OPC_QUALITY_GOOD and OPC_QUALITY_UNCERTAIN. When possible, specific status' are mapped directly. These include (UA =&gt; COM): </P
><P 

> </P
><P 

>Bad status codes </P
><P 

> Bad_ConfigurationError =&gt; OPC_QUALITY_CONFIG_ERROR </P
><P 

> Bad_NotConnected =&gt; OPC_QUALITY_NOT_CONNECTED </P
><P 

> Bad_DeviceFailure =&gt; OPC_QUALITY_DEVICE_FAILURE </P
><P 

> Bad_SensorFailure =&gt; OPC_QUALITY_SENSOR_FAILURE </P
><P 

> Bad_NoCommunication =&gt; OPC_QUALITY_COMM_FAILURE </P
><P 

> Bad_OutOfService =&gt; OPC_QUALITY_OUT_OF_SERVICE </P
><P 

> </P
><P 

>Uncertain status codes </P
><P 

> Uncertain_NoCommunicationLastUsableValue =&gt; OPC_QUALITY_LAST_USABLE </P
><P 

> Uncertain_LastUsableValue =&gt; OPC_QUALITY_LAST_USABLE </P
><P 

> Uncertain_SensorNotAccurate =&gt; OPC_QUALITY_SENSOR_CAL </P
><P 

> Uncertain_EngineeringUnitsExceeded =&gt; OPC_QUALITY_EGU_EXCEEDED </P
><P 

> Uncertain_SubNormal =&gt; OPC_QUALITY_SUB_NORMAL </P
><P 

> </P
><P 

>Good status codes </P
><P 

> Good_LocalOverride =&gt; OPC_QUALITY_LOCAL_OVERRIDE </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>bAckRequired </P
></TD
><TD  
 valign="top"
><P 

>If the ACKNOWLEDGED bit (OPC_CONDITION_ACKED) is set then the Ack Required Boolean is set to false, otherwise the Ack Required Boolean is set to true. If the <I>Event</I> is not of type <I>AcknowledgeableConditionType</I> or subtype then the AckRequired Boolean is set to false. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>ftActiveTime </P
></TD
><TD  
 valign="top"
><P 

>If the <I>Event</I> is of type <I>AlarmConditionType</I> or subtype and a transition from <I>ActiveState</I> of false to <I>ActiveState</I> to true is being processed then the <I>TransitionTime</I> <I>Property</I> of <I>ActiveState</I> is used. If the <I>Event</I> is not of type <I>AlarmConditionType</I> or subtype then this field is set to current time. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

>dwCookie </P
></TD
><TD  
 valign="top"
><P 

>Generated by the A&amp;E COM UA Proxy. These unique <I>Condition</I> <I>Event</I> cookies are not associated with any related identifier from the address space of the UA A&amp;C <I>Server</I>. </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>The following is used only for A&amp;E tracking events and for A&amp;E condition-relate events which are acknowledgement notifications </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>szActorID </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Vendor specific <I>A</I><I>ttributes</I> &ndash; ALL </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>ACK Comment </P
></TD
><TD  
 valign="top"
><P 

> </P
></TD
></TR
></TABLE
><TABLE 
 border=0 cellspacing=0 cellpadding=2
><TR  

><TH 
 valign="top"
><P 

><B>A&amp;E ONEVENTSTRUCT &ldquo;attribute&rdquo; </P
></TH
><TH 
 valign="top"
><P 

>A&amp;E COM UA Proxy Mapping </P
></TH
></TR
><TR  

><TD  
 valign="top"
><P 

></B>AREAS </P
></TD
><TD  
 valign="top"
><P 

>All A&amp;E <I>Event</I>s are assumed to support the &quot;Areas&quot; <I>Attribute</I>. However, no <I>Attribute</I> or <I>Property</I> of an A&amp;C <I>Event</I> is available which provides this value. Therefore, the A&amp;E COM UA Proxy initializes the value of the Areas <I>Attribute</I> based on the monitored item producing the <I>Event</I>. If the A&amp;E COM <I>Client</I> has applied no area filtering to a <I>Subscription</I>, the corresponding A&amp;C <I>Subscription</I> will contain just one monitored item &ndash; that of the UA A&amp;C <I>Server</I> <I>Object</I>. <I>Event</I>s forwarded to the A&amp;E COM <I>Client</I> on behalf of this <I>Subscription</I> will carry an Areas <I>Attribute</I> value of empty string. If the A&amp;E COM <I>Client</I> has applied an area filter to a <I>Subscription</I> then the related UA A&amp;C <I>Subscription</I> will contain one or more monitored items for each notifier <I>Node</I> identified by the area string(s). <I>Event</I>s forwarded to the A&amp;E COM <I>Client</I> on behalf of such a <I>Subscription</I> will carry an areas <I>Attribute</I> whose value is the relative path to the notifier which produced the <I>Event</I> (i.e., the fully qualified area name). </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

><B>Vendor specific <I>Attribute</I>s &ndash; based on category </P
></TD
></TR
><TR  

><TD  
 valign="top"
><P 

></B>SubtypeProperty1 </P
></TD
><TD  
 valign="top"
><P 

>All the UA A&amp;C subtype properties that are not part of the standard set exposed by <I>BaseEventType</I> or <I>ConditionType</I> </P
></TD
></TR
><TR  

><TD  
 valign="top"
></TD><TD  
 valign="top"
><P 

>SubtypePropertyn </P
></TD
></TR
></TABLE
><P 

><FONT size="+1"><I>Condition</I> <I>Event</I> instance records are stored locally within the A&amp;E COM UA Proxy. Each record holds ONEVENTSTRUCT data for each EventSource/<I>Condition</I> instance. When the <I>Condition</I> instance transitions to the state INACTIVE|ACKED, where AckRequired = true or simply INACTIVE, where AckRequired = false, the local <I>Condition</I> record is deleted. When a <I>Condition</I> <I>Event</I> is received from the UA A&amp;C <I>Server</I> and a record for this <I>Event</I> (identified by source/<I>Condition</I> pair) already exists in the proxy <I>Condition</I> <I>Event</I> store, the existing record is simply updated to reflect the new state or other change to the <I>Condition</I>, setting the change mask accordingly and producing an OnEvent callback to any subscribing <I>Client</I>s. In the case where the <I>Client</I> application acknowledges an <I>Event</I> which is currently unacknowledged (AckRequired = true), the UA A&amp;C <I>Server</I> Acknowledge <I>Method</I> associated with the <I>Condition</I> is called and the subsequent <I>Event</I> produced by the UA A&amp;C <I>Server</I> indicating the transition to acknowledged will result in an update to the current state of the local <I>Condition</I> record as well as an OnEvent <I>Notification</I> to any subscribing <I>Client</I>s. </P
><P 

>The A&amp;E COM UA Proxy maintains the mapping of <I>Attribute</I>s on an <I>Event</I> category basis. An <I>Event</I> category inherits its <I>Attribute</I>s from the properties defined on all supertypes in the UA <I>Event</I> Type hierarchy. New <I>Attribute</I>s are added for any properties defined on the direct UA <I>Event</I> type to A&amp;E category mapping. The A&amp;E COM UA Proxy adds two <I>Attribute</I>s to each category: AckComment and Areas. <A href="#LinkTarget_12909" href="#">
Figure D.4</A>
 shows an example of this mapping. </P
><P 

>Figure D.4 &ndash; Example mapping of UA Event Types to A&amp;E categories with attributes <DIV class="Sect" 
 Alt=""
>BaseEventTypeConditionTypeAcknowledgeableConditionTypeAlarmConditionType UA Condition Type Hierarchy(partial)Composite set of UA properties from BaseEventType + ConditionType + AcknowleageableConditionType + AlarmConditionTypeComposite set of UA properties from BaseEventType + ConditionType Composite set of UA properties from BaseEventType + ConditionType + AcknowleageableConditionType  A&amp;E COM UA Proxy : Mapped Categories and Associated Attributes </DIV
></P
><H3 
 ID="LinkTarget_12912"
><B>D.3.6 Event Condition mapping </H3
><P 

></B><I>Event</I>s of any subtype of <I>ConditionType</I> are designated COM <I>Condition</I> <I>Event</I>s and are subject to additional processing due to the stateful nature of <I>Condition</I> <I>Event</I>s. COM <I>Condition</I> <I>Event</I>s transition between states composed of the triplet ENABLED|ACTIVE|ACKNOWLEDGED. In UA A&amp;C, <I>Event</I> subtypes of <I>ConditionType</I> only carry a value which can be mapped to ENABLED (DISABLED) and optionally, depending on further sub typing, may carry additional information which can be mapped to ACTIVE (INACTIVE) or ACKNOWLEDGED (UNACKNOWLEGED). <I>Condition</I> <I>Event</I> processing proceeds as described in <A href="#LinkTarget_12683" href="#">
Table D.5</A>
 (see A&amp;E ONEVENTSTRUCT &ldquo;<I>Attribute</I>&rdquo; rows: OPC_CONDITION_ACTIVE, OPC_CONDITION_ENABLED and OPC_CONDITION_ACKED). </P
><H3 
 ID="LinkTarget_12919"
><B>D.3.7 Browse mapping </H3
><P 

></B>A&amp;E COM browsing yields a hierarchy of areas and sources. Areas can contain both sources and other areas in tree fashion where areas are the branches and sources are the leaves. The A&amp;E COM UA Proxy relies on the &quot;HasNotifier&quot; <I>Reference</I> to assemble a hierarchy of branches/areas such that each <I>Object</I> <I>Node</I> which contains a HasNotifier <I>Reference</I> and whose EventNotifier <I>Attribute</I> is set to SubscribeToEvents is considered an area. The root for the <I>Event</I> hierarchy is the <I>Server</I> <I>Object</I>. Starting at the <I>Server</I> <I>Object</I>, eventNotifier <I>Reference</I>s are followed and each HasNotifier target whose EventNotifier <I>Attribute</I> is set to SubscribeToEvents becomes a nested COM area within the hierarchy.  </P
><P 

>Note that the HasNotifier target can also be a HasNotifier source. Further, any <I>Node</I> which is a HasEventSource source and whose EventNotifier <I>Attribute</I> is set to SubscribeToEvents is also considered a COM Area. The target <I>Node</I> of any HasEventSource <I>Reference</I> is considered an A&amp;E COM &ldquo;source&rdquo; or leaf in the A&amp;E COM browse tree. </P
><P 

>In general, <I>Node</I>s which are the source <I>Node</I>s of the HasEventSource <I>Reference</I> and/or are the source <I>Node</I>s of the HasNotifier <I>Reference</I> are always A&amp;ECOM Areas. <I>Node</I>s which are the target <I>Node</I>s of the HasEventSource <I>Reference</I> are always A&amp;E COM Sources. Note however that targets of HasEventSource which cannot be found by following the HasNotifier <I>Reference</I>s from the <I>Server</I> <I>Object</I> are ignored. </P
><P 

>Given the above logic, the A&amp;E COM UA Proxy browsing will have the following limitations: Only those <I>Node</I>s in the UA A&amp;C <I>Server</I>&rsquo;s address space which are connected by the HasNotifier <I>Reference</I> (with exception of those contained within the top level <I>Object</I>s folder) are considered for area designation. Only those <I>Node</I>s in the UA A&amp;C <I>Server</I>&rsquo;s address space which are connected by the HasEventSource <I>Reference</I> (with exception of those contained within the top level <I>Object</I>s folder) are considered for area or source designation. To be an area, a <I>Node</I> shall contain a HasNotifier <I>Reference</I> and its EventNotifier <I>Attr</I><I>ibute</I> shall be set to SubscribeToEvents. To be a source, a <I>Node</I> shall be the target <I>Node</I> of a HasEventSource <I>Reference</I> and shall have been found by following HasNotifier <I>Reference</I>s from the <I>Server</I> <I>Object</I>.  </P
><H3 
 ID="LinkTarget_12925"
><B>D.3.8 Qualified names </H3
><H4 
 ID="LinkTarget_12926"
>D.3.8.1 Qualified name syntax </H4
><P 

></B>From the root of any sub tree in the address space of the UA A&amp;C <I>Server</I>, the A&amp;E COM <I>Client</I> may request the list of areas and/or sources contained within that level. The resultant list of area names or source names will consist of the set of browse names belonging to those <I>Node</I>s which meet the criteria for area or source designation as described above. These names are &quot;short&quot; names meaning that they are not fully qualified. The A&amp;E COM <I>Client</I> may request the fully qualified representation of any of the short area or source names. In the case of sources, the fully qualified source name returned to the A&amp;E COM <I>Client</I> will be the string encoded value of the <I>NodeId</I> as defined in <A href="#LinkTarget_3574" href="#">
Part 6</A>
 (e.g., &ldquo;ns=10;i=859&ldquo;). In the case of areas, the fully qualified area name returned to the COM <I>Client</I> will be the relative path to the notifier <I>Node</I> as defined in <A href="#LinkTarget_3570" href="#">
Part 4</A>
 (e.g., &ldquo;/6:Boiler1/6:Pipe100X/1:Input/2:Measurement&ldquo;). Relative path indices refer to the namespace table described below. </P
><H4 
 ID="LinkTarget_12937"
><B>D.3.8.2 Namespace table </H4
><P 

></B>UA <I>Server</I> Namespace table indices may vary over time. This represents a problem for those A&amp;E COM <I>Client</I>s which cache and reuse fully qualified area names. One solution to this problem would be to use a qualified name syntax which includes the complete URIs for all referenced table indices. This however would result in fully qualified area names which are unwieldy and impractical for use by A&amp;E COM <I>Client</I>s. As an alternative, the A&amp;E COM UA Proxy will maintain an internal copy of the UA A&amp;C <I>Server</I>'s namespace table together with the locally cached endpoint description. The A&amp;E COM UA Proxy will evaluate the UA A&amp;C <I>Server</I>&rsquo;s namespace table at connect time against the cached copy and automatically handle any re-mapping of indices if required. The A&amp;E COM <I>Client</I> can continue to present cached fully qualified area names for filter purposes and the A&amp;E COM UA Proxy will ensure these names continue to reference the same notifier <I>Node</I> even if the <I>Server</I>'s namespace table changes over time. </P
><P 

>To implement the relative path, the A&amp;E COM UA Proxy maintains a stack of <I>INode</I> interfaces of all the <I>Node</I>s browsed leading to the current level. When the A&amp;E COM <I>Client</I> calls GetQualifiedAreaName, the A&amp;E COM UA Proxy first validates that the area name provided is a valid area at the current level. Then looping through the stack, the A&amp;E COM UA Proxy builds the relative path. Using the browse name of each <I>Node</I>, the A&amp;E COM UA Proxy constructs the translated name as follows: </P
><P 

><I>QualifiedName translatedName = new QualifiedName(Name,(ushort) </I><I>Server</I><I>MappingTable[NamespaceIndex])</I> where  </P
><P 

><I>Name</I> &ndash; the unqualified browse name of the <I>Node</I>  </P
><P 

><I>Namespac</I><I>eIndex</I> &ndash; the <I>Server</I> index </P
><P 

>the <I>Server</I><I>MappingTable</I> provides the <I>Client</I> namespace index that corresponds to the <I>Server</I> index. </P
><P 

>A &lsquo;/&rsquo; is appended to the translated name and the A&amp;E COM UA Proxy continues to loop through the stack until the relative path is fully constructed. </P
><H3 
 ID="LinkTarget_12946"
><B>D.3.9 Subscription filters </H3
><H4 
 ID="LinkTarget_12947"
>D.3.9.1 General </H4
><P 

></B>The A&amp;E COM UA Proxy supports all of the defined A&amp;E COM filter criteria. </P
><H4 
 ID="LinkTarget_12949"
><B>D.3.9.2 Filter by Event, category or severity </H4
><P 

></B>These filter types are implemented using simple numeric comparisons. For <I>Event</I> filters, the received <I>Event</I> shall match the <I>Event</I> type(s) specified by the filter. For Category filters, the received <I>Event</I>&rsquo;s category (as mapped from UA <I>Event</I> type) shall match the category or categories specified by the filter. For severity filters, the received <I>Event</I> severity shall be within the range specified by the <I>Subscription</I> filter. </P
><H4 
 ID="LinkTarget_12951"
><B>D.3.9.3 Filter by source </H4
><P 

></B>In the case of source filters, the UA A&amp;C <I>Server</I> is free to provide any appropriate, <I>Server</I>-specific value for SourceName. There is no expectation that source <I>Node</I>s discovered via browsing can be matched to the SourceName <I>Property</I> of the <I>Event</I> returned by the UA A&amp;C Server using string comparisons. Further, the A&amp;E COM <I>Client</I> may receive <I>Event</I>s from sources which are not discoverable by following only HasNotifier and/or HasEventSource <I>Reference</I>s. Thus, source filters will only apply if the source string can be matched to the SourceName <I>Property</I> of an <I>Event</I> as received from the target UA A &amp; C <I>S</I><I>erver</I>. Source filter logic will use the pattern matching rules documented in the A&amp;E COM specification, including the use of wildcard characters. </P
><H4 
 ID="LinkTarget_12953"
><B>D.3.9.4 Filter by area </H4
><P 

></B>The A&amp;E COM UA Proxy implements Area filtering by adjusting the set of monitored items associated with a <I>Subscription</I>. In the simple case where the <I>Client</I> selects no area filter, the A&amp;E COM UA Proxy will create a UA <I>Subscription</I> which contains just one monitored item, the <I>Server</I> <I>Object</I>. In doing so, the A&amp;E COM UA Proxy will receive <I>Event</I>s from the entire <I>Server</I> address space &ndash; that is, all Areas. The A&amp;E COM <I>Client</I> will discover the areas associated with the UA <I>Server</I> address space by browsing. The A&amp;E COM <I>Client</I> will use GetQualifiedAreaName as usual in order to obtain area strings which can be used as filters. When the A&amp;E COM <I>Client</I> applies one or more of these area strings to the COM <I>Subscription</I> filter, the A&amp;E COM UA Proxy will create monitored items for each notifier <I>Node</I> identified by the area string(s). Recall that the fully qualified area name is in fact the namespace qualified relative path to the associated notifier <I>Node</I>. </P
><P 

>The A&amp;E COM UA Proxy calls the <I>TranslateBrowsePathsToNodeIds</I> <I>Service</I> to get the <I>Node</I> ids of the fully qualified area names in the filter. The <I>Node</I> ids are then added as monitored items to the UA <I>Subscription</I> maintained by the A&amp;E COM UA Proxy. The A&amp;E COM UA Proxy also maintains a reference count for each of the areas added, to handle the case of multiple A&amp;E COM <I>Subscription</I> applying the same area filter. When the A&amp;E COM <I>Subscription</I>s are removed or when the area name is removed from the filter, the ref count on the monitored item corresponding to the area name is decremented. When the ref count goes to zero, the monitored item is removed from the UA <I>Subscription</I><I>.</I> </P
><P 

>As with source filter strings, area filter strings can contain wildcard characters. Area filter strings which contain wildcard characters require more processing by the A&amp;E COM UA Proxy. When the A&amp;E COM <I>Client</I> specifies an area filter string containing wildcard characters, the A&amp;E COM UA Proxy will scan the relative path for path elements that are completely specified. The partial path containing just those segments which are fully specified represents the root of the notifier sub tree of interest. From this sub tree root <I>Node</I>, the A&amp;E COM UA Proxy will collect the list of notifier <I>Node</I>s below this point. The relative path associated with each of the collected notifier <I>Node</I>s in the sub tree will be matched against the <I>Client</I> supplied relative path containing the wildcard character. A monitored item is created for each notifier <I>Node</I> in the sub tree whose relative path matches that of the supplied relative path using established pattern matching rules. An area filter string which contains wildcard characters may result in multiple monitored items added to the UA <I>Subscription</I>. By contrast, an area filter string made up of fully specified path segments and no wildcard </P
><P 

>characters will result in one monitored item added to the UA <I>Subscription</I>. So, the steps involved are: </P
><DL 

><DD 

>1) Check if the filter string contains any of these wild card characters, '*', '?', '#', '[', ']', '!', '-'. </DD
><DD 

>2) Scan the string for path elements that are completely specified by retrieving the substring up to the last occurrence of the &lsquo;/&rsquo; character. </DD
><DD 

>3) Obtain the <I>Node</I>Id for this path using <I>TranslateBrowsePathsToNodeIds</I> </DD
><DD 

>4) Browse the <I>Node</I> for all notifiers below it. </DD
><DD 

>5) Using the ComUtils.Match() function match the browse names of these notifiers against the <I>Client</I> supplied string containing the wild card character. </DD
><DD 

>6) Add the <I>Node</I> ids of the notifiers that match as monitored items to the UA <I>Subscription</I>. </DD
></DL
><P 

> </P
><P 

>_______________________ </P
></DIV
></BODY>
</HTML>
